{
    "basePath": "",
    "consumes": [
        "application/json"
    ],
    "definitions": {
        "cis.task.progress": {
            "properties": {
                "completed": {
                    "description": "The amount of work completed for the operation. The value can only be incremented.",
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Message about the work progress."
                },
                "total": {
                    "description": "Total amount of the work for the operation.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "total",
                "completed",
                "message"
            ],
            "type": "object"
        },
        "cis.task.status": {
            "description": "The {@name Status} {@term enumerated type} defines the status values that can be reported for an operation.",
            "enum": [
                "PENDING",
                "RUNNING",
                "BLOCKED",
                "SUCCEEDED",
                "FAILED"
            ],
            "type": "string"
        },
        "vapi.std.dynamic_ID": {
            "properties": {
                "id": {
                    "description": "The identifier for a resource whose type is specified by {@link #type}.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of resource being identified (for example {@code com.acme.Person}). <p> {@term Services} that contain {@term operations} for creating and deleting resources typically contain a {@term constant} specifying the resource type for the resources being created and deleted. The API metamodel metadata {@term services} include a {@term service} that allows retrieving all the known resource types.",
                    "type": "string"
                }
            },
            "required": [
                "type",
                "id"
            ],
            "type": "object"
        },
        "vapi.std.errors.already_exists": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.already_exists_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.already_exists"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.already_in_desired_state": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.already_in_desired_state_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.already_in_desired_state"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.error": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.error.type": {
            "description": "Enumeration of all standard errors. Used as discriminator in protocols that have no standard means for transporting the error type, e.g. REST.",
            "enum": [
                "ERROR",
                "ALREADY_EXISTS",
                "ALREADY_IN_DESIRED_STATE",
                "CANCELED",
                "CONCURRENT_CHANGE",
                "FEATURE_IN_USE",
                "INTERNAL_SERVER_ERROR",
                "INVALID_ARGUMENT",
                "INVALID_ELEMENT_CONFIGURATION",
                "INVALID_ELEMENT_TYPE",
                "INVALID_REQUEST",
                "NOT_ALLOWED_IN_CURRENT_STATE",
                "NOT_FOUND",
                "OPERATION_NOT_FOUND",
                "RESOURCE_BUSY",
                "RESOURCE_IN_USE",
                "RESOURCE_INACCESSIBLE",
                "SERVICE_UNAVAILABLE",
                "TIMED_OUT",
                "UNABLE_TO_ALLOCATE_RESOURCE",
                "UNAUTHENTICATED",
                "UNAUTHORIZED",
                "UNEXPECTED_INPUT",
                "UNSUPPORTED",
                "UNVERIFIED_PEER"
            ],
            "type": "string"
        },
        "vapi.std.errors.error_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.error"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.internal_server_error": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.internal_server_error_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.internal_server_error"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.invalid_argument": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.invalid_argument_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.invalid_element_configuration": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.invalid_element_configuration_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_element_configuration"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.invalid_element_type": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.invalid_element_type_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_element_type"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.invalid_request": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.invalid_request_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_request"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.not_allowed_in_current_state": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.not_allowed_in_current_state_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.not_found": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.not_found_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.not_found"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.resource_busy": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.resource_busy_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.resource_busy"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.resource_in_use": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.resource_in_use_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.resource_in_use"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.resource_inaccessible": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.resource_inaccessible_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.resource_inaccessible"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.service_unavailable": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.service_unavailable_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.service_unavailable"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.timed_out": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.timed_out_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.timed_out"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.unable_to_allocate_resource": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.unable_to_allocate_resource_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.unauthenticated": {
            "properties": {
                "challenge": {
                    "description": "Indicates the authentication challenges applicable to the target API provider. It can be used by a client to discover the correct authentication scheme to use. The exact syntax of the value is defined by the specific provider, the protocol and authentication schemes used. <p> For example, a provider using REST may adhere to the WWW-Authenticate HTTP header specification, RFC7235, section 4.1. In this case an example challenge value may be: SIGN realm=\"27da1358-2ba4-11e9-b210-d663bd873d93\",sts=\"http://vcenter/sso?vsphere.local\", Basic realm=\"vCenter\"",
                    "type": "string"
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.unauthenticated_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.unauthorized": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.unauthorized_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unauthorized"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.unsupported": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.unsupported_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unsupported"
                }
            },
            "type": "object"
        },
        "vapi.std.errors.unverified_peer": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "$ref": "#/definitions/vapi.std.errors.error.type",
                    "description": "Discriminator field to help API consumers identify the structure type."
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vapi.std.errors.unverified_peer_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unverified_peer"
                }
            },
            "type": "object"
        },
        "vapi.std.localizable_message": {
            "properties": {
                "args": {
                    "description": "Positional arguments to be substituted into the message template. This list will be empty if the message uses named arguments or has no arguments.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "default_message": {
                    "description": "The value of this localizable string or message template in the {@code en_US} (English) locale.  If {@link #id} refers to a message template, the default message will contain the substituted arguments. This value can be used by clients that do not need to display strings and messages in the native language of the user.  It could also be used as a fallback if a client is unable to access the appropriate message catalog.",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier of the localizable string or message template. <p> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog.",
                    "type": "string"
                },
                "localized": {
                    "description": "Localized string value as per request requirements.",
                    "type": "string"
                },
                "params": {
                    "description": "Named arguments to be substituted into the message template.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vapi.std.localization_param"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "default_message",
                "args"
            ],
            "type": "object"
        },
        "vapi.std.localization_param": {
            "properties": {
                "d": {
                    "description": "The {@term double} value associated with the parameter. The number of displayed fractional digits is changed via {@name #precision} {@term field}.",
                    "format": "double",
                    "type": "number"
                },
                "dt": {
                    "description": "Date and time value associated with the parameter. Use the {@name #format} {@term field} to specify date and time display style.",
                    "format": "date-time",
                    "type": "string"
                },
                "format": {
                    "$ref": "#/definitions/vapi.std.localization_param.date_time_format",
                    "description": "Format associated with the date and time value in {@name #dt} {@term field}. The {@term enumeration value} {@code SHORT_DATETIME} will be used as default."
                },
                "i": {
                    "description": "{@term long} value associated with the parameter.",
                    "format": "int64",
                    "type": "integer"
                },
                "l": {
                    "$ref": "#/definitions/vapi.std.nested_localizable_message",
                    "description": "Nested localizable value associated with the parameter. This is useful construct to convert to human readable localized form {@term enumerated type} and {@term boolean} values. It can also be used for proper handling of pluralization and gender forms in localization. Recursive {@name NestedLocalizableMessage} instances can be used for localizing short lists of items."
                },
                "precision": {
                    "description": "Number of fractional digits to include in formatted {@term double} value.",
                    "format": "int64",
                    "type": "integer"
                },
                "s": {
                    "description": "{@term String} value associated with the parameter.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vapi.std.localization_param.date_time_format": {
            "description": "The {@name DateTimeFormat} {@term enumerated type} lists possible date and time formatting options. It combines the Unicode CLDR format types - full, long, medium and short with 3 different presentations - date only, time only and combined date and time presentation.",
            "enum": [
                "SHORT_DATE",
                "MED_DATE",
                "LONG_DATE",
                "FULL_DATE",
                "SHORT_TIME",
                "MED_TIME",
                "LONG_TIME",
                "FULL_TIME",
                "SHORT_DATE_TIME",
                "MED_DATE_TIME",
                "LONG_DATE_TIME",
                "FULL_DATE_TIME"
            ],
            "type": "string"
        },
        "vapi.std.nested_localizable_message": {
            "properties": {
                "id": {
                    "description": "Unique identifier of the localizable string or message template. <p> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog.",
                    "type": "string"
                },
                "params": {
                    "description": "Named Arguments to be substituted into the message template.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vapi.std.localization_param"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id"
            ],
            "type": "object"
        },
        "vcenter.VM.clone_placement_spec": {
            "properties": {
                "cluster": {
                    "description": "Cluster into which the cloned virtual machine should be placed. \n If VM.ClonePlacementSpec.cluster and VM.ClonePlacementSpec.resource-pool are both specified, VM.ClonePlacementSpec.resource-pool must belong to VM.ClonePlacementSpec.cluster. \n\n If VM.ClonePlacementSpec.cluster and VM.ClonePlacementSpec.host are both specified, VM.ClonePlacementSpec.host must be a member of VM.ClonePlacementSpec.cluster.\n\nIf VM.ClonePlacementSpec.resource-pool or VM.ClonePlacementSpec.host is specified, it is recommended that this field be unset.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the cloned virtual machine's configuration state should be stored. This datastore will also be used for any virtual disks that are created as part of the virtual machine clone operation unless individually overridden.\nIf field is unset, the system will use the datastore of the source virtual machine.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.",
                    "type": "string"
                },
                "folder": {
                    "description": "Virtual machine folder into which the cloned virtual machine should be placed.\nIf field is unset, the system will use the virtual machine folder of the source virtual machine. If this results in a conflict due to other placement parameters, the virtual machine clone operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the cloned virtual machine should be placed. \n If VM.ClonePlacementSpec.host and VM.ClonePlacementSpec.resource-pool are both specified, VM.ClonePlacementSpec.resource-pool must belong to VM.ClonePlacementSpec.host. \n\n If VM.ClonePlacementSpec.host and VM.ClonePlacementSpec.cluster are both specified, VM.ClonePlacementSpec.host must be a member of VM.ClonePlacementSpec.cluster.\n\nIf this field is unset, if VM.ClonePlacementSpec.resource-pool is unset, the cloned virtual machine will use the host of the source virtual machine. if VM.ClonePlacementSpec.resource-pool is set, and the target is a standalone host, the host is used. if VM.ClonePlacementSpec.resource-pool is set, and the target is a DRS cluster, a host will be picked by DRS. if VM.ClonePlacementSpec.resource-pool is set, and the target is a cluster without DRS, InvalidArgument will be thrown.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the cloned virtual machine should be placed.\nIf field is unset, the system will use the resource pool of the source virtual machine. If this results in a conflict due to other placement parameters, the virtual machine clone operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.VM.clone_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.VM.clone_spec": {
            "properties": {
                "disks_to_remove": {
                    "description": "Set of Disks to Remove.\nIf unset, all disks will be copied. If the same identifier is in VM.CloneSpec.disks-to-update InvalidArgument fault will be returned.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "disks_to_update": {
                    "description": "Map of Disks to Update.\nIf unset, all disks will copied to the datastore specified in the VM.ClonePlacementSpec.datastore field of VM.CloneSpec.placement. If the same identifier is in VM.CloneSpec.disks-to-remove InvalidArgument fault will be thrown.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.VM.disk_clone_spec"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "guest_customization_spec": {
                    "$ref": "#/definitions/vcenter.VM.guest_customization_spec",
                    "description": "Guest customization spec to apply to the virtual machine after the virtual machine is deployed.\nIf unset, the guest operating system is not customized after clone."
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.VM.clone_placement_spec",
                    "description": "Virtual machine placement information.\nIf this field is unset, the system will use the values from the source virtual machine. If specified, each field will be used for placement. If the fields result in disjoint placement the operation will fail. If the fields along with the placement values of the source virtual machine result in disjoint placement the operation will fail."
                },
                "power_on": {
                    "description": "Attempt to perform a VM.CloneSpec.power-on after clone.\nIf unset, the virtual machine will not be powered on.",
                    "type": "boolean"
                },
                "source": {
                    "description": "Virtual machine to clone from.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will be an identifier for the resource type: VirtualMachine.",
                    "type": "string"
                }
            },
            "required": [
                "source",
                "name"
            ],
            "type": "object"
        },
        "vcenter.VM.clone_task_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.VM.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.VM.create_spec": {
            "properties": {
                "boot": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.create_spec",
                    "description": "Boot configuration.\nIf unset, guest-specific default values will be used."
                },
                "boot_devices": {
                    "description": "Boot device configuration.\nIf unset, a server-specific boot sequence will be used.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.boot.device.entry_create_spec"
                    },
                    "type": "array"
                },
                "cdroms": {
                    "description": "List of CD-ROMs.\nIf unset, no CD-ROM devices will be created.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.cdrom.create_spec"
                    },
                    "type": "array"
                },
                "cpu": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cpu.update_spec",
                    "description": "CPU configuration.\nIf unset, guest-specific default values will be used."
                },
                "disks": {
                    "description": "List of disks.\nIf unset, a single blank virtual disk of a guest-specific size will be created on the same storage as the virtual machine configuration, and will use a guest-specific host bus adapter type. If the guest-specific size is 0, no virtual disk will be created.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.disk.create_spec"
                    },
                    "type": "array"
                },
                "floppies": {
                    "description": "List of floppy drives.\nIf unset, no floppy drives will be created.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.floppy.create_spec"
                    },
                    "type": "array"
                },
                "guest_OS": {
                    "$ref": "#/definitions/vcenter.vm.guest_OS",
                    "description": "Guest OS."
                },
                "hardware_version": {
                    "$ref": "#/definitions/vcenter.vm.hardware.version",
                    "description": "Virtual hardware version.\nIf unset, defaults to the most recent version supported by the server."
                },
                "memory": {
                    "$ref": "#/definitions/vcenter.vm.hardware.memory.update_spec",
                    "description": "Memory configuration.\nIf unset, guest-specific default values will be used."
                },
                "name": {
                    "description": "Virtual machine name.\nIf unset, a default name will be generated by the server.",
                    "type": "string"
                },
                "nics": {
                    "description": "List of Ethernet adapters.\nIf unset, no Ethernet adapters will be created.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.ethernet.create_spec"
                    },
                    "type": "array"
                },
                "parallel_ports": {
                    "description": "List of parallel ports.\nIf unset, no parallel ports will be created.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.parallel.create_spec"
                    },
                    "type": "array"
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.VM.placement_spec",
                    "description": "Virtual machine placement information.\nThis field is currently required. In the future, if this field is unset, the system will attempt to choose suitable resources on which to place the virtual machine."
                },
                "sata_adapters": {
                    "description": "List of SATA adapters.\nIf unset, any adapters necessary to connect the virtual machine's storage devices will be created; this includes any devices that explicitly specify a SATA host bus adapter, as well as any devices that do not specify a host bus adapter if the guest's preferred adapter type is SATA.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.create_spec"
                    },
                    "type": "array"
                },
                "scsi_adapters": {
                    "description": "List of SCSI adapters.\nIf unset, any adapters necessary to connect the virtual machine's storage devices will be created; this includes any devices that explicitly specify a SCSI host bus adapter, as well as any devices that do not specify a host bus adapter if the guest's preferred adapter type is SCSI. The type of the SCSI adapter will be a guest-specific default type.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.create_spec"
                    },
                    "type": "array"
                },
                "serial_ports": {
                    "description": "List of serial ports.\nIf unset, no serial ports will be created.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.serial.create_spec"
                    },
                    "type": "array"
                },
                "storage_policy": {
                    "$ref": "#/definitions/vcenter.VM.storage_policy_spec",
                    "description": "The VM.StoragePolicySpec structure contains information about the storage policy that is to be associated with the virtual machine home (which contains the configuration and log files).\nIf unset the datastore default storage policy (if applicable) is applied. Currently a default storage policy is only supported by object datastores : VVol and vSAN. For non-object datastores, if unset then no storage policy would be associated with the virtual machine home."
                }
            },
            "required": [
                "guest_OS"
            ],
            "type": "object"
        },
        "vcenter.VM.disk_clone_spec": {
            "properties": {
                "datastore": {
                    "description": "Destination datastore to clone disk.\nThis field is currently required. In the future, if this field is unset disk will be copied to the datastore specified in the VM.ClonePlacementSpec.datastore field of VM.CloneSpec.placement.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.VM.disk_relocate_spec": {
            "properties": {
                "datastore": {
                    "description": "Destination datastore to relocate disk.\nThis field is currently required. In the future, if this field is unset, disk will use the datastore specified in VM.RelocatePlacementSpec.datastore field of VM.RelocateSpec.placement.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.VM.filter_spec": {
            "properties": {
                "clusters": {
                    "description": "Clusters that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any cluster match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "datacenters": {
                    "description": "Datacenters that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "folders": {
                    "description": "Folders that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "hosts": {
                    "description": "Hosts that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines on any host match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "names": {
                    "description": "Names that virtual machines must have to match the filter (see VM.Info.name).\nIf unset or empty, virtual machines with any name match the filter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "power_states": {
                    "description": "Power states that a virtual machine must be in to match the filter (see Power.Info.state.\nIf unset or empty, virtual machines in any power state match the filter.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.power.state"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "resource_pools": {
                    "description": "Resource pools that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any resource pool match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "vms": {
                    "description": "Identifiers of virtual machines that can match the filter.\nIf unset or empty, virtual machines with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: VirtualMachine.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.VM.guest_customization_spec": {
            "properties": {
                "name": {
                    "description": "Name of the customization specification.\nIf unset, no guest customization is performed.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.VM.info": {
            "properties": {
                "boot": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.info",
                    "description": "Boot configuration."
                },
                "boot_devices": {
                    "description": "Boot device configuration. If the list has no entries, a server-specific default boot sequence is used.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.boot.device.entry"
                    },
                    "type": "array"
                },
                "cdroms": {
                    "description": "List of CD-ROMs.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Cdrom. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Cdrom.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.cdrom.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "cpu": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cpu.info",
                    "description": "CPU configuration."
                },
                "disks": {
                    "description": "List of disks.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.disk.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "floppies": {
                    "description": "List of floppy drives.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Floppy. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Floppy.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.floppy.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "guest_OS": {
                    "$ref": "#/definitions/vcenter.vm.guest_OS",
                    "description": "Guest OS."
                },
                "hardware": {
                    "$ref": "#/definitions/vcenter.vm.hardware.info",
                    "description": "Virtual hardware version information."
                },
                "identity": {
                    "$ref": "#/definitions/vcenter.vm.identity.info",
                    "description": "Identity of the virtual machine.\nThis field is optional because it was added in a newer version than its parent node."
                },
                "instant_clone_frozen": {
                    "description": "Indicates whether the virtual machine is frozen for instant clone, or not.\nThis field is optional because it was added in a newer version than its parent node.",
                    "type": "boolean"
                },
                "memory": {
                    "$ref": "#/definitions/vcenter.vm.hardware.memory.info",
                    "description": "Memory configuration."
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "nics": {
                    "description": "List of Ethernet adapters.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.ethernet.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "parallel_ports": {
                    "description": "List of parallel ports.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.parallel.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "power_state": {
                    "$ref": "#/definitions/vcenter.vm.power.state",
                    "description": "Power state of the virtual machine."
                },
                "sata_adapters": {
                    "description": "List of SATA adapters.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.SataAdapter.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "scsi_adapters": {
                    "description": "List of SCSI adapters.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "serial_ports": {
                    "description": "List of serial ports.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.SerialPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.SerialPort.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.serial.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "guest_OS",
                "name",
                "power_state",
                "hardware",
                "boot",
                "boot_devices",
                "cpu",
                "memory",
                "disks",
                "nics",
                "cdroms",
                "floppies",
                "parallel_ports",
                "serial_ports",
                "sata_adapters",
                "scsi_adapters"
            ],
            "type": "object"
        },
        "vcenter.VM.instant_clone_placement_spec": {
            "properties": {
                "datastore": {
                    "description": "Datastore on which the InstantCloned virtual machine's configuration state should be stored. This datastore will also be used for any virtual disks that are created as part of the virtual machine InstantClone operation.\nIf field is unset, the system will use the datastore of the source virtual machine.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.",
                    "type": "string"
                },
                "folder": {
                    "description": "Virtual machine folder into which the InstantCloned virtual machine should be placed.\nIf field is unset, the system will use the virtual machine folder of the source virtual machine.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the InstantCloned virtual machine should be placed.\nIf field is unset, the system will use the resource pool of the source virtual machine.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.VM.instant_clone_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.VM.instant_clone_spec": {
            "properties": {
                "bios_uuid": {
                    "description": "128-bit SMBIOS UUID of a virtual machine represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.\nIf unset, will be generated.",
                    "type": "string"
                },
                "disconnect_all_nics": {
                    "description": "Indicates whether all NICs on the destination virtual machine should be disconnected from the newtwork\nIf unset, connection status of all NICs on the destination virtual machine will be the same as on the source virtual machine.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the new virtual machine.",
                    "type": "string"
                },
                "nics_to_update": {
                    "description": "Map of NICs to update.\nIf unset, no NICs will be updated.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.ethernet.update_spec"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "parallel_ports_to_update": {
                    "description": "Map of parallel ports to Update.\nIf unset, no parallel ports will be updated.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.parallel.update_spec"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.VM.instant_clone_placement_spec",
                    "description": "Virtual machine placement information.\nIf this field is unset, the system will use the values from the source virtual machine. If specified, each field will be used for placement. If the fields result in disjoint placement the operation will fail. If the fields along with the placement values of the source virtual machine result in disjoint placement the operation will fail."
                },
                "serial_ports_to_update": {
                    "description": "Map of serial ports to Update.\nIf unset, no serial ports will be updated.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.SerialPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.SerialPort.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.serial.update_spec"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "source": {
                    "description": "Virtual machine to InstantClone from.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will be an identifier for the resource type: VirtualMachine.",
                    "type": "string"
                }
            },
            "required": [
                "source",
                "name"
            ],
            "type": "object"
        },
        "vcenter.VM.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.VM.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.VM.placement_spec": {
            "properties": {
                "cluster": {
                    "description": "Cluster into which the virtual machine should be placed. \n If VM.ComputePlacementSpec.cluster and VM.ComputePlacementSpec.resource-pool are both specified, VM.ComputePlacementSpec.resource-pool must belong to VM.ComputePlacementSpec.cluster. \n\n If VM.ComputePlacementSpec.cluster and VM.ComputePlacementSpec.host are both specified, VM.ComputePlacementSpec.host must be a member of VM.ComputePlacementSpec.cluster.\n\nIf VM.ComputePlacementSpec.resource-pool or VM.ComputePlacementSpec.host is specified, it is recommended that this field be unset.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the virtual machine's configuration state should be stored. This datastore will also be used for any virtual disks that are created as part of the virtual machine creation operation.\nThis field is currently required. In the future, if this field is unset, the system will attempt to choose suitable storage for the virtual machine; if storage cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.",
                    "type": "string"
                },
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.\nThis field is currently required. In the future, if this field is unset, the system will attempt to choose a suitable folder for the virtual machine; if a folder cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. \n If VM.ComputePlacementSpec.host and VM.ComputePlacementSpec.resource-pool are both specified, VM.ComputePlacementSpec.resource-pool must belong to VM.ComputePlacementSpec.host. \n\n If VM.ComputePlacementSpec.host and VM.ComputePlacementSpec.cluster are both specified, VM.ComputePlacementSpec.host must be a member of VM.ComputePlacementSpec.cluster.\n\nThis field may be unset if VM.ComputePlacementSpec.resource-pool or VM.ComputePlacementSpec.cluster is specified. If unset, the system will attempt to choose a suitable host for the virtual machine; if a host cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.\nThis field is currently required if both VM.ComputePlacementSpec.host and VM.ComputePlacementSpec.cluster are unset. In the future, if this field is unset, the system will attempt to choose a suitable resource pool for the virtual machine; if a resource pool cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.VM.register_placement_spec": {
            "properties": {
                "cluster": {
                    "description": "Cluster into which the virtual machine should be placed. \n If VM.ComputePlacementSpec.cluster and VM.ComputePlacementSpec.resource-pool are both specified, VM.ComputePlacementSpec.resource-pool must belong to VM.ComputePlacementSpec.cluster. \n\n If VM.ComputePlacementSpec.cluster and VM.ComputePlacementSpec.host are both specified, VM.ComputePlacementSpec.host must be a member of VM.ComputePlacementSpec.cluster.\n\nIf VM.ComputePlacementSpec.resource-pool or VM.ComputePlacementSpec.host is specified, it is recommended that this field be unset.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.\nThis field is currently required. In the future, if this field is unset, the system will attempt to choose a suitable folder for the virtual machine; if a folder cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. \n If VM.ComputePlacementSpec.host and VM.ComputePlacementSpec.resource-pool are both specified, VM.ComputePlacementSpec.resource-pool must belong to VM.ComputePlacementSpec.host. \n\n If VM.ComputePlacementSpec.host and VM.ComputePlacementSpec.cluster are both specified, VM.ComputePlacementSpec.host must be a member of VM.ComputePlacementSpec.cluster.\n\nThis field may be unset if VM.ComputePlacementSpec.resource-pool or VM.ComputePlacementSpec.cluster is specified. If unset, the system will attempt to choose a suitable host for the virtual machine; if a host cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.\nThis field is currently required if both VM.ComputePlacementSpec.host and VM.ComputePlacementSpec.cluster are unset. In the future, if this field is unset, the system will attempt to choose a suitable resource pool for the virtual machine; if a resource pool cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.VM.register_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.VM.register_spec": {
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore on which the virtual machine's configuration state is stored.\nIf unset, VM.RegisterSpec.path must also be unset and VM.RegisterSpec.datastore-path must be set.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.",
                    "type": "string"
                },
                "datastore_path": {
                    "description": "Datastore path for the virtual machine's configuration file in the format \"[datastore name] path\". For example \"[storage1] Test-VM/Test-VM.vmx\".\nIf unset, both VM.RegisterSpec.datastore and VM.RegisterSpec.path must be set.",
                    "type": "string"
                },
                "name": {
                    "description": "Virtual machine name.\nIf unset, the display name from the virtual machine's configuration file will be used.",
                    "type": "string"
                },
                "path": {
                    "description": "Path to the virtual machine's configuration file on the datastore corresponding to {@link #datastore).\nIf unset, VM.RegisterSpec.datastore must also be unset and VM.RegisterSpec.datastore-path must be set.",
                    "type": "string"
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.VM.register_placement_spec",
                    "description": "Virtual machine placement information.\nThis field is currently required. In the future, if this field is unset, the system will attempt to choose suitable resources on which to place the virtual machine."
                }
            },
            "type": "object"
        },
        "vcenter.VM.relocate_placement_spec": {
            "properties": {
                "cluster": {
                    "description": "Cluster into which the virtual machine should be placed. \n If VM.RelocatePlacementSpec.cluster and VM.RelocatePlacementSpec.resource-pool are both specified, VM.RelocatePlacementSpec.resource-pool must belong to VM.RelocatePlacementSpec.cluster. \n\n If VM.RelocatePlacementSpec.cluster and VM.RelocatePlacementSpec.host are both specified, VM.RelocatePlacementSpec.host must be a member of VM.RelocatePlacementSpec.cluster.\n\nIf VM.RelocatePlacementSpec.resource-pool or VM.RelocatePlacementSpec.host is specified, it is recommended that this field be unset.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the virtual machine's configuration state should be stored. This datastore will also be used for any virtual disks that are associated with the virtual machine, unless individually overridden.\nIf this field is unset, the virtual machine will remain on the current datastore.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.",
                    "type": "string"
                },
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.\nIf this field is unset, the virtual machine will stay in the current folder.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. \n If VM.RelocatePlacementSpec.host and VM.RelocatePlacementSpec.resource-pool are both specified, VM.RelocatePlacementSpec.resource-pool must belong to VM.RelocatePlacementSpec.host. \n\n If VM.RelocatePlacementSpec.host and VM.RelocatePlacementSpec.cluster are both specified, VM.RelocatePlacementSpec.host must be a member of VM.RelocatePlacementSpec.cluster.\n\nIf this field is unset, if VM.RelocatePlacementSpec.resource-pool is unset, the virtual machine will remain on the current host. if VM.RelocatePlacementSpec.resource-pool is set, and the target is a standalone host, the host is used. if VM.RelocatePlacementSpec.resource-pool is set, and the target is a DRS cluster, a host will be picked by DRS. if VM.RelocatePlacementSpec.resource-pool is set, and the target is a cluster without DRS, InvalidArgument will be thrown.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.\nIf this field is unset, the virtual machine will stay in the current resource pool.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.VM.relocate_spec": {
            "properties": {
                "disks": {
                    "description": "Individual disk relocation map.\nIf unset, all disks will migrate to the datastore specified in the VM.RelocatePlacementSpec.datastore field of VM.RelocateSpec.placement.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.VM.disk_relocate_spec"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.VM.relocate_placement_spec",
                    "description": "Virtual machine placement information.\nIf this field is unset, the system will use the values from the source virtual machine. If specified, each field will be used for placement. If the fields result in disjoint placement the operation will fail. If the fields along with the other existing placement of the virtual machine result in disjoint placement the operation will fail."
                }
            },
            "type": "object"
        },
        "vcenter.VM.relocate_task_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.VM.storage_policy_spec": {
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy which should be associated with the virtual machine.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.StoragePolicy.",
                    "type": "string"
                }
            },
            "required": [
                "policy"
            ],
            "type": "object"
        },
        "vcenter.VM.summary": {
            "properties": {
                "cpu_count": {
                    "description": "Number of CPU cores.\nThis field will be unset if the virtual machine configuration is not available. For example, the configuration information would be unavailable if the server is unable to access the virtual machine files on disk, and is often also unavailable during the intial phases of virtual machine creation.",
                    "format": "int64",
                    "type": "integer"
                },
                "memory_size_MiB": {
                    "description": "Memory size in mebibytes.\nThis field will be unset if the virtual machine configuration is not available. For example, the configuration information would be unavailable if the server is unable to access the virtual machine files on disk, and is often also unavailable during the intial phases of virtual machine creation.",
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the Virtual machine.",
                    "type": "string"
                },
                "power_state": {
                    "$ref": "#/definitions/vcenter.vm.power.state",
                    "description": "Power state of the virtual machine."
                },
                "vm": {
                    "description": "Identifier of the virtual machine.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will be an identifier for the resource type: VirtualMachine.",
                    "type": "string"
                }
            },
            "required": [
                "vm",
                "name",
                "power_state"
            ],
            "type": "object"
        },
        "vcenter.VM_clone": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.clone_spec",
                    "description": "Virtual machine clone specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.VM_clone_task": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.clone_spec",
                    "description": "Virtual machine clone specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.VM_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.create_spec",
                    "description": "Virtual machine specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.VM_instant_clone": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.instant_clone_spec",
                    "description": "Virtual machine InstantCloneSpec."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.VM_register": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.register_spec",
                    "description": "Specification of the location of the virtual machine files and the placement of the new virtual machine."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.VM_relocate": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.relocate_spec",
                    "description": "Relocate specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.VM_relocate_task": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.relocate_spec",
                    "description": "Relocate specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.VM_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.VM.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls.info": {
            "properties": {
                "authority_information_access_uri": {
                    "description": "Collection of authority information access URI.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cert": {
                    "description": "TLS certificate in PEM format.",
                    "type": "string"
                },
                "extended_key_usage": {
                    "description": "Collection of extended keyusage that contains details for which the certificate can be used for.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "is_CA": {
                    "description": "Certificate constraints isCA from the critical BasicConstraints extension, (OID = 2.5.29.19).",
                    "type": "boolean"
                },
                "issuer_dn": {
                    "description": "Issuer (issuer distinguished name) value from the certificate.",
                    "type": "string"
                },
                "key_usage": {
                    "description": "Collection of keyusage contained in the certificate.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "path_length_constraint": {
                    "description": "Certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19).",
                    "format": "int64",
                    "type": "integer"
                },
                "serial_number": {
                    "description": "SerialNumber value from the certificate.",
                    "type": "string"
                },
                "signature_algorithm": {
                    "description": "Signature algorithm name from the certificate.",
                    "type": "string"
                },
                "subject_alternative_name": {
                    "description": "Collection of subject alternative names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject_dn": {
                    "description": "Subject (subject distinguished name) value from the certificate.",
                    "type": "string"
                },
                "thumbprint": {
                    "description": "Thumbprint value from the certificate.",
                    "type": "string"
                },
                "valid_from": {
                    "description": "validFrom specify the start date of the certificate.",
                    "format": "date-time",
                    "type": "string"
                },
                "valid_to": {
                    "description": "validTo specify the end date of the certificate.",
                    "format": "date-time",
                    "type": "string"
                },
                "version": {
                    "description": "Version (version number) value from the certificate.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "version",
                "serial_number",
                "signature_algorithm",
                "issuer_dn",
                "valid_from",
                "valid_to",
                "subject_dn",
                "thumbprint",
                "is_CA",
                "path_length_constraint",
                "key_usage",
                "extended_key_usage",
                "subject_alternative_name",
                "authority_information_access_uri",
                "cert"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls.replace_spec": {
            "properties": {
                "common_name": {
                    "description": "The common name of the host for which certificate is generated\nIf unset will default to PNID of host.",
                    "type": "string"
                },
                "country": {
                    "description": "Country field in certificate subject",
                    "type": "string"
                },
                "email_address": {
                    "description": "Email field in Certificate extensions",
                    "type": "string"
                },
                "key_size": {
                    "description": "The size of the key to be used for public and private key generation.\nIf unset the key size will be '2048'.",
                    "format": "int64",
                    "type": "integer"
                },
                "locality": {
                    "description": "Locality field in certificate subject",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization field in certificate subject",
                    "type": "string"
                },
                "organization_unit": {
                    "description": "Organization unit field in certificate subject",
                    "type": "string"
                },
                "state_or_province": {
                    "description": "State field in certificate subject",
                    "type": "string"
                },
                "subject_alt_name": {
                    "description": "SubjectAltName is list of Dns Names and Ip addresses\nIf unset PNID of host will be used as IPAddress or Hostname for certificate generation .",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "organization",
                "organization_unit",
                "locality",
                "state_or_province",
                "country",
                "email_address"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls.spec": {
            "properties": {
                "cert": {
                    "description": "Certificate string in PEM format.",
                    "type": "string"
                },
                "key": {
                    "description": "Private key string in PEM format.\nIf unset the private key from the certificate store will be used. It is required when replacing the certificate with a third party signed certificate.",
                    "format": "password",
                    "type": "string"
                },
                "root_cert": {
                    "description": "Third party Root CA certificate in PEM format.\nIf unset the new third party root CA certificate will not be added to the trust store. It is required when replacing the certificate with a third party signed certificate if the root certificate of the third party is not already a trusted root.",
                    "type": "string"
                }
            },
            "required": [
                "cert"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls_csr.create_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_csr.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls_csr.info": {
            "properties": {
                "csr": {
                    "description": "Certificate Signing Request in PEM format.",
                    "type": "string"
                }
            },
            "required": [
                "csr"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls_csr.spec": {
            "properties": {
                "common_name": {
                    "description": "commonName will take PNID if not modified.",
                    "type": "string"
                },
                "country": {
                    "description": "Country field in certificate subject",
                    "type": "string"
                },
                "email_address": {
                    "description": "Email field in Certificate extensions",
                    "type": "string"
                },
                "key_size": {
                    "description": "keySize will take 2048 bits if not modified.",
                    "format": "int64",
                    "type": "integer"
                },
                "locality": {
                    "description": "Locality field in certificate subject",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization field in certificate subject",
                    "type": "string"
                },
                "organization_unit": {
                    "description": "Organization unit field in certificate subject",
                    "type": "string"
                },
                "state_or_province": {
                    "description": "State field in certificate subject",
                    "type": "string"
                },
                "subject_alt_name": {
                    "description": "subjectAltName is list of Dns Names and Ip addresses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "organization",
                "organization_unit",
                "locality",
                "state_or_province",
                "country",
                "email_address"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls_csr_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_csr.spec",
                    "description": "The information needed to create a CSR."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls_renew": {
            "properties": {
                "duration": {
                    "description": "The duration (in days) of the new TLS certificate. The duration should be less than or equal to 730 days.\nIf unset, the duration will be 730 days (two years).",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls_replace_vmca_signed": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls.replace_spec",
                    "description": "The information needed to generate VMCA signed Machine SSL"
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.tls_set": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls.spec",
                    "description": "The information needed to replace the TLS certificate."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.create_spec": {
            "properties": {
                "cert_chain": {
                    "$ref": "#/definitions/vcenter.certificate_management.x509_cert_chain",
                    "description": "Certificate chain in base64 encoding"
                },
                "chain": {
                    "description": "Unique identifier for this trusted root. Client can specify at creation as long as it is unique, otherwise one will be generated. An example of a client providing the identifier would be if this trusted root is associated with a VC trust. In this case the identifier would be the domain id.\nA unique id will be generated if not given.",
                    "type": "string"
                }
            },
            "required": [
                "cert_chain"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.info": {
            "properties": {
                "cert_chain": {
                    "$ref": "#/definitions/vcenter.certificate_management.x509_cert_chain",
                    "description": "A certificate chain in base64 encoding"
                }
            },
            "required": [
                "cert_chain"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.summary": {
            "properties": {
                "chain": {
                    "description": "Unique identifier for chain.",
                    "type": "string"
                }
            },
            "required": [
                "chain"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.create_spec",
                    "description": "The information needed to create a trusted root certificate chain."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.vmca_root.create_spec": {
            "properties": {
                "common_name": {
                    "description": "The common name of the host for which certificate is generated.\nIf unset the common name will be the primary network identifier (PNID) of the vCenter Virtual Server Appliance (VCSA).",
                    "type": "string"
                },
                "country": {
                    "description": "Country field in certificate subject.\nIf unset the country will be 'US'.",
                    "type": "string"
                },
                "email_address": {
                    "description": "Email field in Certificate extensions.\nIf unset the emailAddress will be 'email@acme.com'.",
                    "type": "string"
                },
                "key_size": {
                    "description": "The size of the key to be used for public and private key generation.\nIf unset the key size will be 2048.",
                    "format": "int64",
                    "type": "integer"
                },
                "locality": {
                    "description": "Locality field in certificate subject.\nIf unset the locality will be 'Palo Alto'.",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization field in certificate subject.\nIf unset the organization will be 'VMware'.",
                    "type": "string"
                },
                "organization_unit": {
                    "description": "Organization unit field in certificate subject.\nIf unset the organization unit will be 'VMware Engineering'.",
                    "type": "string"
                },
                "state_or_province": {
                    "description": "State field in certificate subject.\nIf unset the state will be 'California'.",
                    "type": "string"
                },
                "subject_alt_name": {
                    "description": "SubjectAltName is list of Dns Names and Ip addresses.\nIf unset PNID of host will be used as IPAddress or Hostname for certificate generation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "vcenter.certificate_management.vcenter.vmca_root_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.vmca_root.create_spec",
                    "description": "The information needed to generate VMCA signed Root Certificate.\nDefault values will be set for all null parameters."
                }
            },
            "type": "object"
        },
        "vcenter.certificate_management.x509_cert_chain": {
            "properties": {
                "cert_chain": {
                    "description": "Certificate chain in base64 format",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "cert_chain"
            ],
            "type": "object"
        },
        "vcenter.cluster.filter_spec": {
            "properties": {
                "clusters": {
                    "description": "Identifiers of clusters that can match the filter.\nIf unset or empty, clusters with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "datacenters": {
                    "description": "Datacenters that must contain the cluster for the cluster to match the filter.\nIf unset or empty, clusters in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "folders": {
                    "description": "Folders that must contain the cluster for the cluster to match the filter.\nIf unset or empty, clusters in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "names": {
                    "description": "Names that clusters must have to match the filter (see Cluster.Info.name).\nIf unset or empty, clusters with any name match the filter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.cluster.info": {
            "properties": {
                "name": {
                    "description": "The name of the cluster",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Identifier of the root resource pool of the cluster\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "resource_pool"
            ],
            "type": "object"
        },
        "vcenter.cluster.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.cluster.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.cluster.summary": {
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "drs_enabled": {
                    "description": "Flag indicating whether the vSphere DRS service is enabled for the cluster.",
                    "type": "boolean"
                },
                "ha_enabled": {
                    "description": "Flag indicating whether the vSphere HA feature is enabled for the cluster.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the cluster.",
                    "type": "string"
                }
            },
            "required": [
                "cluster",
                "name",
                "ha_enabled",
                "drs_enabled"
            ],
            "type": "object"
        },
        "vcenter.cluster_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.cluster.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.datacenter.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.datacenter.create_spec": {
            "properties": {
                "folder": {
                    "description": "Datacenter folder in which the new datacenter should be created.\nThis field is currently required. In the future, if this field is unset, the system will attempt to choose a suitable folder for the datacenter; if a folder cannot be chosen, the datacenter creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the datacenter to be created.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "vcenter.datacenter.filter_spec": {
            "properties": {
                "datacenters": {
                    "description": "Identifiers of datacenters that can match the filter.\nIf unset or empty, datacenters with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "folders": {
                    "description": "Folders that must contain the datacenters for the datacenter to match the filter.\nIf unset or empty, datacenters in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "names": {
                    "description": "Names that datacenters must have to match the filter (see Datacenter.Info.name).\nIf unset or empty, datacenters with any name match the filter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.datacenter.info": {
            "properties": {
                "datastore_folder": {
                    "description": "The root datastore folder associated with the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "host_folder": {
                    "description": "The root host and cluster folder associated with the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the datacenter.",
                    "type": "string"
                },
                "network_folder": {
                    "description": "The root network folder associated with the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "vm_folder": {
                    "description": "The root virtual machine folder associated with the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "datastore_folder",
                "host_folder",
                "network_folder",
                "vm_folder"
            ],
            "type": "object"
        },
        "vcenter.datacenter.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.datacenter.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.datacenter.summary": {
            "properties": {
                "datacenter": {
                    "description": "Identifier of the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datacenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datacenter.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the datacenter.",
                    "type": "string"
                }
            },
            "required": [
                "datacenter",
                "name"
            ],
            "type": "object"
        },
        "vcenter.datacenter_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.datacenter.create_spec",
                    "description": "Specification for the new datacenter to be created."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.datacenter_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.datacenter.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.datastore.default_policy_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.datastore.filter_spec": {
            "properties": {
                "datacenters": {
                    "description": "Datacenters that must contain the datastore for the datastore to match the filter.\nIf unset or empty, datastores in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "datastores": {
                    "description": "Identifiers of datastores that can match the filter.\nIf unset or empty, datastores with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datastore. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datastore.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "folders": {
                    "description": "Folders that must contain the datastore for the datastore to match the filter.\nIf unset or empty, datastores in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "names": {
                    "description": "Names that datastores must have to match the filter (see Datastore.Info.name).\nIf unset or empty, datastores with any name match the filter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "types": {
                    "description": "Types that datastores must have to match the filter (see Datastore.Summary.type).\nIf unset or empty, datastores with any type match the filter.",
                    "items": {
                        "$ref": "#/definitions/vcenter.datastore.type"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.datastore.info": {
            "properties": {
                "accessible": {
                    "description": "Whether or not this datastore is accessible.",
                    "type": "boolean"
                },
                "free_space": {
                    "description": "Available space of this datastore, in bytes. \n The server periodically updates this value.\n\nThis field will be unset if the available space of this datastore is not known.",
                    "format": "int64",
                    "type": "integer"
                },
                "multiple_host_access": {
                    "description": "Whether or not ore than one host in the datacenter has been configured with access to the datastore.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the datastore.",
                    "type": "string"
                },
                "thin_provisioning_supported": {
                    "description": "Whether or not the datastore supports thin provisioning on a per file basis. When thin provisioning is used, backing storage is lazily allocated.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.datastore.type",
                    "description": "Type (Type) of the datastore."
                }
            },
            "required": [
                "name",
                "type",
                "accessible",
                "multiple_host_access",
                "thin_provisioning_supported"
            ],
            "type": "object"
        },
        "vcenter.datastore.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.datastore.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.datastore.summary": {
            "properties": {
                "capacity": {
                    "description": "Capacity of this datastore, in bytes. \n The server periodically updates this value.\n\nThis field will be unset if the capacity of this datastore is not known.",
                    "format": "int64",
                    "type": "integer"
                },
                "datastore": {
                    "description": "Identifier of the datastore.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.",
                    "type": "string"
                },
                "free_space": {
                    "description": "Available space of this datastore, in bytes. \n The server periodically updates this value.\n\nThis field will be unset if the available space of this datastore is not known.",
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the datastore.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.datastore.type",
                    "description": "Type (Type) of the datatore."
                }
            },
            "required": [
                "datastore",
                "name",
                "type"
            ],
            "type": "object"
        },
        "vcenter.datastore.type": {
            "enum": [
                "VMFS",
                "NFS",
                "NFS41",
                "CIFS",
                "VSAN",
                "VFFS",
                "VVOL"
            ],
            "type": "string"
        },
        "vcenter.datastore_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.datastore.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.appliance_size": {
            "description": "The {@name ApplianceSize} {@term enumerated type} defines the vCenter Server Appliance sizes.",
            "enum": [
                "TINY",
                "SMALL",
                "MEDIUM",
                "LARGE",
                "XLARGE"
            ],
            "type": "string"
        },
        "vcenter.deployment.appliance_state": {
            "description": "The {@name ApplianceState} {@term enumerated type} defines the various states the vCenter Appliance can be in.",
            "enum": [
                "NOT_INITIALIZED",
                "INITIALIZED",
                "CONFIG_IN_PROGRESS",
                "QUESTION_RAISED",
                "FAILED",
                "CONFIGURED"
            ],
            "type": "string"
        },
        "vcenter.deployment.appliance_type": {
            "description": "The {@name ApplianceType} {@term enumerated type} defines the vCenter appliance types.",
            "enum": [
                "VCSA_EMBEDDED",
                "VCSA_EXTERNAL",
                "PSC_EXTERNAL"
            ],
            "type": "string"
        },
        "vcenter.deployment.check_info": {
            "properties": {
                "result": {
                    "$ref": "#/definitions/vcenter.deployment.notifications",
                    "description": "Result of the check."
                },
                "source_info": {
                    "$ref": "#/definitions/vcenter.deployment.source_info",
                    "description": "Information collected from the source machine."
                },
                "status": {
                    "$ref": "#/definitions/vcenter.deployment.check_status",
                    "description": "Status of the check."
                }
            },
            "required": [
                "status"
            ],
            "type": "object"
        },
        "vcenter.deployment.check_status": {
            "description": "The {@name CheckStatus} {@term enumerated type} defines the status of the checks.",
            "enum": [
                "SUCCESS",
                "FAILED"
            ],
            "type": "string"
        },
        "vcenter.deployment.data_migration_estimate": {
            "properties": {
                "estimated_export_time": {
                    "description": "The time estimated to export data from the source vCenter Server.",
                    "format": "int64",
                    "type": "integer"
                },
                "estimated_import_time": {
                    "description": "The time estimated to import data to the upgraded vCenter Server.",
                    "format": "int64",
                    "type": "integer"
                },
                "required_free_disk_space_on_source": {
                    "description": "The extra free space required on source vCenter Server.",
                    "format": "double",
                    "type": "number"
                }
            },
            "required": [
                "estimated_export_time",
                "estimated_import_time",
                "required_free_disk_space_on_source"
            ],
            "type": "object"
        },
        "vcenter.deployment.data_migration_info": {
            "properties": {
                "all": {
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate",
                    "description": "Migrate all data from vCenter Server."
                },
                "all_with_deferred": {
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate",
                    "description": "Migrate all data from vCenter Server. Events, tasks, and stats will be migrated after the upgrade."
                },
                "core": {
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate",
                    "description": "Migrate only core data and configuration from vCenter Server. Events, tasks, and stats will not be migrated."
                },
                "core_events_tasks": {
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate",
                    "description": "Migrate core, events, and tasks from vCenter Server. Stats will not be migrated."
                },
                "core_events_tasks_with_deferred": {
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate",
                    "description": "Migrate core, events, and tasks from vCenter Server. Events and tasks will be migrated after the upgrade. Stats will not be migrated."
                }
            },
            "required": [
                "core",
                "core_events_tasks",
                "all"
            ],
            "type": "object"
        },
        "vcenter.deployment.history_migration_option": {
            "description": "The {@name HistoryMigrationOption} {@term enumerated type} defines the vCenter history migration option choices.",
            "enum": [
                "EVENTS_TASKS",
                "ALL"
            ],
            "type": "string"
        },
        "vcenter.deployment.history_migration_spec": {
            "properties": {
                "data_set": {
                    "$ref": "#/definitions/vcenter.deployment.history_migration_option",
                    "description": "Defines what part of vCenter historical data will be migrated along with core data."
                },
                "defer_import": {
                    "description": "Defines how vCenter history will be migrated. If set to true, vCenter history will be migrated separately after successful upgrade or migration, otherwise it will be migrated along with core data during the upgrade or migration process.",
                    "type": "boolean"
                }
            },
            "required": [
                "data_set"
            ],
            "type": "object"
        },
        "vcenter.deployment.import_history.create_spec": {
            "properties": {
                "description": {
                    "description": "Description of the vCenter history import task.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the vCenter history import task",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "description"
            ],
            "type": "object"
        },
        "vcenter.deployment.import_history.info": {
            "properties": {
                "cancelable": {
                    "description": "Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.",
                    "type": "boolean"
                },
                "description": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Description of the operation associated with the task."
                },
                "end_time": {
                    "description": "Time when the operation is completed.",
                    "format": "date-time",
                    "type": "string"
                },
                "error": {
                    "description": "Description of the error if the operation status is \"FAILED\".",
                    "type": "object"
                },
                "operation": {
                    "description": "Identifier of the operation associated with the task.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the current task.",
                    "type": "string"
                },
                "progress": {
                    "$ref": "#/definitions/cis.task.progress",
                    "description": "The progress info of this task."
                },
                "result": {
                    "$ref": "#/definitions/vcenter.deployment.notifications",
                    "description": "Result of the operation. If an operation reports partial results before it completes, this {@term field} could be {@term set} before the {@link cis.task.CommonInfo#status} has the value {@link cis.task.Status#SUCCEEDED}. The value could change as the operation progresses."
                },
                "service": {
                    "description": "Identifier of the service containing the operation.",
                    "type": "string"
                },
                "start_time": {
                    "description": "Time when the operation is started.",
                    "format": "date-time",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/cis.task.status",
                    "description": "Status of the operation associated with the task."
                },
                "target": {
                    "$ref": "#/definitions/vapi.std.dynamic_ID",
                    "description": "Identifier of the target created by the operation or an existing one the operation performed on."
                },
                "user": {
                    "description": "Name of the user who performed the operation.",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "service",
                "operation",
                "status",
                "cancelable"
            ],
            "type": "object"
        },
        "vcenter.deployment.import_history_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.import_history.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.import_history_start": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.import_history.create_spec",
                    "description": "An optional {@name CreateSpec} info that can be passed for creating a new historical data import task and starts it."
                }
            },
            "type": "object"
        },
        "vcenter.deployment.info": {
            "properties": {
                "cancelable": {
                    "description": "Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.",
                    "type": "boolean"
                },
                "description": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Description of the operation associated with the task."
                },
                "end_time": {
                    "description": "Time when the operation is completed.",
                    "format": "date-time",
                    "type": "string"
                },
                "error": {
                    "description": "Description of the error if the operation status is \"FAILED\".",
                    "type": "object"
                },
                "operation": {
                    "description": "Identifier of the operation associated with the task.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the current task.",
                    "type": "string"
                },
                "progress": {
                    "$ref": "#/definitions/cis.task.progress",
                    "description": "The progress info of the current appliance status."
                },
                "service": {
                    "description": "Identifier of the service containing the operation.",
                    "type": "string"
                },
                "start_time": {
                    "description": "Time when the operation is started.",
                    "format": "date-time",
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.deployment.appliance_state",
                    "description": "State of the vCenter Server Appliance."
                },
                "status": {
                    "$ref": "#/definitions/cis.task.status",
                    "description": "Status of the operation associated with the task."
                },
                "subtask_order": {
                    "description": "The ordered list of subtasks for this deployment operation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subtasks": {
                    "description": "The map of the deployment subtasks and their status infomation.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.deployment.task"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "target": {
                    "$ref": "#/definitions/vapi.std.dynamic_ID",
                    "description": "Identifier of the target created by the operation or an existing one the operation performed on."
                },
                "user": {
                    "description": "Name of the user who performed the operation.",
                    "type": "string"
                }
            },
            "required": [
                "state",
                "description",
                "service",
                "operation",
                "status",
                "cancelable"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.initial_config.remote_psc.thumbprint.remote_spec": {
            "properties": {
                "address": {
                    "description": "The IP address or DNS resolvable name of the remote PSC.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the remote PSC.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "address"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.initial_config.remote_psc.thumbprint_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.install_spec": {
            "properties": {
                "auto_answer": {
                    "description": "Use the default option for any questions that may come up during appliance configuration.",
                    "type": "boolean"
                },
                "vcsa_embedded": {
                    "$ref": "#/definitions/vcenter.deployment.install.vcsa_embedded_spec",
                    "description": "Spec used to configure an embedded vCenter Server. This field describes how the embedded vCenter Server appliance should be configured."
                }
            },
            "required": [
                "vcsa_embedded"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.psc.replicated.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.psc.replicated_check": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.replicated_psc_spec",
                    "description": "Information to configure a replicated PSC."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.psc.standalone.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.psc.standalone_check": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.standalone_psc_spec",
                    "description": "Information to configure a non-replicated PSC."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.remote_psc.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.remote_psc_check": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.remote_psc_spec",
                    "description": "Information to connect to the remote PSC."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.install.vcsa_embedded_spec": {
            "properties": {
                "ceip_enabled": {
                    "description": "Whether CEIP should be enabled or disabled.",
                    "type": "boolean"
                },
                "replicated": {
                    "$ref": "#/definitions/vcenter.deployment.replicated_spec",
                    "description": "Spec used to configure a replicated embedded vCenter Server. This field describes how the replicated vCenter Server appliance should be configured."
                },
                "standalone": {
                    "$ref": "#/definitions/vcenter.deployment.standalone_spec",
                    "description": "Spec used to configure a standalone embedded vCenter Server. This field describes how the standalone vCenter Server appliance should be configured."
                }
            },
            "required": [
                "ceip_enabled"
            ],
            "type": "object"
        },
        "vcenter.deployment.install_check": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.install.install_spec",
                    "description": "InstallSpec parameters to run sanity check with."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.install_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.install.install_spec"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.install_start": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.install.install_spec",
                    "description": "InstallSpec parameters to configure the appliance install."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.location_spec": {
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the container.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the container.",
                    "format": "int64",
                    "type": "integer"
                },
                "password": {
                    "description": "The administrator account password.",
                    "format": "password",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled. If {@name #sslVerify} is true and and {@name #sslThumbprint} is {@term unset}, the CA certificate will be used for verification. If {@name #sslVerify} is true and {@name #sslThumbprint} is set then the thumbprint will be used for verification. No verification will be performed if {@name #sslVerify} value is set to false.",
                    "type": "boolean"
                },
                "username": {
                    "description": "The administrator account on the host.",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "username",
                "password"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.active_directory.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.active_directory.check_spec": {
            "properties": {
                "dns_servers": {
                    "description": "IP addresses of the DNS servers of the Active Directory server.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "domain": {
                    "description": "The domain name of the Active Directory server to which the migrated vCenter Server appliance should be joined.",
                    "type": "string"
                },
                "password": {
                    "description": "Active Directory user password that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                },
                "username": {
                    "description": "Active Directory user that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                }
            },
            "required": [
                "dns_servers",
                "domain",
                "username",
                "password"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.active_directory_check": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.active_directory.check_spec",
                    "description": "Information to connect to Active Directory."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.active_directory_spec": {
            "properties": {
                "domain": {
                    "description": "The domain name of the Active Directory server to which the migrated vCenter Server appliance should be joined.",
                    "type": "string"
                },
                "password": {
                    "description": "Active Directory user password that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                },
                "username": {
                    "description": "Active Directory user that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                }
            },
            "required": [
                "domain",
                "username",
                "password"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.migrate_spec": {
            "properties": {
                "active_directory": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.active_directory_spec",
                    "description": "Information specific to the Active Directory server to which the source windows vCenter Server is joined."
                },
                "auto_answer": {
                    "description": "Use the default option for any questions that may come up during appliance configuration.",
                    "type": "boolean"
                },
                "existing_migration_assistant": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.migration_assistant_spec",
                    "description": "Information specific to the Migration Assistant that is running on the Windows vCenter Server."
                },
                "history": {
                    "$ref": "#/definitions/vcenter.deployment.history_migration_spec",
                    "description": "Determines how vCenter history will be migrated during the migration process. vCenter history consists of: <ul> <li>Statistics</li> <li>Events</li> <li>Tasks</li> </ul> By default only core data will be migrated. Use this spec to define which part of vCenter history data will be migrated and when."
                },
                "psc": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.psc_spec",
                    "description": "Information specific to a Platform Services Controller."
                },
                "source_vc_windows": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.source_vc_windows",
                    "description": "Information specific to the Windows vCenter Server."
                },
                "vcsa_embedded": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.vcsa_embedded_spec",
                    "description": "Information specific to an embedded vCenter Server."
                }
            },
            "required": [
                "source_vc_windows",
                "existing_migration_assistant"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.migration_assistant_spec": {
            "properties": {
                "https_port": {
                    "description": "The HTTPS port being used by Migration Assistant.",
                    "format": "int64",
                    "type": "integer"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the Migration Assistant SSL certificate that will be used for verification.",
                    "type": "string"
                }
            },
            "required": [
                "ssl_thumbprint"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.psc_spec": {
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this Platform Services Controller migration.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.source_vc_windows": {
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the source Windows machine.",
                    "type": "string"
                },
                "password": {
                    "description": "The SSO administrator account password.",
                    "format": "password",
                    "type": "string"
                },
                "username": {
                    "description": "The SSO account with administrative privilege to perform the migration operation.",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "username",
                "password"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate.vcsa_embedded_spec": {
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this embedded vCenter Server migration.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate_check": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.migrate_spec",
                    "description": "MigrateSpec parameters to run sanity check on."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.migrate_spec"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.migrate_start": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.migrate_spec",
                    "description": "MigrateSpec parameters to configure the appliance migration."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.notification": {
            "properties": {
                "id": {
                    "description": "The notification id.",
                    "type": "string"
                },
                "message": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "The notification message."
                },
                "resolution": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "The resolution message, if any."
                },
                "time": {
                    "description": "The time the notification was raised/found.",
                    "format": "date-time",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "message"
            ],
            "type": "object"
        },
        "vcenter.deployment.notifications": {
            "properties": {
                "errors": {
                    "description": "Error notification messages reported.",
                    "items": {
                        "$ref": "#/definitions/vcenter.deployment.notification"
                    },
                    "type": "array"
                },
                "info": {
                    "description": "Info notification messages reported.",
                    "items": {
                        "$ref": "#/definitions/vcenter.deployment.notification"
                    },
                    "type": "array"
                },
                "warnings": {
                    "description": "Warning notification messages reported.",
                    "items": {
                        "$ref": "#/definitions/vcenter.deployment.notification"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "vcenter.deployment.question.answer_spec": {
            "properties": {
                "answer_val": {
                    "description": "The answer value.",
                    "type": "string"
                },
                "question_id": {
                    "description": "Id of the question being answered.",
                    "type": "string"
                }
            },
            "required": [
                "question_id",
                "answer_val"
            ],
            "type": "object"
        },
        "vcenter.deployment.question.info": {
            "properties": {
                "questions": {
                    "description": "One or more questions raised during the deployment.",
                    "items": {
                        "$ref": "#/definitions/vcenter.deployment.question.question"
                    },
                    "type": "array"
                }
            },
            "required": [
                "questions"
            ],
            "type": "object"
        },
        "vcenter.deployment.question.question": {
            "properties": {
                "default_answer": {
                    "description": "Default answer value.",
                    "type": "string"
                },
                "id": {
                    "description": "Id of the question raised.",
                    "type": "string"
                },
                "possible_answers": {
                    "description": "Possible answers values.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "question": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Message describing the question."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.deployment.question.question_type",
                    "description": "Type of the question raised."
                }
            },
            "required": [
                "id",
                "question",
                "type",
                "default_answer",
                "possible_answers"
            ],
            "type": "object"
        },
        "vcenter.deployment.question.question_type": {
            "description": "The {@name QuestionType} {@term enumerated type} defines the type of the question raised.",
            "enum": [
                "YES_NO",
                "OK_CANCEL",
                "ABORT_RETRY_IGNORE"
            ],
            "type": "string"
        },
        "vcenter.deployment.question_answer": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.question.answer_spec",
                    "description": "AnswerSpec with the answer to the raised question."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.question_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.question.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.remote_psc_spec": {
            "properties": {
                "https_port": {
                    "description": "The HTTPS port of the external PSC appliance.",
                    "format": "int64",
                    "type": "integer"
                },
                "psc_hostname": {
                    "description": "The IP address or DNS resolvable name of the remote PSC to which this configuring vCenter Server will be registered to.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification when ssl_verify field is set to true.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled. If {@name #sslVerify} is true and and {@name #sslThumbprint} is {@term unset}, the CA certificate will be used for verification. If {@name #sslVerify} is true and {@name #sslThumbprint} is set then the thumbprint will be used for verification. No verification will be performed if {@name #sslVerify} value is set to false.",
                    "type": "boolean"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                }
            },
            "required": [
                "psc_hostname",
                "sso_admin_password"
            ],
            "type": "object"
        },
        "vcenter.deployment.replicated_psc_spec": {
            "properties": {
                "https_port": {
                    "description": "The HTTPS port of the external PSC appliance.",
                    "format": "int64",
                    "type": "integer"
                },
                "partner_hostname": {
                    "description": "The IP address or DNS resolvable name of the partner PSC appliance.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled.",
                    "type": "boolean"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "sso_site_name": {
                    "description": "The SSO sitename that will be used in PSC replication.",
                    "type": "string"
                }
            },
            "required": [
                "partner_hostname",
                "sso_admin_password"
            ],
            "type": "object"
        },
        "vcenter.deployment.replicated_spec": {
            "properties": {
                "https_port": {
                    "description": "The HTTPS port of the external PSC appliance.",
                    "format": "int64",
                    "type": "integer"
                },
                "partner_hostname": {
                    "description": "The IP address or DNS resolvable name of the partner PSC appliance.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled.",
                    "type": "boolean"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                }
            },
            "required": [
                "partner_hostname",
                "sso_admin_password"
            ],
            "type": "object"
        },
        "vcenter.deployment.source_info": {
            "properties": {
                "active_directory_domain": {
                    "description": "The domain name of the Active Directory server to which the source vCenter Server is joined.",
                    "type": "string"
                },
                "data_migration_info": {
                    "$ref": "#/definitions/vcenter.deployment.data_migration_info",
                    "description": "Contains all the available migrate options, estimated export and import time and the space required to migrate the data."
                },
                "deployment_size": {
                    "$ref": "#/definitions/vcenter.deployment.appliance_size",
                    "description": "Deployment size of the source vCenter Server."
                },
                "deployment_type": {
                    "$ref": "#/definitions/vcenter.deployment.appliance_type",
                    "description": "Deployment type of the source vCenter Server."
                },
                "dns_servers": {
                    "description": "IP addresses of the DNS servers of the Active Directory server.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the source vCenter Server.",
                    "type": "string"
                },
                "sso_domain_name": {
                    "description": "The SSO domain name of the source vCenter Server.",
                    "type": "string"
                },
                "version": {
                    "description": "Source vCenter Server version.",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "version",
                "deployment_type",
                "deployment_size",
                "sso_domain_name",
                "active_directory_domain",
                "dns_servers"
            ],
            "type": "object"
        },
        "vcenter.deployment.standalone_psc_spec": {
            "properties": {
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "sso_domain_name": {
                    "description": "The SSO domain name to be used to configure this appliance.",
                    "type": "string"
                },
                "sso_site_name": {
                    "description": "The SSO site name used for this PSC.",
                    "type": "string"
                }
            },
            "required": [
                "sso_admin_password"
            ],
            "type": "object"
        },
        "vcenter.deployment.standalone_spec": {
            "properties": {
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "sso_domain_name": {
                    "description": "The SSO domain name to be used to configure this appliance.",
                    "type": "string"
                }
            },
            "required": [
                "sso_admin_password"
            ],
            "type": "object"
        },
        "vcenter.deployment.task": {
            "properties": {
                "cancelable": {
                    "description": "Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.",
                    "type": "boolean"
                },
                "description": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Description of the operation associated with the task."
                },
                "end_time": {
                    "description": "Time when the operation is completed.",
                    "format": "date-time",
                    "type": "string"
                },
                "error": {
                    "description": "Description of the error if the operation status is \"FAILED\".",
                    "type": "object"
                },
                "operation": {
                    "description": "Identifier of the operation associated with the task.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the current task.",
                    "type": "string"
                },
                "progress": {
                    "$ref": "#/definitions/cis.task.progress",
                    "description": "The progress info of this deployment task."
                },
                "result": {
                    "$ref": "#/definitions/vcenter.deployment.notifications",
                    "description": "Result of the task."
                },
                "service": {
                    "description": "Identifier of the service containing the operation.",
                    "type": "string"
                },
                "start_time": {
                    "description": "Time when the operation is started.",
                    "format": "date-time",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/cis.task.status",
                    "description": "Status of the operation associated with the task."
                },
                "target": {
                    "$ref": "#/definitions/vapi.std.dynamic_ID",
                    "description": "Identifier of the target created by the operation or an existing one the operation performed on."
                },
                "user": {
                    "description": "Name of the user who performed the operation.",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "service",
                "operation",
                "status",
                "cancelable"
            ],
            "type": "object"
        },
        "vcenter.deployment.upgrade.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.upgrade.psc_spec": {
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this Platform Services Controller upgrade.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ],
            "type": "object"
        },
        "vcenter.deployment.upgrade.source_appliance_spec": {
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the source appliance.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the source appliance.",
                    "format": "int64",
                    "type": "integer"
                },
                "root_password": {
                    "description": "The password of the root user on the source appliance.",
                    "format": "password",
                    "type": "string"
                },
                "ssh_thumbprint": {
                    "description": "MD5 thumbprint of the server SSH key will be used for verification.",
                    "type": "string"
                },
                "ssh_verify": {
                    "description": "Appliance SSH verification should be enabled or disabled. By default it is disabled and will not use any verification. If thumbprint is provided, thumbprint verification will be performed.",
                    "type": "boolean"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled for the source appliance validations. By default it is enabled and will use SSL certificate for verification. If thumbprint is provided, will use thumbprint for the verification.",
                    "type": "boolean"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "format": "password",
                    "type": "string"
                },
                "sso_admin_username": {
                    "description": "The SSO administrator account on the source appliance.",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "sso_admin_username",
                "sso_admin_password",
                "root_password"
            ],
            "type": "object"
        },
        "vcenter.deployment.upgrade.upgrade_spec": {
            "properties": {
                "auto_answer": {
                    "description": "Use the default option for any questions that may come up during appliance configuration.",
                    "type": "boolean"
                },
                "history": {
                    "$ref": "#/definitions/vcenter.deployment.history_migration_spec",
                    "description": "Determines how vCenter history will be migrated during the upgrade process. vCenter history consists of: <ul> <li>Statistics</li> <li>Events</li> <li>Tasks</li> </ul> By default only core data will be migrated. Use this spec to define which part of vCenter history data will be migrated and when."
                },
                "psc": {
                    "$ref": "#/definitions/vcenter.deployment.upgrade.psc_spec",
                    "description": "Information that are specific to this Platform Services Controller."
                },
                "source_appliance": {
                    "$ref": "#/definitions/vcenter.deployment.upgrade.source_appliance_spec",
                    "description": "Source appliance spec."
                },
                "source_location": {
                    "$ref": "#/definitions/vcenter.deployment.location_spec",
                    "description": "Source location spec."
                },
                "vcsa_embedded": {
                    "$ref": "#/definitions/vcenter.deployment.upgrade.vcsa_embedded_spec",
                    "description": "Information that are specific to this embedded vCenter Server."
                }
            },
            "required": [
                "source_appliance",
                "source_location"
            ],
            "type": "object"
        },
        "vcenter.deployment.upgrade.vcsa_embedded_spec": {
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this embedded vCenter Server upgrade.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ],
            "type": "object"
        },
        "vcenter.deployment.upgrade_check": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.upgrade.upgrade_spec",
                    "description": "UpgradeSpec parameters to run sanity check on."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment.upgrade_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.upgrade.upgrade_spec"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.deployment.upgrade_start": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.upgrade.upgrade_spec",
                    "description": "UpgradeSpec parameters to configure the appliance upgrade."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.deployment_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.folder.filter_spec": {
            "properties": {
                "datacenters": {
                    "description": "Datacenters that must contain the folder for the folder to match the filter.\nIf unset or empty, folder in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "folders": {
                    "description": "Identifiers of folders that can match the filter.\nIf unset or empty, folders with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "names": {
                    "description": "Names that folders must have to match the filter (see Folder.Summary.name).\nIf unset or empty, folders with any name match the filter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "parent_folders": {
                    "description": "Folders that must contain the folder for the folder to match the filter.\nIf unset or empty, folder in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "type": {
                    "$ref": "#/definitions/vcenter.folder.type",
                    "description": "Type that folders must have to match the filter (see Folder.Summary.type).\nIf unset, folders with any type match the filter."
                }
            },
            "type": "object"
        },
        "vcenter.folder.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.folder.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.folder.summary": {
            "properties": {
                "folder": {
                    "description": "Identifier of the folder.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the vCenter Server folder.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.folder.type",
                    "description": "Type (Type) of the vCenter Server folder."
                }
            },
            "required": [
                "folder",
                "name",
                "type"
            ],
            "type": "object"
        },
        "vcenter.folder.type": {
            "description": "The Folder.Type enumerated type defines the type of a vCenter Server folder. The type of a folder determines what what kinds of children can be contained in the folder.",
            "enum": [
                "DATACENTER",
                "DATASTORE",
                "HOST",
                "NETWORK",
                "VIRTUAL_MACHINE"
            ],
            "type": "string"
        },
        "vcenter.guest.IP_settings": {
            "properties": {
                "ipv4": {
                    "$ref": "#/definitions/vcenter.guest.ipv4",
                    "description": "Specification to configure IPv4 address, subnet mask and gateway info for this virtual network adapter.\nIf unset, no IPv4 addresses are set."
                },
                "ipv6": {
                    "$ref": "#/definitions/vcenter.guest.ipv6",
                    "description": "Specification to configure IPv6 address, subnet mask and gateway info for this virtual network adapter.\nIf unset, no IPv6 addresses are set."
                },
                "windows": {
                    "$ref": "#/definitions/vcenter.guest.windows_network_adapter_settings",
                    "description": "Windows settings to be configured for this specific virtual Network adapter. This is valid only for Windows guest operating systems.\nIf unset, no specific Windows settings are set."
                }
            },
            "type": "object"
        },
        "vcenter.guest.adapter_mapping": {
            "properties": {
                "adapter": {
                    "$ref": "#/definitions/vcenter.guest.IP_settings",
                    "description": "The IP settings for the associated virtual network adapter."
                },
                "mac_address": {
                    "description": "The MAC address of a network adapter being customized.\nIf unset, the customization process maps the the settings from the list of AdapterMappings.IPSettings in the CustomizationSpec.interfaces to the virtual machine's network adapters, in PCI slot order. The first virtual network adapter on the PCI bus is assigned interfaces[0].IPSettings, the second adapter is assigned interfaces[1].IPSettings, and so on.",
                    "type": "string"
                }
            },
            "required": [
                "adapter"
            ],
            "type": "object"
        },
        "vcenter.guest.configuration_spec": {
            "properties": {
                "linux_config": {
                    "$ref": "#/definitions/vcenter.guest.linux_configuration",
                    "description": "Guest customization specification for a linux guest operating system\nIf unset, ConfigurationSpec.windows-config must be set. Otherwise, an appropriate fault will be thrown."
                },
                "windows_config": {
                    "$ref": "#/definitions/vcenter.guest.windows_configuration",
                    "description": "Guest customization specification for a Windows guest operating system\nIf unset, ConfigurationSpec.linux-config must be set. Otherwise, an appropriate fault will be thrown."
                }
            },
            "type": "object"
        },
        "vcenter.guest.customization_spec": {
            "properties": {
                "configuration_spec": {
                    "$ref": "#/definitions/vcenter.guest.configuration_spec",
                    "description": "Settings to be applied to the guest during the customization."
                },
                "global_DNS_settings": {
                    "$ref": "#/definitions/vcenter.guest.global_DNS_settings",
                    "description": "Global DNS settings constitute the DNS settings that are not specific to a particular virtual network adapter."
                },
                "interfaces": {
                    "description": "IP settings that are specific to a particular virtual network adapter. The AdapterMapping structure maps a network adapter's MAC address to its IPSettings. May be empty if there are no network adapters, else should match number of network adapters configured for the VM.",
                    "items": {
                        "$ref": "#/definitions/vcenter.guest.adapter_mapping"
                    },
                    "type": "array"
                }
            },
            "required": [
                "configuration_spec",
                "global_DNS_settings",
                "interfaces"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs.create_spec": {
            "properties": {
                "description": {
                    "description": "Description of the specification.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the specification.",
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/vcenter.guest.customization_spec",
                    "description": "The specification object."
                }
            },
            "required": [
                "spec",
                "description",
                "name"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs.export_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs.filter_spec": {
            "properties": {
                "OS_type": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.os_type",
                    "description": "Guest operating system type that guest customization specifications must have to match the filter (see CustomizationSpecs.Summary.os-type).\nIf unset, guest customization specifications with any guest operating system type match the filter."
                },
                "names": {
                    "description": "Names that guest customization specifications must have to match the filter (see CustomizationSpecs.Summary.name).\nIf unset or empty, guest customization specifications with any name match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.guest.CustomizationSpec. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.guest.CustomizationSpec.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.guest.customization_specs.format": {
            "description": "The CustomizationSpecs.Format enumerated type specifies the formats the customization specification can be exported to.",
            "enum": [
                "JSON",
                "XML"
            ],
            "type": "string"
        },
        "vcenter.guest.customization_specs.import_specification_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.create_spec"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs.info": {
            "properties": {
                "last_modified": {
                    "description": "Time when the specification was last modified.",
                    "format": "date-time",
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.spec",
                    "description": "The Spec object including specification and metadata information."
                }
            },
            "required": [
                "last_modified",
                "spec"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.guest.customization_specs.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs.os_type": {
            "description": "The CustomizationSpecs.OsType enumerated type defines the types of guest operating systems for which guest customization is supported.",
            "enum": [
                "WINDOWS",
                "LINUX"
            ],
            "type": "string"
        },
        "vcenter.guest.customization_specs.spec": {
            "properties": {
                "description": {
                    "description": "Description of the specification.",
                    "type": "string"
                },
                "fingerprint": {
                    "description": "The fingerprint is a unique identifier for a given version of the configuration. Each change to the configuration will update this value. A client cannot change this value. If specified when updating a specification, the changes will only be applied if the current fingerprint matches the specified fingerprint. This field can be used to guard against updates that has happened between the specification content was read and until it is applied.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the specification.",
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/vcenter.guest.customization_spec",
                    "description": "The specification object."
                }
            },
            "required": [
                "fingerprint",
                "spec",
                "description",
                "name"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs.summary": {
            "properties": {
                "OS_type": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.os_type",
                    "description": "Guest operating system type for which that this guest customization specification applies."
                },
                "description": {
                    "description": "Description of the guest customization specification.",
                    "type": "string"
                },
                "last_modified": {
                    "description": "Date and tme when this guest customization specification was last modified.",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the guest customization specification.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.guest.CustomizationSpec. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.guest.CustomizationSpec.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "description",
                "OS_type",
                "last_modified"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.create_spec",
                    "description": "The information i.e. name, description and the settings i.e hostname, ip address etc for the new customization specification that needs to be created."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs_export": {
            "properties": {
                "format": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.format",
                    "description": "The format in which the customization specification has to be returned."
                }
            },
            "required": [
                "format"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs_import_specification": {
            "properties": {
                "customization_spec": {
                    "description": "content to be converted to the spec.",
                    "type": "string"
                }
            },
            "required": [
                "customization_spec"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.guest.customization_specs_set": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.spec",
                    "description": "The new specification that will overwrite the existing specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.guest.domain": {
            "properties": {
                "domain": {
                    "description": "The domain to which the virtual machine should be joined.\nThis field is optional and it is only relevant when the value of Domain.type is DOMAIN.",
                    "type": "string"
                },
                "domain_password": {
                    "description": "The domain user password that has permission to join the Domain.domain-username after customization.\nThis field is optional and it is only relevant when the value of Domain.type is DOMAIN.",
                    "format": "password",
                    "type": "string"
                },
                "domain_username": {
                    "description": "The domain user that has permission to join the domain after virtual machine is joined.\nThis field is optional and it is only relevant when the value of Domain.type is DOMAIN.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.guest.domain.type",
                    "description": "The type of network to join after the customization."
                },
                "workgroup": {
                    "description": "The workgroup that the virtual machine should join.\nThis field is optional and it is only relevant when the value of Domain.type is WORKGROUP.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.guest.domain.type": {
            "description": "The Domain.Type enumerated type defines the types of network the virtual machine should join to after the customization is completed.",
            "enum": [
                "WORKGROUP",
                "DOMAIN"
            ],
            "type": "string"
        },
        "vcenter.guest.global_DNS_settings": {
            "properties": {
                "dns_servers": {
                    "description": "List of DNS servers, for a virtual network adapter with a static IP address. If this list is empty, then the guest operating system is expected to use a DHCP server to get its DNS server settings. These settings configure the virtual machine to use the specified DNS servers. These DNS server settings are listed in the order of preference.\nIf unset, no DNS servers are set.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "dns_suffix_list": {
                    "description": "List of name resolution suffixes for the virtual network adapter. This list applies to both Windows and Linux guest customization. For Linux, this setting is global, whereas in Windows, this setting is listed on a per-adapter basis.\nIf unset, no DNS suffixes are set.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "vcenter.guest.gui_unattended": {
            "properties": {
                "auto_logon": {
                    "description": "Flag to determine whether or not the machine automatically logs on as Administrator. See the GuiUnattended.password property. If GuiUnattended.auto-logon flag is set, then GuiUnattended.password must not be unset or the guest customization will fail.",
                    "type": "boolean"
                },
                "auto_logon_count": {
                    "description": "If the GuiUnattended.auto-logon flag is set, then this property specifies the number of times the machine should automatically log on as Administrator. Generally it should be 1, but if the setup requires a number of reboots, you may want to increase it. This number may be determined by the list of commands.",
                    "format": "int64",
                    "type": "integer"
                },
                "password": {
                    "description": "The new administrator password for the machine. To specify that the password should be set to blank (that is, no password), leave it unset.\nIf unset, blank password will be used.",
                    "format": "password",
                    "type": "string"
                },
                "time_zone": {
                    "description": "The time zone index for the virtual machine. Numbers correspond to time zones at https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "auto_logon",
                "auto_logon_count",
                "time_zone"
            ],
            "type": "object"
        },
        "vcenter.guest.hostname_generator": {
            "properties": {
                "fixed_name": {
                    "description": "The virtual machine name specified by the client.\nThis field is optional and it is only relevant when the value of HostnameGenerator.type is FIXED.",
                    "type": "string"
                },
                "prefix": {
                    "description": "Base prefix, to which a unique number is appended.\nThis field is optional and it is only relevant when the value of HostnameGenerator.type is PREFIX.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.guest.hostname_generator.type",
                    "description": "The type of the Name Generator"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.guest.hostname_generator.type": {
            "description": "The HostnameGenerator.Type enumerated type specifies different types of Name Generators.",
            "enum": [
                "FIXED",
                "PREFIX",
                "VIRTUAL_MACHINE",
                "USER_INPUT_REQUIRED"
            ],
            "type": "string"
        },
        "vcenter.guest.ipv4": {
            "properties": {
                "gateways": {
                    "description": "Gateways for the IPv4 address.\nIf unset, no gateways are set.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ip_address": {
                    "description": "The static IPv4 address\nThis field is optional and it is only relevant when the value of Ipv4.type is STATIC.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The IPv4 CIDR prefix, for example, 24. See http://www.oav.net/mirrors/cidr.html for netmask-to-prefix conversion.\nThis field is optional and it is only relevant when the value of Ipv4.type is STATIC.",
                    "format": "int64",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.guest.ipv4.type",
                    "description": "The type of the IPv4 configuration."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.guest.ipv4.type": {
            "description": "The Ipv4.Type enumerated type specifies different types of the IPv4 configuration.",
            "enum": [
                "DHCP",
                "STATIC",
                "USER_INPUT_REQUIRED"
            ],
            "type": "string"
        },
        "vcenter.guest.ipv6": {
            "properties": {
                "gateways": {
                    "description": "gateways for the IPv6 address.\nIf unset, no gateways are set.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ipv6": {
                    "description": "IPv6 address\nThis field is optional and it is only relevant when the value of Ipv6.type is STATIC.",
                    "items": {
                        "$ref": "#/definitions/vcenter.guest.ipv6_address"
                    },
                    "type": "array"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.guest.ipv6.type",
                    "description": "The IPv6 configuration type"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.guest.ipv6.type": {
            "description": "The Ipv6.Type enumerated type specifies different types of the IPv6 configuration.",
            "enum": [
                "DHCP",
                "STATIC",
                "USER_INPUT_REQUIRED"
            ],
            "type": "string"
        },
        "vcenter.guest.ipv6_address": {
            "properties": {
                "ip_address": {
                    "description": "Static IPv6 Address.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix for the interface.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "ip_address",
                "prefix"
            ],
            "type": "object"
        },
        "vcenter.guest.linux_configuration": {
            "properties": {
                "domain": {
                    "description": "The fully qualified domain name.",
                    "type": "string"
                },
                "hostname": {
                    "$ref": "#/definitions/vcenter.guest.hostname_generator",
                    "description": "The network host name of the Linux virtual machine."
                },
                "script_text": {
                    "description": "The script to run before and after Linux guest customization.\n The max size of the script is 1500 bytes. As long as the script (shell, perl, python...) has the right \"#!\" in the header, it is supported. The caller should not assume any environment variables when the script is run. \n The script is invoked by the customization engine using the command line: 1) with argument \"precustomization\" before customization, 2) with argument \"postcustomization\" after customization. The script should parse this argument and implement pre-customization or post-customization task code details in the corresponding block. \n\n A Linux shell script example: \n\n  #!/bin/sh\n if [ x$1 == x\"precustomization\" ]; then\n echo \"Do Precustomization tasks\"\n #code for pre-customization actions...\n elif [ x$1 == x\"postcustomization\" ]; then\n echo \"Do Postcustomization tasks\"\n #code for post-customization actions...\n fi\n \n\nIf unset, no script will be executed.",
                    "type": "string"
                },
                "time_zone": {
                    "description": "The case-sensitive time zone, such as Europe/Sofia. Valid time zone values are based on the tz (time zone) database used by Linux. The values are strings (string) in the form \"Area/Location,\" in which Area is a continent or ocean name, and Location is the city, island, or other regional designation. \n See the https://kb.vmware.com/kb/2145518 for a list of supported time zones for different versions in Linux.\n\nIf unset, time zone is not modified inside guest operating system.",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "domain"
            ],
            "type": "object"
        },
        "vcenter.guest.user_data": {
            "properties": {
                "computer_name": {
                    "$ref": "#/definitions/vcenter.guest.hostname_generator",
                    "description": "The computer name of the (Windows) virtual machine. A computer name may contain letters (A-Z), numbers(0-9) and hyphens (-) but no spaces or periods (.). The name may not consist entirely of digits. A computer name is restricted to 15 characters in length. If the computer name is longer than 15 characters, it will be truncated to 15 characters. Check HostnameGenerator for various options."
                },
                "full_name": {
                    "description": "Full name of the end user. Note that this is not the username but full name specified in \"Firstname Lastname\" format.",
                    "type": "string"
                },
                "organization": {
                    "description": "Name of the organization that owns the computer.",
                    "type": "string"
                },
                "product_key": {
                    "description": "The product Key to use for activating Windows guest operating system.",
                    "type": "string"
                }
            },
            "required": [
                "computer_name",
                "full_name",
                "organization",
                "product_key"
            ],
            "type": "object"
        },
        "vcenter.guest.windows_configuration": {
            "properties": {
                "reboot": {
                    "$ref": "#/definitions/vcenter.guest.windows_configuration.reboot_option",
                    "description": "A value specifying the action that should be taken after customization.\nIf unset, the REBOOT option will be chosen."
                },
                "sysprep": {
                    "$ref": "#/definitions/vcenter.guest.windows_sysprep",
                    "description": "Customization settings like user details, administrator details, etc for the windows guest operating system. Exactly one of WindowsConfiguration.sysprep or WindowsConfiguration.sysprep-xml must be specified.\nIf unset, sysprep settings will not be applied to the windows guest operating system."
                },
                "sysprep_xml": {
                    "description": "All settings specified in a XML format. This is the content of a typical answer.xml file that is used by System administrators during the Windows image customization. Check https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs Exactly one of WindowsConfiguration.sysprep or WindowsConfiguration.sysprep-xml must be specified.\nIf unset, sysprep settings will not be applied to the windows guest operating system.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.guest.windows_configuration.reboot_option": {
            "description": "The WindowsConfiguration.RebootOption enumerated type specifies what should be done to the guest after the customization.",
            "enum": [
                "REBOOT",
                "NO_REBOOT",
                "SHUTDOWN"
            ],
            "type": "string"
        },
        "vcenter.guest.windows_network_adapter_settings": {
            "properties": {
                "dns_domain": {
                    "description": "A DNS domain suffix such as vmware.com.\nIf unset, no DNS domain is set.",
                    "type": "string"
                },
                "dns_servers": {
                    "description": "A list of server IP addresses to use for DNS lookup in a Windows guest operating system. \n These servers should be specified in the order of preference. If this list is not empty, and if a DHCP IP address is used, then these settings override the DHCP settings.\n\nIf unset, no DNS servers are set.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "net_BIOS_mode": {
                    "$ref": "#/definitions/vcenter.guest.windows_network_adapter_settings.net_BIOS_mode",
                    "description": "NetBIOS setting for Windows.\nIf unset, existing NetBIOS mode will be retained."
                },
                "wins_servers": {
                    "description": "List of WINS Servers to set for the Windows guest operating system. A Maximum of two IP addresses can be specified in this list. The first IP address will be set as the primary WINS server. The second IP address will be set as the secondary WINS server.\nIf unset, no WINS Servers are set.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "vcenter.guest.windows_network_adapter_settings.net_BIOS_mode": {
            "description": "The WindowsNetworkAdapterSettings.NetBIOSMode enumerated type specifies different NetBIOS settings for Windows guest operating systems.",
            "enum": [
                "USE_DHCP",
                "ENABLE",
                "DISABLE"
            ],
            "type": "string"
        },
        "vcenter.guest.windows_sysprep": {
            "properties": {
                "domain": {
                    "$ref": "#/definitions/vcenter.guest.domain",
                    "description": "Information needed to join a workgroup or domain.\nIf unset, the guest will not be joined to any workgroup or a domain."
                },
                "gui_run_once_commands": {
                    "description": "A list of commands to run at first user logon, after customizing the guest. These commands are directly mapped to the GuiRunOnce key in the sysprep.xml answer file. These commands are transferred into the sysprep.xml file that VirtualCenter stores on the target virtual disk. For more information about performing unattended installation, check https://technet.microsoft.com/en-us/library/cc771830(v=ws.10).aspx The commands listed here ar executed when a user logs on the first time after customization completes. The logon may be driven by GuiUnattended.auto-logon setting. These commands are directly mapped to the GuiRunOnce key in the\nIf unset, no commands are run.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "gui_unattended": {
                    "$ref": "#/definitions/vcenter.guest.gui_unattended",
                    "description": "Information related to unattended installation."
                },
                "user_data": {
                    "$ref": "#/definitions/vcenter.guest.user_data",
                    "description": "Personal data pertaining to the owner of the virtual machine."
                }
            },
            "required": [
                "user_data",
                "gui_unattended"
            ],
            "type": "object"
        },
        "vcenter.host.connection_state": {
            "enum": [
                "CONNECTED",
                "DISCONNECTED",
                "NOT_RESPONDING"
            ],
            "type": "string"
        },
        "vcenter.host.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.host.create_spec": {
            "properties": {
                "folder": {
                    "description": "Host and cluster folder in which the new standalone host should be created.\nThis field is currently required. In the future, if this field is unset, the system will attempt to choose a suitable folder for the host; if a folder cannot be chosen, the host creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.",
                    "type": "string"
                },
                "force_add": {
                    "description": "Whether host should be added to the vCenter Server even if it is being managed by another vCenter Server. The original vCenterServer loses connection to the host.\nIf unset, forceAdd is default to false.",
                    "type": "boolean"
                },
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the host.",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the administrator account on the host.",
                    "format": "password",
                    "type": "string"
                },
                "port": {
                    "description": "The port of the host.\nIf unset, port 443 will be used.",
                    "format": "int64",
                    "type": "integer"
                },
                "thumbprint": {
                    "description": "The thumbprint of the SSL certificate, which the host is expected to have. The thumbprint is always computed using the SHA1 hash and is the string representation of that hash in the format: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx where, 'x' represents a hexadecimal digit.\nThis field is optional and it is only relevant when the value of Host.CreateSpec.thumbprint-verification is THUMBPRINT.",
                    "type": "string"
                },
                "thumbprint_verification": {
                    "$ref": "#/definitions/vcenter.host.create_spec.thumbprint_verification",
                    "description": "Type of host's SSL certificate verification to be done."
                },
                "user_name": {
                    "description": "The administrator account on the host.",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "user_name",
                "password",
                "thumbprint_verification"
            ],
            "type": "object"
        },
        "vcenter.host.create_spec.thumbprint_verification": {
            "description": "The Host.CreateSpec.ThumbprintVerification enumerated type defines the thumbprint verification schemes for a host's SSL certificate.",
            "enum": [
                "NONE",
                "THUMBPRINT"
            ],
            "type": "string"
        },
        "vcenter.host.filter_spec": {
            "properties": {
                "clusters": {
                    "description": "Clusters that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any cluster and hosts that are not in a cluster match the filter. If this field is not empty and Host.FilterSpec.standalone is true, no hosts will match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "connection_states": {
                    "description": "Connection states that a host must be in to match the filter (see Host.Summary.connection-state.\nIf unset or empty, hosts in any connection state match the filter.",
                    "items": {
                        "$ref": "#/definitions/vcenter.host.connection_state"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "datacenters": {
                    "description": "Datacenters that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "folders": {
                    "description": "Folders that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "hosts": {
                    "description": "Identifiers of hosts that can match the filter.\nIf unset or empty, hosts with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "names": {
                    "description": "Names that hosts must have to match the filter (see Host.Summary.name).\nIf unset or empty, hosts with any name match the filter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "standalone": {
                    "description": "If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter.\nIf unset Hosts can match filter independent of whether they are part of a cluster or not. If this field is true and Host.FilterSpec.clusters os not empty, no hosts will match the filter.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.host.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.host.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.host.power_state": {
            "description": "The Host.PowerState enumerated type defines the power states of a host.",
            "enum": [
                "POWERED_ON",
                "POWERED_OFF",
                "STANDBY"
            ],
            "type": "string"
        },
        "vcenter.host.summary": {
            "properties": {
                "connection_state": {
                    "$ref": "#/definitions/vcenter.host.connection_state",
                    "description": "Connection status of the host"
                },
                "host": {
                    "description": "Identifier of the host.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the host.",
                    "type": "string"
                },
                "power_state": {
                    "$ref": "#/definitions/vcenter.host.power_state",
                    "description": "Power state of the host\nThis field is optional and it is only relevant when the value of Host.Summary.connection-state is CONNECTED."
                }
            },
            "required": [
                "host",
                "name",
                "connection_state"
            ],
            "type": "object"
        },
        "vcenter.host_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.host.create_spec",
                    "description": "Specification for the new host to be created."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.hvc.links.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.hvc.links.create_spec": {
            "properties": {
                "admin_groups": {
                    "description": "List of groups to be added to enable administrator access to. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "domain_name": {
                    "description": "The domain to which the PSC belongs. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "password": {
                    "description": "The administrator password of the PSC. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "format": "password",
                    "type": "string"
                },
                "port": {
                    "description": "The HTTPS port of the PSC to be linked. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "psc_hostname": {
                    "description": "The PSC hostname for the domain to be linked. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "The ssl thumbprint of the server. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "username": {
                    "description": "The administrator username of the PSC. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                }
            },
            "required": [
                "psc_hostname",
                "domain_name",
                "username",
                "password"
            ],
            "type": "object"
        },
        "vcenter.hvc.links.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.hvc.links.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.hvc.links.summary": {
            "properties": {
                "display_name": {
                    "description": "The display name is set to the domain name which was set during create. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "link": {
                    "description": "Unique identifier for the link. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                }
            },
            "required": [
                "link",
                "display_name"
            ],
            "type": "object"
        },
        "vcenter.hvc.links.sync.providers.info": {
            "properties": {
                "current_session_info": {
                    "$ref": "#/definitions/vcenter.hvc.links.sync.providers.session_info",
                    "description": "Returns information on the forced sync for the provider. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments."
                },
                "last_sync_time": {
                    "description": "Last sync time for the provider. This indicates the last time that either a background sync or a force sync was started for the provider Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "format": "date-time",
                    "type": "string"
                },
                "polling_interval_in_seconds": {
                    "description": "Sync Polling interval between local and remote replicas for the provider Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "format": "int64",
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/vcenter.hvc.links.sync.providers.status",
                    "description": "Last Sync status for the provider. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments."
                },
                "status_message": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Localizable messages associated with sync status Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments."
                }
            },
            "required": [
                "status",
                "polling_interval_in_seconds"
            ],
            "type": "object"
        },
        "vcenter.hvc.links.sync.providers.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.hvc.links.sync.providers.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.hvc.links.sync.providers.session_info": {
            "properties": {
                "completed_work": {
                    "description": "Completed work for the session. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "format": "int64",
                    "type": "integer"
                },
                "completion_time": {
                    "description": "Time at which forced sync session was completed. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "format": "date-time",
                    "type": "string"
                },
                "exception": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Exception  message if there is a sync failure on forced sync. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments."
                },
                "stage": {
                    "$ref": "#/definitions/vcenter.hvc.links.sync.providers.session_info.stage",
                    "description": "Sync stage for the session. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments."
                },
                "start_time": {
                    "description": "Time at which force sync was initiated. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "format": "date-time",
                    "type": "string"
                },
                "total_work": {
                    "description": "Total work for the session. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "stage",
                "completed_work",
                "total_work",
                "start_time"
            ],
            "type": "object"
        },
        "vcenter.hvc.links.sync.providers.session_info.stage": {
            "description": "The {@name Stage} {@term structure} defines the different stages of Sync. Warning: This enumeration is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
            "enum": [
                "CHANGE_DETECTION",
                "CHANGE_ENUMERATION",
                "CHANGE_APPLICATION",
                "COMPLETED",
                "FAILED",
                "WAITING"
            ],
            "type": "string"
        },
        "vcenter.hvc.links.sync.providers.status": {
            "description": "The {@name Status} {@term enumerated type} defines valid sync status. Warning: This enumeration is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
            "enum": [
                "SUCCEEDED",
                "FAILED",
                "NO_SYNC_FOUND"
            ],
            "type": "string"
        },
        "vcenter.hvc.links.sync.providers.summary": {
            "properties": {
                "provider": {
                    "description": "Sync provider id Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                }
            },
            "required": [
                "provider"
            ],
            "type": "object"
        },
        "vcenter.hvc.links.sync.providers_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.hvc.links.sync.providers.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.hvc.links_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.hvc.links.create_spec",
                    "description": "Specification for the new link to be created."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.hvc.management.administrators_add": {
            "properties": {
                "group_name": {
                    "description": "Name of the new group to be added. Ex - xyz@abc.com where xyz is the group name and abc.com is the domain name",
                    "type": "string"
                }
            },
            "required": [
                "group_name"
            ],
            "type": "object"
        },
        "vcenter.hvc.management.administrators_remove": {
            "properties": {
                "group_name": {
                    "description": "Name of the group to be removed. Ex - xyz@abc.com where xyz is the group name and abc.com is the domain name",
                    "type": "string"
                }
            },
            "required": [
                "group_name"
            ],
            "type": "object"
        },
        "vcenter.hvc.management.administrators_resp": {
            "properties": {
                "value": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.hvc.management.administrators_set": {
            "properties": {
                "group_names": {
                    "description": "Names the groups to be in the CloudAdminGroup Ex - xyz@abc.com where xyz is the group name and abc.com is the domain name",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "group_names"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.active_directory_over_ldap": {
            "properties": {
                "cert_chain": {
                    "$ref": "#/definitions/vcenter.certificate_management.x509_cert_chain",
                    "description": "SSL certificate chain in base64 encoding."
                },
                "groups_base_dn": {
                    "description": "Base distinguished name for groups",
                    "type": "string"
                },
                "password": {
                    "description": "Password to connect to the active directory server.",
                    "format": "password",
                    "type": "string"
                },
                "server_endpoints": {
                    "description": "Active directory server endpoints. At least one active directory server endpoint must be set.",
                    "items": {
                        "format": "uri",
                        "type": "string"
                    },
                    "type": "array"
                },
                "user_name": {
                    "description": "User name to connect to the active directory server.",
                    "type": "string"
                },
                "users_base_dn": {
                    "description": "Base distinguished name for users",
                    "type": "string"
                }
            },
            "required": [
                "user_name",
                "password",
                "users_base_dn",
                "groups_base_dn",
                "server_endpoints"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.config_type": {
            "description": "The {@name ConfigType} {@term structure} contains the possible types of vCenter Server identity providers.",
            "enum": [
                "Oauth2",
                "Oidc"
            ],
            "type": "string"
        },
        "vcenter.identity.providers.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.create_spec": {
            "properties": {
                "active_directory_over_ldap": {
                    "$ref": "#/definitions/vcenter.identity.providers.active_directory_over_ldap",
                    "description": "Identity management configuration. If the protocol is LDAP, the configuration must be set, else InvalidArgument is thrown."
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "config_tag": {
                    "$ref": "#/definitions/vcenter.identity.providers.config_type",
                    "description": "The config type of the identity provider"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "groups_claim": {
                    "description": "Specifies which claim provides the group membership for the token subject. These groups will be used for mapping to local groups per the claim map.",
                    "type": "string"
                },
                "idm_endpoints": {
                    "description": "Identity management endpoints. When specified, at least one endpoint must be provided.",
                    "items": {
                        "format": "uri",
                        "type": "string"
                    },
                    "type": "array"
                },
                "idm_protocol": {
                    "$ref": "#/definitions/vcenter.identity.providers.idm_protocol",
                    "description": "Communication protocol to the identity management endpoints."
                },
                "is_default": {
                    "description": "Specifies whether the provider is the default provider. Setting {@name CreateSpec#isDefault} of current provider to True makes all other providers non-default. If no other providers created in this vCenter Server before, this parameter will be disregarded, and the provider will always be set to the default.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The user friendly name for the provider. This name can be used for human-readable identification purposes, but it does not have to be unique, as the system will use internal UUIDs to differentiate providers.",
                    "type": "string"
                },
                "oauth2": {
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_create_spec",
                    "description": "OAuth2 CreateSpec"
                },
                "oidc": {
                    "$ref": "#/definitions/vcenter.identity.providers.oidc_create_spec",
                    "description": "OIDC CreateSpec"
                },
                "org_ids": {
                    "description": "The set of orgIds as part of SDDC creation which provides the basis for tenancy",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "upn_claim": {
                    "description": "Specifies which claim provides the user principal name (UPN) for the user.",
                    "type": "string"
                }
            },
            "required": [
                "config_tag"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.idm_protocol": {
            "description": "The {@name IdmProtocol} {@term structure} contains the possible types of communication protocols to the identity management endpoints.",
            "enum": [
                "REST",
                "SCIM",
                "LDAP"
            ],
            "type": "string"
        },
        "vcenter.identity.providers.info": {
            "properties": {
                "active_directory_over_ldap": {
                    "$ref": "#/definitions/vcenter.identity.providers.active_directory_over_ldap",
                    "description": "Identity management configuration."
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "config_tag": {
                    "$ref": "#/definitions/vcenter.identity.providers.config_type",
                    "description": "The config type of the identity provider"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains. If domainNames is an empty set, domain validation behavior at login with this identity provider will be as follows: the user's domain will be parsed from the User Principal Name (UPN) value that is found in the tokens returned by the identity provider. This domain will then be implicitly trusted and used to filter any groups that are also provided in the tokens.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "groups_claim": {
                    "description": "Specifies which claim provides the group membership for the token subject. If empty, the default behavior for CSP is used. In this case, the groups for the subject will be comprised of the groups in 'group_names' and 'group_ids' claims.",
                    "type": "string"
                },
                "idm_endpoints": {
                    "description": "Identity management endpoints.",
                    "items": {
                        "format": "uri",
                        "type": "string"
                    },
                    "type": "array"
                },
                "idm_protocol": {
                    "$ref": "#/definitions/vcenter.identity.providers.idm_protocol",
                    "description": "Communication protocol to the identity management endpoints."
                },
                "is_default": {
                    "description": "Specifies whether the provider is the default provider.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The user friendly name for the provider",
                    "type": "string"
                },
                "oauth2": {
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_info",
                    "description": "OAuth2 Info"
                },
                "oidc": {
                    "$ref": "#/definitions/vcenter.identity.providers.oidc_info",
                    "description": "OIDC Info"
                },
                "org_ids": {
                    "description": "The set of orgIds as part of SDDC creation which provides the basis for tenancy",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "upn_claim": {
                    "description": "Specifies which claim provides the user principal name (UPN) for the user.",
                    "type": "string"
                }
            },
            "required": [
                "org_ids",
                "config_tag",
                "is_default"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.identity.providers.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.oauth2_authentication_method": {
            "description": "The {@name Oauth2AuthenticationMethod} {@term structure} contains the possible types of OAuth2 authentication methods.",
            "enum": [
                "CLIENT_SECRET_BASIC",
                "CLIENT_SECRET_POST",
                "CLIENT_SECRET_JWT",
                "PRIVATE_KEY_JWT"
            ],
            "type": "string"
        },
        "vcenter.identity.providers.oauth2_create_spec": {
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "authentication_method": {
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_authentication_method",
                    "description": "Authentication method used by the provider"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token.",
                    "type": "string"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "format": "uri",
                    "type": "string"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "public_key_uri",
                "client_id",
                "client_secret",
                "claim_map",
                "issuer",
                "authentication_method"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.oauth2_info": {
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "authentication_method": {
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_authentication_method",
                    "description": "Authentication method used by the provider"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                    "type": "string"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "format": "uri",
                    "type": "string"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "public_key_uri",
                "client_id",
                "client_secret",
                "claim_map",
                "issuer",
                "authentication_method",
                "auth_query_params"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.oauth2_summary": {
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "authentication_header": {
                    "description": "The authentication data used as part of request header to acquire or refresh an OAuth2 token. The data format depends on the authentication method used. Example of basic authentication format: Authorization: Basic [base64Encode(clientId + \":\" + secret)]",
                    "type": "string"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "client_id",
                "authentication_header",
                "auth_query_params"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.oauth2_update_spec": {
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "key/value pairs that are to be appended to the authEndpoint request. How to append to authEndpoint request: If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details: If the value contains only one string, then the key is added with \"k=v\". If the value is an empty list, then the key is added without a \"=v\". If the value contains multiple strings, then the key is repeated in the query-string for each string in the value. If the map is empty, deletes all params.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "authentication_method": {
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_authentication_method",
                    "description": "Authentication method used by the provider"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "Shared secret between identity provider and client",
                    "type": "string"
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                    "type": "string"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "format": "uri",
                    "type": "string"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider.",
                    "format": "uri",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.identity.providers.oidc_create_spec": {
            "properties": {
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "discovery_endpoint",
                "client_id",
                "client_secret",
                "claim_map"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.oidc_info": {
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "authentication_method": {
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_authentication_method",
                    "description": "Authentication method used by the provider"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "format": "uri",
                    "type": "string"
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                    "type": "string"
                },
                "logout_endpoint": {
                    "description": "The endpoint to use for terminating the user's session at the identity provider. This value is automatically derived from the metadata information provided by the OIDC discovery endpoint.",
                    "format": "uri",
                    "type": "string"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "format": "uri",
                    "type": "string"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "discovery_endpoint",
                "auth_endpoint",
                "token_endpoint",
                "public_key_uri",
                "client_id",
                "client_secret",
                "claim_map",
                "issuer",
                "authentication_method",
                "auth_query_params"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.oidc_summary": {
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "authentication_header": {
                    "description": "The authentication data used as part of request header to acquire or refresh an OAuth2 token. The data format depends on the authentication method used. Example of basic authentication format: Authorization: Basic [base64Encode(clientId + \":\" + secret)]",
                    "type": "string"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "format": "uri",
                    "type": "string"
                },
                "logout_endpoint": {
                    "description": "The endpoint to use for terminating the user's session at the identity provider. This value is automatically derived from the metadata information provided by the OIDC discovery endpoint.",
                    "format": "uri",
                    "type": "string"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "client_id",
                "authentication_header",
                "auth_query_params"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.oidc_update_spec": {
            "properties": {
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "format": "uri",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.identity.providers.summary": {
            "properties": {
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "config_tag": {
                    "$ref": "#/definitions/vcenter.identity.providers.config_type",
                    "description": "The config type of the identity provider"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains. If domainNames is an empty set, domain validation behavior at login with this identity provider will be as follows: the user's domain will be parsed from the User Principal Name (UPN) value that is found in the tokens returned by the identity provider. This domain will then be implicitly trusted and used to filter any groups that are also provided in the tokens.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "is_default": {
                    "description": "Specifies whether the provider is the default provider.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The user friendly name for the provider",
                    "type": "string"
                },
                "oauth2": {
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_summary",
                    "description": "OAuth2 Summary"
                },
                "oidc": {
                    "$ref": "#/definitions/vcenter.identity.providers.oidc_summary",
                    "description": "OIDC Summary"
                },
                "provider": {
                    "description": "The identifier of the provider",
                    "type": "string"
                }
            },
            "required": [
                "provider",
                "config_tag",
                "is_default"
            ],
            "type": "object"
        },
        "vcenter.identity.providers.update_spec": {
            "properties": {
                "active_directory_over_ldap": {
                    "$ref": "#/definitions/vcenter.identity.providers.active_directory_over_ldap",
                    "description": "Identity management configuration. If the protocol is LDAP, the configuration must be set, else InvalidArgument is thrown"
                },
                "auth_query_params": {
                    "description": "key/value pairs that are to be appended to the authEndpoint request. How to append to authEndpoint request: If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details: If the value contains only one string, then the key is added with \"k=v\". If the value is an empty list, then the key is added without a \"=v\". If the value contains multiple strings, then the key is repeated in the query-string for each string in the value. If the map is empty, deletes all params.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "config_tag": {
                    "$ref": "#/definitions/vcenter.identity.providers.config_type",
                    "description": "The config type of the identity provider"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "groups_claim": {
                    "description": "Specifies which claim provides the group membership for the token subject.",
                    "type": "string"
                },
                "idm_endpoints": {
                    "description": "Identity management endpoints. When specified, at least one endpoint must be provided.",
                    "items": {
                        "format": "uri",
                        "type": "string"
                    },
                    "type": "array"
                },
                "idm_protocol": {
                    "$ref": "#/definitions/vcenter.identity.providers.idm_protocol",
                    "description": "The protocol to communicate to the identity management endpoints"
                },
                "make_default": {
                    "description": "Specifies whether to make this the default provider. If {@name UpdateSpec#makeDefault} is set to true, this provider will be flagged as the default provider and any other providers that had previously been flagged as the default will be made non-default. If {@name UpdateSpec#makeDefault} is set to false, this provider's default flag will not be modified.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The user friendly name for the provider. This name can be used for human-readable identification purposes, but it does not have to be unique, as the system will use internal UUIDs to differentiate providers.",
                    "type": "string"
                },
                "oauth2": {
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_update_spec",
                    "description": "OAuth2 UpdateSpec"
                },
                "oidc": {
                    "$ref": "#/definitions/vcenter.identity.providers.oidc_update_spec",
                    "description": "OIDC UpdateSpec"
                },
                "org_ids": {
                    "description": "The set orgIds as part of SDDC creation which provides the basis for tenancy",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "reset_groups_claim": {
                    "description": "Flag indicating whether any existing groups claim value should be removed. If this field is set to {@code true}, the existing groups claim value is removed which defaults to backwards compatibility with CSP. In this case, the groups for the subject will be comprised of the groups in 'group_names' and 'group_ids' claims. If this field is set to {@code false}, the existing groups claim will be changed to the value specified in {@link #groupsClaim}, if any.",
                    "type": "boolean"
                },
                "reset_upn_claim": {
                    "description": "Flag indicating whether the user principal name (UPN) claim should be set back to its default value. If this field is set to {@code true}, the user principal name (UPN) claim will be set to 'acct', which is used for backwards compatibility with CSP. If this field is set to {@code false}, the existing user principal name (UPN) claim will be changed to the value specified in {@link #upnClaim}, if any.",
                    "type": "boolean"
                },
                "upn_claim": {
                    "description": "Specifies which claim provides the user principal name (UPN) for the subject of the token.",
                    "type": "string"
                }
            },
            "required": [
                "config_tag"
            ],
            "type": "object"
        },
        "vcenter.identity.providers_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.identity.providers.create_spec",
                    "description": "the CreateSpec contains the information used to create the provider"
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.identity.providers_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.identity.providers.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.identity.providers_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.identity.providers.update_spec",
                    "description": "the UpdateSpec contains the information used to update the provider"
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.network.filter_spec": {
            "properties": {
                "datacenters": {
                    "description": "Datacenters that must contain the network for the network to match the filter.\nIf unset or empty, networks in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "folders": {
                    "description": "Folders that must contain the network for the network to match the filter.\nIf unset or empty, networks in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "names": {
                    "description": "Names that networks must have to match the filter (see Network.Summary.name).\nIf unset or empty, networks with any name match the filter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "networks": {
                    "description": "Identifiers of networks that can match the filter.\nIf unset or empty, networks with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Network. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Network.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "types": {
                    "description": "Types that networks must have to match the filter (see Network.Summary.type).\nIf unset, networks with any type match the filter.",
                    "items": {
                        "$ref": "#/definitions/vcenter.network.type"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.network.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.network.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.network.summary": {
            "properties": {
                "name": {
                    "description": "Name of the network.",
                    "type": "string"
                },
                "network": {
                    "description": "Identifier of the network.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.network.type",
                    "description": "Type (Type) of the vCenter Server network."
                }
            },
            "required": [
                "network",
                "name",
                "type"
            ],
            "type": "object"
        },
        "vcenter.network.type": {
            "enum": [
                "STANDARD_PORTGROUP",
                "DISTRIBUTED_PORTGROUP",
                "OPAQUE_NETWORK"
            ],
            "type": "string"
        },
        "vcenter.resource_pool.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.resource_pool.create_spec": {
            "properties": {
                "cpu_allocation": {
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_create_spec",
                    "description": "Resource allocation for CPU.\nif unset or empty, use the default CPU allocation specification."
                },
                "memory_allocation": {
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_create_spec",
                    "description": "Resource allocation for memory.\nif unset or empty, use the default memory allocation specification."
                },
                "name": {
                    "description": "Name of the resource pool.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the created resource pool.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "parent"
            ],
            "type": "object"
        },
        "vcenter.resource_pool.filter_spec": {
            "properties": {
                "clusters": {
                    "description": "Clusters that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any cluster match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "datacenters": {
                    "description": "Datacenters that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "hosts": {
                    "description": "Hosts that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any host match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "names": {
                    "description": "Names that resource pools must have to match the filter (see ResourcePool.Info.name).\nIf unset or empty, resource pools with any name match the filter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "parent_resource_pools": {
                    "description": "Resource pools that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any resource pool match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "resource_pools": {
                    "description": "Identifiers of resource pools that can match the filter.\nIf unset or empty, resource pools with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.resource_pool.info": {
            "properties": {
                "cpu_allocation": {
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_info",
                    "description": "Resource allocation information for CPU.\nThis field is optional because it was added in a newer version than its parent node."
                },
                "memory_allocation": {
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_info",
                    "description": "Resource allocation information for memory.\nThis field is optional because it was added in a newer version than its parent node."
                },
                "name": {
                    "description": "Name of the vCenter Server resource pool.",
                    "type": "string"
                },
                "resource_pools": {
                    "description": "Identifiers of the child resource pools contained in this resource pool.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "name",
                "resource_pools"
            ],
            "type": "object"
        },
        "vcenter.resource_pool.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.resource_pool.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.resource_pool.resource_allocation_create_spec": {
            "properties": {
                "expandable_reservation": {
                    "description": "In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation.\nIf unset or empty, ResourcePool.ResourceAllocationCreateSpec.expandable-reservation will be set to true.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU.\nIf unset or empty, ResourcePool.ResourceAllocationCreateSpec.limit will be set to -1.",
                    "format": "int64",
                    "type": "integer"
                },
                "reservation": {
                    "description": "Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU.\nIf unset or empty, ResourcePool.ResourceAllocationCreateSpec.reservation will be set to 0.",
                    "format": "int64",
                    "type": "integer"
                },
                "shares": {
                    "$ref": "#/definitions/vcenter.resource_pool.shares_info",
                    "description": "Shares are used in case of resource contention.\nIf unset or empty, ResourcePool.ResourceAllocationCreateSpec.shares will be set to 'NORMAL'."
                }
            },
            "type": "object"
        },
        "vcenter.resource_pool.resource_allocation_info": {
            "properties": {
                "expandable_reservation": {
                    "description": "In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU.",
                    "format": "int64",
                    "type": "integer"
                },
                "reservation": {
                    "description": "Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU.",
                    "format": "int64",
                    "type": "integer"
                },
                "shares": {
                    "$ref": "#/definitions/vcenter.resource_pool.shares_info",
                    "description": "Shares are used in case of resource contention."
                }
            },
            "required": [
                "reservation",
                "expandable_reservation",
                "limit",
                "shares"
            ],
            "type": "object"
        },
        "vcenter.resource_pool.resource_allocation_update_spec": {
            "properties": {
                "expandable_reservation": {
                    "description": "In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation.\nIf unset or empty, ResourcePool.ResourceAllocationUpdateSpec.expandable-reservation will be set to true.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU.\nIf unset or empty, ResourcePool.ResourceAllocationUpdateSpec.limit will be set to -1.",
                    "format": "int64",
                    "type": "integer"
                },
                "reservation": {
                    "description": "Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU.\nIf unset or empty, ResourcePool.ResourceAllocationUpdateSpec.reservation will be set to 0.",
                    "format": "int64",
                    "type": "integer"
                },
                "shares": {
                    "$ref": "#/definitions/vcenter.resource_pool.shares_info",
                    "description": "Shares are used in case of resource contention.\nIf unset or empty, ResourcePool.ResourceAllocationUpdateSpec.shares will be set to 'NORMAL'."
                }
            },
            "type": "object"
        },
        "vcenter.resource_pool.shares_info": {
            "properties": {
                "level": {
                    "$ref": "#/definitions/vcenter.resource_pool.shares_info.level",
                    "description": "The allocation level. It maps to a pre-determined set of numeric values for shares. If the shares value does not map to a predefined size, then the level is set as CUSTOM."
                },
                "shares": {
                    "description": "When ResourcePool.SharesInfo.level is set to CUSTOM, it is the number of shares allocated. Otherwise, this value is ignored. \n There is no unit for this value. It is a relative measure based on the settings for other resource pools.\n\nThis field is optional and it is only relevant when the value of ResourcePool.SharesInfo.level is CUSTOM.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "level"
            ],
            "type": "object"
        },
        "vcenter.resource_pool.shares_info.level": {
            "description": "The ResourcePool.SharesInfo.Level enumerated type defines the possible values for the allocation level.",
            "enum": [
                "LOW",
                "NORMAL",
                "HIGH",
                "CUSTOM"
            ],
            "type": "string"
        },
        "vcenter.resource_pool.summary": {
            "properties": {
                "name": {
                    "description": "Name of the resource pool.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Identifier of the resource pool.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.",
                    "type": "string"
                }
            },
            "required": [
                "resource_pool",
                "name"
            ],
            "type": "object"
        },
        "vcenter.resource_pool.update_spec": {
            "properties": {
                "cpu_allocation": {
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_update_spec",
                    "description": "Resource allocation for CPU.\nif unset or empty, the CPU allocation of the resource pool will not be changed."
                },
                "memory_allocation": {
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_update_spec",
                    "description": "Resource allocation for memory.\nif unset or empty, the memory allocation of the resource pool will not be changed."
                },
                "name": {
                    "description": "Name of the resource pool.\nif unset or empty, the name of the resource pool will not be changed.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.resource_pool_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.resource_pool.create_spec",
                    "description": "Specification of the new resource pool to be created, see ResourcePool.CreateSpec."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.resource_pool_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.resource_pool.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.resource_pool_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.resource_pool.update_spec",
                    "description": "Specification for updating the configuration of the resource pool."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.services.service.health": {
            "description": "The {@name Health} {@term enumerated type} defines the possible values for health of a service.",
            "enum": [
                "DEGRADED",
                "HEALTHY",
                "HEALTHY_WITH_WARNINGS"
            ],
            "type": "string"
        },
        "vcenter.services.service.info": {
            "properties": {
                "description_key": {
                    "description": "Service description key. Can be used to lookup resource bundle",
                    "type": "string"
                },
                "health": {
                    "$ref": "#/definitions/vcenter.services.service.health",
                    "description": "Health of service."
                },
                "health_messages": {
                    "description": "Localizable messages associated with the health of the service",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                },
                "name_key": {
                    "description": "Service name key. Can be used to lookup resource bundle",
                    "type": "string"
                },
                "startup_type": {
                    "$ref": "#/definitions/vcenter.services.service.startup_type",
                    "description": "Startup Type."
                },
                "state": {
                    "$ref": "#/definitions/vcenter.services.service.state",
                    "description": "Running State."
                }
            },
            "required": [
                "name_key",
                "description_key",
                "startup_type",
                "state"
            ],
            "type": "object"
        },
        "vcenter.services.service.list_details_resp": {
            "properties": {
                "value": {
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.services.service.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.services.service.startup_type": {
            "description": "The {@name StartupType} {@term enumerated type} defines valid Startup Type for vCenter Server services.",
            "enum": [
                "MANUAL",
                "AUTOMATIC",
                "DISABLED"
            ],
            "type": "string"
        },
        "vcenter.services.service.state": {
            "description": "The {@name State} {@term enumerated type} defines valid Run State for services.",
            "enum": [
                "STARTING",
                "STOPPING",
                "STARTED",
                "STOPPED"
            ],
            "type": "string"
        },
        "vcenter.services.service.update_spec": {
            "properties": {
                "startup_type": {
                    "$ref": "#/definitions/vcenter.services.service.startup_type",
                    "description": "Startup Type"
                }
            },
            "type": "object"
        },
        "vcenter.services.service_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.services.service.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.services.service_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.services.service.update_spec",
                    "description": "Service Update specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.VM.info": {
            "properties": {
                "disks": {
                    "description": "List of the virtual disks that are associated with the given storage policy.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "vm_home": {
                    "description": "Flag to indicate whether or not the virtual machine home is associated with the given storage policy.",
                    "type": "boolean"
                }
            },
            "required": [
                "vm_home",
                "disks"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.VM.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.storage.policies.VM.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.check_compatibility_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.storage.policies.compatibility_info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.compatibility_info": {
            "properties": {
                "compatible_datastores": {
                    "description": "Info about a list of datastores compatible with a specific storage policy.",
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.compatible_datastore_info"
                    },
                    "type": "array"
                }
            },
            "required": [
                "compatible_datastores"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.compatible_datastore_info": {
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.",
                    "type": "string"
                }
            },
            "required": [
                "datastore"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.compliance.VM.filter_spec": {
            "properties": {
                "status": {
                    "description": "Compliance Status that a virtual machine must have to match the filter. Atleast one status must be specified.",
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.status"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "vms": {
                    "description": "Identifiers of virtual machines that can match the filter\nIf unset or empty, virtual machines with any identifier matches the filter\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: VirtualMachine.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "status"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.compliance.VM.info": {
            "properties": {
                "disks": {
                    "description": "A Map of virtual disks and their compliance status If empty, the virtual machine does not have any disks or its disks are not associated with a storage policy.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.status"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "vm_home": {
                    "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.status",
                    "description": "Compliance status of the virtual machine home.\nIf unset or empty, virtual machine home is not associated with a storage policy."
                }
            },
            "required": [
                "disks"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.compliance.VM.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.compliance.VM.status": {
            "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNKNOWN_COMPLIANCE",
                "NOT_APPLICABLE",
                "OUT_OF_DATE"
            ],
            "type": "string"
        },
        "vcenter.storage.policies.compliance.filter_spec": {
            "properties": {
                "status": {
                    "description": "Compliance Status that a virtual machine must have to match the filter.",
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.compliance.status"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "status"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.compliance.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.compliance.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.compliance.status": {
            "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNKNOWN",
                "NOT_APPLICABLE",
                "OUT_OF_DATE"
            ],
            "type": "string"
        },
        "vcenter.storage.policies.compliance.summary": {
            "properties": {
                "disks": {
                    "description": "List of the virtual hard disk.\nIf unset or empty, virtual machine entity does not have any disks or its disks are not associated with a storage policy.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.storage.policies.compliance.status"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "vm": {
                    "description": "Identifier of virtual machine\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will be an identifier for the resource type: VirtualMachine.",
                    "type": "string"
                },
                "vm_home": {
                    "$ref": "#/definitions/vcenter.storage.policies.compliance.status",
                    "description": "Compliance status of the virtual machine home.\nIf unset or empty, vmHome is not associated with a storage policy."
                }
            },
            "required": [
                "vm"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.filter_spec": {
            "properties": {
                "policies": {
                    "description": "Identifiers of storage policies that can match the filter.\nIf unset or empty, storage policies with any identifiers match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.StoragePolicy.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.storage.policies.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.storage.policies.summary": {
            "properties": {
                "description": {
                    "description": "Description of the storage policy.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the storage policy.",
                    "type": "string"
                },
                "policy": {
                    "description": "Identifier of the storage policy.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.StoragePolicy.",
                    "type": "string"
                }
            },
            "required": [
                "policy",
                "name",
                "description"
            ],
            "type": "object"
        },
        "vcenter.storage.policies_check_compatibility": {
            "properties": {
                "datastores": {
                    "description": "Datastores used to check compatibility against a storage policy. The number of datastores is limited to 1024.\nThe parameter must contain identifiers for the resource type: Datastore.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "datastores"
            ],
            "type": "object"
        },
        "vcenter.system_config.deployment_type.info": {
            "properties": {
                "type": {
                    "$ref": "#/definitions/vcenter.deployment.appliance_type",
                    "description": "The type of the appliance."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.system_config.deployment_type.reconfigure_spec": {
            "properties": {
                "remote_psc": {
                    "$ref": "#/definitions/vcenter.deployment.remote_psc_spec",
                    "description": "External PSC to register with when reconfiguring a VCSA_EMBEDDED appliance to a VCSA_EXTERNAL appliance."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.deployment.appliance_type",
                    "description": "The type of the appliance."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.system_config.deployment_type_reconfigure": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.system_config.deployment_type.reconfigure_spec",
                    "description": "ReconfigureSpec to set the appliance type."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.system_config.deployment_type_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.system_config.deployment_type.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.system_config.psc_registration.info": {
            "properties": {
                "address": {
                    "description": "The IP address or DNS resolvable name of the PSC this appliance is registered with.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPs port used by the external PSC.",
                    "format": "int64",
                    "type": "integer"
                },
                "sso_domain": {
                    "description": "The Single Sign-On domain name of the external PSC.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "https_port",
                "sso_domain"
            ],
            "type": "object"
        },
        "vcenter.system_config.psc_registration_repoint": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.remote_psc_spec",
                    "description": "RemotePscSpec structure containing information about the external PSC node to repoint this vCenter Server appliance to."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.system_config.psc_registration_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.system_config.psc_registration.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.tagging.associations.iteration_spec": {
            "properties": {
                "marker": {
                    "description": "Marker is an opaque token that allows the caller to request the next page of tag associations.\nIf unset or empty, first page of tag associations will be returned.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.tagging.associations.Marker. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.tagging.associations.Marker.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.tagging.associations.last_iteration_status": {
            "description": "The last status for the iterator. A field of this type is returned as part of the result and indicates to the caller of the API whether it can continue to make requests for more data. \n The last status only reports on the state of the iteration at the time data was last returned. As a result, it not does guarantee if the next call will succeed in getting more data or not. \n\n Failures to retrieve results will be returned as Error responses. These last statuses are only returned when the iterator is operating as expected.\n",
            "enum": [
                "READY",
                "END_OF_DATA"
            ],
            "type": "string"
        },
        "vcenter.tagging.associations.list_result": {
            "properties": {
                "associations": {
                    "description": "List of tag associations.",
                    "items": {
                        "$ref": "#/definitions/vcenter.tagging.associations.summary"
                    },
                    "type": "array"
                },
                "marker": {
                    "description": "Marker is an opaque data structure that allows the caller to request the next page of tag associations.\nIf unset or empty, there are no more tag associations to request.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.tagging.associations.Marker. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.tagging.associations.Marker.",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/vcenter.tagging.associations.last_iteration_status",
                    "description": "The last status for the iterator that indicates whether any more results can be expected if the caller continues to make requests for more data using the iterator."
                }
            },
            "required": [
                "associations",
                "status"
            ],
            "type": "object"
        },
        "vcenter.tagging.associations.summary": {
            "properties": {
                "object": {
                    "$ref": "#/definitions/vapi.std.dynamic_ID",
                    "description": "The identifier of an associated object."
                },
                "tag": {
                    "description": "The identifier of a tag.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: cis.tagging.Tag. When operations return a value of this structure as a result, the field will be an identifier for the resource type: cis.tagging.Tag.",
                    "type": "string"
                }
            },
            "required": [
                "tag",
                "object"
            ],
            "type": "object"
        },
        "vcenter.tokenservice.invalid_grant": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vcenter.tokenservice.invalid_grant_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vcenter.tokenservice.invalid_grant"
                }
            },
            "type": "object"
        },
        "vcenter.tokenservice.invalid_request": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vcenter.tokenservice.invalid_request_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vcenter.tokenservice.invalid_request"
                }
            },
            "type": "object"
        },
        "vcenter.tokenservice.invalid_scope": {
            "properties": {
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "messages"
            ],
            "type": "object"
        },
        "vcenter.tokenservice.invalid_scope_error": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vcenter.tokenservice.invalid_scope"
                }
            },
            "type": "object"
        },
        "vcenter.tokenservice.token_exchange.exchange_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.tokenservice.token_exchange.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.tokenservice.token_exchange.exchange_spec": {
            "properties": {
                "actor_token": {
                    "description": "A security token that represents the identity of the acting party. Typically, this will be the party that is authorized to use the requested security token and act on behalf of the subject.",
                    "type": "string"
                },
                "actor_token_type": {
                    "description": "An identifier, that indicates the type of the security token in the {@link ExchangeSpec#actor_token} parameter.",
                    "type": "string"
                },
                "audience": {
                    "description": "The logical name of the target service where the client intends to use the requested security token. This serves a purpose similar to the {@link ExchangeSpec#resource} parameter, but with the client providing a logical name rather than a location.",
                    "type": "string"
                },
                "grant_type": {
                    "description": "The value of {@link TokenExchange#TOKEN_EXCHANGE_GRANT} indicates that a token exchange is being performed.",
                    "type": "string"
                },
                "requested_token_type": {
                    "description": "An identifier for the type of the requested security token. If the requested type is unspecified, the issued token type is at the discretion of the server and may be dictated by knowledge of the requirements of the service or resource indicated by the {@link ExchangeSpec#resource} or {@link ExchangeSpec#audience} parameter.",
                    "type": "string"
                },
                "resource": {
                    "description": "Indicates the location of the target service or resource where the client intends to use the requested security token.",
                    "type": "string"
                },
                "scope": {
                    "description": "A list of space-delimited, case-sensitive strings, that allow the client to specify the desired scope of the requested security token in the context of the service or resource where the token will be used.",
                    "type": "string"
                },
                "subject_token": {
                    "description": "A security token that represents the identity of the party on behalf of whom exchange is being made. Typically, the subject of this token will be the subject of the security token issued. Token is base64-encoded.",
                    "type": "string"
                },
                "subject_token_type": {
                    "description": "An identifier, that indicates the type of the security token in the {@link ExchangeSpec#subject_token} parameter.",
                    "type": "string"
                }
            },
            "required": [
                "grant_type",
                "subject_token",
                "subject_token_type"
            ],
            "type": "object"
        },
        "vcenter.tokenservice.token_exchange.info": {
            "properties": {
                "access_token": {
                    "description": "The security token issued by the server in response to the token exchange request. Token is base64-encoded.",
                    "type": "string"
                },
                "expires_in": {
                    "description": "The validity lifetime, in seconds, of the token issued by the server.",
                    "format": "int64",
                    "type": "integer"
                },
                "issued_token_type": {
                    "description": "An identifier, that indicates the type of the security token in the {@link Info#access_token} parameter.",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "A refresh token can be issued in cases where the client of the token exchange needs the ability to access a resource even when the original credential is no longer valid.",
                    "type": "string"
                },
                "scope": {
                    "description": "Scope of the issued security token.",
                    "type": "string"
                },
                "token_type": {
                    "description": "A case-insensitive value specifying the method of using the access token issued.",
                    "type": "string"
                }
            },
            "required": [
                "access_token",
                "issued_token_type",
                "token_type"
            ],
            "type": "object"
        },
        "vcenter.tokenservice.token_exchange_exchange": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.tokenservice.token_exchange.exchange_spec",
                    "description": "{@name ExchangeSpec} {@term structure} contains arguments that define exchange process."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.topology.nodes.appliance_type": {
            "enum": [
                "VCSA_EMBEDDED",
                "VCSA_EXTERNAL",
                "PSC_EXTERNAL"
            ],
            "type": "string"
        },
        "vcenter.topology.nodes.filter_spec": {
            "properties": {
                "types": {
                    "description": "Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see Nodes.ApplianceType.\nIf unset or empty, node of any ApplianceType match the filter.",
                    "items": {
                        "$ref": "#/definitions/vcenter.topology.nodes.appliance_type"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.topology.nodes.info": {
            "properties": {
                "client_affinity": {
                    "description": "Identifier of the affinitized Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the affinitized node.\nThis field is optional and it is only relevant when the value of Nodes.Info.type is VCSA_EXTERNAL.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.",
                    "type": "string"
                },
                "domain": {
                    "description": "Domain name of the node.",
                    "type": "string"
                },
                "replication_partners": {
                    "description": "List of replication partners' node identifiers. Identifiers can be either IP address or DNS resolvable name of the partner node.\nThis field is optional and it is only relevant when the value of Nodes.Info.type is one of VCSA_EMBEDDED or PSC_EXTERNAL.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.VCenter.name.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.topology.nodes.appliance_type",
                    "description": "Appliance type of the node."
                }
            },
            "required": [
                "domain",
                "type"
            ],
            "type": "object"
        },
        "vcenter.topology.nodes.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.topology.nodes.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.topology.nodes.summary": {
            "properties": {
                "client_affinity": {
                    "description": "Identifier of the affinitized Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the affinitized node.\nThis field is optional and it is only relevant when the value of Nodes.Summary.type is VCSA_EXTERNAL.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.",
                    "type": "string"
                },
                "node": {
                    "description": "Identifier for the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.",
                    "type": "string"
                },
                "replication_partners": {
                    "description": "List of replication partners' node identifiers. Identifiers can be either IP address or DNS resolvable name of the partner node.\nThis field is optional and it is only relevant when the value of Nodes.Summary.type is one of VCSA_EMBEDDED or PSC_EXTERNAL.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.VCenter.name.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.topology.nodes.appliance_type",
                    "description": "Appliance type of the node."
                }
            },
            "required": [
                "node",
                "type"
            ],
            "type": "object"
        },
        "vcenter.topology.nodes_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.topology.nodes.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.topology.replication_status.filter_spec": {
            "properties": {
                "nodes": {
                    "description": "Identifier that a vCenter and Platform Services Controller node must have to match the filter. (see ReplicationStatus.Summary.node).\nIf unset or empty, all vCenter and Platform Services Controller nodes of type VCSA_EMBEDDED/PSC_EXTERNAL match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.VCenter.name.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.topology.replication_status.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.topology.replication_status.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.topology.replication_status.summary": {
            "properties": {
                "change_lag": {
                    "description": "Number of replication changes node is behind the replication partner.\nThis field will be unset if the partner host or replication status is not available, i.e, if ReplicationStatus.Summary.partner-available or ReplicationStatus.Summary.status-available is false.",
                    "format": "int64",
                    "type": "integer"
                },
                "node": {
                    "description": "Identifier for the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.",
                    "type": "string"
                },
                "partner_available": {
                    "description": "Indicates if the VMware Directory Service on partner is reachable or not.",
                    "type": "boolean"
                },
                "replicating": {
                    "description": "Indicates if node is processing replication changes from the replication partner.\nThis field will be unset if the partner host or replication status is not available, i.e, if ReplicationStatus.Summary.partner-available or ReplicationStatus.Summary.status-available is false.",
                    "type": "boolean"
                },
                "replication_partner": {
                    "description": "Identifier for the vCenter or Platform Services Controller replication partner. Identifier can be either IP address or DNS resolvable name of the replication partner.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.",
                    "type": "string"
                },
                "status_available": {
                    "description": "Indicates if the replication status for the node with respect to replication partner can be retrieved or not.",
                    "type": "boolean"
                }
            },
            "required": [
                "node",
                "replication_partner",
                "partner_available",
                "status_available"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.attestation.services.create_spec": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances that can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.",
                    "type": "string"
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain."
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.attestation.services.filter_spec": {
            "properties": {
                "address": {
                    "description": "A set of address by which to filter.\nIf unset, the services will not be filtered by address.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address"
                    },
                    "type": "array"
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances that can accept reports issued by this Attestation Service instance.\nIf unset, the services will not be filtered by group.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "services": {
                    "description": "A set of IDs by which to filter the services.\nIf unset, the services will not be filtered by ID.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.trusted_infrastructure.attestation.Service. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.\nIf unset, the services will not be filtered by trustAuthorityCluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.attestation.services.info": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances that can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.",
                    "type": "string"
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain."
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.attestation.services.summary": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances that can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "service": {
                    "description": "The service's unique identifier.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service instance belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "service",
                "address",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.attestation.services_create": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.attestation.services.create_spec",
            "description": "The CreateSpec for the new service."
        },
        "vcenter.trusted_infrastructure.attestation.services_list": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.attestation.services.filter_spec",
            "description": "Return only services matching the specified filters.\nIf {@term.unset} return all services."
        },
        "vcenter.trusted_infrastructure.kms.services.create_spec": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider service can accept reports from.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.",
                    "type": "string"
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain."
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.kms.services.filter_spec": {
            "properties": {
                "address": {
                    "description": "A set of address by which to filter.\nIf unset, the services will not be filtered by address.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address"
                    },
                    "type": "array"
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.\nIf unset, the Services will not be filtered by group.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "services": {
                    "description": "A set of IDs by which to filter the services.\nIf unset, the services will not be filtered by ID.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.trusted_infrastructure.kms.Service. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.\nIf unset, the Services will not be filtered by trustAuthorityCluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.kms.services.info": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.",
                    "type": "string"
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain."
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.kms.services.summary": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "string"
                },
                "service": {
                    "description": "The service's unique identifier.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "service",
                "address",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.kms.services_create": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.kms.services.create_spec",
            "description": "The CreateSpec for the new service."
        },
        "vcenter.trusted_infrastructure.kms.services_list": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.kms.services.filter_spec",
            "description": "Return only services matching the specified filters.\nIf {@term.unset} return all services."
        },
        "vcenter.trusted_infrastructure.network_address": {
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the service.",
                    "type": "string"
                },
                "port": {
                    "description": "The port of the service.\nIf unset, port 443 will be used.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "hostname"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.principal.info": {
            "properties": {
                "certificates": {
                    "description": "The certificates used by the STS to sign tokens for this vCenter.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain"
                    },
                    "type": "array"
                },
                "issuer": {
                    "description": "The service which created and signed the security token.",
                    "type": "string"
                },
                "name": {
                    "description": "The user-friednly name of the vCenter.",
                    "type": "string"
                },
                "principal": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.sts_principal",
                    "description": "The principal used by this vCenter instance to retrieve tokens. Currently this is the vCenter solution user."
                }
            },
            "required": [
                "certificates",
                "issuer",
                "principal",
                "name"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.sts_principal": {
            "properties": {
                "id": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.sts_principal_id",
                    "description": "The principal's ID."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.sts_principal_type",
                    "description": "The type of the principal (user or group)."
                }
            },
            "required": [
                "id",
                "type"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.sts_principal_id": {
            "properties": {
                "domain": {
                    "description": "The principal's domain.",
                    "type": "string"
                },
                "name": {
                    "description": "The principal's username.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "domain"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.sts_principal_type": {
            "description": "The StsPrincipalType enum can be either users or groups.",
            "enum": [
                "STS_USER",
                "STS_GROUP"
            ],
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.base_images.filter_spec": {
            "properties": {
                "display_name": {
                    "description": "Search criteria by ESX base image version version numbers.\ndisplayName if {@term.unset} return all ESX display version numbers.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "health": {
                    "description": "Search criteria by health indicator.\nhealth if {@term.unset} return all health indicators.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.base_images.health"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "version": {
                    "description": "Search criteria by ESX base image version numbers.\nversion if {@term.unset} return all ESX version numbers.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.base_images.health": {
            "enum": [
                "NONE",
                "OK",
                "WARNING",
                "ERROR"
            ],
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.base_images_import_from_imgdb_task": {
            "description": "ESX metadata on a cluster level.",
            "format": "binary",
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.ca_certificates.create_spec": {
            "properties": {
                "cert_chain": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The CA certificate chain. \n Certificates may either be added one at a time, or as a chain. Adding the certificates as a chain allows the group to be managed as a whole. For example, an entire chain can be deleted in one CaCertificates.delete operation. \n\n When certificates are added one at a time, the order must be root first, followed by any intermediates. The intermediates certificates must also be ordered in the direction from root to leaf. \n\n Similarly, when added as a chain the list must be ordered in the direction from root to leaf.\n\nIf unset creation will fail."
                },
                "name": {
                    "description": "A unique name for the TPM CA certificate.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.CaCertificate. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.CaCertificate.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.ca_certificates_create_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.ca_certificates.create_spec",
            "description": "The new CA certificate details."
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.endorsement_keys.create_spec": {
            "properties": {
                "certificate": {
                    "description": "TPM endorsement key certificate in PEM format. \n When a endorsement key certificate is provided, it will be verified against the CA certificate list. Endorsement key certificates that are not signed by one of the CA certificates will be rejected. \n\n Using this format allows for failures to be caught during configuration rather than later during attestation.\n\nIf unset EndorsementKeys.CreateSpec.public-key must be set.",
                    "type": "string"
                },
                "name": {
                    "description": "A unique name for the TPM endorsement key. \n The unique name should be something that an administrator can use to easily identify the remote system. For example, the hostname, or hardware UUID.\n\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.EndorsementKey. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.EndorsementKey.",
                    "type": "string"
                },
                "public_key": {
                    "description": "TPM public endorsement key in PEM format.\nIf unset EndorsementKeys.CreateSpec.certificate must be set.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.endorsement_keys_create_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.endorsement_keys.create_spec",
            "description": "The configuration."
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.settings.update_spec": {
            "properties": {
                "require_certificate_validation": {
                    "description": "Require TPM endorsement key certificate validation.\nIf unset the current state will remain unchanged.",
                    "type": "boolean"
                },
                "require_endorsement_keys": {
                    "description": "Require registered TPM endorsement keys.\nIf unset the current state will remain unchanged.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.settings_update_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.settings.update_spec",
            "description": "The settings."
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.consumer_principals.create_spec": {
            "properties": {
                "certificates": {
                    "description": "The certificates used by the vCenter STS to sign tokens.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain"
                    },
                    "type": "array"
                },
                "issuer": {
                    "description": "The service which created and signed the security token.",
                    "type": "string"
                },
                "issuer_alias": {
                    "description": "A user-friendly alias of the service which created and signed the security token.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: esx.authentication.trust.security-token-issuer. When operations return a value of this structure as a result, the field will be an identifier for the resource type: esx.authentication.trust.security-token-issuer.",
                    "type": "string"
                },
                "principal": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.sts_principal",
                    "description": "The principal used by the vCenter to retrieve tokens."
                }
            },
            "required": [
                "certificates",
                "issuer_alias",
                "issuer",
                "principal"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.consumer_principals.filter_spec": {
            "properties": {
                "id": {
                    "description": "The unqiue identifier of a connection profile.\nIf unset, no filtration will be performed by ID.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: esx.authentication.clientprofile. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: esx.authentication.clientprofile.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "issuer": {
                    "description": "The service which created and signed the security token.\nIf unset, no filtration will be performed by issuer.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: esx.authentication.trust.security-token-issuer. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: esx.authentication.trust.security-token-issuer.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "principals": {
                    "description": "The principal used by the vCenter to retrieve tokens.\nIf unset, no filtration will be performed by principals.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.sts_principal"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.consumer_principals_create_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.consumer_principals.create_spec",
            "description": "The CreateSpec specifying the connection information."
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.consumer_principals_list_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.consumer_principals.filter_spec",
            "description": "A FilterSpec specifying the profiles to be listed.\nIf {@term.unset} return all policies."
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.filter_spec": {
            "properties": {
                "cluster": {
                    "description": "Identifies the cluster.\ncluster If {@term.unset} return all Trust Authority Clusters.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "state": {
                    "description": "The state of the TrustAuthorityClusters.\nstate If {@term.unset} return all Trust Authority Clusters.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.state"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.info": {
            "properties": {
                "cluster": {
                    "description": "Identifies the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.state",
                    "description": "The state of the cluster."
                }
            },
            "required": [
                "cluster",
                "state"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.client_certificate.update_spec": {
            "properties": {
                "certificate": {
                    "description": "Public certificate used by every host in the cluster.",
                    "type": "string"
                },
                "private_key": {
                    "description": "Private part of the certificate.\nIf unset, the update request is for a public/private client certificate pair, not for a signed CSR.",
                    "format": "password",
                    "type": "string"
                }
            },
            "required": [
                "certificate"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.client_certificate_update_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.client_certificate.update_spec",
            "description": "The update spec."
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.create_spec": {
            "properties": {
                "key_server": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.key_server_create_spec",
                    "description": "Key server associated with this Provider."
                },
                "master_key_id": {
                    "description": "Master key ID created for the provider. \n A unique Key ID.\n",
                    "type": "string"
                },
                "provider": {
                    "description": "Name of the provider. \n A unique string chosen by the client.\n\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                    "type": "string"
                }
            },
            "required": [
                "provider",
                "master_key_id",
                "key_server"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.credential_set_task": {
            "description": "KMIP KMS password or AWS access key.",
            "format": "password",
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.current_peer_certificates.filter_spec": {
            "properties": {
                "server_names": {
                    "description": "Names that key server must have to match the filter (see CurrentPeerCertificates.Summary.server-name).\nIf unset or empty, key servers with any name match the filter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "trusted": {
                    "description": "Trust status that server certificates must have to match the filter (see CurrentPeerCertificates.Summary.trusted).\nIf unset, trusted and untrusted server certificates match the filter.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.key_server_create_spec": {
            "properties": {
                "connection_timeout": {
                    "description": "Connection timeout in seconds.\nIf unset, connection timeout will not be set.",
                    "format": "int64",
                    "type": "integer"
                },
                "description": {
                    "description": "Description of the key server.\nIf unset, description will not be added.",
                    "type": "string"
                },
                "kmip_server": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.kmip_server_create_spec",
                    "description": "Configuration information for Key Management Interoperability Protocol (KMIP) based key server.\nThis field is optional and it is only relevant when the value of Providers.KeyServerCreateSpec.type is KMIP."
                },
                "proxy_server": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "Proxy server configuration.\nIf unset, the key server will not use a proxy server."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.key_server_create_spec.type",
                    "description": "Type of the key server."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.key_server_create_spec.type": {
            "description": "The Providers.KeyServerCreateSpec.Type enumerated type lists the key server types.",
            "enum": [
                "KMIP"
            ],
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.key_server_update_spec": {
            "properties": {
                "connection_timeout": {
                    "description": "Connection timeout in seconds. \n\n\nIf unset, connection timeout will remain unchanged.",
                    "format": "int64",
                    "type": "integer"
                },
                "description": {
                    "description": "Description of the key server. \n\n\nIf unset, description will remain unchanged.",
                    "type": "string"
                },
                "kmip_server": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.kmip_server_update_spec",
                    "description": "Configuration information for KMIP based key server. \n\n\nIf unset, kmip server configuration will remain unchanged."
                },
                "proxy_server": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "Proxy server configuration. \n\n\nIf unset, proxy server configuration will remain unchanged."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.key_server_update_spec.type",
                    "description": "Type of the key server. \n\n\nIf unset, key server type and configuration information will remain unchanged. In this case all key server configuration information fields (e.g KMIP) should be unset."
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.key_server_update_spec.type": {
            "description": "The Providers.KeyServerUpdateSpec.Type enumerated type list the key server types.",
            "enum": [
                "KMIP"
            ],
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.kmip_server_create_spec": {
            "properties": {
                "servers": {
                    "description": "List of Key Management Interoperability Protocol (KMIP) compliant key servers. \n Key servers must be configured for active-active replication. If the server port is unset, a default value for KMIP's port will be used.\n",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.server"
                    },
                    "type": "array"
                },
                "username": {
                    "description": "Username for authentication.\nIf unset, no username will be added.",
                    "type": "string"
                }
            },
            "required": [
                "servers"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.kmip_server_update_spec": {
            "properties": {
                "servers": {
                    "description": "List of KMIP compliant key servers. \n Key servers must be configured for active-active replication. If the server port is unset, a default value for KMIP's port will be used. \n\n\n\nIf unset, server configuration will remain unchanged.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.server"
                    },
                    "type": "array"
                },
                "username": {
                    "description": "Username for authentication. \n\n\nIf unset, username will remain unchanged.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.server": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The server's address."
                },
                "name": {
                    "description": "Name of the server. \n A unique string chosen by the client.\n",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "address"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.trusted_peer_certificates.update_spec": {
            "properties": {
                "certificates": {
                    "description": "Public certificates of key server to trust.\nIf unset, the trusted server certificates will not be updated.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.trusted_peer_certificates_update_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.trusted_peer_certificates.update_spec",
            "description": "The update spec"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.update_spec": {
            "properties": {
                "key_server": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.key_server_update_spec",
                    "description": "Key server associated with this provider. \n\n\nIf unset, key server configuration will remain unchanged."
                },
                "master_key_id": {
                    "description": "Master key identifier created for the provider. \n A unique Key identifier. \n\n\n\nIf unset, masterKeyId will remain unchanged.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers_create_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.create_spec",
            "description": "Provider information."
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers_update_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.update_spec",
            "description": "Provider information."
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.state": {
            "enum": [
                "ENABLE",
                "DISABLE"
            ],
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.summary": {
            "properties": {
                "cluster": {
                    "description": "Identifies the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.state",
                    "description": "The state of the TrustAuthorityClusters."
                }
            },
            "required": [
                "cluster",
                "state"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters.update_spec": {
            "properties": {
                "state": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.state",
                    "description": "The state of the TrustAuthorityClusters.\nstate If {@term.unset} no operation is performed."
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_clusters_update_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.update_spec",
            "description": "The specification for update of a cluster."
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.attestation.filter_spec": {
            "properties": {
                "address": {
                    "description": "The service's address.\nIf unset, the services will not be filtered by address.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address"
                    },
                    "type": "array"
                },
                "clusters": {
                    "description": "A set of cluster IDs by which to filter the services.\nIf unset, the services will not be filtered by the clusters on which they run.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "groups": {
                    "description": "The group IDs determines which Attestation Service instances this Attestation Service can communicate with.\nIf unset, the services will not be filtered by groupId.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "hosts": {
                    "description": "A set of host IDs by which to filter the services.\nIf unset, the services will not be filtered by the hosts on which they run.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.attestation.info": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "cluster": {
                    "description": "The opaque string identifier of the cluster in which the Attestation Service is part of.",
                    "type": "string"
                },
                "group": {
                    "description": "The group ID determines which Attestation Service instances this Attestation Service can communicate with.",
                    "type": "string"
                },
                "host": {
                    "description": "The trusted ESX on which the service runs.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem.",
                    "type": "string"
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain."
                }
            },
            "required": [
                "host",
                "address",
                "group",
                "cluster",
                "trusted_CA"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.attestation.summary": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address.\nThis field is optional and it is only relevant when the value of Attestation.Summary.summary-type is one of BRIEF, NORMAL, or FULL."
                },
                "cluster": {
                    "description": "The opaque string identifier of the cluster in which the Attestation Service is part of.\nThis field is optional and it is only relevant when the value of Attestation.Summary.summary-type is one of NORMAL or FULL.",
                    "type": "string"
                },
                "group": {
                    "description": "The group ID determines which Attestation Service instances this Attestation Service can communicate with.\nThis field is optional and it is only relevant when the value of Attestation.Summary.summary-type is one of NORMAL or FULL.",
                    "type": "string"
                },
                "host": {
                    "description": "The trusted ESX on which the service runs.\nThis field is optional and it is only relevant when the value of Attestation.Summary.summary-type is one of BRIEF, NORMAL, or FULL.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem.",
                    "type": "string"
                },
                "summary_type": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.attestation.summary_type",
                    "description": "Defines the verbosity of the summary."
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain.\nThis field is optional and it is only relevant when the value of Attestation.Summary.summary-type is FULL."
                }
            },
            "required": [
                "summary_type"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.attestation.summary_type": {
            "description": "The connection information could include the certificates or be a shorter summary.",
            "enum": [
                "FULL",
                "NORMAL",
                "BRIEF"
            ],
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.attestation_list": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.attestation.filter_spec",
            "description": "Return details about Attestation Services matching the filter.\nIf {@term.unset} return all registered Attestation Services."
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.kms.filter_spec": {
            "properties": {
                "address": {
                    "description": "The service's address.\nIf unset, the services will not be filtered by address.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address"
                    },
                    "type": "array"
                },
                "clusters": {
                    "description": "A set of cluster IDs by which to filter the services.\nIf unset, the services will not be filtered by the clusters on which they run.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "groups": {
                    "description": "The group determines reports issued by which Attestation Service instances this Key Provider Service can accept.\nIf unset, the services will not be filtered by groupId.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "hosts": {
                    "description": "A set of host IDs by which to filter the services.\nIf unset, the services will not be filtered by the hosts on which they run.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.kms.info": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "cluster": {
                    "description": "The opaque string identifier of the cluster in which the Key Provider Service is part of.",
                    "type": "string"
                },
                "group": {
                    "description": "The group ID determines which Attestation Service instances this Key Provider Service can communicate with.",
                    "type": "string"
                },
                "host": {
                    "description": "The trusted ESX on which the service runs.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem.",
                    "type": "string"
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain."
                }
            },
            "required": [
                "host",
                "address",
                "group",
                "cluster",
                "trusted_CA"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.kms.summary": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address.\nThis field is optional and it is only relevant when the value of Kms.Summary.summary-type is one of BRIEF, NORMAL, or FULL."
                },
                "cluster": {
                    "description": "The opaque string identifier of the cluster in which the Key Provider Service is part of.\nThis field is optional and it is only relevant when the value of Kms.Summary.summary-type is one of NORMAL or FULL.",
                    "type": "string"
                },
                "group": {
                    "description": "The group ID determines which Attestation Service instances this Key Provider Service can communicate with.\nThis field is optional and it is only relevant when the value of Kms.Summary.summary-type is one of NORMAL or FULL.",
                    "type": "string"
                },
                "host": {
                    "description": "The trusted ESX on which the service runs.\nThis field is optional and it is only relevant when the value of Kms.Summary.summary-type is one of BRIEF, NORMAL, or FULL.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem.",
                    "type": "string"
                },
                "summary_type": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.kms.summary_type",
                    "description": "Defines the verbosity of the summary."
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain.\nThis field is optional and it is only relevant when the value of Kms.Summary.summary-type is FULL."
                }
            },
            "required": [
                "summary_type"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.kms.summary_type": {
            "description": "The connection information could include the certificates or be a shorter summary.",
            "enum": [
                "FULL",
                "NORMAL",
                "BRIEF"
            ],
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trust_authority_hosts.kms_list": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.kms.filter_spec",
            "description": "Return details about Key Provider Services matching the filter.\nIf {@term.unset} return all registered Key Provider Services."
        },
        "vcenter.trusted_infrastructure.trusted_clusters.attestation.services.create_spec": {
            "properties": {
                "service": {
                    "description": "The service's unique ID.\nThis field is optional and it is only relevant when the value of Services.CreateSpec.type is SERVICE.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The attestation cluster's unique ID.\nThis field is optional and it is only relevant when the value of Services.CreateSpec.type is CLUSTER.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.attestation.services.create_spec.source_type",
                    "description": "Source of truth for the configuration of the Attestation Service."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.attestation.services.create_spec.source_type": {
            "description": "The Services.CreateSpec.SourceType enumerated type specifies the source of truth the Attestation Service will use for its configuration.",
            "enum": [
                "SERVICE",
                "CLUSTER"
            ],
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.attestation.services.filter_spec": {
            "properties": {
                "address": {
                    "description": "The service's address.\nIf unset, the services will not be filtered by address.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address"
                    },
                    "type": "array"
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances can accept reports issued by this Attestation Service instance.\nIf unset, the services will not be filtered by group.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "services": {
                    "description": "A set of IDs by which to filter the services.\nIf unset, the services will not be filtered by ID.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.trusted_infrastructure.attestation.Service. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service instance belongs to.\nIf unset, the services will not be filtered by trustAuthorityCluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.attestation.services.info": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group determines the Key Provider Service instances can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.",
                    "type": "string"
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain."
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.attestation.services.summary": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "service": {
                    "description": "The service's unique identifier.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "service",
                "address",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.attestation.services_create_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.attestation.services.create_spec",
            "description": "Describes the registered instance of the Attestation Service"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.attestation.services_list": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.attestation.services.filter_spec",
            "description": "Only return services matching the filters.\nIf {@term.unset} return all services."
        },
        "vcenter.trusted_infrastructure.trusted_clusters.kms.services.create_spec": {
            "properties": {
                "service": {
                    "description": "The service's unique ID.\nThis field is optional and it is only relevant when the value of Services.CreateSpec.type is SERVICE.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The attestation cluster's unique ID.\nThis field is optional and it is only relevant when the value of Services.CreateSpec.type is CLUSTER.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.kms.services.create_spec.source_type",
                    "description": "Source of truth for the configuration of the Key Provider Service."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.kms.services.create_spec.source_type": {
            "description": "The Services.CreateSpec.SourceType enumerated type specifies source of truth the Key Provider Service will use for its configuration.",
            "enum": [
                "SERVICE",
                "CLUSTER"
            ],
            "type": "string"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.kms.services.filter_spec": {
            "properties": {
                "address": {
                    "description": "The service's address.\nIf unset, the services will not be filtered by address.",
                    "items": {
                        "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address"
                    },
                    "type": "array"
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.\nIf unset, the services will not be filtered by group.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "services": {
                    "description": "A set of IDs by which to filter the services.\nIf unset, the services will not be filtered by ID.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.trusted_infrastructure.kms.Service. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service instance belongs to.\nIf unset, the services will not be filtered by trustAuthorityCluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.kms.services.info": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.",
                    "type": "string"
                },
                "trusted_CA": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.x509_cert_chain",
                    "description": "The service's TLS certificate chain."
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.kms.services.summary": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/vcenter.trusted_infrastructure.network_address",
                    "description": "The service's address."
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "string"
                },
                "service": {
                    "description": "The service's unique identifier.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "service",
                "address",
                "group",
                "trust_authority_cluster"
            ],
            "type": "object"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.kms.services_create_task": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.kms.services.create_spec",
            "description": "Describes the registered instance of the Key Provider Service"
        },
        "vcenter.trusted_infrastructure.trusted_clusters.kms.services_list": {
            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.kms.services.filter_spec",
            "description": "Only return services matching the filters.\nIf {@term.unset} return all services."
        },
        "vcenter.trusted_infrastructure.x509_cert_chain": {
            "properties": {
                "cert_chain": {
                    "description": "Certificate chain in base64 format",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "cert_chain"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.active.info": {
            "properties": {
                "ha": {
                    "$ref": "#/definitions/vcenter.vcha.ip_spec",
                    "description": "IP specification for the HA network.\nIf unset, then the second NIC of the Active Node of the VCHA cluster is not configured."
                },
                "management": {
                    "$ref": "#/definitions/vcenter.vcha.ip_spec",
                    "description": "IP specification for the Management network."
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.vcha.placement_info",
                    "description": "Contains the placement information of the active node.\nIf unset, the request specified that placement information of the active node should not be included."
                }
            },
            "required": [
                "management"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.active_get": {
            "properties": {
                "partial": {
                    "description": "If true, then return only the information that does not require connecting to the Active vCenter Server. \n If false or unset, then return all the information.\nIf unset, then return all the information.",
                    "type": "boolean"
                },
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains active node's management vCenter server credentials.\nIf unset, then the active vCenter Server instance is assumed to be either self-managed or else in enhanced linked mode and managed by a linked vCenter Server instance."
                }
            },
            "type": "object"
        },
        "vcenter.vcha.cluster.active_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.active.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.active_spec": {
            "properties": {
                "ha_ip": {
                    "$ref": "#/definitions/vcenter.vcha.ip_spec",
                    "description": "IP specification for the HA network."
                },
                "ha_network": {
                    "description": "The identifier of the Network object used for the HA network.\n If the Cluster.ActiveSpec.ha-network field is set, then the Cluster.ActiveSpec.ha-network-type field must be set.\n If the Cluster.ActiveSpec.ha-network field is unset, then the Cluster.ActiveSpec.ha-network-type field is ignored.\nIf unset and the Cluster.ActiveSpec.ha-network-type field is unset, then the second NIC is assumed to be already configured.\n If unset and the Cluster.ActiveSpec.ha-network field is set, then an error is reported.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network:VCenter.",
                    "type": "string"
                },
                "ha_network_type": {
                    "$ref": "#/definitions/vcenter.vcha.network_type",
                    "description": "The type of the Network object used by the HA network.\n If the Cluster.ActiveSpec.ha-network field is set, then the Cluster.ActiveSpec.ha-network-type field must be set.\n If the Cluster.ActiveSpec.ha-network field is unset, then the Cluster.ActiveSpec.ha-network-type field is ignored.\nIf unset and the Cluster.ActiveSpec.ha-network field is unset, then the second NIC is assumed to be already configured.\n If unset and the Cluster.ActiveSpec.ha-network field is set, then an error is reported."
                }
            },
            "required": [
                "ha_ip"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.cluster_mode": {
            "description": "The Cluster.ClusterMode enumerated type defines the possible modes for a VCHA Cluster.",
            "enum": [
                "ENABLED",
                "DISABLED",
                "MAINTENANCE"
            ],
            "type": "string"
        },
        "vcenter.vcha.cluster.cluster_state": {
            "description": "The Cluster.ClusterState enumerated type defines the possible for a VCHA Cluster.",
            "enum": [
                "HEALTHY",
                "DEGRADED",
                "ISOLATED"
            ],
            "type": "string"
        },
        "vcenter.vcha.cluster.config_state": {
            "description": "The Cluster.ConfigState enumerated type defines the VCHA configuration state.",
            "enum": [
                "CONFIGURED",
                "NOTCONFIGURED",
                "INVALID",
                "PREPARED"
            ],
            "type": "string"
        },
        "vcenter.vcha.cluster.deploy_spec": {
            "properties": {
                "active": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.active_spec",
                    "description": "Contains the active node's network configuration."
                },
                "deployment": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.type",
                    "description": "Contains the deployment type."
                },
                "passive": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.passive_spec",
                    "description": "Contains the passive node's placement configuration."
                },
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains the active node's management vCenter server credentials.\nIf unset, then the active vCenter Server instance is assumed to be either self-managed or else in enhanced linked mode and managed by a linked vCenter Server instance."
                },
                "witness": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness_spec",
                    "description": "Contains the witness node's placement configuration."
                }
            },
            "required": [
                "deployment",
                "active",
                "passive",
                "witness"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.deploy_task_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.deployment_type.info": {
            "properties": {
                "deployment_type": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.deployment_type.type",
                    "description": "Identifies the deployment type of the VCHA cluster."
                }
            },
            "required": [
                "deployment_type"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.deployment_type.type": {
            "description": "The DeploymentType.Type enumerated type defines the possible deployment types for a VCHA Cluster.",
            "enum": [
                "NONE",
                "AUTO",
                "MANUAL"
            ],
            "type": "string"
        },
        "vcenter.vcha.cluster.deployment_type_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.deployment_type.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.error_condition": {
            "properties": {
                "error": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Contains an error condition."
                },
                "recommendation": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Contains a recommendation on handling the error condition.\nIf unset, there is no tip for the error condition."
                }
            },
            "required": [
                "error"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.failover_task_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.info": {
            "properties": {
                "auto_failover_allowed": {
                    "description": "Specifies if automatic failover is allowed.\nIf unset, then the cluster state healthy and automatic failover allowance in accordance with the cluster mode.",
                    "type": "boolean"
                },
                "config_state": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.config_state",
                    "description": "Configuration state of the VCHA cluster.\n The active node's management vCenter server credentials are not required to populate this field.\nIf unset, then the information is unavailable."
                },
                "health_exception": {
                    "description": "Health warning messages if the health information is unavailable.\nIf unset, then the cluster is in a healthy state.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                },
                "health_state": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.cluster_state",
                    "description": "Last known state of the VCHA Cluster.\nIf unset, then the information is unavailable or the node is not cloned yet."
                },
                "health_warnings": {
                    "description": "A collection of messages describing the reason for a non-healthy Cluster.\nIf unset, then the cluster is in a healthy state.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vcha.cluster.error_condition"
                    },
                    "type": "array"
                },
                "manual_failover_allowed": {
                    "description": "Specifies if manual failover is allowed.\nIf unset, then the cluster state healthy and manual failover allowance in accordance with the cluster mode.",
                    "type": "boolean"
                },
                "mode": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.cluster_mode",
                    "description": "Operational mode of the VCHA Cluster.\nIf unset, then the information is unavailable or the node is not cloned yet."
                },
                "node1": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_info",
                    "description": "Node configuration information for the VCHA cluster.\nIf unset, then the information is unavailable."
                },
                "node2": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_info",
                    "description": "Node configuration information for the VCHA cluster.\nIf unset, then the information is unavailable or the node is not cloned yet."
                },
                "witness": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness_info",
                    "description": "Node configuration information for the VCHA cluster.\nIf unset, then the information is unavailable or the node is not cloned yet."
                }
            },
            "type": "object"
        },
        "vcenter.vcha.cluster.ip_family": {
            "description": "The Cluster.IpFamily enumerated type defines the IP address family.",
            "enum": [
                "IPV4",
                "IPV6"
            ],
            "type": "string"
        },
        "vcenter.vcha.cluster.ip_info": {
            "properties": {
                "gateway_ip": {
                    "description": "Gateway IP address.\nIf unset, no gateway is specified.",
                    "type": "string"
                },
                "ip_family": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.ip_family",
                    "description": "Family of the ip."
                },
                "ipv4": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.ipv4_info",
                    "description": "If the type of the ip family is IPV4, then this will point to IPv4 address specification.\nThis field is optional and it is only relevant when the value of Cluster.IpInfo.ip-family is IPV4."
                },
                "ipv6": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.ipv6_info",
                    "description": "If the type of the ip family is IPV6, then this will point to IPv6 address specification.\nThis field is optional and it is only relevant when the value of Cluster.IpInfo.ip-family is IPV6."
                }
            },
            "required": [
                "ip_family"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.ipv4_info": {
            "properties": {
                "address": {
                    "description": "IP address of the configured network interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix of the interface.\nIf unset , then the subnet mask is invalid.",
                    "format": "int64",
                    "type": "integer"
                },
                "subnet_mask": {
                    "description": "The subnet mask of the interface.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "subnet_mask"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.ipv6_info": {
            "properties": {
                "address": {
                    "description": "IP address of the configured network interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix of the interface.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "address",
                "prefix"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.mode.cluster_mode": {
            "description": "The Mode.ClusterMode enumerated type defines the possible modes for a VCHA Cluster.",
            "enum": [
                "ENABLED",
                "DISABLED",
                "MAINTENANCE"
            ],
            "type": "string"
        },
        "vcenter.vcha.cluster.mode.info": {
            "properties": {
                "mode": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.mode.cluster_mode",
                    "description": "Identifies the mode of the VCHA cluster."
                }
            },
            "required": [
                "mode"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.mode.set_task_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.mode_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.mode.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.mode_set_task": {
            "properties": {
                "mode": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.mode.cluster_mode",
                    "description": "Clustermode to change the VCHA cluster mode to."
                }
            },
            "required": [
                "mode"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.node_info": {
            "properties": {
                "failover_ip": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.ip_info",
                    "description": "Failover IP address that this node will assume after the failover to serve client requests. Each failover node can have a different failover IP address.\n The active node's management vCenter server credentials are not required to populate Cluster.NodeInfo.failover-ip.\nIf unset, then it will assume the public IP address of the Active vCenter Server."
                },
                "ha_ip": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.ip_info",
                    "description": "VCHA Cluster network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.\n The active node's management vCenter server credentials are not required to populate this Cluster.NodeInfo.ha-ip."
                },
                "runtime": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_runtime_info",
                    "description": "Runtime information for the node in the VCHA Cluster.\n The active node's management vCenter server credentials are required to populate some fields of Cluster.NodeInfo.runtime.\nIf unset, then the information is unavailable or the specified Active vCenter server management credentials are invalid or the node is not cloned yet."
                }
            },
            "required": [
                "ha_ip"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.node_role": {
            "description": "The Cluster.NodeRole enumerated type defines the role node can be in a VCHA Cluster.",
            "enum": [
                "ACTIVE",
                "PASSIVE",
                "WITNESS"
            ],
            "type": "string"
        },
        "vcenter.vcha.cluster.node_runtime_info": {
            "properties": {
                "placement": {
                    "$ref": "#/definitions/vcenter.vcha.placement_info",
                    "description": "Placement information of the node.\n The active node's management vCenter server credentials are required to populate most fields of Cluster.NodeRuntimeInfo.placement.\nIf unset, then the information is unavailable or the specified Active vCenter server management credentials are invalid or the node is not cloned yet or the VCHA cluster was deployed in a manual fashion."
                },
                "role": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_role",
                    "description": "Last known role of the node.\n The active node's management vCenter server credentials are not required to populate Cluster.NodeRuntimeInfo.role.\nIf unset, then information is unavailable or the passive and witness nodes are not cloned yet."
                },
                "state": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_state",
                    "description": "Last known state of the node.\n The active node's management vCenter server credentials are not required to populate Cluster.NodeRuntimeInfo.state.\nIf unset, then information is unavailable or the passive and witness nodes are not cloned yet."
                }
            },
            "type": "object"
        },
        "vcenter.vcha.cluster.node_state": {
            "description": "The Cluster.NodeState enumerated type defines possible state a node can be in a VCHA Cluster.",
            "enum": [
                "UP",
                "DOWN"
            ],
            "type": "string"
        },
        "vcenter.vcha.cluster.node_vm_info": {
            "properties": {
                "bios_uuid": {
                    "description": "BIOS UUID for the node.",
                    "type": "string"
                },
                "vm": {
                    "description": "The identifier of the virtual machine of the VCHA node.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: VirtualMachine:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: VirtualMachine:VCenter.",
                    "type": "string"
                }
            },
            "required": [
                "vm",
                "bios_uuid"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.passive.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.passive.check_result"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.passive.check_result": {
            "properties": {
                "errors": {
                    "description": "A list of problems which are fatal to the operation and the operation will fail.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                },
                "warnings": {
                    "description": "A list of problems which may require attention, but which are not fatal.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "warnings",
                "errors"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.passive.check_spec": {
            "properties": {
                "placement": {
                    "$ref": "#/definitions/vcenter.vcha.placement_spec",
                    "description": "Contains the node's placement information for validation."
                },
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains the active node's management vCenter server credentials.\nIf unset, then the active vCenter Server instance is assumed to be either self-managed or else in enhanced linked mode and managed by a linked vCenter Server instance."
                }
            },
            "required": [
                "placement"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.passive.redeploy_spec": {
            "properties": {
                "failover_ip": {
                    "$ref": "#/definitions/vcenter.vcha.ip_spec",
                    "description": "Failover IP address that this node must assume after the failover to serve client requests.\nIf unset, then the public IP address of the Active vCenter Server is assumed."
                },
                "ha_ip": {
                    "$ref": "#/definitions/vcenter.vcha.ip_spec",
                    "description": "Contains the VCHA HA network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.\nIf unset, then the stored network configuration for the VCHA HA network for the passive node will be used."
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.vcha.placement_spec",
                    "description": "Contains the node's placement information."
                },
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains the active node's management vCenter server credentials.\nIf unset, then the active vCenter Server instance is assumed to be either self-managed or else in enhanced linked mode and managed by a linked vCenter Server instance."
                }
            },
            "required": [
                "placement"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.passive.redeploy_task_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.passive_check": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.passive.check_spec",
                    "description": "Contains the passive node's placement specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.passive_redeploy_task": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.passive.redeploy_spec",
                    "description": "Contains the passive node's redeploy specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.passive_spec": {
            "properties": {
                "failover_ip": {
                    "$ref": "#/definitions/vcenter.vcha.ip_spec",
                    "description": "IP specification for the management network.\nIf unset, then it will assume the public IP address of the Active vCenter Server."
                },
                "ha_ip": {
                    "$ref": "#/definitions/vcenter.vcha.ip_spec",
                    "description": "IP specification for the HA network."
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.vcha.placement_spec",
                    "description": "Contains the placement configuration of the node.\nIf unset, then the it is assumed that the clone will be done manually by the customer. In this case, the placement configuration for the witness node should also be omitted. Only the network configuration will be setup. Once the passive and witness nodes are cloned from the active node, the VCHA high availability is turned on."
                }
            },
            "required": [
                "ha_ip"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.type": {
            "description": "The Cluster.Type enumerated type defines the possible deployment types for a VCHA Cluster.",
            "enum": [
                "AUTO",
                "MANUAL"
            ],
            "type": "string"
        },
        "vcenter.vcha.cluster.undeploy_spec": {
            "properties": {
                "force_delete": {
                    "description": "Flag controlling in what circumstances the virtual machines will be deleted. For this flag to take effect, the VCHA cluster should have been successfully configured using automatic deployment. \n   -  If true, the Cluster.UndeploySpec.vms field will be ignored, the VCHA cluster specific information is removed, and the passive and witness virtual machines will be deleted.\n   -  If false, the Cluster.UndeploySpec.vms field contains the information identifying the passive and witness virtual machines.\n \n     =  If the Cluster.UndeploySpec.vms field is set, then it will be validated prior to deleting the passive and witness virtual machines and VCHA cluster specific information is removed.\n     =  If the Cluster.UndeploySpec.vms field is unset, then the passive and witness virtual machines will not be deleted. The customer should delete them in order to cleanup completely. VCHA cluster specific information is removed.\n  \nIf unset, the Cluster.UndeploySpec.vms field contains the information identifying the passive and witness virtual machines. \n   -  If the Cluster.UndeploySpec.vms field is set, then it will be validated prior to deleting the passive and witness virtual machines. VCHA cluster specific information is removed.\n   -  If the Cluster.UndeploySpec.vms field is unset, then the passive and witness virtual machines will not be deleted. The customer should delete them in order to cleanup completely. VCHA cluster specific information is removed.\n",
                    "type": "boolean"
                },
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains the active node's management vCenter server credentials.\nIf unset, then the active vCenter Server instance is assumed to be either self-managed or else in enhanced linked mode and managed by a linked vCenter Server instance."
                },
                "vms": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.vm_info",
                    "description": "Contains virtual machine information for the passive and witness virtual machines. For this flag to take effect, the VCHA cluster should have been successfully configured using automatic deployment. \n If set, the Cluster.UndeploySpec.force-delete field controls whether this information is validated. \n\n   -  If the Cluster.UndeploySpec.force-delete field is true, then this information is ignored, VCHA cluster specific information is removed and the passive and witness virtual machines will be deleted.\n   -  If the Cluster.UndeploySpec.force-delete field is unset or false, then this information is validated prior to deleting the passive and witness virtual machines. VCHA cluster specific information is removed.\n \nIf unset, the Cluster.UndeploySpec.force-delete field controls the deletion of the passive and witness virtual machines. \n   -  If the Cluster.UndeploySpec.force-delete field is true, then the passive and witness virtual machines will be deleted. VCHA cluster specific information is removed. \n  -  If the Cluster.UndeploySpec.force-delete field is unset or false, then the passive and witness virtual machines will not be deleted. The customer should delete them in order to cleanup completely. VCHA cluster specific information is removed. \n"
                }
            },
            "type": "object"
        },
        "vcenter.vcha.cluster.undeploy_task_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.vm_info": {
            "properties": {
                "passive": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_vm_info",
                    "description": "The virtual machine information of the passive node."
                },
                "witness": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_vm_info",
                    "description": "The virtual machine information of the witness node."
                }
            },
            "required": [
                "passive",
                "witness"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.witness.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness.check_result"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.witness.check_result": {
            "properties": {
                "errors": {
                    "description": "A list of problems which are fatal to the operation and the operation will fail.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                },
                "warnings": {
                    "description": "A list of problems which may require attention, but which are not fatal.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                }
            },
            "required": [
                "warnings",
                "errors"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.witness.check_spec": {
            "properties": {
                "placement": {
                    "$ref": "#/definitions/vcenter.vcha.placement_spec",
                    "description": "Contains the node's placement information for validation."
                },
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains the active node's management vCenter server credentials.\nIf unset, then the active vCenter Server instance is assumed to be either self-managed or else in enhanced linked mode and managed by a linked vCenter Server instance."
                }
            },
            "required": [
                "placement"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.witness.redeploy_spec": {
            "properties": {
                "ha_ip": {
                    "$ref": "#/definitions/vcenter.vcha.ip_spec",
                    "description": "Contains the VCHA HA network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.\nIf unset, then the stored network configuration for the VCHA HA network for the witness node will be used."
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.vcha.placement_spec",
                    "description": "Contains the node's placement information."
                },
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains the active node's management vCenter server credentials.\nIf unset, then the active vCenter Server instance is assumed to be either self-managed or else in enhanced linked mode and managed by a linked vCenter Server instance."
                }
            },
            "required": [
                "placement"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.witness.redeploy_task_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.witness_check": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness.check_spec",
                    "description": "Contains the witness node's placement specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.witness_info": {
            "properties": {
                "ha_ip": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.ip_info",
                    "description": "VCHA Cluster network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.\n The active node's management vCenter server credentials are not required to populate Cluster.WitnessInfo.ha-ip."
                },
                "runtime": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_runtime_info",
                    "description": "Runtime information for the node in the VCHA Cluster.\n The active node's management vCenter server credentials are required to populate some fields of Cluster.WitnessInfo.runtime.\nIf unset, then the information is unavailable or the node is not cloned yet."
                }
            },
            "required": [
                "ha_ip"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.witness_redeploy_task": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness.redeploy_spec",
                    "description": "Contains the witness node's redeploy specification."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster.witness_spec": {
            "properties": {
                "ha_ip": {
                    "$ref": "#/definitions/vcenter.vcha.ip_spec",
                    "description": "IP specification for the HA network."
                },
                "placement": {
                    "$ref": "#/definitions/vcenter.vcha.placement_spec",
                    "description": "Contains the placement configuration of the node.\nIf unset, then it is assumed that the clone will be done manually by the customer. In this case, the placement configuration for the witness node should also be omitted. Only the network configuration will be setup. Once the passive and witness nodes are cloned from the active node, the VCHA high availability is turned on."
                }
            },
            "required": [
                "ha_ip"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster_deploy_task": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.deploy_spec",
                    "description": "Contains the deploy specification for all three nodes of a VCHA cluster."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster_failover_task": {
            "properties": {
                "planned": {
                    "description": "If false, a failover is initiated immediately and may result in data loss.\n If true, a failover is initated after the Active node flushes its state to Passive and there is no data loss.",
                    "type": "boolean"
                }
            },
            "required": [
                "planned"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster_get": {
            "properties": {
                "partial": {
                    "description": "If true, then return only the information that does not require connecting to the Active vCenter Server.\n If false or unset, then return all the information.\nIf unset, then return all the information.",
                    "type": "boolean"
                },
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains active node's management vCenter server credentials.\nIf unset, then the active vCenter Server instance is assumed to be either self-managed or else in enhanced linked mode and managed by a linked vCenter Server instance."
                }
            },
            "type": "object"
        },
        "vcenter.vcha.cluster_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.cluster_undeploy_task": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.undeploy_spec",
                    "description": "Contains the undeploy specification for a VCHA cluster."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vcha.connection_spec": {
            "properties": {
                "hostname": {
                    "description": "IP Address or DNS of the vCenter.",
                    "type": "string"
                },
                "password": {
                    "description": "Password for the specified user.\nThis field is currently required. If unset, an empty password is assumed. In the future, if this field is unset, the system will attempt to authenticate the user. If a user cannot be identified, then the requested operation will fail.",
                    "format": "password",
                    "type": "string"
                },
                "port": {
                    "description": "Port number.\nIf unset, port 443 will be used.",
                    "format": "int64",
                    "type": "integer"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 hash of the server SSL certificate.\nIf unset, empty ssl thumbprint is assumed.",
                    "type": "string"
                },
                "username": {
                    "description": "Username to access the server.\nThis field is currently required. If unset, an error is returned. In the future, if this field is unset, the system will attempt to identify the user. If a user cannot be identified, then the requested operation will fail.",
                    "type": "string"
                }
            },
            "required": [
                "hostname"
            ],
            "type": "object"
        },
        "vcenter.vcha.credentials_spec": {
            "properties": {
                "active_location": {
                    "$ref": "#/definitions/vcenter.vcha.connection_spec",
                    "description": "Connection information for the management vCenter Server of the Active Node in a VCHA Cluster."
                }
            },
            "required": [
                "active_location"
            ],
            "type": "object"
        },
        "vcenter.vcha.disk_info": {
            "properties": {
                "datastore": {
                    "description": "The identifier of the datastore to put all the virtual disks on.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore:VCenter.",
                    "type": "string"
                },
                "datastore_name": {
                    "description": "The name of the datastore.",
                    "type": "string"
                }
            },
            "required": [
                "datastore",
                "datastore_name"
            ],
            "type": "object"
        },
        "vcenter.vcha.disk_spec": {
            "properties": {
                "datastore": {
                    "description": "The identifier of the datastore to put all the virtual disks on.\nThis field needs to be set. If unset, then see vim.vm.RelocateSpec.datastore.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore:VCenter.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vcenter.vcha.ip_family": {
            "description": "The IpFamily enumerated type defines the Ip address family.",
            "enum": [
                "IPV4",
                "IPV6"
            ],
            "type": "string"
        },
        "vcenter.vcha.ip_spec": {
            "properties": {
                "default_gateway": {
                    "description": "The IP address of the Gateway for this interface.\nIf unset, gateway will not be used for the network interface.",
                    "type": "string"
                },
                "dns_servers": {
                    "description": "The list of IP addresses of the DNS servers for this interface. This list is a comma separated list.\nIf unset, DNS servers will not be used for the network interface.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ip_family": {
                    "$ref": "#/definitions/vcenter.vcha.ip_family",
                    "description": "Family of the IP address to configure the interface."
                },
                "ipv4": {
                    "$ref": "#/definitions/vcenter.vcha.ipv4_spec",
                    "description": "If the family of the ip is IPV4, then this will point to IPv4 address specification.\nThis field is optional and it is only relevant when the value of IpSpec.ip-family is IPV4."
                },
                "ipv6": {
                    "$ref": "#/definitions/vcenter.vcha.ipv6_spec",
                    "description": "If the family of the ip is IPV6, then this will point to IPv6 address specification.\nThis field is optional and it is only relevant when the value of IpSpec.ip-family is IPV6."
                }
            },
            "required": [
                "ip_family"
            ],
            "type": "object"
        },
        "vcenter.vcha.ipv4_spec": {
            "properties": {
                "address": {
                    "description": "IPV4 address to be used to configure the interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix for the interface.\nIf unset and the Ipv4Spec.subnet-mask field is unset, this an error will be reported.\n If unset and the Ipv4Spec.subnet-mask field is set, then the Ipv4Spec.subnet-mask field will be used.\n If both the Ipv4Spec.subnet-mask field and the Ipv4Spec.prefix field are set and they do not represent the same value, then an error will be reported.",
                    "format": "int64",
                    "type": "integer"
                },
                "subnet_mask": {
                    "description": "The subnet mask for the interface.\nIf unset and the Ipv4Spec.prefix field is unset, then an error will be reported.\n If unset and the Ipv4Spec.prefix field is set, then the Ipv4Spec.prefix field will be used to create a subnet mask whose first prefix bits are 1 and the remaining bits 0.\n If both the Ipv4Spec.subnet-mask field and the Ipv4Spec.prefix field are set and they do not represent the same value, then an error will be reported.",
                    "type": "string"
                }
            },
            "required": [
                "address"
            ],
            "type": "object"
        },
        "vcenter.vcha.ipv6_spec": {
            "properties": {
                "address": {
                    "description": "IPv6 address to be used to configure the interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix for the interface.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "address",
                "prefix"
            ],
            "type": "object"
        },
        "vcenter.vcha.network_type": {
            "description": "The NetworkType enumerated type defines the type of a vCenter Server network.",
            "enum": [
                "STANDARD_PORTGROUP",
                "DISTRIBUTED_PORTGROUP"
            ],
            "type": "string"
        },
        "vcenter.vcha.operations.info": {
            "properties": {
                "active": {
                    "description": "Identifiers of the operations that are currently running. These operation strings are one of \"vcenter.vcha.cluster.deploy\", \"vcenter.vcha.cluster.failover\", \"vcenter.vcha.cluster.passive.redeploy\", \"vcenter.vcha.cluster.witness.redeploy\", \"vcenter.vcha.cluster.mode.set\", and \"vcenter.vcha.cluster.undeploy\".\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vapi.operation. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vapi.operation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "disabled": {
                    "description": "Identifiers of the operations that are current disabled. These operation strings are one of \"vcenter.vcha.cluster.deploy\", \"vcenter.vcha.cluster.failover\", \"vcenter.vcha.cluster.passive.redeploy\", \"vcenter.vcha.cluster.witness.redeploy\", \"vcenter.vcha.cluster.mode.set\", \"vcenter.vcha.cluster.undeploy\" and \"vcenter.vcha.cluster.get\".\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vapi.operation. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vapi.operation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "disabled",
                "active"
            ],
            "type": "object"
        },
        "vcenter.vcha.operations_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.operations.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vcha.placement_info": {
            "properties": {
                "bios_uuid": {
                    "description": "BIOS UUID for the node.\nIf unset, the information is currently unavailable.",
                    "type": "string"
                },
                "cluster": {
                    "description": "The identifier of the cluster of which PlacementInfo.host is member.\nIf unset, PlacementInfo.host is a standalone host.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource:VCenter.",
                    "type": "string"
                },
                "cluster_name": {
                    "description": "The name of the cluster of which PlacementInfo.host is member.\nIf unset, PlacementInfo.host is a standalone host.",
                    "type": "string"
                },
                "datacenter": {
                    "description": "The identifier of the datacenter of the VCHA node.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datacenter:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datacenter:VCenter.",
                    "type": "string"
                },
                "datacenter_name": {
                    "description": "The name of the datacenter of the VCHA node.",
                    "type": "string"
                },
                "ha_network": {
                    "description": "The identifier of the Network object used for the HA network.\nIf unset, the information is currently unavailable or the haNetwork is not configured.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network:VCenter.",
                    "type": "string"
                },
                "ha_network_name": {
                    "description": "The name of the Network object used for the HA network.\nIf unset, the information is currently unavailable or the haNetwork is not configured.",
                    "type": "string"
                },
                "ha_network_type": {
                    "$ref": "#/definitions/vcenter.vcha.network_type",
                    "description": "The type of the Network object used for the HA network.\nIf unset, the information is currently unavailable or the haNetwork is not configured."
                },
                "host": {
                    "description": "The identifier of the host of the VCHA node.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem:VCenter.",
                    "type": "string"
                },
                "host_name": {
                    "description": "The name of the host of the VCHA node.",
                    "type": "string"
                },
                "management_network": {
                    "description": "The identifier of the Network object used for the Management network.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network:VCenter.",
                    "type": "string"
                },
                "management_network_name": {
                    "description": "The name of the Network object used for the Management network.",
                    "type": "string"
                },
                "management_network_type": {
                    "$ref": "#/definitions/vcenter.vcha.network_type",
                    "description": "The type of the Network object used for the Management network."
                },
                "management_vcenter_name": {
                    "description": "The hostname of the vCenter server that is managing the VCHA node.",
                    "type": "string"
                },
                "storage": {
                    "$ref": "#/definitions/vcenter.vcha.disk_info",
                    "description": "The storage information of the VCHA node."
                },
                "vm_name": {
                    "description": "The virtual machine name of the VCHA node.",
                    "type": "string"
                }
            },
            "required": [
                "management_vcenter_name",
                "vm_name",
                "datacenter",
                "datacenter_name",
                "host",
                "host_name",
                "management_network",
                "management_network_name",
                "management_network_type",
                "storage"
            ],
            "type": "object"
        },
        "vcenter.vcha.placement_spec": {
            "properties": {
                "folder": {
                    "description": "The identifier of the folder to deploy the VCHA node to.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder:VCenter.",
                    "type": "string"
                },
                "ha_network": {
                    "description": "The identifier of the Network object used for the HA network.\n If the PlacementSpec.ha-network field is set, then the {#link #haNetworkType} field must be set.\n If the PlacementSpec.ha-network field is unset, then the PlacementSpec.ha-network-type field is ignored.\nIf unset and the PlacementSpec.ha-network-type field is unset, then the same network present on the Active node virtual machine is used to deploy the virtual machine with an assumption that the network is present on the destination.\n\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network:VCenter.",
                    "type": "string"
                },
                "ha_network_type": {
                    "$ref": "#/definitions/vcenter.vcha.network_type",
                    "description": "The type of the Network object used by the HA network.\n If the PlacementSpec.ha-network field is set, then the PlacementSpec.ha-network-type field must be set.\n If the PlacementSpec.ha-network field is unset, then the PlacementSpec.ha-network-type field is ignored.\nIf unset and the PlacementSpec.ha-network field is unset, then the same network present on the Active node virtual machine is used to deploy the virtual machine with an assumption that the network is present on the destination.\n If unset and the PlacementSpec.ha-network field is set, then an error is reported."
                },
                "host": {
                    "description": "The identifier of the host to deploy the VCHA node to.\nIf unset, see vim.vm.RelocateSpec.host.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem:VCenter.",
                    "type": "string"
                },
                "management_network": {
                    "description": "The identifier of the Network object used for the Management network. If the PlacementSpec.management-network field is set, then the PlacementSpec.management-network-type field must be set.\n If the PlacementSpec.management-network field is unset, then the PlacementSpec.management-network-type field is ignored.\nIf unset and the PlacementSpec.management-network-type field is unset, then the same network present on the Active node virtual machine is used to deploy the virtual machine with an assumption that the network is present on the destination.\n\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network:VCenter.",
                    "type": "string"
                },
                "management_network_type": {
                    "$ref": "#/definitions/vcenter.vcha.network_type",
                    "description": "The type of the Network object used by the Management network.\n If the PlacementSpec.management-network field is set, then the {#link #managementNetworkType} field must be set.\n If the PlacementSpec.management-network field is unset, then the PlacementSpec.management-network-type field is ignored.\nIf unset and the PlacementSpec.management-network field is unset, then the same network present on the Active node virtual machine is used to deploy the virtual machine with an assumption that the network is present on the destination.\n If unset and the PlacementSpec.management-network field is set, then an error is reported."
                },
                "name": {
                    "description": "The name of the VCHA node to be used for the virtual machine name.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "The identifier of the resource pool to deploy the VCHA node to.\nIf unset, then the active node's resource pool will be used.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool:VCenter.",
                    "type": "string"
                },
                "storage": {
                    "$ref": "#/definitions/vcenter.vcha.disk_spec",
                    "description": "The storage specification to deploy the VCHA node to.\nIf unset, see vim.vm.RelocateSpec.datastore."
                }
            },
            "required": [
                "name",
                "folder"
            ],
            "type": "object"
        },
        "vcenter.vm.console.tickets.create_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.console.tickets.summary"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.console.tickets.create_spec": {
            "properties": {
                "type": {
                    "$ref": "#/definitions/vcenter.vm.console.tickets.type",
                    "description": "The type of virtual machine console ticket. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.console.tickets.summary": {
            "properties": {
                "ticket": {
                    "description": "Console ticket URI. Warning: This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "ticket"
            ],
            "type": "object"
        },
        "vcenter.vm.console.tickets.type": {
            "description": "The Tickets.Type enumerated type defines the types of console tickets. Warning: This enumeration is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
            "enum": [
                "VMRC",
                "WEBMKS"
            ],
            "type": "string"
        },
        "vcenter.vm.console.tickets_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.console.tickets.create_spec",
                    "description": "Specification for the console ticket to be created."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.customization.set_spec": {
            "properties": {
                "name": {
                    "description": "The name of the customization specification that has be retrieved from the virtual center inventory and applied for the virtual machine. Either one of Customization.SetSpec.name or Customization.SetSpec.spec or none of them should be specified.\nIf unset and Customization.SetSpec.spec is also unset when executing Customization.set operationg, then any pending customization for the virtual machine will be cleared.",
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/vcenter.guest.customization_spec",
                    "description": "The customization specification that has to be applied for the virtual machine. Either one of Customization.SetSpec.name or Customization.SetSpec.spec or none of them should be specified.\nIf unset and Customization.SetSpec.name is also unset when executing Customization.set operationg, then any pending customization for the virtual machine will be cleared."
                }
            },
            "type": "object"
        },
        "vcenter.vm.guest.customization_set": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.guest.customization.set_spec",
                    "description": "The customization settings to be applied to the guest operating system."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.dhcp_config_info": {
            "properties": {
                "ipv4_enabled": {
                    "description": "True if IPv4 DHCP is enabled, false otherwise.",
                    "type": "boolean"
                },
                "ipv6_enabled": {
                    "description": "True if IPv6 DHCP is enabled, false otherwise.",
                    "type": "boolean"
                }
            },
            "required": [
                "ipv4_enabled",
                "ipv6_enabled"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.dns_assigned_values": {
            "properties": {
                "domain_name": {
                    "description": "The domain name portion of the DNS name. \"example.com\" part of esx01.example.com.",
                    "type": "string"
                },
                "host_name": {
                    "description": "The host name portion of DNS name. For example, \"esx01\" part of esx01.example.com.",
                    "type": "string"
                }
            },
            "required": [
                "host_name",
                "domain_name"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.dns_config_info": {
            "properties": {
                "ip_addresses": {
                    "description": "The IP addresses of the DNS servers in order of use. IPv4 addresses are specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "search_domains": {
                    "description": "The domain in which to search for hosts, placed in order of preference. These are the domain name portion of the DNS names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "ip_addresses",
                "search_domains"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.identity.info": {
            "properties": {
                "family": {
                    "$ref": "#/definitions/vcenter.vm.guest_OS_family",
                    "description": "Guest operating system family."
                },
                "full_name": {
                    "$ref": "#/definitions/vapi.std.localizable_message",
                    "description": "Guest operating system full name."
                },
                "host_name": {
                    "description": "Hostname of the guest operating system.",
                    "type": "string"
                },
                "ip_address": {
                    "description": "IP address assigned by the guest operating system.\nIf unset the guest does not have an IP address.",
                    "type": "string"
                },
                "name": {
                    "$ref": "#/definitions/vcenter.vm.guest_OS",
                    "description": "Guest operating system identifier (short name)."
                }
            },
            "required": [
                "name",
                "family",
                "full_name",
                "host_name"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.identity_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.guest.identity.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.local_filesystem.info": {
            "properties": {
                "capacity": {
                    "description": "Total capacity of the file system, in bytes.",
                    "format": "int64",
                    "type": "integer"
                },
                "filesystem": {
                    "description": "Filesystem type, if known. For example, ext3 or NTFS.\nset if VMware Tools reports a value.",
                    "type": "string"
                },
                "free_space": {
                    "description": "Free space on the file system, in bytes.",
                    "format": "int64",
                    "type": "integer"
                },
                "mappings": {
                    "description": "VirtualDisks backing the guest partition, if known.\nThis field is optional because it was added in a newer version than its parent node.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.guest.local_filesystem.virtual_disk_mapping"
                    },
                    "type": "array"
                }
            },
            "required": [
                "capacity",
                "free_space"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.local_filesystem.virtual_disk_mapping": {
            "properties": {
                "disk": {
                    "description": "The virtual disk.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "type": "string"
                }
            },
            "required": [
                "disk"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.local_filesystem_resp": {
            "properties": {
                "value": {
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.guest.local_filesystem.info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.networking.info": {
            "properties": {
                "dns": {
                    "$ref": "#/definitions/vcenter.vm.guest.dns_config_info",
                    "description": "Client DNS configuration. How DNS queries are resolved.\nIf unset no DNS assigned value exists."
                },
                "dns_values": {
                    "$ref": "#/definitions/vcenter.vm.guest.dns_assigned_values",
                    "description": "Client DNS values. Data assigned by DNS.\nIf unset no DNS assigned value exists."
                }
            },
            "type": "object"
        },
        "vcenter.vm.guest.networking.interfaces.info": {
            "properties": {
                "dns": {
                    "$ref": "#/definitions/vcenter.vm.guest.dns_config_info",
                    "description": "DNS configuration of the adapter. See Networking.Info.dns for system wide settings.\nIf unset then not assigned by the Guest OS."
                },
                "dns_values": {
                    "$ref": "#/definitions/vcenter.vm.guest.dns_assigned_values",
                    "description": "Client DNS values. Data assigned by DNS.\nIf unset no DNS assigned value exists."
                },
                "ip": {
                    "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.ip_config_info",
                    "description": "IP configuration settings of the adapter\nIf unset then not supported by the Guest OS."
                },
                "mac_address": {
                    "description": "MAC address of the adapter.\nIf unset then not supported by the Guest OS.",
                    "type": "string"
                },
                "nic": {
                    "description": "Link to the corresponding virtual device.\nIf unset then the interface is not backed by a virtual device.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                    "type": "string"
                },
                "wins_servers": {
                    "description": "The IP addresses of any WINS name servers for the adapter.\nIf unset then not supported by the Guest OS.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "vcenter.vm.guest.networking.interfaces.ip_address_info": {
            "properties": {
                "ip_address": {
                    "description": "IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit addresses specified using eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "string"
                },
                "origin": {
                    "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.ip_address_origin",
                    "description": "How this address was configured.\nIf unset the data was not available."
                },
                "prefix_length": {
                    "description": "Denotes the length of a generic Internet network address prefix. Prefix length: the valid range of values is 0-32 for IPv4, and 0-128 for IPv6. A value of n corresponds to an IP address mask that has n contiguous 1-bits from the most significant bit (MSB), with all other bits set to 0. A value of zero is valid only if the calling context defines it.",
                    "format": "int64",
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.ip_address_status",
                    "description": "The state of this ipAddress."
                }
            },
            "required": [
                "ip_address",
                "prefix_length",
                "state"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.networking.interfaces.ip_address_origin": {
            "description": "The Interfaces.IpAddressOrigin enumerated type specifies how an IP address was obtained for an interface. See RFC 4293 IpAddressOriginTC.",
            "enum": [
                "OTHER",
                "MANUAL",
                "DHCP",
                "LINKLAYER",
                "RANDOM"
            ],
            "type": "string"
        },
        "vcenter.vm.guest.networking.interfaces.ip_address_status": {
            "description": "The Interfaces.IpAddressStatus enumerated type defines the present status of an address on an interface. See RFC 4293 IpAddressStatusTC.",
            "enum": [
                "PREFERRED",
                "DEPRECATED",
                "INVALID",
                "INACCESSIBLE",
                "UNKNOWN",
                "TENTATIVE",
                "DUPLICATE"
            ],
            "type": "string"
        },
        "vcenter.vm.guest.networking.interfaces.ip_config_info": {
            "properties": {
                "dhcp": {
                    "$ref": "#/definitions/vcenter.vm.guest.dhcp_config_info",
                    "description": "Client side DHCP for an interface.\nIf unset the IP was not configured by DHCP."
                },
                "ip_addresses": {
                    "description": "IP addresses configured on the interface.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.ip_address_info"
                    },
                    "type": "array"
                }
            },
            "required": [
                "ip_addresses"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.networking.interfaces.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.info"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.networking.routes.info": {
            "properties": {
                "gateway_address": {
                    "description": "Where to send the packets for this route. Unicast IP Address of the next hop router. IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit specified using as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.\nIf unset no gateway is set for the route.",
                    "type": "string"
                },
                "interface_index": {
                    "description": "The network interface associated with this route. This is an index into the result of Interfaces.list The index refers to the relative position of an element in a list. For example, an index of 0 refers to the first element in the list while an index of 1 refers to the second element.\nIf unset the route is not associated with a network interface.",
                    "format": "int64",
                    "type": "integer"
                },
                "network": {
                    "description": "IP Address of the destination IP network. IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit specified using as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "string"
                },
                "prefix_length": {
                    "description": "The prefix length. For IPv4 the value range is 0-32. For IPv6 prefixLength is a decimal value range 0-128. The property represents the number of contiguous, higher-order bits of the address that make up the network portion of the IP address.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "network",
                "prefix_length"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.networking.routes.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.guest.networking.routes.info"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.networking_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.guest.networking.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.power.info": {
            "properties": {
                "operations_ready": {
                    "description": "Flag indicating if the virtual machine is ready to process soft power operations.",
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.vm.guest.power.state",
                    "description": "The power state of the guest operating system."
                }
            },
            "required": [
                "state",
                "operations_ready"
            ],
            "type": "object"
        },
        "vcenter.vm.guest.power.state": {
            "description": "Possible guest power states.",
            "enum": [
                "RUNNING",
                "SHUTTING_DOWN",
                "RESETTING",
                "STANDBY",
                "NOT_RUNNING",
                "UNAVAILABLE"
            ],
            "type": "string"
        },
        "vcenter.vm.guest.power_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.guest.power.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.guest_OS": {
            "description": "The GuestOS enumerated type defines the valid guest operating system types used for configuring a virtual machine.",
            "enum": [
                "DOS",
                "WIN_31",
                "WIN_95",
                "WIN_98",
                "WIN_ME",
                "WIN_NT",
                "WIN_2000_PRO",
                "WIN_2000_SERV",
                "WIN_2000_ADV_SERV",
                "WIN_XP_HOME",
                "WIN_XP_PRO",
                "WIN_XP_PRO_64",
                "WIN_NET_WEB",
                "WIN_NET_STANDARD",
                "WIN_NET_ENTERPRISE",
                "WIN_NET_DATACENTER",
                "WIN_NET_BUSINESS",
                "WIN_NET_STANDARD_64",
                "WIN_NET_ENTERPRISE_64",
                "WIN_LONGHORN",
                "WIN_LONGHORN_64",
                "WIN_NET_DATACENTER_64",
                "WIN_VISTA",
                "WIN_VISTA_64",
                "WINDOWS_7",
                "WINDOWS_7_64",
                "WINDOWS_7_SERVER_64",
                "WINDOWS_8",
                "WINDOWS_8_64",
                "WINDOWS_8_SERVER_64",
                "WINDOWS_9",
                "WINDOWS_9_64",
                "WINDOWS_9_SERVER_64",
                "WINDOWS_HYPERV",
                "WINDOWS_SERVER_2019",
                "FREEBSD",
                "FREEBSD_64",
                "FREEBSD_11",
                "FREEBSD_12",
                "FREEBSD_11_64",
                "FREEBSD_12_64",
                "REDHAT",
                "RHEL_2",
                "RHEL_3",
                "RHEL_3_64",
                "RHEL_4",
                "RHEL_4_64",
                "RHEL_5",
                "RHEL_5_64",
                "RHEL_6",
                "RHEL_6_64",
                "RHEL_7",
                "RHEL_7_64",
                "RHEL_8_64",
                "CENTOS",
                "CENTOS_64",
                "CENTOS_6",
                "CENTOS_6_64",
                "CENTOS_7",
                "CENTOS_7_64",
                "CENTOS_8_64",
                "ORACLE_LINUX",
                "ORACLE_LINUX_64",
                "ORACLE_LINUX_6",
                "ORACLE_LINUX_6_64",
                "ORACLE_LINUX_7",
                "ORACLE_LINUX_7_64",
                "ORACLE_LINUX_8_64",
                "SUSE",
                "SUSE_64",
                "SLES",
                "SLES_64",
                "SLES_10",
                "SLES_10_64",
                "SLES_11",
                "SLES_11_64",
                "SLES_12",
                "SLES_12_64",
                "SLES_15_64",
                "NLD_9",
                "OES",
                "SJDS",
                "MANDRAKE",
                "MANDRIVA",
                "MANDRIVA_64",
                "TURBO_LINUX",
                "TURBO_LINUX_64",
                "UBUNTU",
                "UBUNTU_64",
                "DEBIAN_4",
                "DEBIAN_4_64",
                "DEBIAN_5",
                "DEBIAN_5_64",
                "DEBIAN_6",
                "DEBIAN_6_64",
                "DEBIAN_7",
                "DEBIAN_7_64",
                "DEBIAN_8",
                "DEBIAN_8_64",
                "DEBIAN_9",
                "DEBIAN_9_64",
                "DEBIAN_10",
                "DEBIAN_10_64",
                "DEBIAN_11",
                "DEBIAN_11_64",
                "ASIANUX_3",
                "ASIANUX_3_64",
                "ASIANUX_4",
                "ASIANUX_4_64",
                "ASIANUX_5_64",
                "ASIANUX_7_64",
                "ASIANUX_8_64",
                "OPENSUSE",
                "OPENSUSE_64",
                "FEDORA",
                "FEDORA_64",
                "COREOS_64",
                "VMWARE_PHOTON_64",
                "OTHER_24X_LINUX",
                "OTHER_24X_LINUX_64",
                "OTHER_26X_LINUX",
                "OTHER_26X_LINUX_64",
                "OTHER_3X_LINUX",
                "OTHER_3X_LINUX_64",
                "OTHER_4X_LINUX",
                "OTHER_4X_LINUX_64",
                "OTHER_LINUX",
                "GENERIC_LINUX",
                "OTHER_LINUX_64",
                "SOLARIS_6",
                "SOLARIS_7",
                "SOLARIS_8",
                "SOLARIS_9",
                "SOLARIS_10",
                "SOLARIS_10_64",
                "SOLARIS_11_64",
                "OS2",
                "ECOMSTATION",
                "ECOMSTATION_2",
                "NETWARE_4",
                "NETWARE_5",
                "NETWARE_6",
                "OPENSERVER_5",
                "OPENSERVER_6",
                "UNIXWARE_7",
                "DARWIN",
                "DARWIN_64",
                "DARWIN_10",
                "DARWIN_10_64",
                "DARWIN_11",
                "DARWIN_11_64",
                "DARWIN_12_64",
                "DARWIN_13_64",
                "DARWIN_14_64",
                "DARWIN_15_64",
                "DARWIN_16_64",
                "DARWIN_17_64",
                "DARWIN_18_64",
                "DARWIN_19_64",
                "VMKERNEL",
                "VMKERNEL_5",
                "VMKERNEL_6",
                "VMKERNEL_65",
                "VMKERNEL_7",
                "AMAZONLINUX2_64",
                "CRXPOD_1",
                "OTHER",
                "OTHER_64"
            ],
            "type": "string"
        },
        "vcenter.vm.guest_OS_family": {
            "description": "The GuestOSFamily enumerated type defines the valid guest operating system family types reported by a virtual machine.",
            "enum": [
                "WINDOWS",
                "LINUX",
                "NETWARE",
                "SOLARIS",
                "DARWIN",
                "OTHER"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.adapter.sata.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.sata.create_spec": {
            "properties": {
                "bus": {
                    "description": "SATA bus number.\nIf unset, the server will choose an available bus number; if none is available, the request will fail.",
                    "format": "int64",
                    "type": "integer"
                },
                "pci_slot_number": {
                    "description": "Address of the SATA adapter on the PCI bus.\nIf unset, the server will choose an available address when the virtual machine is powered on.",
                    "format": "int64",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.type",
                    "description": "Adapter type.\nIf unset, a guest-specific default value will be used."
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.sata.info": {
            "properties": {
                "bus": {
                    "description": "SATA bus number.",
                    "format": "int64",
                    "type": "integer"
                },
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "pci_slot_number": {
                    "description": "Address of the SATA adapter on the PCI bus.\nMay be unset if the virtual machine has never been powered on since the adapter was created.",
                    "format": "int64",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.type",
                    "description": "Adapter type."
                }
            },
            "required": [
                "label",
                "type",
                "bus"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.sata.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.sata.summary": {
            "properties": {
                "adapter": {
                    "description": "Identifier of the virtual SATA adapter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.SataAdapter.",
                    "type": "string"
                }
            },
            "required": [
                "adapter"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.sata.type": {
            "description": "The Sata.Type enumerated type defines the valid emulation types for a virtual SATA adapter.",
            "enum": [
                "AHCI"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.adapter.sata_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.create_spec",
                    "description": "Specification for the new virtual SATA adapter."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.sata_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.scsi.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.scsi.create_spec": {
            "properties": {
                "bus": {
                    "description": "SCSI bus number.\nIf unset, the server will choose an available bus number; if none is available, the request will fail.",
                    "format": "int64",
                    "type": "integer"
                },
                "pci_slot_number": {
                    "description": "Address of the SCSI adapter on the PCI bus. If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.\nIf unset, the server will choose an available address when the virtual machine is powered on.",
                    "format": "int64",
                    "type": "integer"
                },
                "sharing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.sharing",
                    "description": "Bus sharing mode.\nIf unset, the adapter will default to NONE."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.type",
                    "description": "Adapter type.\nIf unset, a guest-specific default value will be used."
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.scsi.info": {
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "pci_slot_number": {
                    "description": "Address of the SCSI adapter on the PCI bus. If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.\nMay be unset if the virtual machine has never been powered on since the adapter was created.",
                    "format": "int64",
                    "type": "integer"
                },
                "scsi": {
                    "$ref": "#/definitions/vcenter.vm.hardware.scsi_address_info",
                    "description": "Address of the SCSI adapter on the SCSI bus."
                },
                "sharing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.sharing",
                    "description": "Bus sharing mode."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.type",
                    "description": "Adapter type."
                }
            },
            "required": [
                "label",
                "type",
                "scsi",
                "sharing"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.scsi.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.scsi.sharing": {
            "description": "The Scsi.Sharing enumerated type defines the valid bus sharing modes for a virtual SCSI adapter.",
            "enum": [
                "NONE",
                "VIRTUAL",
                "PHYSICAL"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.adapter.scsi.summary": {
            "properties": {
                "adapter": {
                    "description": "Identifier of the virtual SCSI adapter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter.",
                    "type": "string"
                }
            },
            "required": [
                "adapter"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.scsi.type": {
            "description": "The Scsi.Type enumerated type defines the valid emulation types for a virtual SCSI adapter.",
            "enum": [
                "BUSLOGIC",
                "LSILOGIC",
                "LSILOGICSAS",
                "PVSCSI"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.adapter.scsi.update_spec": {
            "properties": {
                "sharing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.sharing",
                    "description": "Bus sharing mode. \n This field may only be modified if the virtual machine is not powered on.\n\nIf unset, the value is unchanged."
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.scsi_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.create_spec",
                    "description": "Specification for the new virtual SCSI adapter."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.scsi_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.adapter.scsi_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.update_spec",
                    "description": "Specification for updating the virtual SCSI adapter."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.boot.create_spec": {
            "properties": {
                "delay": {
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on. This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.\nIf unset, default value is 0.",
                    "format": "int64",
                    "type": "integer"
                },
                "efi_legacy_boot": {
                    "description": "Flag indicating whether to use EFI legacy boot mode.\nIf unset, defaults to value that is recommended for the guest OS and is supported for the virtual hardware version.",
                    "type": "boolean"
                },
                "enter_setup_mode": {
                    "description": "Flag indicating whether the firmware boot process should automatically enter setup mode the next time the virtual machine boots. Note that this flag will automatically be reset to false once the virtual machine enters setup mode.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "network_protocol": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.network_protocol",
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.\nIf unset, defaults to a system defined default value."
                },
                "retry": {
                    "description": "Flag indicating whether the virtual machine should automatically retry the boot process after a failure.\nIf unset, default value is false.",
                    "type": "boolean"
                },
                "retry_delay": {
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when Boot.Info.retry is true.\nIf unset, default value is 10000.",
                    "format": "int64",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.type",
                    "description": "Firmware type to be used by the virtual machine.\nIf unset, defaults to value that is recommended for the guest OS and is supported for the virtual hardware version."
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.boot.device.entry": {
            "properties": {
                "disks": {
                    "description": "Virtual disk device. List of virtual disks in boot order.\nThis field is optional and it is only relevant when the value of Device.Entry.type is DISK.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nic": {
                    "description": "Virtual Ethernet device. Ethernet device to use as boot device for this entry.\nThis field is optional and it is only relevant when the value of Device.Entry.type is ETHERNET.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.device.type",
                    "description": "Virtual device type."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.boot.device.entry_create_spec": {
            "properties": {
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.device.type",
                    "description": "Virtual Boot device type."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.boot.device.type": {
            "description": "The Device.Type enumerated type defines the valid device types that may be used as bootable devices.",
            "enum": [
                "CDROM",
                "DISK",
                "ETHERNET",
                "FLOPPY"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.boot.device_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.boot.device.entry"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.boot.device_set": {
            "properties": {
                "devices": {
                    "description": "Ordered list of boot devices.",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.boot.device.entry"
                    },
                    "type": "array"
                }
            },
            "required": [
                "devices"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.boot.info": {
            "properties": {
                "delay": {
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on. This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.",
                    "format": "int64",
                    "type": "integer"
                },
                "efi_legacy_boot": {
                    "description": "Flag indicating whether to use EFI legacy boot mode.\nThis field is optional and it is only relevant when the value of Boot.Info.type is EFI.",
                    "type": "boolean"
                },
                "enter_setup_mode": {
                    "description": "Flag indicating whether the firmware boot process will automatically enter setup mode the next time the virtual machine boots. Note that this flag will automatically be reset to false once the virtual machine enters setup mode.",
                    "type": "boolean"
                },
                "network_protocol": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.network_protocol",
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.\nThis field is optional and it is only relevant when the value of Boot.Info.type is EFI."
                },
                "retry": {
                    "description": "Flag indicating whether the virtual machine will automatically retry the boot process after a failure.",
                    "type": "boolean"
                },
                "retry_delay": {
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when Boot.Info.retry is true.",
                    "format": "int64",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.type",
                    "description": "Firmware type used by the virtual machine."
                }
            },
            "required": [
                "type",
                "delay",
                "retry",
                "retry_delay",
                "enter_setup_mode"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.boot.network_protocol": {
            "description": "The Boot.NetworkProtocol enumerated type defines the valid network boot protocols supported when booting a virtual machine with EFI firmware over the network.",
            "enum": [
                "IPV4",
                "IPV6"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.boot.type": {
            "description": "The Boot.Type enumerated type defines the valid firmware types for a virtual machine.",
            "enum": [
                "BIOS",
                "EFI"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.boot.update_spec": {
            "properties": {
                "delay": {
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on. This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.\nIf unset, the value is unchanged.",
                    "format": "int64",
                    "type": "integer"
                },
                "efi_legacy_boot": {
                    "description": "Flag indicating whether to use EFI legacy boot mode.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "enter_setup_mode": {
                    "description": "Flag indicating whether the firmware boot process should automatically enter setup mode the next time the virtual machine boots. Note that this flag will automatically be reset to false once the virtual machine enters setup mode.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "network_protocol": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.network_protocol",
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.\nIf unset, the value is unchanged."
                },
                "retry": {
                    "description": "Flag indicating whether the virtual machine should automatically retry the boot process after a failure.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "retry_delay": {
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when Boot.Info.retry is true.\nIf unset, the value is unchanged.",
                    "format": "int64",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.type",
                    "description": "Firmware type to be used by the virtual machine.\nIf unset, the value is unchanged."
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.boot_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.boot_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.update_spec",
                    "description": "Specification for updating the boot-related settings of the virtual machine."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom.backing_info": {
            "properties": {
                "auto_detect": {
                    "description": "Flag indicating whether the virtual CD-ROM device is configured to automatically detect a suitable host device.\nThis field is optional and it is only relevant when the value of Cdrom.BackingInfo.type is HOST_DEVICE.",
                    "type": "boolean"
                },
                "device_access_type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.device_access_type",
                    "description": "Access type for the device backing.\nThis field is optional and it is only relevant when the value of Cdrom.BackingInfo.type is one of HOST_DEVICE or CLIENT_DEVICE."
                },
                "host_device": {
                    "description": "Name of the host device backing the virtual CD-ROM device. \n\n\nThis field will be unset if Cdrom.BackingInfo.auto-detect is true and the virtual CD-ROM device is not connected or no suitable device is available on the host.",
                    "type": "string"
                },
                "iso_file": {
                    "description": "Path of the image file backing the virtual CD-ROM device.\nThis field is optional and it is only relevant when the value of Cdrom.BackingInfo.type is ISO_FILE.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_type",
                    "description": "Backing type for the virtual CD-ROM device."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom.backing_spec": {
            "properties": {
                "device_access_type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.device_access_type",
                    "description": "Access type for the device backing.\nIf unset, defaults to EMULATION."
                },
                "host_device": {
                    "description": "Name of the device that should be used as the virtual CD-ROM device backing.\nIf unset, the virtual CD-ROM device will be configured to automatically detect a suitable host device.",
                    "type": "string"
                },
                "iso_file": {
                    "description": "Path of the image file that should be used as the virtual CD-ROM device backing.\nThis field is optional and it is only relevant when the value of Cdrom.BackingSpec.type is ISO_FILE.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_type",
                    "description": "Backing type for the virtual CD-ROM device."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom.backing_type": {
            "description": "The Cdrom.BackingType enumerated type defines the valid backing types for a virtual CD-ROM device.",
            "enum": [
                "ISO_FILE",
                "HOST_DEVICE",
                "CLIENT_DEVICE"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.cdrom.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom.create_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_spec",
                    "description": "Physical resource backing for the virtual CD-ROM device.\nIf unset, defaults to automatic detection of a suitable host device."
                },
                "ide": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ide_address_spec",
                    "description": "Address for attaching the device to a virtual IDE adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail."
                },
                "sata": {
                    "$ref": "#/definitions/vcenter.vm.hardware.sata_address_spec",
                    "description": "Address for attaching the device to a virtual SATA adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.host_bus_adapter_type",
                    "description": "Type of host bus adapter to which the device should be attached.\nIf unset, guest-specific default values will be used"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom.device_access_type": {
            "description": "The Cdrom.DeviceAccessType enumerated type defines the valid device access types for a physical device packing of a virtual CD-ROM device.",
            "enum": [
                "EMULATION",
                "PASSTHRU",
                "PASSTHRU_EXCLUSIVE"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.cdrom.host_bus_adapter_type": {
            "description": "The Cdrom.HostBusAdapterType enumerated type defines the valid types of host bus adapters that may be used for attaching a Cdrom to a virtual machine.",
            "enum": [
                "IDE",
                "SATA"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.cdrom.info": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_info",
                    "description": "Physical resource backing for the virtual CD-ROM device."
                },
                "ide": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ide_address_info",
                    "description": "Address of device attached to a virtual IDE adapter.\nThis field is optional and it is only relevant when the value of Cdrom.Info.type is IDE."
                },
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "sata": {
                    "$ref": "#/definitions/vcenter.vm.hardware.sata_address_info",
                    "description": "Address of device attached to a virtual SATA adapter.\nThis field is optional and it is only relevant when the value of Cdrom.Info.type is SATA."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state",
                    "description": "Connection status of the virtual device."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.host_bus_adapter_type",
                    "description": "Type of host bus adapter to which the device is attached."
                }
            },
            "required": [
                "type",
                "label",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.cdrom.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom.summary": {
            "properties": {
                "cdrom": {
                    "description": "Identifier of the virtual CD-ROM device.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Cdrom. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Cdrom.",
                    "type": "string"
                }
            },
            "required": [
                "cdrom"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom.update_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_spec",
                    "description": "Physical resource backing for the virtual CD-ROM device. \n This field may only be modified if the virtual machine is not powered on or the virtual CD-ROM device is not connected.\n\nIf unset, the value is unchanged."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.create_spec",
                    "description": "Specification for the new virtual CD-ROM device."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cdrom_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.update_spec",
                    "description": "Specification for updating the virtual CD-ROM device."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.connection_state": {
            "description": "The ConnectionState enumerated type defines the valid states for a removable device that is configured to be connected.",
            "enum": [
                "CONNECTED",
                "RECOVERABLE_ERROR",
                "UNRECOVERABLE_ERROR",
                "NOT_CONNECTED",
                "UNKNOWN"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.cpu.info": {
            "properties": {
                "cores_per_socket": {
                    "description": "Number of CPU cores per socket.",
                    "format": "int64",
                    "type": "integer"
                },
                "count": {
                    "description": "Number of CPU cores.",
                    "format": "int64",
                    "type": "integer"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding CPUs while the virtual machine is running is enabled.",
                    "type": "boolean"
                },
                "hot_remove_enabled": {
                    "description": "Flag indicating whether removing CPUs while the virtual machine is running is enabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "count",
                "cores_per_socket",
                "hot_add_enabled",
                "hot_remove_enabled"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cpu.update_spec": {
            "properties": {
                "cores_per_socket": {
                    "description": "New number of CPU cores per socket. The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket.\nIf unset, the value is unchanged.",
                    "format": "int64",
                    "type": "integer"
                },
                "count": {
                    "description": "New number of CPU cores. The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket. \n The supported range of CPU counts is constrained by the configured guest operating system and virtual hardware version of the virtual machine. \n\n If the virtual machine is running, the number of CPU cores may only be increased if Cpu.Info.hot-add-enabled is true, and may only be decreased if Cpu.Info.hot-remove-enabled is true.\n\nIf unset, the value is unchanged.",
                    "format": "int64",
                    "type": "integer"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding CPUs while the virtual machine is running is enabled. \n This field may only be modified if the virtual machine is powered off.\n\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "hot_remove_enabled": {
                    "description": "Flag indicating whether removing CPUs while the virtual machine is running is enabled. \n This field may only be modified if the virtual machine is powered off.\n\nIf unset, the value is unchanged.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.cpu_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cpu.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.cpu_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cpu.update_spec",
                    "description": "Specification for updating the CPU-related settings of the virtual machine."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk.backing_info": {
            "properties": {
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_type",
                    "description": "Backing type for the virtual disk."
                },
                "vmdk_file": {
                    "description": "Path of the VMDK file backing the virtual disk.\nThis field is optional and it is only relevant when the value of Disk.BackingInfo.type is VMDK_FILE.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk.backing_spec": {
            "properties": {
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_type",
                    "description": "Backing type for the virtual disk."
                },
                "vmdk_file": {
                    "description": "Path of the VMDK file backing the virtual disk.\nThis field is optional and it is only relevant when the value of Disk.BackingSpec.type is VMDK_FILE.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk.backing_type": {
            "description": "The Disk.BackingType enumerated type defines the valid backing types for a virtual disk.",
            "enum": [
                "VMDK_FILE"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.disk.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk.create_spec": {
            "properties": {
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_spec",
                    "description": "Existing physical resource backing for the virtual disk. Exactly one of Disk.CreateSpec.backing or Disk.CreateSpec.new-vmdk must be specified.\nIf unset, the virtual disk will not be connected to an existing backing."
                },
                "ide": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ide_address_spec",
                    "description": "Address for attaching the device to a virtual IDE adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail."
                },
                "new_vmdk": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.vmdk_create_spec",
                    "description": "Specification for creating a new VMDK backing for the virtual disk. Exactly one of Disk.CreateSpec.backing or Disk.CreateSpec.new-vmdk must be specified.\nIf unset, a new VMDK backing will not be created."
                },
                "sata": {
                    "$ref": "#/definitions/vcenter.vm.hardware.sata_address_spec",
                    "description": "Address for attaching the device to a virtual SATA adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail."
                },
                "scsi": {
                    "$ref": "#/definitions/vcenter.vm.hardware.scsi_address_spec",
                    "description": "Address for attaching the device to a virtual SCSI adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.host_bus_adapter_type",
                    "description": "Type of host bus adapter to which the device should be attached.\nIf unset, guest-specific default values will be used"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.disk.host_bus_adapter_type": {
            "description": "The Disk.HostBusAdapterType enumerated type defines the valid types of host bus adapters that may be used for attaching a virtual storage device to a virtual machine.",
            "enum": [
                "IDE",
                "SCSI",
                "SATA"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.disk.info": {
            "properties": {
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_info",
                    "description": "Physical resource backing for the virtual disk."
                },
                "capacity": {
                    "description": "Capacity of the virtual disk in bytes.\nIf unset, virtual disk is inaccessible or disk capacity is 0.",
                    "format": "int64",
                    "type": "integer"
                },
                "ide": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ide_address_info",
                    "description": "Address of device attached to a virtual IDE adapter.\nWorkaround for PR1459646"
                },
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "sata": {
                    "$ref": "#/definitions/vcenter.vm.hardware.sata_address_info",
                    "description": "Address of device attached to a virtual SATA adapter.\nWorkaround for PR1459646"
                },
                "scsi": {
                    "$ref": "#/definitions/vcenter.vm.hardware.scsi_address_info",
                    "description": "Address of device attached to a virtual SCSI adapter.\nWorkaround for PR1459646"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.host_bus_adapter_type",
                    "description": "Type of host bus adapter to which the device is attached."
                }
            },
            "required": [
                "label",
                "type",
                "backing"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.disk.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk.storage_policy_spec": {
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy which should be associated with the VMDK file.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.StoragePolicy.",
                    "type": "string"
                }
            },
            "required": [
                "policy"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk.summary": {
            "properties": {
                "disk": {
                    "description": "Identifier of the virtual Disk.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "type": "string"
                }
            },
            "required": [
                "disk"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk.update_spec": {
            "properties": {
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_spec",
                    "description": "Physical resource backing for the virtual disk. \n This field may only be modified if the virtual machine is not powered on.\n\nIf unset, the value is unchanged."
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.disk.vmdk_create_spec": {
            "properties": {
                "capacity": {
                    "description": "Capacity of the virtual disk backing in bytes.\nIf unset, defaults to a guest-specific capacity.",
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "Base name of the VMDK file. The name should not include the '.vmdk' file extension.\nIf unset, a name (derived from the name of the virtual machine) will be chosen by the server.",
                    "type": "string"
                },
                "storage_policy": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.storage_policy_spec",
                    "description": "The Disk.StoragePolicySpec structure contains information about the storage policy that is to be associated the with VMDK file.\nIf unset the default storage policy of the target datastore (if applicable) is applied. Currently a default storage policy is only supported by object based datastores : VVol & vSAN. For non- object datastores, if unset then no storage policy would be associated with the VMDK file."
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.disk_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.create_spec",
                    "description": "Specification for the new virtual disk."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.disk_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.update_spec",
                    "description": "Specification for updating the virtual disk."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet.backing_info": {
            "properties": {
                "connection_cookie": {
                    "description": "Server-generated cookie that identifies the connection to the port. This ookie may be used to verify that the virtual machine is the rightful owner of the port.\nThis field will be unset if the virtual Ethernet device is not bound to a distributed virtual port; this can happen if the virtual machine is powered off or the virtual Ethernet device is not connected.",
                    "format": "int64",
                    "type": "integer"
                },
                "distributed_port": {
                    "description": "Key of the distributed virtual port that backs the virtual Ethernet adapter.\nThis field will be unset if the virtual Ethernet device is not bound to a distributed virtual port; this can happen if the virtual machine is powered off or the virtual Ethernet device is not connected.",
                    "type": "string"
                },
                "distributed_switch_uuid": {
                    "description": "UUID of the distributed virtual switch that backs the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is DISTRIBUTED_PORTGROUP.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is HOST_DEVICE.",
                    "type": "string"
                },
                "network": {
                    "description": "Identifier of the network backing the virtual Ethernet adapter.\nIf unset, the identifier of the network backing could not be determined.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network.",
                    "type": "string"
                },
                "network_name": {
                    "description": "Name of the standard portgroup backing the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is STANDARD_PORTGROUP.",
                    "type": "string"
                },
                "opaque_network_id": {
                    "description": "Identifier of the opaque network that backs the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is OPAQUE_NETWORK.",
                    "type": "string"
                },
                "opaque_network_type": {
                    "description": "Type of the opaque network that backs the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is OPAQUE_NETWORK.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_type",
                    "description": "Backing type for the virtual Ethernet adapter."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet.backing_spec": {
            "properties": {
                "distributed_port": {
                    "description": "Key of the distributed virtual port that backs the virtual Ethernet adapter. Depending on the type of the Portgroup, the port may be specified using this field. If the portgroup type is early-binding (also known as static), a port is assigned when the Ethernet adapter is configured to use the port. The port may be either automatically or specifically assigned based on the value of this field. If the portgroup type is ephemeral, the port is created and assigned to a virtual machine when it is powered on and the Ethernet adapter is connected. This field cannot be specified as no free ports exist before use.\nMay be used to specify a port when the network specified on the Ethernet.BackingSpec.network field is a static or early binding distributed portgroup. If unset, the port will be automatically assigned to the Ethernet adapter based on the policy embodied by the portgroup type.",
                    "type": "string"
                },
                "network": {
                    "description": "Identifier of the network that backs the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingSpec.type is one of STANDARD_PORTGROUP, DISTRIBUTED_PORTGROUP, or OPAQUE_NETWORK.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_type",
                    "description": "Backing type for the virtual Ethernet adapter."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet.backing_type": {
            "description": "The Ethernet.BackingType enumerated type defines the valid backing types for a virtual Ethernet adapter.",
            "enum": [
                "STANDARD_PORTGROUP",
                "HOST_DEVICE",
                "DISTRIBUTED_PORTGROUP",
                "OPAQUE_NETWORK"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.ethernet.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet.create_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_spec",
                    "description": "Physical resource backing for the virtual Ethernet adapter.\nIf unset, the system may try to find an appropriate backing. If one is not found, the request will fail."
                },
                "mac_address": {
                    "description": "MAC address.\nWorkaround for PR1459647",
                    "type": "string"
                },
                "mac_type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.mac_address_type",
                    "description": "MAC address type.\nIf unset, defaults to GENERATED."
                },
                "pci_slot_number": {
                    "description": "Address of the virtual Ethernet adapter on the PCI bus. If the PCI address is invalid, the server will change when it the VM is started or as the device is hot added.\nIf unset, the server will choose an available address when the virtual machine is powered on.",
                    "format": "int64",
                    "type": "integer"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.emulation_type",
                    "description": "Ethernet adapter emulation type.\nIf unset, defaults to a guest-specific type."
                },
                "upt_compatibility_enabled": {
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility is enabled on this virtual Ethernet adapter.\nIf unset, defaults to false.",
                    "type": "boolean"
                },
                "wake_on_lan_enabled": {
                    "description": "Flag indicating whether wake-on-LAN is enabled on this virtual Ethernet adapter.\nDefaults to false if unset.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet.emulation_type": {
            "description": "The Ethernet.EmulationType enumerated type defines the valid emulation types for a virtual Ethernet adapter.",
            "enum": [
                "E1000",
                "E1000E",
                "PCNET32",
                "VMXNET",
                "VMXNET2",
                "VMXNET3"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.ethernet.info": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_info",
                    "description": "Physical resource backing for the virtual Ethernet adapter."
                },
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "mac_address": {
                    "description": "MAC address.\nMay be unset if Ethernet.Info.mac-type is MANUAL and has not been specified, or if Ethernet.Info.mac-type is GENERATED and the virtual machine has never been powered on since the Ethernet adapter was created.",
                    "type": "string"
                },
                "mac_type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.mac_address_type",
                    "description": "MAC address type."
                },
                "pci_slot_number": {
                    "description": "Address of the virtual Ethernet adapter on the PCI bus. If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.\nMay be unset if the virtual machine has never been powered on since the adapter was created.",
                    "format": "int64",
                    "type": "integer"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state",
                    "description": "Connection status of the virtual device."
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.emulation_type",
                    "description": "Ethernet adapter emulation type."
                },
                "upt_compatibility_enabled": {
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility is enabled on this virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.Info.type is VMXNET3.",
                    "type": "boolean"
                },
                "wake_on_lan_enabled": {
                    "description": "Flag indicating whether wake-on-LAN is enabled on this virtual Ethernet adapter.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "type",
                "mac_type",
                "wake_on_lan_enabled",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.ethernet.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet.mac_address_type": {
            "description": "The Ethernet.MacAddressType enumerated type defines the valid MAC address origins for a virtual Ethernet adapter.",
            "enum": [
                "MANUAL",
                "GENERATED",
                "ASSIGNED"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.ethernet.summary": {
            "properties": {
                "nic": {
                    "description": "Identifier of the virtual Ethernet adapter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                    "type": "string"
                }
            },
            "required": [
                "nic"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet.update_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_spec",
                    "description": "Physical resource backing for the virtual Ethernet adapter. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged."
                },
                "mac_address": {
                    "description": "MAC address. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged. Must be specified if Ethernet.UpdateSpec.mac-type is MANUAL. Must be unset if the MAC address type is not MANUAL.",
                    "type": "string"
                },
                "mac_type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.mac_address_type",
                    "description": "MAC address type. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "upt_compatibility_enabled": {
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility should be enabled on this virtual Ethernet adapter. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged. Must be unset if the emulation type of the virtual Ethernet adapter is not VMXNET3.",
                    "type": "boolean"
                },
                "wake_on_lan_enabled": {
                    "description": "Flag indicating whether wake-on-LAN shoud be enabled on this virtual Ethernet adapter. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.create_spec",
                    "description": "Specification for the new virtual Ethernet adapter."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ethernet_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.update_spec",
                    "description": "Specification for updating the virtual Ethernet adapter."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.floppy.backing_info": {
            "properties": {
                "auto_detect": {
                    "description": "Flag indicating whether the virtual floppy drive is configured to automatically detect a suitable host device.\nThis field is optional and it is only relevant when the value of Floppy.BackingInfo.type is HOST_DEVICE.",
                    "type": "boolean"
                },
                "host_device": {
                    "description": "Name of the host device backing the virtual floppy drive. \n\n\nThis field will be unset if Floppy.BackingInfo.auto-detect is true and the virtual floppy drive is not connected or no suitable device is available on the host.",
                    "type": "string"
                },
                "image_file": {
                    "description": "Path of the image file backing the virtual floppy drive.\nThis field is optional and it is only relevant when the value of Floppy.BackingInfo.type is IMAGE_FILE.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_type",
                    "description": "Backing type for the virtual floppy drive."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.floppy.backing_spec": {
            "properties": {
                "host_device": {
                    "description": "Name of the device that should be used as the virtual floppy drive backing.\nIf unset, the virtual floppy drive will be configured to automatically detect a suitable host device.",
                    "type": "string"
                },
                "image_file": {
                    "description": "Path of the image file that should be used as the virtual floppy drive backing.\nThis field is optional and it is only relevant when the value of Floppy.BackingSpec.type is IMAGE_FILE.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_type",
                    "description": "Backing type for the virtual floppy drive."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.floppy.backing_type": {
            "description": "The Floppy.BackingType enumerated type defines the valid backing types for a virtual floppy drive.",
            "enum": [
                "IMAGE_FILE",
                "HOST_DEVICE",
                "CLIENT_DEVICE"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.floppy.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.floppy.create_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_spec",
                    "description": "Physical resource backing for the virtual floppy drive.\nIf unset, defaults to automatic detection of a suitable host device."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.floppy.info": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_info",
                    "description": "Physical resource backing for the virtual floppy drive."
                },
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state",
                    "description": "Connection status of the virtual device."
                }
            },
            "required": [
                "label",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.floppy.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.floppy.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.floppy.summary": {
            "properties": {
                "floppy": {
                    "description": "Identifier of the virtual floppy drive.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Floppy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Floppy.",
                    "type": "string"
                }
            },
            "required": [
                "floppy"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.floppy.update_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_spec",
                    "description": "Physical resource backing for the virtual floppy drive. \n This field may only be modified if the virtual machine is not powered on or the virtual floppy drive is not connected.\n\nIf unset, the value is unchanged."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.floppy_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.create_spec",
                    "description": "Specification for the new virtual floppy drive."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.floppy_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.floppy_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.update_spec",
                    "description": "Specification for updating the virtual floppy drive."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ide_address_info": {
            "properties": {
                "master": {
                    "description": "Flag specifying whether the device is the master or slave device on the IDE adapter.",
                    "type": "boolean"
                },
                "primary": {
                    "description": "Flag specifying whether the device is attached to the primary or secondary IDE adapter of the virtual machine.",
                    "type": "boolean"
                }
            },
            "required": [
                "primary",
                "master"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.ide_address_spec": {
            "properties": {
                "master": {
                    "description": "Flag specifying whether the device should be the master or slave device on the IDE adapter.\nIf unset, the server will choose an available connection type. If no IDE connections are available, the request will be rejected.",
                    "type": "boolean"
                },
                "primary": {
                    "description": "Flag specifying whether the device should be attached to the primary or secondary IDE adapter of the virtual machine.\nIf unset, the server will choose a adapter with an available connection. If no IDE connections are available, the request will be rejected.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.info": {
            "properties": {
                "upgrade_error": {
                    "description": "Reason for the scheduled upgrade failure.\nThis field is optional and it is only relevant when the value of Hardware.Info.upgrade-status is FAILED.",
                    "type": "object"
                },
                "upgrade_policy": {
                    "$ref": "#/definitions/vcenter.vm.hardware.upgrade_policy",
                    "description": "Scheduled upgrade policy."
                },
                "upgrade_status": {
                    "$ref": "#/definitions/vcenter.vm.hardware.upgrade_status",
                    "description": "Scheduled upgrade status."
                },
                "upgrade_version": {
                    "$ref": "#/definitions/vcenter.vm.hardware.version",
                    "description": "Target hardware version to be used on the next scheduled virtual hardware upgrade.\nThis field is optional and it is only relevant when the value of Hardware.Info.upgrade-policy is one of AFTER_CLEAN_SHUTDOWN or ALWAYS."
                },
                "version": {
                    "$ref": "#/definitions/vcenter.vm.hardware.version",
                    "description": "Virtual hardware version."
                }
            },
            "required": [
                "version",
                "upgrade_policy",
                "upgrade_status"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.memory.info": {
            "properties": {
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding memory while the virtual machine is running is enabled. \n Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running.\n",
                    "type": "boolean"
                },
                "hot_add_increment_size_MiB": {
                    "description": "The granularity, in mebibytes, at which memory can be added to a running virtual machine. \n When adding memory to a running virtual machine, the amount of memory added must be at least Memory.Info.hot-add-increment-size-mib and the total memory size of the virtual machine must be a multiple of {@link>hotAddIncrementSize}.\n\nOnly set when Memory.Info.hot-add-enabled is true and the virtual machine is running.",
                    "format": "int64",
                    "type": "integer"
                },
                "hot_add_limit_MiB": {
                    "description": "The maximum amount of memory, in mebibytes, that can be added to a running virtual machine.\nOnly set when Memory.Info.hot-add-enabled is true and the virtual machine is running.",
                    "format": "int64",
                    "type": "integer"
                },
                "size_MiB": {
                    "description": "Memory size in mebibytes.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "size_MiB",
                "hot_add_enabled"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.memory.update_spec": {
            "properties": {
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding memory while the virtual machine is running should be enabled. \n Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running. \n\n This field may only be modified if the virtual machine is not powered on.\n\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "size_MiB": {
                    "description": "New memory size in mebibytes. \n The supported range of memory sizes is constrained by the configured guest operating system and virtual hardware version of the virtual machine. \n\n If the virtual machine is running, this value may only be changed if Memory.Info.hot-add-enabled is true, and the new memory size must satisfy the constraints specified by Memory.Info.hot-add-increment-size-mib and Memory.Info.hot-add-limit-mib.\n\nIf unset, the value is unchanged.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.memory_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.memory.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.memory_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.memory.update_spec",
                    "description": "Specification for updating the memory-related settings of the virtual machine."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.parallel.backing_info": {
            "properties": {
                "auto_detect": {
                    "description": "Flag indicating whether the virtual parallel port is configured to automatically detect a suitable host device.\nThis field is optional and it is only relevant when the value of Parallel.BackingInfo.type is HOST_DEVICE.",
                    "type": "boolean"
                },
                "file": {
                    "description": "Path of the file backing the virtual parallel port.\nThis field is optional and it is only relevant when the value of Parallel.BackingInfo.type is FILE.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual parallel port. \n\n\nThis field will be unset if Parallel.BackingInfo.auto-detect is true and the virtual parallel port is not connected or no suitable device is available on the host.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_type",
                    "description": "Backing type for the virtual parallel port."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.parallel.backing_spec": {
            "properties": {
                "file": {
                    "description": "Path of the file that should be used as the virtual parallel port backing.\nThis field is optional and it is only relevant when the value of Parallel.BackingSpec.type is FILE.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device that should be used as the virtual parallel port backing.\nIf unset, the virtual parallel port will be configured to automatically detect a suitable host device.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_type",
                    "description": "Backing type for the virtual parallel port."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.parallel.backing_type": {
            "description": "The Parallel.BackingType enumerated type defines the valid backing types for a virtual parallel port.",
            "enum": [
                "FILE",
                "HOST_DEVICE"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.parallel.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.parallel.create_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_spec",
                    "description": "Physical resource backing for the virtual parallel port.\nIf unset, defaults to automatic detection of a suitable host device."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.parallel.info": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_info",
                    "description": "Physical resource backing for the virtual parallel port."
                },
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state",
                    "description": "Connection status of the virtual device."
                }
            },
            "required": [
                "label",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.parallel.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.parallel.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.parallel.summary": {
            "properties": {
                "port": {
                    "description": "Identifier of the virtual parallel port.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.",
                    "type": "string"
                }
            },
            "required": [
                "port"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.parallel.update_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_spec",
                    "description": "Physical resource backing for the virtual parallel port. \n This field may only be modified if the virtual machine is not powered on or the virtual parallel port is not connected.\n\nIf unset, the value is unchanged."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.parallel_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.create_spec",
                    "description": "Specification for the new virtual parallel port."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.parallel_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.parallel_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.update_spec",
                    "description": "Specification for updating the virtual parallel port."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.sata_address_info": {
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device is attached.",
                    "format": "int64",
                    "type": "integer"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "bus",
                "unit"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.sata_address_spec": {
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device should be attached.",
                    "format": "int64",
                    "type": "integer"
                },
                "unit": {
                    "description": "Unit number of the device.\nIf unset, the server will choose an available unit number on the specified adapter. If there are no available connections on the adapter, the request will be rejected.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "bus"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.scsi_address_info": {
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device is attached.",
                    "format": "int64",
                    "type": "integer"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "bus",
                "unit"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.scsi_address_spec": {
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device should be attached.",
                    "format": "int64",
                    "type": "integer"
                },
                "unit": {
                    "description": "Unit number of the device.\nIf unset, the server will choose an available unit number on the specified adapter. If there are no available connections on the adapter, the request will be rejected.",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "bus"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.serial.backing_info": {
            "properties": {
                "auto_detect": {
                    "description": "Flag indicating whether the virtual serial port is configured to automatically detect a suitable host device.\nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is HOST_DEVICE.",
                    "type": "boolean"
                },
                "file": {
                    "description": "Path of the file backing the virtual serial port.\nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is FILE.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual serial port. \n\n\nThis field will be unset if Serial.BackingInfo.auto-detect is true and the virtual serial port is not connected or no suitable device is available on the host.",
                    "type": "string"
                },
                "network_location": {
                    "description": "URI specifying the location of the network service backing the virtual serial port. \n   - If Serial.BackingInfo.type is NETWORK_SERVER, this field is the location used by clients to connect to this server. The hostname part of the URI should either be empty or should specify the address of the host on which the virtual machine is running.\n   - If Serial.BackingInfo.type is NETWORK_CLIENT, this field is the location used by the virtual machine to connect to the remote server.\n \nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is one of NETWORK_SERVER or NETWORK_CLIENT.",
                    "format": "uri",
                    "type": "string"
                },
                "no_rx_loss": {
                    "description": "Flag that enables optimized data transfer over the pipe. When the value is true, the host buffers data to prevent data overrun. This allows the virtual machine to read all of the data transferred over the pipe with no data loss.\nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is one of PIPE_SERVER or PIPE_CLIENT.",
                    "type": "boolean"
                },
                "pipe": {
                    "description": "Name of the pipe backing the virtual serial port.\nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is one of PIPE_SERVER or PIPE_CLIENT.",
                    "type": "string"
                },
                "proxy": {
                    "description": "Proxy service that provides network access to the network backing. If set, the virtual machine initiates a connection with the proxy service and forwards the traffic to the proxy.\nIf unset, no proxy service is configured.",
                    "format": "uri",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_type",
                    "description": "Backing type for the virtual serial port."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.serial.backing_spec": {
            "properties": {
                "file": {
                    "description": "Path of the file backing the virtual serial port.\nThis field is optional and it is only relevant when the value of Serial.BackingSpec.type is FILE.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual serial port. \n\n\nIf unset, the virtual serial port will be configured to automatically detect a suitable host device.",
                    "type": "string"
                },
                "network_location": {
                    "description": "URI specifying the location of the network service backing the virtual serial port. \n   - If Serial.BackingSpec.type is NETWORK_SERVER, this field is the location used by clients to connect to this server. The hostname part of the URI should either be empty or should specify the address of the host on which the virtual machine is running.\n   - If Serial.BackingSpec.type is NETWORK_CLIENT, this field is the location used by the virtual machine to connect to the remote server.\n \nThis field is optional and it is only relevant when the value of Serial.BackingSpec.type is one of NETWORK_SERVER or NETWORK_CLIENT.",
                    "format": "uri",
                    "type": "string"
                },
                "no_rx_loss": {
                    "description": "Flag that enables optimized data transfer over the pipe. When the value is true, the host buffers data to prevent data overrun. This allows the virtual machine to read all of the data transferred over the pipe with no data loss.\nIf unset, defaults to false.",
                    "type": "boolean"
                },
                "pipe": {
                    "description": "Name of the pipe backing the virtual serial port.\nThis field is optional and it is only relevant when the value of Serial.BackingSpec.type is one of PIPE_SERVER or PIPE_CLIENT.",
                    "type": "string"
                },
                "proxy": {
                    "description": "Proxy service that provides network access to the network backing. If set, the virtual machine initiates a connection with the proxy service and forwards the traffic to the proxy.\nIf unset, no proxy service should be used.",
                    "format": "uri",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_type",
                    "description": "Backing type for the virtual serial port."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.serial.backing_type": {
            "description": "The Serial.BackingType enumerated type defines the valid backing types for a virtual serial port.",
            "enum": [
                "FILE",
                "HOST_DEVICE",
                "PIPE_SERVER",
                "PIPE_CLIENT",
                "NETWORK_SERVER",
                "NETWORK_CLIENT"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.serial.create_resp": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.serial.create_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_spec",
                    "description": "Physical resource backing for the virtual serial port.\nIf unset, defaults to automatic detection of a suitable host device."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset.",
                    "type": "boolean"
                },
                "yield_on_poll": {
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host.\nIf unset, defaults to false.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.serial.info": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_info",
                    "description": "Physical resource backing for the virtual serial port."
                },
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state",
                    "description": "Connection status of the virtual device."
                },
                "yield_on_poll": {
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "yield_on_poll",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.serial.list_resp": {
            "properties": {
                "value": {
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.serial.summary"
                    },
                    "type": "array"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.serial.summary": {
            "properties": {
                "port": {
                    "description": "Identifier of the virtual serial port.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.SerialPort. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.SerialPort.",
                    "type": "string"
                }
            },
            "required": [
                "port"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.serial.update_spec": {
            "properties": {
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "backing": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_spec",
                    "description": "Physical resource backing for the virtual serial port. \n This field may only be modified if the virtual machine is not powered on or the virtual serial port is not connected.\n\nIf unset, the value is unchanged."
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged.",
                    "type": "boolean"
                },
                "yield_on_poll": {
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host. \n This field may be modified at any time, and changes applied to a connected virtual serial port take effect immediately.\n\nIf unset, the value is unchanged.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.serial_create": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.create_spec",
                    "description": "Specification for the new virtual serial port."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.serial_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.serial_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.update_spec",
                    "description": "Specification for updating the virtual serial port."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware.update_spec": {
            "properties": {
                "upgrade_policy": {
                    "$ref": "#/definitions/vcenter.vm.hardware.upgrade_policy",
                    "description": "Scheduled upgrade policy. \n If set to NEVER, the Hardware.Info.upgrade-version field will be reset to unset.\n\nIf unset, the value is unchanged."
                },
                "upgrade_version": {
                    "$ref": "#/definitions/vcenter.vm.hardware.version",
                    "description": "Target hardware version to be used on the next scheduled virtual hardware upgrade. \n If specified, this field must represent a newer virtual hardware version than the current virtual hardware version reported in Hardware.Info.version.\n\nIf Hardware.UpdateSpec.upgrade-policy is set to NEVER, this field must be unset. Otherwise, if this field is unset, default to the most recent virtual hardware version supported by the server."
                }
            },
            "type": "object"
        },
        "vcenter.vm.hardware.upgrade_policy": {
            "description": "The Hardware.UpgradePolicy enumerated type defines the valid virtual hardware upgrade policies for a virtual machine.",
            "enum": [
                "NEVER",
                "AFTER_CLEAN_SHUTDOWN",
                "ALWAYS"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.upgrade_status": {
            "description": "The Hardware.UpgradeStatus enumerated type defines the valid virtual hardware upgrade statuses for a virtual machine.",
            "enum": [
                "NONE",
                "PENDING",
                "SUCCESS",
                "FAILED"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware.version": {
            "description": "The Hardware.Version enumerated type defines the valid virtual hardware versions for a virtual machine. See https://kb.vmware.com/s/article/1003746 (Virtual machine hardware versions (1003746)).",
            "enum": [
                "VMX_03",
                "VMX_04",
                "VMX_06",
                "VMX_07",
                "VMX_08",
                "VMX_09",
                "VMX_10",
                "VMX_11",
                "VMX_12",
                "VMX_13",
                "VMX_14",
                "VMX_15",
                "VMX_16",
                "VMX_17"
            ],
            "type": "string"
        },
        "vcenter.vm.hardware_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.update_spec",
                    "description": "Specification for updating the virtual hardware settings of the virtual machine."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.hardware_upgrade": {
            "properties": {
                "version": {
                    "$ref": "#/definitions/vcenter.vm.hardware.version",
                    "description": "New virtual machine version.\nIf unset, defaults to the most recent virtual hardware version supported by the server."
                }
            },
            "type": "object"
        },
        "vcenter.vm.identity.info": {
            "properties": {
                "bios_uuid": {
                    "description": "128-bit SMBIOS UUID of a virtual machine represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.",
                    "type": "string"
                },
                "instance_uuid": {
                    "description": "VirtualCenter-specific 128-bit UUID of a virtual machine, represented as a hexademical string. This identifier is used by VirtualCenter to uniquely identify all virtual machine instances, including those that may share the same SMBIOS UUID.",
                    "type": "string"
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "bios_uuid",
                "instance_uuid"
            ],
            "type": "object"
        },
        "vcenter.vm.library_item.check_out_info": {
            "properties": {
                "library_item": {
                    "description": "Identifier of the library item that the virtual machine is checked out from.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.library.Item. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.library.Item.",
                    "type": "string"
                }
            },
            "required": [
                "library_item"
            ],
            "type": "object"
        },
        "vcenter.vm.library_item.info": {
            "properties": {
                "check_out": {
                    "$ref": "#/definitions/vcenter.vm.library_item.check_out_info",
                    "description": "Information about the checked out virtual machine.\nIf unset, the virtual machine is not checked out from a library item."
                }
            },
            "type": "object"
        },
        "vcenter.vm.library_item_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.library_item.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.power.info": {
            "properties": {
                "clean_power_off": {
                    "description": "Flag indicating whether the virtual machine was powered off cleanly. This field may be used to detect that the virtual machine crashed unexpectedly and should be restarted.\nThis field is optional and it is only relevant when the value of Power.Info.state is POWERED_OFF.",
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/vcenter.vm.power.state",
                    "description": "Power state of the virtual machine."
                }
            },
            "required": [
                "state"
            ],
            "type": "object"
        },
        "vcenter.vm.power.state": {
            "enum": [
                "POWERED_OFF",
                "POWERED_ON",
                "SUSPENDED"
            ],
            "type": "string"
        },
        "vcenter.vm.power_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.power.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy.compliance.check_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy.compliance.check_spec": {
            "properties": {
                "disks": {
                    "description": "Identifiers of the virtual machine's virtual disks for which compliance should be checked.\nIf unset or empty, compliance check is invoked on all the associated disks.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "vm_home": {
                    "description": "Invoke compliance check on the virtual machine home directory if set to true.",
                    "type": "boolean"
                }
            },
            "required": [
                "vm_home"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy.compliance.info": {
            "properties": {
                "disks": {
                    "description": "The compliance information Compliance.VmComplianceInfo for the virtual machine's virtual disks that are currently associated with a storage policy.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.vm_compliance_info"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "overall_compliance": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.status",
                    "description": "The overall compliance status of the virtual machine and all it's entities."
                },
                "vm_home": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.vm_compliance_info",
                    "description": "The storage policy compliance information Compliance.VmComplianceInfo for the virtual machine's home directory.\nIf unset the virtual machine home directory has no storage policy association."
                }
            },
            "required": [
                "overall_compliance",
                "disks"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy.compliance.status": {
            "description": "The Compliance.Status enumerated type defines the storage compliance status of a virtual machine and its applicable entities.",
            "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNKNOWN_COMPLIANCE",
                "NOT_APPLICABLE",
                "OUT_OF_DATE"
            ],
            "type": "string"
        },
        "vcenter.vm.storage.policy.compliance.vm_compliance_info": {
            "properties": {
                "check_time": {
                    "description": "Date and time of the most recent compliance check.",
                    "format": "date-time",
                    "type": "string"
                },
                "failure_cause": {
                    "description": "The exception that caused the compliance check to fail. There can be more than one cause, since a policy can contain capabilities from multiple providers. If empty, it implies no failures while retrieving compliance.",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    },
                    "type": "array"
                },
                "policy": {
                    "description": "Identifier of the storage policy associated with the virtual machine.\nIf unset SPBM is unable to retrieve or determine the associated policy, Compliance.VmComplianceInfo.failure-cause is set in such casses.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.StoragePolicy.",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.status",
                    "description": "Status of the compliance operation."
                }
            },
            "required": [
                "status",
                "check_time",
                "failure_cause"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy.compliance_check": {
            "properties": {
                "check_spec": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.check_spec",
                    "description": "Parameter specifies the entities on which storage policy compliance check is to be invoked. The storage compliance Info Compliance.Info is returned.\nIf unset, the behavior is equivalent to a Compliance.CheckSpec with CheckSpec#vmHome set to true and CheckSpec#disks populated with all disks attached to the virtual machine."
                }
            },
            "type": "object"
        },
        "vcenter.vm.storage.policy.compliance_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy.disk_policy_spec": {
            "properties": {
                "policy": {
                    "description": "Storage Policy identification.\nThis field is optional and it is only relevant when the value of Policy.DiskPolicySpec.type is USE_SPECIFIED_POLICY.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.StoragePolicy.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.disk_policy_spec.policy_type",
                    "description": "Policy type to be used while performing update operation on the virtual disks."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy.disk_policy_spec.policy_type": {
            "description": "The Policy.DiskPolicySpec enumerated type defines the choices for how to specify the policy to be associated with a virtual disk.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_DEFAULT_POLICY"
            ],
            "type": "string"
        },
        "vcenter.vm.storage.policy.info": {
            "properties": {
                "disks": {
                    "description": "Storage policies associated with virtual disks. The values in this map are storage policy identifiers. They will be identifiers for the resource type:vcenter.StoragePolicy If the map is empty, the virtual machine does not have any disks or its disks are not associated with a storage policy.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "vm_home": {
                    "description": "Storage Policy associated with virtual machine home.\nIfunset, the virtual machine's home directory doesn't have any storage policy.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.StoragePolicy.",
                    "type": "string"
                }
            },
            "required": [
                "disks"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy.update_spec": {
            "properties": {
                "disks": {
                    "description": "Storage policy or policies to be used when reconfiguring virtual machine diks.\nif unset the current storage policy is retained.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                    "items": {
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.storage.policy.disk_policy_spec"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "vm_home": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.vm_home_policy_spec",
                    "description": "Storage policy to be used when reconfiguring the virtual machine home.\nif unset the current storage policy is retained."
                }
            },
            "type": "object"
        },
        "vcenter.vm.storage.policy.vm_home_policy_spec": {
            "properties": {
                "policy": {
                    "description": "Storage Policy identification.\nThis field is optional and it is only relevant when the value of Policy.VmHomePolicySpec.type is USE_SPECIFIED_POLICY.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.StoragePolicy.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.vm_home_policy_spec.policy_type",
                    "description": "Policy type to be used while performing update operation on the virtual machine home's directory."
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy.vm_home_policy_spec.policy_type": {
            "description": "The Policy.VmHomePolicySpec.PolicyType enumerated type defines the choices for how to specify the policy to be associated with the virtual machine home's directory.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_DEFAULT_POLICY"
            ],
            "type": "string"
        },
        "vcenter.vm.storage.policy_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.storage.policy_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.update_spec",
                    "description": "Storage Policy Specification for updating the virtual machine and virtual disks."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.tools.info": {
            "properties": {
                "auto_update_supported": {
                    "description": "Set if the virtual machine supports auto-upgrading Tools via Tools.UpgradePolicy.",
                    "type": "boolean"
                },
                "error": {
                    "description": "Error that happened, if any, during last attempt to upgrade or install Tools.\nOnly set if a the last Tools install or upgrade attempt failed.",
                    "type": "object"
                },
                "install_attempt_count": {
                    "description": "Number of attempts that have been made to install or upgrade the version of Tools installed on this virtual machine.\nOnly set if there was a recent Tools install or upgrade attempt.",
                    "format": "int64",
                    "type": "integer"
                },
                "install_type": {
                    "$ref": "#/definitions/vcenter.vm.tools.tools_install_type",
                    "description": "Current installation type of VMware Tools in the guest operating system.\nOnly set if Tools install type is known."
                },
                "run_state": {
                    "$ref": "#/definitions/vcenter.vm.tools.run_state",
                    "description": "Current run state of VMware Tools in the guest operating system."
                },
                "upgrade_policy": {
                    "$ref": "#/definitions/vcenter.vm.tools.upgrade_policy",
                    "description": "Tools upgrade policy setting for the virtual machine. Tools.UpgradePolicy"
                },
                "version": {
                    "description": "Version of VMware Tools installed on the guest operating system. This is a human-readable value that should not be parsed.\nOnly set if Tools is installed.",
                    "type": "string"
                },
                "version_number": {
                    "description": "Version of VMware Tools installed on the guest operating system.\nOnly set if Tools is installed. This is an integer constructed as follows: (((MJR) << 10) + ((MNR) << 5) + (REV)) Where MJR is tha major verson, MNR is the minor version and REV is the revision. Tools version = T Tools Version Major = MJR = (T / 1024) Tools Version Minor = MNR = ((T % 1024) / 32) Tools Version Revision = BASE = ((T % 1024) % 32) Tools actual version = MJR.MNR.REV",
                    "format": "int64",
                    "type": "integer"
                },
                "version_status": {
                    "$ref": "#/definitions/vcenter.vm.tools.version_status",
                    "description": "Current version status of VMware Tools in the guest operating system, if known.\nOnly set if Tools version status is known."
                }
            },
            "required": [
                "auto_update_supported",
                "upgrade_policy",
                "run_state"
            ],
            "type": "object"
        },
        "vcenter.vm.tools.installer.info": {
            "properties": {
                "is_connected": {
                    "description": "Flag indicating whether the VMware Tools installer is mounted as a CD-ROM.",
                    "type": "boolean"
                }
            },
            "required": [
                "is_connected"
            ],
            "type": "object"
        },
        "vcenter.vm.tools.installer_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.tools.installer.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.tools.run_state": {
            "description": "Current run state of VMware Tools in the guest operating system.",
            "enum": [
                "NOT_RUNNING",
                "RUNNING",
                "EXECUTING_SCRIPTS"
            ],
            "type": "string"
        },
        "vcenter.vm.tools.tools_install_type": {
            "description": "The Tools.ToolsInstallType enumerated type defines the installation type of the Tools in the guest operating system.",
            "enum": [
                "UNKNOWN",
                "MSI",
                "TAR",
                "OSP",
                "OPEN_VM_TOOLS"
            ],
            "type": "string"
        },
        "vcenter.vm.tools.update_spec": {
            "properties": {
                "upgrade_policy": {
                    "$ref": "#/definitions/vcenter.vm.tools.upgrade_policy",
                    "description": "Tools upgrade policy setting for the virtual machine. Tools.UpgradePolicy\nIf this field is omitted the value will not be changed."
                }
            },
            "type": "object"
        },
        "vcenter.vm.tools.upgrade_policy": {
            "description": "The Tools.UpgradePolicy enumerated type defines when Tools are auto-upgraded for a virtual machine.",
            "enum": [
                "MANUAL",
                "UPGRADE_AT_POWER_CYCLE"
            ],
            "type": "string"
        },
        "vcenter.vm.tools.version_status": {
            "description": "The Tools.VersionStatus enumerated type defines the version status types of VMware Tools installed in the guest operating system.",
            "enum": [
                "NOT_INSTALLED",
                "CURRENT",
                "UNMANAGED",
                "TOO_OLD_UNSUPPORTED",
                "SUPPORTED_OLD",
                "SUPPORTED_NEW",
                "TOO_NEW",
                "BLACKLISTED"
            ],
            "type": "string"
        },
        "vcenter.vm.tools_resp": {
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.tools.info"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "vcenter.vm.tools_update": {
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.tools.update_spec",
                    "description": "The new values."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object"
        },
        "vcenter.vm.tools_upgrade": {
            "properties": {
                "command_line_options": {
                    "description": "Command line options passed to the installer to modify the installation procedure for Tools.\nSet if any additional options are desired.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "host": "",
    "info": {
        "description": "VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments",
        "termsOfService": "http://swagger.io/terms/",
        "title": "vcenter",
        "version": "2.0.0"
    },
    "paths": {
        "/api/vcenter/tagging/associations": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Marker is an opaque token that allows the caller to request the next page of tag associations.\nIf unset or empty, first page of tag associations will be returned.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.tagging.associations.Marker. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.tagging.associations.Marker.",
                        "in": "query",
                        "name": "marker",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of the tag associations matching the iteration spec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.tagging.associations.list_result"
                        }
                    },
                    "400": {
                        "description": "if Associations.IterationSpec.marker is not a marker returned from an earlier invocation of this {@term operation).",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized"
                        }
                    }
                },
                "summary": "Returns tag associations that match the specified iteration spec.",
                "tags": [
                    "tagging/associations"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/attestation/services": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.attestation.services_create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID of the newly registered Attestation Service instance.\nThe result will be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the CreateSpec contains invalid data.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Registers a new Attestation Service instance in this vCenter.",
                "tags": [
                    "trusted_infrastructure/attestation/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/attestation/services/{service}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "the Attestation Service instance unique identifier.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the Attestation Service instance is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if the Attestation Service instance is used by a configuration on a cluster level.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy"
                        }
                    }
                },
                "summary": "Removes a registered Attestation Service instance from this vCenter.",
                "tags": [
                    "trusted_infrastructure/attestation/services"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "the Attestation Service instance unique identifier.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the specified Attestation Service instance.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.attestation.services.info"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if there is no registered Attestation Service instance with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if an error occurred while getting the data.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns the detailed information about a registered Attestation Service instance in this vCenter.",
                "tags": [
                    "trusted_infrastructure/attestation/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/attestation/services?action=query": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "list",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.attestation.services_list"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about all registered Attestation Service instances in this vCenter.",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/vcenter.trusted_infrastructure.attestation.services.summary"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "500": {
                        "description": "if an error occurred while getting the data.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns detailed information about all registered Attestation Service instances in this vCenter.",
                "tags": [
                    "trusted_infrastructure/attestation/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/kms/services": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.kms.services_create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID of the newly registered Key Provider Service instance.\nThe result will be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the CreateSpec contains invalid data.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Registers a Key Provider Service instance in this vCenter.",
                "tags": [
                    "trusted_infrastructure/kms/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/kms/services/{service}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "the Key Provider Service instance unique identifier.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the Key Provider Service instance is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if the Key Provider Service instance is used by a configuration on a cluster level.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy"
                        }
                    }
                },
                "summary": "Removes a currently registered Key Provider Service instance from this vCenter.",
                "tags": [
                    "trusted_infrastructure/kms/services"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "the Key Provider Service instance unique identifier.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the specified Key Provider Service instance.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.kms.services.info"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if there is no Key Provider Service instance with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if an error occurred while getting the data.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns the detailed information about a registered Key Provider Service instance in this vCenter.",
                "tags": [
                    "trusted_infrastructure/kms/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/kms/services?action=query": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "list",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.kms.services_list"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Basic information about all registered Key Provider Service instances in this vCenter.",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/vcenter.trusted_infrastructure.kms.services.summary"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "500": {
                        "description": "if an error occurred while getting the data.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns basic information about all registered Key Provider Service instances in this vCenter.",
                "tags": [
                    "trusted_infrastructure/kms/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/principal": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "@{link Info} a summary containing the certificates used to sign tokens and the solution user used to retrieve them.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.principal.info"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns information about the STS used by this vCenter instance.",
                "tags": [
                    "trusted_infrastructure/principal"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifies the cluster.\ncluster If {@term.unset} return all Trust Authority Clusters.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "cluster",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "The state of the TrustAuthorityClusters.\nstate If {@term.unset} return all Trust Authority Clusters.",
                        "in": "query",
                        "items": {
                            "enum": [
                                "ENABLE",
                                "DISABLE"
                            ],
                            "type": "string"
                        },
                        "name": "state",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of TrustAuthorityClusters.Summary for a TrustAuthorityClusters.",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.summary"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns a list of clusters for this vCenter instance which matches the TrustAuthorityClusters.FilterSpec.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Cluster id.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The TrustAuthorityClusters.Info instance which contains information about the state of the cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.info"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if cluster doesn't match to any ClusterComputeResource.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Get the result of the last Update operation which matches the cluster id.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update$task",
                "parameters": [
                    {
                        "description": "Cluster id.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters_update_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if spec doesn't match to any cluster compute resource.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Updates the state of a cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images": {
            "get": {
                "operationId": "list$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Search criteria by ESX base image version numbers.\nversion if {@term.unset} return all ESX version numbers.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "version",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Search criteria by ESX base image version version numbers.\ndisplayName if {@term.unset} return all ESX display version numbers.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "display_name",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Search criteria by health indicator.\nhealth if {@term.unset} return all health indicators.",
                        "in": "query",
                        "items": {
                            "enum": [
                                "NONE",
                                "OK",
                                "WARNING",
                                "ERROR"
                            ],
                            "type": "string"
                        },
                        "name": "health",
                        "type": "array"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "A list of configured trusted ESX base images.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return a list of trusted ESX base images.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/os/esx/base_images"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "import_from_imgdb$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.base_images_import_from_imgdb_task"
                        }
                    },
                    {
                        "description": "action=import-from-imgdb",
                        "enum": [
                            "import-from-imgdb"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The imported imgdb version identifier.\nThe result will be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the imgdb is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Import ESX metadata as a new trusted base image to each host in the cluster. \n Import a boot_imgdb.tgz file which contains metadata that describes a trusted ESX base image. A boot_imgdb.tgz file can be downloaded from a representative host.\n",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/os/esx/base_images"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images/{version}": {
            "delete": {
                "operationId": "delete$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ESX base image version.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage.",
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the version is invalid or the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the version or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Remove a trusted ESX base image of each ESX in the cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/os/esx/base_images"
                ]
            },
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ESX base image version.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage.",
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The version info",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the version is invalid or the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the version or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Get the trusted ESX base version details.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/os/esx/base_images"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/service-status": {
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The Attestation service health status in the entire cluster.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return the Attestation service health in the given cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/service_status"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/ca-certificates": {
            "get": {
                "operationId": "list$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "A list of configured TPM CA certificates.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster doesn't match to any cluster in the vCenter or given name is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return a list of configured TPM CA certificates on a cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/ca_certificates"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.ca_certificates_create_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the configuration is invalid or the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if cluster doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Add a new TPM CA certificate on a cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/ca_certificates"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/ca-certificates/{name}": {
            "delete": {
                "operationId": "delete$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CA certificate name.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.CaCertificate.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the name is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster doesn't match to any cluster in the vCenter or given name is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Remove a TPM CA certificate on a cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/ca_certificates"
                ]
            },
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CA certificate name.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.CaCertificate.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "CA certificate info.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the name is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the CA certificate is not found or cluster doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Get the TPM CA certificate details on a cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/ca_certificates"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/endorsement-keys": {
            "get": {
                "operationId": "list$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "A list of configured endorsement keys.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return a list of configured TPM endorsement keys in a cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/endorsement_keys"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.endorsement_keys_create_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the configuration is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if cluster doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Add a new TPM endorsement key on a cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/endorsement_keys"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/endorsement-keys/{name}": {
            "delete": {
                "operationId": "delete$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The endorsement key name.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.EndorsementKey.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the name is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the name is not found or cluster doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Remove a TPM endorsement key on a cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/endorsement_keys"
                ]
            },
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The endorsement key name.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.EndorsementKey.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The endorsement key info.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the name is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the endorsement key is not found or cluster doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Get the TPM endorsement key details on a cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/endorsement_keys"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/settings": {
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The settings.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if cluster doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return the TPM 2.0 protocol settings.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/settings"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update$task",
                "parameters": [
                    {
                        "description": "The id of the cluster on which the operation will be executed.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.attestation.tpm2.settings_update_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the spec is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if cluster doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Set the TPM 2.0 protocol settings.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/settings"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/consumer-principals": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "list$task",
                "parameters": [
                    {
                        "description": "The ID of the Trust Authority Cluster on which the profile is configured.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.consumer_principals_list_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "the list of profiles matching the filter for that cluster.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if there is no profile configured with that ID.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Lists all policies configured on a specific cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/consumer_principals"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/consumer-principals/{profile}": {
            "delete": {
                "operationId": "delete$task",
                "parameters": [
                    {
                        "description": "The ID of the Trust Authority Cluster to configure.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the connection profile to modify.\nThe parameter must be an identifier for the resource type: esx.authentication.clientprofile.",
                        "in": "path",
                        "name": "profile",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if there is no profile configured with that ID.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Removes the read-only policy configured on ESX for a specific principal.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/consumer_principals"
                ]
            },
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "The ID of the Trust Authority Cluster on which the profile is configured.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the profile.\nThe parameter must be an identifier for the resource type: esx.authentication.clientprofile.",
                        "in": "path",
                        "name": "profile",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "information for a specific profile.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if there is no profile configured with that ID.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Retrieve information for a specific profile.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/consumer_principals"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/consumer-principals?vmw-task=true": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create$task",
                "parameters": [
                    {
                        "description": "The ID of the Trust Authority Cluster to configure.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.consumer_principals_create_task"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "a unique identifier of the profile\nThe result will be an identifier for the resource type: esx.authentication.clientprofile.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if a profile for the issuer already exists.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.already_exists"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if there is no such cluster.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Creates a profile with the specified connection information on all hosts from a Trust Authority Cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/consumer_principals"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers": {
            "get": {
                "operationId": "list$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "List of providers.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return a list of summary of Key Providers.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers_create_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the spec is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Add a new Key Provider.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}": {
            "delete": {
                "operationId": "delete$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster or provider id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Remove a Key Provider.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ]
            },
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Provider information.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster or provider id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return information about a Key Provider.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers_update_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster or provider id is empty, or the spec is invalid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Update an existing Key Provider.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/client-certificate": {
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Client certificate, PEM.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return the existing client certificate.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.client_certificate_update_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the certificate or private key is invalid or cluster/provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Update the client certificate. \n The key server will use this certificate to validate the client connection. If a client certificate already exists, it will be replaced. \n\n An optional private key can be specified if the certificate has already been provisioned.\n",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Generate a new self signed client certificate. Existing client certificate is overwritten. The key server will use this certificate to validate the client connection.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/client-certificate/csr": {
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The client CSR, PEM and host ID which issued it.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the provider or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Get existing certificate signing request (CSR) for the client certificate. \n The CSR will allow the certificate to be signed by a third party. Once the CSR is signed, certificate may be added as a client certificate. \n\n\n",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate/csr"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The client CSR, PEM and host ID which issued it.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the provider or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Generate a certificate signing request (CSR) for the client certificate. This overwrites any existing CSR. \n The CSR will allow the certificate to be signed by a third party. Once the CSR is signed, certificate may be added as a client certificate. \n\n Calling the API repeatedly will result in a generating a new CSR each time.\n",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate/csr"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/credential": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "set$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.credential_set_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the provider or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Set the key server credential.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/credential"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/peer-certs/current": {
            "get": {
                "operationId": "list$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Names that key server must have to match the filter (see CurrentPeerCertificates.Summary.server-name).\nIf unset or empty, key servers with any name match the filter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "server_names",
                        "type": "array"
                    },
                    {
                        "description": "Trust status that server certificates must have to match the filter (see CurrentPeerCertificates.Summary.trusted).\nIf unset, trusted and untrusted server certificates match the filter.",
                        "in": "query",
                        "name": "trusted",
                        "type": "boolean"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Summary of server certificates.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster or provider id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return the remote server certificates. \n Contacts the configured key servers and attempts to retrieve their certificates. These certificates might not yet be trusted. \n\n If the returned certificates are to be considered trustworthy, then it must be added to the list of trusted server certificates by adding to the certificates returned by TrustedPeerCertificates.get and invoking TrustedPeerCertificates.update with the updated list of certificates.\n",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/current_peer_certificates"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/peer-certs/trusted": {
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Info containing server certificates, PEM.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return the list of trusted server certificates.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/trusted_peer_certificates"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Identifier of the provider.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_clusters.kms.providers.trusted_peer_certificates_update_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If one or more certificates are invalid or the cluster/provider Id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Update trusted server certificate(s). \n The client will use these certificates to validate the server connection. The existing list of trusted certificates will be overwritten. \n\n The client will not trust the server connection until a server certificate has been set.\n",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/trusted_peer_certificates"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/service-status": {
            "get": {
                "operationId": "get$task",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The Key Provider Service health status in the entire cluster.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "If the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Return the Key Provider Service health in the given cluster.",
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/service_status"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-hosts/attestation": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "list",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.attestation_list"
                        }
                    },
                    {
                        "description": "{ 1. The connection information could include the certificates or be a shorter summary. }, { 2. The type of the returned summary - brief, normal, or full.\nIf {@term.unset} a normal projection will be used. }",
                        "enum": [
                            "FULL",
                            "NORMAL",
                            "BRIEF"
                        ],
                        "in": "query",
                        "name": "projection",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Attestation.Summary of Attestation Services.",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.attestation.summary"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "if the response data will exceed the message limit.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns a list of the hosts running a Attestation Service matching the specified Attestation.FilterSpec.",
                "tags": [
                    "trusted_infrastructure/trust_authority_hosts/attestation"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-hosts/kms": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "list",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.kms_list"
                        }
                    },
                    {
                        "description": "{ 1. The connection information could include the certificates or be a shorter summary. }, { 2. The type of the returned summary - brief, normal, or full.\nIf {@term.unset} a normal projection will be used. }",
                        "enum": [
                            "FULL",
                            "NORMAL",
                            "BRIEF"
                        ],
                        "in": "query",
                        "name": "projection",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "action=query",
                        "enum": [
                            "query"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Kms.Summary of Key Provider Services.",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.kms.summary"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "if the response data will exceed the message limit.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns a list of the hosts running a Key Provider Service matching the specified Kms.FilterSpec.",
                "tags": [
                    "trusted_infrastructure/trust_authority_hosts/kms"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-hosts/{host}/attestation/": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "@{link vcenter.Host} id.\nThe parameter must be an identifier for the resource type: HostSystem.",
                        "in": "path",
                        "name": "host",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Attestation.Info instance which contains the information necessary to connect to the Attestation Service.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.attestation.info"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if host doesn't match to any Host.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if connection to host failed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible"
                        }
                    }
                },
                "summary": "Returns the connection info about the Attestation Service running on the specified host.",
                "tags": [
                    "trusted_infrastructure/trust_authority_hosts/attestation"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-hosts/{host}/kms/": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "@{link vcenter.Host} id.\nThe parameter must be an identifier for the resource type: HostSystem.",
                        "in": "path",
                        "name": "host",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Kms.Info instance which contains the information necessary to connect to the Key Provider Service.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trust_authority_hosts.kms.info"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if host doesn't match to any Host.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if connection to host failed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible"
                        }
                    }
                },
                "summary": "Returns the connection info about the Key Provider Service running on the specified host.",
                "tags": [
                    "trusted_infrastructure/trust_authority_hosts/kms"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/attestation/services": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create$task",
                "parameters": [
                    {
                        "description": "The ID of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.attestation.services_create_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "ID of the configured Attestation Service instance.\nThe result will be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the CreateSpec is not valid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster ID is not valid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if all the hosts in the cluster do not have VMware vSphere Trust Authority enabled license.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource"
                        }
                    }
                },
                "summary": "Configures the cluster to use a the given registered Attestation Service.",
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/attestation/services/{service}": {
            "delete": {
                "operationId": "delete$task",
                "parameters": [
                    {
                        "description": "the unique ID of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the registered Attestation Service instance unique identifier.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the Attestation Service instance or the cluster are not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Removes the Attestation Service instance from the configuration of the given cluster.",
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "The ID of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the service.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.attestation.Service.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the specified Attestation Service configured for the given cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.attestation.services.info"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster or the service ID is invalid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns detailed information about the given registered Attestation Service instance that is configured for the given cluster.",
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/attestation/services?action=query": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "list",
                "parameters": [
                    {
                        "description": "The ID of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.attestation.services_list"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Basic information about all configured Attestation Service instances used by this cluster.",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.attestation.services.summary"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster ID is invalid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns the basic information about all configured Attestation Service instances used by this cluster.",
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/kms/services": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create$task",
                "parameters": [
                    {
                        "description": "The ID of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.kms.services_create_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "ID of the configured Key Provider Service instance.\nThe result will be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the CreateSpec is not valid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster ID is not valid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if all the hosts in the cluster do not have VMware vSphere Trust Authority enabled license.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource"
                        }
                    }
                },
                "summary": "Configures the cluster to use a the given registered Key Provider Service.",
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/kms/services/{service}": {
            "delete": {
                "operationId": "delete$task",
                "parameters": [
                    {
                        "description": "the unique ID of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the registered Key Provider Service instance unique identifier.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the Key Provider Service instance or the cluster are not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Removes the Key Provider Service instance from the configuration of the given cluster.",
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "The ID of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the service.\nThe parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.kms.Service.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the given Key Provider Service instance used by the given cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.kms.services.info"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster or the service ID is invalid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns detailed information about the given Key Provider Service instance used by the given cluster.",
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services"
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/kms/services?action=query": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "list",
                "parameters": [
                    {
                        "description": "The ID of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.kms.services_list"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "basic information about all configured Key Provider Service instances used by this cluster",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/vcenter.trusted_infrastructure.trusted_clusters.kms.services.summary"
                            },
                            "type": "array"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                        }
                    },
                    "404": {
                        "description": "if the cluster ID is invalid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error"
                        }
                    }
                },
                "summary": "Returns basic information about all configured Key Provider Service instances used by this cluster.",
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services"
                ]
            }
        },
        "/rest/hvc/links": {
            "get": {
                "operationId": "list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The {@term list} of hybrid link information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "summary": "Enumerates the list of registered hybrid links. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/links"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the newly linked domain.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Creates a new hybrid link between the local and foreign PSC. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/links"
                ]
            }
        },
        "/rest/hvc/links/{link}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Identifier of the hybrid link.",
                        "in": "path",
                        "name": "link",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the hybrid link associated with {@param.name link} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Deletes an existing hybrid link. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/links"
                ]
            }
        },
        "/rest/hvc/links/{link}/sync": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "reset",
                "parameters": [
                    {
                        "description": "Unique identifier of the link.",
                        "in": "path",
                        "name": "link",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "action=reset",
                        "enum": [
                            "reset"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "if the user is not authorized to perform this operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the link Identifier associated with {@param.name link} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Resets the sync state between the linked domains by initiating a fresh sync for all providers. If an existing sync is in progress this cancels the sync. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/links/sync"
                ]
            }
        },
        "/rest/hvc/links/{link}/sync/providers": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Unique identifier of the link",
                        "in": "path",
                        "name": "link",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@term list} of sync provider information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links.sync.providers.list_resp"
                        }
                    },
                    "400": {
                        "description": "If list fails.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authorized to perform this operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Enumerates the sync providers. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/links/sync/providers"
                ]
            }
        },
        "/rest/hvc/links/{link}/sync/providers/{provider}": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Unique identifier of the link",
                        "in": "path",
                        "name": "link",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Unique identifier of the sync provider.",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@term Info} of sync information for the provider.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links.sync.providers_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "if the user is not authorized to perform this operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the sync provider associated with {@param.name provider} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Gets Sync information for a sync provider. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/links/sync/providers"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "start",
                "parameters": [
                    {
                        "description": "Unique identifier of the link",
                        "in": "path",
                        "name": "link",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Unique identifier representing the sync provider",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "action=start",
                        "enum": [
                            "start"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if a sync is already running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "403": {
                        "description": "if the user is not authorized to perform this operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the link associated with {@param.name link} does not exist if the provider associated with {@param.name provider} is not registered for sync",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Initiates synchronization between the local and remote replicas for the sync provider. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/links/sync/providers"
                ]
            }
        },
        "/rest/hvc/management/administrators": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The {@term set} of all the groups.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.management.administrators_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "summary": "Enumerates the set of all the groups in the local sso group. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/management/administrators"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "add",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.management.administrators_add"
                        }
                    },
                    {
                        "description": "action=add",
                        "enum": [
                            "add"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Add the local sso group with the new group. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/management/administrators"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "set",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.management.administrators_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Sets the groups in the local sso group. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/management/administrators"
                ]
            }
        },
        "/rest/hvc/management/administrators?action=remove": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "remove",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.management.administrators_remove"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Remove the group from the local sso group. Usage beyond VMware Cloud on AWS is not supported. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "hvc/management/administrators"
                ]
            }
        },
        "/rest/vcenter/certificate-management/vcenter/tls": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_resp"
                        }
                    },
                    "400": {
                        "description": "if failed due to generic exception.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the rhttpproxy certificate is not present in VECS store.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Returns the rhttpproxy TLS certificate.",
                "tags": [
                    "certificate_management/vcenter/tls"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "replace_vmca_signed",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_replace_vmca_signed"
                        }
                    },
                    {
                        "description": "action=replace-vmca-signed",
                        "enum": [
                            "replace-vmca-signed"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the system failed to replace the machine ssl certificate",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "summary": "Replace MACHINE SSL with VMCA signed one with the given Spec.The system will go for restart. \n After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.\n",
                "tags": [
                    "certificate_management/vcenter/tls"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "set",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the system failed to replace the TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "If the private key is not present in the VECS store.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Replaces the rhttpproxy TLS certificate with the specified certificate. This operation can be used in three scenarios : \n   1.  When the CSR is created and the private key is already stored, this operation can replace the certificate. The certificate but not the private key and root certificate must be provided as input. \n   2.  When the certificate is signed by a third party certificate authority/VMCA and the root certificate of the third party certificate authority/VMCA is already one of the trusted roots in the trust store, this operation can replace the certificate and private key. The certificate and the private key but not the root certificate must be provided as input. \n   3.  When the certificate is signed by a third party certificate authority and the root certificate of the third party certificate authority is not one of the trusted roots in the trust store, this operation can replace the certificate, private key and root CA certificate. The certificate, private key and root certificate must be provided as input. \n  After this operation completes, the services using the certificate will be restarted for the new certificate to take effect. \nThe above three scenarios are only supported from vsphere 7.0 onwards.\n",
                "tags": [
                    "certificate_management/vcenter/tls"
                ]
            }
        },
        "/rest/vcenter/certificate-management/vcenter/tls-csr": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_csr_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Certificate Signing Request.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_csr.create_resp"
                        }
                    },
                    "400": {
                        "description": "If CSR could not be created for given spec for a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "summary": "Generates a CSR with the given Spec.",
                "tags": [
                    "certificate_management/vcenter/tls_csr"
                ]
            }
        },
        "/rest/vcenter/certificate-management/vcenter/tls?action=renew": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "renew",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_renew"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the system failed to renew the TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "summary": "Renews the TLS certificate for the given duration period. \nAfter this operation completes, the services using the certificate will be restarted for the new certificate to take effect.\n",
                "tags": [
                    "certificate_management/vcenter/tls"
                ]
            }
        },
        "/rest/vcenter/certificate-management/vcenter/trusted-root-chains": {
            "get": {
                "operationId": "list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of trusted root certificate chains summaries.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.list_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Returns summary information for each trusted root certificate chain.",
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The unique identifier for the new trusted root chain.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.create_resp"
                        }
                    },
                    "400": {
                        "description": "if a trusted root certificate chain exists with id in given spec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.already_exists_error"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Creates a new trusted root certificate chain from the CreateSpec.",
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ]
            }
        },
        "/rest/vcenter/certificate-management/vcenter/trusted-root-chains/{chain}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Unique identifier for a trusted root cert chain.",
                        "in": "path",
                        "name": "chain",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a trusted root certificate chain does not exist for given id.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Deletes trusted root certificate chain for a given identifier.",
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Unique identifier for a trusted root cert chain.",
                        "in": "path",
                        "name": "chain",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TrustedRootChain.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a trusted root certificate chain does not exist for given id.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Retrieve a trusted root certificate chain for a given identifier.",
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ]
            }
        },
        "/rest/vcenter/certificate-management/vcenter/vmca-root": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.vmca_root_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the system failed to renew the TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "summary": "Replace Root Certificate with VMCA signed one using the given Spec. \nAfter this operation completes, the services using the certificate will be restarted for the new certificate to take effect.\n",
                "tags": [
                    "certificate_management/vcenter/vmca_root"
                ]
            }
        },
        "/rest/vcenter/cluster": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of clusters that can match the filter.\nIf unset or empty, clusters with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.clusters",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Names that clusters must have to match the filter (see Cluster.Info.name).\nIf unset or empty, clusters with any name match the filter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.names",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Folders that must contain the cluster for the cluster to match the filter.\nIf unset or empty, clusters in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.folders",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Datacenters that must contain the cluster for the cluster to match the filter.\nIf unset or empty, clusters in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.datacenters",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the clusters matching the Cluster.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.cluster.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 clusters match the Cluster.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 1000 visible (subject to permission checks) clusters in vCenter matching the Cluster.FilterSpec.",
                "tags": [
                    "cluster"
                ]
            }
        },
        "/rest/vcenter/cluster/{cluster}": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.",
                        "in": "path",
                        "name": "cluster",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Cluster.Info instances that corresponds to the cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.cluster_resp"
                        }
                    },
                    "401": {
                        "description": "if the session id is missing from the request or the corresponding session object cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if there is no cluster associated with cluster in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Retrieves information about the cluster corresponding to cluster.",
                "tags": [
                    "cluster"
                ]
            }
        },
        "/rest/vcenter/datacenter": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of datacenters that can match the filter.\nIf unset or empty, datacenters with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.datacenters",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Names that datacenters must have to match the filter (see Datacenter.Info.name).\nIf unset or empty, datacenters with any name match the filter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.names",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Folders that must contain the datacenters for the datacenter to match the filter.\nIf unset or empty, datacenters in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.folders",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the datacenters matching the Datacenter.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datacenter.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 datacenters match the Datacenter.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 1000 visible (subject to permission checks) datacenters in vCenter matching the Datacenter.FilterSpec.",
                "tags": [
                    "datacenter"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.datacenter_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the newly created datacenter\nThe result will be an identifier for the resource type: Datacenter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datacenter.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the datacenter name is empty or invalid as per the underlying implementation.\nif the folder is not specified and the system cannot choose a suitable one.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the datacenter folder cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Create a new datacenter in the vCenter inventory",
                "tags": [
                    "datacenter"
                ]
            }
        },
        "/rest/vcenter/datacenter/{datacenter}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Identifier of the datacenter to be deleted.\nThe parameter must be an identifier for the resource type: Datacenter.",
                        "in": "path",
                        "name": "datacenter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "If true, delete the datacenter even if it is not empty.\nIf unset a ResourceInUse error will be reported if the datacenter is not empty. This is the equivalent of passing the value false.",
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the datacenter associated with datacenter is not empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_in_use_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if there is no datacenter associated with datacenter in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Delete an empty datacenter from the vCenter Server",
                "tags": [
                    "datacenter"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the datacenter.\nThe parameter must be an identifier for the resource type: Datacenter.",
                        "in": "path",
                        "name": "datacenter",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Datacenter.Info instances that corresponds to the datacenter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datacenter_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if there is no datacenter associated with datacenter in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Retrieves information about the datacenter corresponding to datacenter.",
                "tags": [
                    "datacenter"
                ]
            }
        },
        "/rest/vcenter/datastore": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of datastores that can match the filter.\nIf unset or empty, datastores with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datastore. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datastore.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.datastores",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Names that datastores must have to match the filter (see Datastore.Info.name).\nIf unset or empty, datastores with any name match the filter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.names",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Types that datastores must have to match the filter (see Datastore.Summary.type).\nIf unset or empty, datastores with any type match the filter.",
                        "in": "query",
                        "items": {
                            "enum": [
                                "VMFS",
                                "NFS",
                                "NFS41",
                                "CIFS",
                                "VSAN",
                                "VFFS",
                                "VVOL"
                            ],
                            "type": "string"
                        },
                        "name": "filter.types",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Folders that must contain the datastore for the datastore to match the filter.\nIf unset or empty, datastores in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.folders",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Datacenters that must contain the datastore for the datastore to match the filter.\nIf unset or empty, datastores in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.datacenters",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the datastores matching the Datastore.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datastore.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 2500 datastores match the Datastore.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 2500 visible (subject to permission checks) datastores in vCenter matching the Datastore.FilterSpec.",
                "tags": [
                    "datastore"
                ]
            }
        },
        "/rest/vcenter/datastore/{datastore}": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the datastore for which information should be retrieved.\nThe parameter must be an identifier for the resource type: Datastore.",
                        "in": "path",
                        "name": "datastore",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "information about the datastore.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datastore_resp"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the datastore indicated by datastore does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Retrieves information about the datastore indicated by datastore.",
                "tags": [
                    "datastore"
                ]
            }
        },
        "/rest/vcenter/datastore/{datastore}/default-policy": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the datastore for which the default policy is requested.\nThe parameter must be an identifier for the resource type: Datastore.",
                        "in": "path",
                        "name": "datastore",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the default storage policy associated with the specified datastore.\nthis field is unset if there is no default storage policy associated with the datastore.\nThe result will be an identifier for the resource type: vcenter.StoragePolicy.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datastore.default_policy_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required priveleges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the specified datastore does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the identifier of the current default storage policy associated with the specified datastore.",
                "tags": [
                    "datastore/default_policy"
                ]
            }
        },
        "/rest/vcenter/deployment": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the status information about the appliance.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "404": {
                        "description": "if appliance state cannot be determined.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Get the current status of the appliance deployment.",
                "tags": [
                    "deployment"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "rollback",
                "parameters": [
                    {
                        "description": "action=rollback",
                        "enum": [
                            "rollback"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in FAILED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Rollback a failed appliance so it can be configured once again.",
                "tags": [
                    "deployment"
                ]
            }
        },
        "/rest/vcenter/deployment/history": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the status information about the historical data import status.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.import_history_resp"
                        }
                    },
                    "400": {
                        "description": "Generic error",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Get the current status of the vCenter historical data import.",
                "tags": [
                    "deployment/import_history"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "resume",
                "parameters": [
                    {
                        "description": "action=resume",
                        "enum": [
                            "resume"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Resumes the task for importing vCenter historical data.",
                "tags": [
                    "deployment/import_history"
                ]
            }
        },
        "/rest/vcenter/deployment/history?action=cancel": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "cancel",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Cancels the task for importing vCenter historical data.",
                "tags": [
                    "deployment/import_history"
                ]
            }
        },
        "/rest/vcenter/deployment/history?action=pause": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "pause",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Generic error",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Pauses the task for importing vCenter historical data.",
                "tags": [
                    "deployment/import_history"
                ]
            }
        },
        "/rest/vcenter/deployment/history?action=start": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "start",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.import_history_start"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Generic error",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Creates and starts task for importing vCenter historical data.",
                "tags": [
                    "deployment/import_history"
                ]
            }
        },
        "/rest/vcenter/deployment/install": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "InstallSpec parameters being used to configure appliance install.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install_resp"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in INSTALL_PROGRESS state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Get the parameters used to configure the ongoing appliance installation.",
                "tags": [
                    "deployment/install"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "cancel",
                "parameters": [
                    {
                        "description": "action=cancel",
                        "enum": [
                            "cancel"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in CONFIG_IN_PROGRESS state and if the operation is not INSTALL.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Cancel the appliance installation that is in progress.",
                "tags": [
                    "deployment/install"
                ]
            }
        },
        "/rest/vcenter/deployment/install/initial-config/remote-psc/thumbprint": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "The IP address or DNS resolvable name of the remote PSC.",
                        "in": "query",
                        "name": "spec.address",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The HTTPS port of the remote PSC.",
                        "in": "query",
                        "name": "spec.https_port",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The thumbprint of the specified remote PSC",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.initial_config.remote_psc.thumbprint_resp"
                        }
                    },
                    "400": {
                        "description": "on exception.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Gets the SHA1 thumbprint of the remote PSC.",
                "tags": [
                    "deployment/install/initial_config/remote_psc/thumbprint"
                ]
            }
        },
        "/rest/vcenter/deployment/install/psc/replicated": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.psc.replicated_check"
                        }
                    },
                    {
                        "description": "action=check",
                        "enum": [
                            "check"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.psc.replicated.check_resp"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Checks whether the provided remote PSC is reachable and can be replicated.",
                "tags": [
                    "deployment/install/psc/replicated"
                ]
            }
        },
        "/rest/vcenter/deployment/install/psc/standalone": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.psc.standalone_check"
                        }
                    },
                    {
                        "description": "action=check",
                        "enum": [
                            "check"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.psc.standalone.check_resp"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Checks that the information to configure a non-replicated PSC satisfies the requirements.",
                "tags": [
                    "deployment/install/psc/standalone"
                ]
            }
        },
        "/rest/vcenter/deployment/install/remote-psc": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.remote_psc_check"
                        }
                    },
                    {
                        "description": "action=check",
                        "enum": [
                            "check"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.remote_psc.check_resp"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Checks whether the remote PSC is reachable and the deployed vCenter Server can be registered with the remote PSC.",
                "tags": [
                    "deployment/install/remote_psc"
                ]
            }
        },
        "/rest/vcenter/deployment/install?action=check": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckInfo containing the check results.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.check_resp"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Run sanity checks using the InstallSpec parameters passed.",
                "tags": [
                    "deployment/install"
                ]
            }
        },
        "/rest/vcenter/deployment/install?action=start": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "start",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install_start"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Start the appliance installation.",
                "tags": [
                    "deployment/install"
                ]
            }
        },
        "/rest/vcenter/deployment/migrate": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "MigrateSpec parameters being used to configure appliance migration.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate_resp"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in MIGRATE_PROGRESS state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Get the MigrateSpec parameters used to configure the ongoing appliance migration.",
                "tags": [
                    "deployment/migrate"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "cancel",
                "parameters": [
                    {
                        "description": "action=cancel",
                        "enum": [
                            "cancel"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in CONFIG_IN_PROGRESS state and if the operation is not INSTALL.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Cancel the appliance migration that is in progress.",
                "tags": [
                    "deployment/migrate"
                ]
            }
        },
        "/rest/vcenter/deployment/migrate/active-directory": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate.active_directory_check"
                        }
                    },
                    {
                        "description": "action=check",
                        "enum": [
                            "check"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate.active_directory.check_resp"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Checks whether the provided Active Directory user has permission to join the migrated vCenter Server appliance to the domain.",
                "tags": [
                    "deployment/migrate/active_directory"
                ]
            }
        },
        "/rest/vcenter/deployment/migrate?action=check": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckInfo containing the check results.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate.check_resp"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Run sanity checks using the MigrateSpec parameters passed.",
                "tags": [
                    "deployment/migrate"
                ]
            }
        },
        "/rest/vcenter/deployment/migrate?action=start": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "start",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate_start"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Start the appliance migration.",
                "tags": [
                    "deployment/migrate"
                ]
            }
        },
        "/rest/vcenter/deployment/question": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the question.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.question_resp"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in QUESTION_RAISED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "500": {
                        "description": "if questions could not be retrieved although the appliance is in QUESTION_RAISED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.internal_server_error_error"
                        }
                    }
                },
                "summary": "Get the question that was raised during the configuration.",
                "tags": [
                    "deployment/question"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "answer",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.question_answer"
                        }
                    },
                    {
                        "description": "action=answer",
                        "enum": [
                            "answer"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is NOT in QUESTION_RAISED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "500": {
                        "description": "if answer file could not be created.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.internal_server_error_error"
                        }
                    }
                },
                "summary": "Supply answer to the raised question.",
                "tags": [
                    "deployment/question"
                ]
            }
        },
        "/rest/vcenter/deployment/upgrade": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "UpgradeSpec parameters being used to configure appliance upgrade.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.upgrade_resp"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in UPGRADE_PROGRESS state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Get the UpgradeSpec parameters used to configure the ongoing appliance upgrade.",
                "tags": [
                    "deployment/upgrade"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "cancel",
                "parameters": [
                    {
                        "description": "action=cancel",
                        "enum": [
                            "cancel"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in CONFIG_IN_PROGRESS state and if the operation is not INSTALL.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Cancel the appliance upgrade that is in progress.",
                "tags": [
                    "deployment/upgrade"
                ]
            }
        },
        "/rest/vcenter/deployment/upgrade?action=check": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.upgrade_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckInfo containing the check results.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.upgrade.check_resp"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Run sanity checks using the UpgradeSpec parameters passed.",
                "tags": [
                    "deployment/upgrade"
                ]
            }
        },
        "/rest/vcenter/deployment/upgrade?action=start": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "start",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.upgrade_start"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Start the appliance installation.",
                "tags": [
                    "deployment/upgrade"
                ]
            }
        },
        "/rest/vcenter/folder": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of folders that can match the filter.\nIf unset or empty, folders with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.folders",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Names that folders must have to match the filter (see Folder.Summary.name).\nIf unset or empty, folders with any name match the filter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.names",
                        "type": "array"
                    },
                    {
                        "description": "The Folder.Type enumerated type defines the type of a vCenter Server folder. The type of a folder determines what what kinds of children can be contained in the folder.",
                        "enum": [
                            "DATACENTER",
                            "DATASTORE",
                            "HOST",
                            "NETWORK",
                            "VIRTUAL_MACHINE"
                        ],
                        "in": "query",
                        "name": "filter.type",
                        "type": "string"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Folders that must contain the folder for the folder to match the filter.\nIf unset or empty, folder in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.parent_folders",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Datacenters that must contain the folder for the folder to match the filter.\nIf unset or empty, folder in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.datacenters",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the folders matching the Folder.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.folder.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 folders match the Folder.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 1000 visible (subject to permission checks) folders in vCenter matching the Folder.FilterSpec.",
                "tags": [
                    "folder"
                ]
            }
        },
        "/rest/vcenter/guest/customization-specs": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Names that guest customization specifications must have to match the filter (see CustomizationSpecs.Summary.name).\nIf unset or empty, guest customization specifications with any name match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.guest.CustomizationSpec. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.guest.CustomizationSpec.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.names",
                        "type": "array"
                    },
                    {
                        "description": "The CustomizationSpecs.OsType enumerated type defines the types of guest operating systems for which guest customization is supported.",
                        "enum": [
                            "WINDOWS",
                            "LINUX"
                        ],
                        "in": "query",
                        "name": "filter.OS_type",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the guest customization specifications matching the CustomizationSpecs.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 guest customization specifications match the CustomizationSpecs.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 1000 visible (subject to permission checks) guest customization specifications in vCenter matching the CustomizationSpecs.FilterSpec.",
                "tags": [
                    "guest/customization_specs"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The name of the customization specification that is created.\nThe result will be an identifier for the resource type: vcenter.guest.CustomizationSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the specified specification is not a valid one.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Creates a customization specification.",
                "tags": [
                    "guest/customization_specs"
                ]
            }
        },
        "/rest/vcenter/guest/customization-specs/{name}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "The name of the customization specification that needs to be deleted.\nThe parameter must be an identifier for the resource type: vcenter.guest.CustomizationSpec.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Deletes a customization specification with the specified identifier.",
                "tags": [
                    "guest/customization_specs"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "The name of the customization specification.\nThe parameter must be an identifier for the resource type: vcenter.guest.CustomizationSpec.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A customization spec with the specified identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_resp"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the guest customization specification from vCenter with the specified identifier.",
                "tags": [
                    "guest/customization_specs"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "set",
                "parameters": [
                    {
                        "description": "The name of the customization specification that needs to be set.\nThe parameter must be an identifier for the resource type: vcenter.guest.CustomizationSpec.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If, based on the item's fingerprint value, the set process detects that the specification has changed since its retrieval, then the operation throws InvalidArgument exception to warn the client that he might overwrite another client's change.\nIf the settings in spec are not valid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Sets an existing specification, possibly after retrieving (by using CustomizationSpecs.get) and editing it.",
                "tags": [
                    "guest/customization_specs"
                ]
            }
        },
        "/rest/vcenter/guest/customization-specs/{name}?action=export": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "export",
                "parameters": [
                    {
                        "description": "The name of the customization specification that has to be returned.\nThe parameter must be an identifier for the resource type: vcenter.guest.CustomizationSpec.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_export"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The string representation of the customization specification in the specified format.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs.export_resp"
                        }
                    },
                    "400": {
                        "description": "If value of format is not valid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the content of the customization specification in the specified format. Note that any passwords in the customization specification will be set to blank values during the export operation.",
                "tags": [
                    "guest/customization_specs"
                ]
            }
        },
        "/rest/vcenter/guest/customization-specs?action=import": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "import_specification",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_import_specification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A proper specification of type CustomizationSpecs.CreateSpec",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs.import_specification_resp"
                        }
                    },
                    "400": {
                        "description": "if the specified content cannot be properly converted into a proper valid CustomizationSpecs.CreateSpec object.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Converts a well formatted string to a CustomizationSpecs.CreateSpec. The resulting object can be passed to CustomizationSpecs.create operation.",
                "tags": [
                    "guest/customization_specs"
                ]
            }
        },
        "/rest/vcenter/host": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of hosts that can match the filter.\nIf unset or empty, hosts with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.hosts",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Names that hosts must have to match the filter (see Host.Summary.name).\nIf unset or empty, hosts with any name match the filter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.names",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Folders that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.folders",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Datacenters that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.datacenters",
                        "type": "array"
                    },
                    {
                        "description": "If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter.\nIf unset Hosts can match filter independent of whether they are part of a cluster or not. If this field is true and Host.FilterSpec.clusters os not empty, no hosts will match the filter.",
                        "in": "query",
                        "name": "filter.standalone",
                        "type": "boolean"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Clusters that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any cluster and hosts that are not in a cluster match the filter. If this field is not empty and Host.FilterSpec.standalone is true, no hosts will match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.clusters",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Connection states that a host must be in to match the filter (see Host.Summary.connection-state.\nIf unset or empty, hosts in any connection state match the filter.",
                        "in": "query",
                        "items": {
                            "enum": [
                                "CONNECTED",
                                "DISCONNECTED",
                                "NOT_RESPONDING"
                            ],
                            "type": "string"
                        },
                        "name": "filter.connection_states",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the hosts matching the Host.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.host.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 2500 hosts match the Host.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 2500 visible (subject to permission checks) hosts in vCenter matching the Host.FilterSpec.",
                "tags": [
                    "host"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.host_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created identifier of the host in vCenter.\nThe result will be an identifier for the resource type: HostSystem.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.host.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the software version on the host is not supported.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "if the user name or password for the administration account on the host are invalid.\nif the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if there is no folder associated with the Host.CreateSpec.folder field in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Add a new standalone host in the vCenter inventory. The newly connected host will be in connected state. The vCenter Server will verify the SSL certificate before adding the host to its inventory. In the case where the SSL certificate cannot be verified because the Certificate Authority is not recognized or the certificate is self signed, the vCenter Server will fall back to thumbprint verification mode as defined by Host.CreateSpec.ThumbprintVerification.",
                "tags": [
                    "host"
                ]
            }
        },
        "/rest/vcenter/host/{host}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Identifier of the host to be deleted.\nThe parameter must be an identifier for the resource type: HostSystem.",
                        "in": "path",
                        "name": "host",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the host associated with host is in a vCenter cluster",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_in_use_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if there is no host associated with host in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Remove a standalone host from the vCenter Server.",
                "tags": [
                    "host"
                ]
            }
        },
        "/rest/vcenter/host/{host}/connect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "connect",
                "parameters": [
                    {
                        "description": "Identifier of the host to be reconnected.\nThe parameter must be an identifier for the resource type: HostSystem.",
                        "in": "path",
                        "name": "host",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if there is no host associated with host in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Connect to the host corresponding to host previously added to the vCenter server.",
                "tags": [
                    "host"
                ]
            }
        },
        "/rest/vcenter/host/{host}/disconnect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "disconnect",
                "parameters": [
                    {
                        "description": "Identifier of the host to be disconnected.\nThe parameter must be an identifier for the resource type: HostSystem.",
                        "in": "path",
                        "name": "host",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if there is no host associated with host in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Disconnect the host corresponding to host from the vCenter server",
                "tags": [
                    "host"
                ]
            }
        },
        "/rest/vcenter/identity/providers": {
            "get": {
                "operationId": "list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the identity providers.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers.list_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Retrieve all identity providers.",
                "tags": [
                    "identity/providers"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the created identity provider.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers.create_resp"
                        }
                    },
                    "400": {
                        "description": "if invalid arguments are provided in createSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Create a vCenter Server identity provider.",
                "tags": [
                    "identity/providers"
                ]
            }
        },
        "/rest/vcenter/identity/providers/{provider}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "the identifier of the provider to delete",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if no provider found with the given provider identifier.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Delete a vCenter Server identity provider.",
                "tags": [
                    "identity/providers"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "the identifier of the provider",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information of the specified identity provider.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if no provider found with the given provider identifier.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Retrieve detailed information of the specified identity provider.",
                "tags": [
                    "identity/providers"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "the identifier of the provider to update",
                        "in": "path",
                        "name": "provider",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if invalid arguments are provided in updateSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if no provider found with the given provider identifier.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Update a vCenter Server identity provider.",
                "tags": [
                    "identity/providers"
                ]
            }
        },
        "/rest/vcenter/network": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of networks that can match the filter.\nIf unset or empty, networks with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Network. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Network.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.networks",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Names that networks must have to match the filter (see Network.Summary.name).\nIf unset or empty, networks with any name match the filter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.names",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Types that networks must have to match the filter (see Network.Summary.type).\nIf unset, networks with any type match the filter.",
                        "in": "query",
                        "items": {
                            "enum": [
                                "STANDARD_PORTGROUP",
                                "DISTRIBUTED_PORTGROUP",
                                "OPAQUE_NETWORK"
                            ],
                            "type": "string"
                        },
                        "name": "filter.types",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Folders that must contain the network for the network to match the filter.\nIf unset or empty, networks in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.folders",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Datacenters that must contain the network for the network to match the filter.\nIf unset or empty, networks in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.datacenters",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the networks matching the Network.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.network.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 networks match the Network.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 1000 visible (subject to permission checks) networks in vCenter matching the Network.FilterSpec.",
                "tags": [
                    "network"
                ]
            }
        },
        "/rest/vcenter/resource-pool": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of resource pools that can match the filter.\nIf unset or empty, resource pools with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.resource_pools",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Names that resource pools must have to match the filter (see ResourcePool.Info.name).\nIf unset or empty, resource pools with any name match the filter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.names",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Resource pools that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any resource pool match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.parent_resource_pools",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Datacenters that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.datacenters",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Hosts that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any host match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.hosts",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Clusters that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any cluster match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.clusters",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the resource pools matching the ResourcePool.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool.list_resp"
                        }
                    },
                    "400": {
                        "description": "If more than 1000 resource pools match the ResourcePool.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 1000 visible (subject to permission checks) resource pools in vCenter matching the ResourcePool.FilterSpec.",
                "tags": [
                    "resource_pool"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the newly created resource pool.\nThe result will be an identifier for the resource type: ResourcePool.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool.create_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to create the resource pool could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the resource specified in parent could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Creates a resource pool.",
                "tags": [
                    "resource_pool"
                ]
            }
        },
        "/rest/vcenter/resource-pool/{resource_pool}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Identifier of the resource pool to be deleted.\nThe parameter must be an identifier for the resource type: ResourcePool.",
                        "in": "path",
                        "name": "resource_pool",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the resource pool is a root resource pool.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the resource pool is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Deletes a resource pool.",
                "tags": [
                    "resource_pool"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the resource pool for which information should be retrieved.\nThe parameter must be an identifier for the resource type: ResourcePool.",
                        "in": "path",
                        "name": "resource_pool",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the resource pool.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool_resp"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the resource pool indicated by resourcePool does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Retrieves information about the resource pool indicated by resourcePool.",
                "tags": [
                    "resource_pool"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Identifier of the resource pool.\nThe parameter must be an identifier for the resource type: ResourcePool.",
                        "in": "path",
                        "name": "resource_pool",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If any of the resources needed to reconfigure the resource pool could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the resource pool is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the configuration of a resource pool.",
                "tags": [
                    "resource_pool"
                ]
            }
        },
        "/rest/vcenter/services": {
            "get": {
                "operationId": "list_details",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Map of service identifiers to service Info structures.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.services.service.list_details_resp"
                        }
                    },
                    "400": {
                        "description": "if any error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "summary": "Lists details of vCenter services.",
                "tags": [
                    "services/service"
                ]
            }
        },
        "/rest/vcenter/services/{service}": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "identifier of the service whose state is being queried.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service Info structure.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.services.service_resp"
                        }
                    },
                    "400": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Returns the state of a service.",
                "tags": [
                    "services/service"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "identifier of the service whose properties are being updated.",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.services.service_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the operation is denied in the current state of the service. If a start, stop or restart operation is in progress, update operation will fail with this error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Updates the properties of a service.",
                "tags": [
                    "services/service"
                ]
            }
        },
        "/rest/vcenter/services/{service}/restart": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "restart",
                "parameters": [
                    {
                        "description": "identifier of the service to restart",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "504": {
                        "description": "if any timeout occurs during the execution of the restart operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.timed_out_error"
                        }
                    }
                },
                "summary": "Restarts a service",
                "tags": [
                    "services/service"
                ]
            }
        },
        "/rest/vcenter/services/{service}/start": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "start",
                "parameters": [
                    {
                        "description": "identifier of the service to start",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "504": {
                        "description": "if any timeout occurs during the execution of the start operation. Timeout occurs when the service takes longer than StartTimeout to start.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.timed_out_error"
                        }
                    }
                },
                "summary": "Starts a service",
                "tags": [
                    "services/service"
                ]
            }
        },
        "/rest/vcenter/services/{service}/stop": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "stop",
                "parameters": [
                    {
                        "description": "identifier of the service to stop",
                        "in": "path",
                        "name": "service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the operation is denied in the current state of the service. If a stop operation is in progress, issuing another stop operation will lead to this error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Stops a service",
                "tags": [
                    "services/service"
                ]
            }
        },
        "/rest/vcenter/storage/policies": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of storage policies that can match the filter.\nIf unset or empty, storage policies with any identifiers match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.StoragePolicy.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.policies",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used Information about the storage policies.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1024 storage policies exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 1024 visible (subject to permission checks) storage solicies availabe in vCenter. These storage policies can be used for provisioning virtual machines or disks.",
                "tags": [
                    "storage/policies"
                ]
            }
        },
        "/rest/vcenter/storage/policies/compliance/vm": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Compliance Status that a virtual machine must have to match the filter. Atleast one status must be specified.",
                        "in": "query",
                        "items": {
                            "enum": [
                                "COMPLIANT",
                                "NON_COMPLIANT",
                                "UNKNOWN_COMPLIANCE",
                                "NOT_APPLICABLE",
                                "OUT_OF_DATE"
                            ],
                            "type": "string"
                        },
                        "name": "filter.status",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of virtual machines that can match the filter\nIf unset or empty, virtual machines with any identifier matches the filter\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: VirtualMachine.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.vms",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "compliance information about virtual machines matching the filter VM.FilterSpec.\nThe key in the result map will be an identifier for the resource type: VirtualMachine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.list_resp"
                        }
                    },
                    "400": {
                        "description": "If more than 1000 results match the VM.FilterSpec",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns compliance information about at most 1000 virtual machines matching the filter VM.FilterSpec. If there are no virtual machines matching the VM.FilterSpec an empty List is returned. Virtual machines without storage policy association are not returned.",
                "tags": [
                    "storage/policies/compliance/VM"
                ]
            }
        },
        "/rest/vcenter/storage/policies/entities/compliance": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Compliance Status that a virtual machine must have to match the filter.",
                        "in": "query",
                        "items": {
                            "enum": [
                                "COMPLIANT",
                                "NON_COMPLIANT",
                                "UNKNOWN",
                                "NOT_APPLICABLE",
                                "OUT_OF_DATE"
                            ],
                            "type": "string"
                        },
                        "name": "filter.status",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "compliance information about entities matching the filter Compliance.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.compliance.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the Compliance.FilterSpec.status field contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns compliance information about entities matching the filter Compliance.FilterSpec. Entities without storage policy association are not returned.",
                "tags": [
                    "storage/policies/compliance"
                ]
            }
        },
        "/rest/vcenter/storage/policies/{policy}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check_compatibility",
                "parameters": [
                    {
                        "description": "The storage policy identifier\nThe parameter must be an identifier for the resource type: vcenter.StoragePolicy.",
                        "in": "path",
                        "name": "policy",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies_check_compatibility"
                        }
                    },
                    {
                        "description": "action=check-compatibility",
                        "enum": [
                            "check-compatibility"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "datastore compatibility summary about a specific storage policy.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.check_compatibility_resp"
                        }
                    },
                    "400": {
                        "description": "if input more than 1024 datastores.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the storage policy specified does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns datastore compatibility summary about a specific storage policy.",
                "tags": [
                    "storage/policies"
                ]
            }
        },
        "/rest/vcenter/storage/policies/{policy}/vm": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "storage policy identifier.\nThe parameter must be an identifier for the resource type: vcenter.StoragePolicy.",
                        "in": "path",
                        "name": "policy",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the virtual machines and/or their virtual disks that are associated with the given storage policy.\nThe key in the result map will be an identifier for the resource type: VirtualMachine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.VM.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the backend server encounters some an error while processing the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required priveleges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if there is no policy associated with policy in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service necessary to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about the virtual machines and/or their virtual disks that are associated with the given storage policy.",
                "tags": [
                    "storage/policies/VM"
                ]
            }
        },
        "/rest/vcenter/system-config/deployment-type": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The type of the vCenter appliance.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.system_config.deployment_type_resp"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in CONFIGURED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Get the type of the vCenter appliance.",
                "tags": [
                    "system_config/deployment_type"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "reconfigure",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.system_config.deployment_type_reconfigure"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED or CONFIGURED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Reconfigure the type of the vCenter appliance.",
                "tags": [
                    "system_config/deployment_type"
                ]
            }
        },
        "/rest/vcenter/system-config/psc-registration": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing information about the external PSC node this appliance is registered with.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.system_config.psc_registration_resp"
                        }
                    },
                    "400": {
                        "description": "if the appliance is in NOT_INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Get information of the PSC that this appliance is registered with.",
                "tags": [
                    "system_config/psc_registration"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "repoint",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.system_config.psc_registration_repoint"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is NOT in CONFIGURED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "summary": "Repoint this vCenter Server appliance to a different external PSC.",
                "tags": [
                    "system_config/psc_registration"
                ]
            }
        },
        "/rest/vcenter/tokenservice/token-exchange": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "exchange",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.tokenservice.token_exchange_exchange"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{@link Info} {@term structure} that contains new token.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.tokenservice.token_exchange.exchange_resp"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_request_error"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to a caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "500": {
                        "description": "If the server is unwilling or unable to issue a token for all the target services indicated by the {@link ExchangeSpec#resource} or {@link ExchangeSpec#audience} parameters.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.tokenservice.invalid_scope_error"
                        }
                    }
                },
                "summary": "Exchanges incoming token based on the spec and current client authorization data.",
                "tags": [
                    "tokenservice/token_exchange"
                ]
            }
        },
        "/rest/vcenter/topology/nodes": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see Nodes.ApplianceType.\nIf unset or empty, node of any ApplianceType match the filter.",
                        "in": "query",
                        "items": {
                            "enum": [
                                "VCSA_EMBEDDED",
                                "VCSA_EXTERNAL",
                                "PSC_EXTERNAL"
                            ],
                            "type": "string"
                        },
                        "name": "filter.types",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "commonly used information for all vCenter and Platform Services Controller nodes matching the Nodes.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.topology.nodes.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the Nodes.FilterSpec.types field contains a value that is not supported.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Returns information about all vCenter and Platform Services Controller nodes matching the Nodes.FilterSpec.",
                "tags": [
                    "topology/nodes"
                ]
            }
        },
        "/rest/vcenter/topology/nodes/{node}": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node.\nThe parameter must be an identifier for the resource type: vcenter.VCenter.name.",
                        "in": "path",
                        "name": "node",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "vCenter or Platform Services Controller node details with replication partners and client affinity information as applicable. See Nodes.Info.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.topology.nodes_resp"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a node doesn't exist for given node identifier.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Retrieve details for a given identifier of the vCenter or Platform Services Controller node.",
                "tags": [
                    "topology/nodes"
                ]
            }
        },
        "/rest/vcenter/topology/replication-status": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifier that a vCenter and Platform Services Controller node must have to match the filter. (see ReplicationStatus.Summary.node).\nIf unset or empty, all vCenter and Platform Services Controller nodes of type VCSA_EMBEDDED/PSC_EXTERNAL match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.VCenter.name.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.nodes",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used replication information about vCenter and Platform Services Controller nodes matching the ReplicationStatus.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.topology.replication_status.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the ReplicationStatus.FilterSpec.nodes field contains a invalid value.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Returns the replication information of vCenter and Platform Services Controller nodes of type VCSA_EMBEDDED/PSC_EXTERNAL (see Nodes.Info.type) matching the ReplicationStatus.FilterSpec.",
                "tags": [
                    "topology/replication_status"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "failover$task",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_failover_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.failover_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Initiates failover from the active vCenter node to the passive node. \n For forced failover, Active node immediately initiates a failover. This may result into a data loss after failover. \n\n For planned failover, Active node flushes all the state to the Passive node, waits for the flush to complete before causing a failover. After the failover, Passive node starts without any data loss. \n\n A failover is allowed only in the following cases: \n\n   1.  Cluster's mode is enabled and all cluster members are present.\n   2.  Cluster's mode is maintenance and all cluster members are present.\n",
                "tags": [
                    "vcha/cluster"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster/active": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "get",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.active_get"
                        }
                    },
                    {
                        "description": "action=get",
                        "enum": [
                            "get"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Info Information about the VCHA network and placement of the active node.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.active_resp"
                        }
                    },
                    "400": {
                        "description": "If the management interface IP address assignment is not static.\nIf any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. \n   -  If partial is false or unset, then the operation execution requires the Global.VCServer privilege.\n   -  If partial is true, then the operation execution requires the System.Read privilege.\n",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the active virtual machine is not managed by the specified vCenter server for the active node.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Retrieves information about the active node of a VCHA cluster.",
                "tags": [
                    "vcha/cluster/active"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster/deployment-type": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the deployment type information of the the VCHA cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.deployment_type_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Retrieves the deployment type of a VCHA cluster.",
                "tags": [
                    "vcha/cluster/deployment_type"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster/mode": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the mode of the the VCHA cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.mode_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Retrieves the current mode of a VCHA cluster.",
                "tags": [
                    "vcha/cluster/mode"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "set$task",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.mode_set_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.mode.set_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Manipulates the mode of a VCHA Cluster. Following mode transitions are allowed:\n enabled -> disabled - Allowed only in healthy and degraded states.\n enabled -> maintenance - Allowed only in healthy state.\n disabled -> enabled - Allowed only in healthy state.\n maintenance -> enabled - Allowed only in healthy state with all nodes are running the same version.\n maintenance -> disabled - Allowed only in healthy state with all nodes are running the same version.\n All other transitions are not allowed. \n VCHA Cluster configuration remains intact in any of the cluster modes.\n",
                "tags": [
                    "vcha/cluster/mode"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster/passive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "redeploy$task",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.passive_redeploy_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.passive.redeploy_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Creates the passive node in a degraded cluster with node location information and pre-existing VCHA cluster configuration from the active node.",
                "tags": [
                    "vcha/cluster/passive"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster/passive?action=check": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.passive_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckResult structure containing errors and warnings.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.passive.check_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the active virtual machine is not managed by the specified vCenter server for the active node.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Validates the specified passive node's placement configuration.",
                "tags": [
                    "vcha/cluster/passive"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster/witness": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "redeploy$task",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.witness_redeploy_task"
                        }
                    },
                    {
                        "description": "vmw-task=true",
                        "enum": [
                            "true"
                        ],
                        "in": "query",
                        "name": "vmw-task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.witness.redeploy_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Creates the witness node in a degraded cluster with node location information and pre-existing VCHA cluster configuration from the active node.",
                "tags": [
                    "vcha/cluster/witness"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster/witness?action=check": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.witness_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckResult structure containing errors and warnings.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.witness.check_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the active virtual machine is not managed by the specified vCenter server for the active node.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Validates the specified witness node's placement configuration.",
                "tags": [
                    "vcha/cluster/witness"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster?action=deploy&vmw-task=true": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "deploy$task",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_deploy_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.deploy_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Prepares, clones, and configures a VCHA cluster.",
                "tags": [
                    "vcha/cluster"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster?action=get": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "get",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_get"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Info structure containing the VCHA configuration and health information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. \n   -  If partial is false or unset, then the operation execution requires the Global.VCServer privilege.\n   -  If partial is true, then the operation execution requires the System.Read privilege.\n",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Retrieves the status of a VCHA cluster.",
                "tags": [
                    "vcha/cluster"
                ]
            }
        },
        "/rest/vcenter/vcha/cluster?action=undeploy&vmw-task=true": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "undeploy$task",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_undeploy_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.undeploy_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the passive virtual machine is not managed by the specified vCenter server.\nIf the witness virtual machine is not managed by the specified vCenter server.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Destroys the VCHA cluster and removes all VCHA specific information from the VCVA appliance. Optionally, the passive and witness node virtual machines will be deleted only if VCHA was deployed using automatic deployment. The active node in the cluster continues to run as a standalone VCVA appliance after the destroy operation has been performed. \n If the VCHA cluster is in a transition state and not configured, then the VCHA cluster specific information is removed.\n",
                "tags": [
                    "vcha/cluster"
                ]
            }
        },
        "/rest/vcenter/vcha/operations": {
            "get": {
                "operationId": "get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the current running and disabled operations of a VCHA cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.operations_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "summary": "Retrieves the current active and disabled operations of a VCHA cluster.",
                "tags": [
                    "vcha/operations"
                ]
            }
        },
        "/rest/vcenter/vm": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Identifiers of virtual machines that can match the filter.\nIf unset or empty, virtual machines with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: VirtualMachine.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.vms",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Names that virtual machines must have to match the filter (see VM.Info.name).\nIf unset or empty, virtual machines with any name match the filter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.names",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Folders that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.folders",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Datacenters that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.datacenters",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Hosts that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines on any host match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.hosts",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Clusters that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any cluster match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.clusters",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Resource pools that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any resource pool match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.",
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "filter.resource_pools",
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Power states that a virtual machine must be in to match the filter (see Power.Info.state.\nIf unset or empty, virtual machines in any power state match the filter.",
                        "in": "query",
                        "items": {
                            "enum": [
                                "POWERED_OFF",
                                "POWERED_ON",
                                "SUSPENDED"
                            ],
                            "type": "string"
                        },
                        "name": "filter.power_states",
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the virtual machines matching the VM.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 4000 virtual machines match the VM.FilterSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about at most 4000 visible (subject to permission checks) virtual machines in vCenter matching the VM.FilterSpec.",
                "tags": [
                    "VM"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.\nThe result will be an identifier for the resource type: VirtualMachine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.create_resp"
                        }
                    },
                    "400": {
                        "description": "if VM.CreateSpec.guest-os is not supported for the requested virtual hardware version and spec includes unset fields that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in spec could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Creates a virtual machine.",
                "tags": [
                    "VM"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Deletes a virtual machine.",
                "tags": [
                    "VM"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about a virtual machine.",
                "tags": [
                    "VM"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "relocate",
                "parameters": [
                    {
                        "description": "Existing Virtual machine to relocate.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_relocate"
                        }
                    },
                    {
                        "description": "action=relocate",
                        "enum": [
                            "relocate"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if a specified resource (eg. host) is not accessible.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in spec or the given \"vm\" could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Relocates a virtual machine based on the specification. The parts of the virtual machine that can move are: FOLDER, RESOURCE_POOL, HOST, CLUSTER and DATASTORE of home of the virtual machine and disks. \n\n",
                "tags": [
                    "VM"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/console/tickets": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.console.tickets_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the virtual machine console ticket.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.console.tickets.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration or execution state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Creates a virtual machine console ticket of a given ticket type. The created ticket is a one time use URI. The validity of the ticket is 30 minutes, if not used with in the time frame the ticket expires. \n The VMRC ticket contains the IP address or the DNS resolvable name of the vCenter server. This ticket requires installation of VMware Workstation, VMware Fusion or VMRC to be installed on the machine where the ticket has to be opened. This ticket can be acquired even when the VM is turned off. \n\n The WEBMKS ticket contains the IP address of the DNS resolvable name of the ESX server. This ticket requires user to embed this ticket in a HTML page using VMware HTML Console SDK - https://www.vmware.com/support/developer/html-console This ticket can be acquired only when the VM is turned on.\n. Warning: This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "tags": [
                    "vm/console/tickets"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/guest/customization": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "set",
                "parameters": [
                    {
                        "description": "The unique identifier of the virtual machine that needs to be customized.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.customization_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine vm is not in a powered off state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found with the unique name in spec.\nIf the virtual machine vm is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Applies a customization specification in spec on the virtual machine in vm. This operation only sets the specification settings for the virtual machine. The actual customization happens inside the guest when the virtual machine is powered on. If spec has unset values, then any pending customization settings for the virtual machine are cleared. If there is a pending customization for the virtual machine and spec has valid content, then the existing customization setting will be overwritten with the new settings.",
                "tags": [
                    "vm/guest/customization"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/guest/identity": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "guest identification information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.identity_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.\nif VMware Tools has not provided any data.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Return information about the guest.",
                "tags": [
                    "vm/guest/identity"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/guest/local-filesystem": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the local file systems configured in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.local_filesystem_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.\nif VMware Tools has not provided any data.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns details of the local file systems in the guest operating system.",
                "tags": [
                    "vm/guest/local_filesystem"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/guest/networking": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine ID\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the networking configuration in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.networking_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about the network configuration in the guest operating system.",
                "tags": [
                    "vm/guest/networking"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/guest/networking/interfaces": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine ID\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the interfaces configured in the guest operating system. Interfaces are ordered in a guest operating system specific determined order.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about the networking interfaces in the guest operating system.",
                "tags": [
                    "vm/guest/networking/interfaces"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/guest/networking/routes": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine ID\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the network routes configured in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.networking.routes.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about network routing in the guest operating system.",
                "tags": [
                    "vm/guest/networking/routes"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/guest/power": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest OS powerstate information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.power_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Returns information about the guest operating system power state.",
                "tags": [
                    "vm/guest/power"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "reboot",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "action=reboot",
                        "enum": [
                            "reboot"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine does not support being powered on (e.g. marked as a template, serving as a fault-tolerance secondary virtual machine).",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Issues a request to the guest operating system asking it to perform a reboot. This request returns immediately and does not wait for the guest operating system to complete the operation.",
                "tags": [
                    "vm/guest/power"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/guest/power?action=shutdown": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "shutdown",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine does not support being powered on (e.g. marked as a template, serving as a fault-tolerance secondary virtual machine).",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Issues a request to the guest operating system asking it to perform a clean shutdown of all services. This request returns immediately and does not wait for the guest operating system to complete the operation.",
                "tags": [
                    "vm/guest/power"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/guest/power?action=standby": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "standby",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine does not support being powered on (e.g. marked as a template, serving as a fault-tolerance secondary virtual machine).",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Issues a request to the guest operating system asking it to perform a suspend operation.",
                "tags": [
                    "vm/guest/power"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual hardware settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the virtual hardware settings of a virtual machine.",
                "tags": [
                    "vm/hardware"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the virtual hardware settings of a virtual machine.",
                "tags": [
                    "vm/hardware"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/action/upgrade": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "upgrade",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware_upgrade"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Upgrades the virtual machine to a newer virtual hardware version.",
                "tags": [
                    "vm/hardware"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/adapter/sata": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual SATA adapters.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns commonly used information about the virtual SATA adapters belonging to the virtual machine.",
                "tags": [
                    "vm/hardware/adapter/sata"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual SATA adapter identifier.\nThe result will be an identifier for the resource type: vcenter.vm.hardware.SataAdapter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Adds a virtual SATA adapter to the virtual machine.",
                "tags": [
                    "vm/hardware/adapter/sata"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual SATA adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter.",
                        "in": "path",
                        "name": "adapter",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SATA adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Removes a virtual SATA adapter from the virtual machine.",
                "tags": [
                    "vm/hardware/adapter/sata"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual SATA adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter.",
                        "in": "path",
                        "name": "adapter",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual SATA adapter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SATA adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about a virtual SATA adapter.",
                "tags": [
                    "vm/hardware/adapter/sata"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/adapter/scsi": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual SCSI adapters.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns commonly used information about the virtual SCSI adapters belonging to the virtual machine.",
                "tags": [
                    "vm/hardware/adapter/scsi"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual SCSI adapter identifier.\nThe result will be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Adds a virtual SCSI adapter to the virtual machine.",
                "tags": [
                    "vm/hardware/adapter/scsi"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/adapter/scsi/{adapter}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual SCSI adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter.",
                        "in": "path",
                        "name": "adapter",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Removes a virtual SCSI adapter from the virtual machine.",
                "tags": [
                    "vm/hardware/adapter/scsi"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual SCSI adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter.",
                        "in": "path",
                        "name": "adapter",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual SCSI adapter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about a virtual SCSI adapter.",
                "tags": [
                    "vm/hardware/adapter/scsi"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual SCSI adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter.",
                        "in": "path",
                        "name": "adapter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the configuration of a virtual SCSI adapter.",
                "tags": [
                    "vm/hardware/adapter/scsi"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/boot": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Boot-related settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.boot_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the boot-related settings of a virtual machine.",
                "tags": [
                    "vm/hardware/boot"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.boot_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the boot-related settings of a virtual machine.",
                "tags": [
                    "vm/hardware/boot"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/boot/device": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ordered list of configured boot devices.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.boot.device_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns an ordered list of boot devices for the virtual machine. If the list is empty, the virtual machine uses a default boot sequence.",
                "tags": [
                    "vm/hardware/boot/device"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "set",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.boot.device_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found, or if any of the specified virtual devices is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Sets the virtual devices that will be used to boot the virtual machine. The virtual machine will check the devices in order, attempting to boot from each, until the virtual machine boots successfully. If the list is empty, the virtual machine will use a default boot sequence. There should be no more than one instance of Device.Entry for a given device type except ETHERNET in the list.",
                "tags": [
                    "vm/hardware/boot/device"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cdrom": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual CD-ROM devices.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns commonly used information about the virtual CD-ROM devices belonging to the virtual machine.",
                "tags": [
                    "vm/hardware/cdrom"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual CD-ROM device identifier.\nThe result will be an identifier for the resource type: vcenter.vm.hardware.Cdrom.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Adds a virtual CD-ROM device to the virtual machine.",
                "tags": [
                    "vm/hardware/cdrom"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cdrom/{cdrom}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Cdrom.",
                        "in": "path",
                        "name": "cdrom",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Removes a virtual CD-ROM device from the virtual machine.",
                "tags": [
                    "vm/hardware/cdrom"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Cdrom.",
                        "in": "path",
                        "name": "cdrom",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual CD-ROM device.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about a virtual CD-ROM device.",
                "tags": [
                    "vm/hardware/cdrom"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Cdrom.",
                        "in": "path",
                        "name": "cdrom",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the configuration of a virtual CD-ROM device.",
                "tags": [
                    "vm/hardware/cdrom"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cdrom/{cdrom}/connect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "connect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Cdrom.",
                        "in": "path",
                        "name": "cdrom",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Connects a virtual CD-ROM device of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Cdrom.update operation may be used to configure the virtual CD-ROM device to start in the connected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/cdrom"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cdrom/{cdrom}/disconnect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "disconnect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Cdrom.",
                        "in": "path",
                        "name": "cdrom",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Disconnects a virtual CD-ROM device of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the CD-ROM device is not connected to its backing resource. \n For a powered-off virtual machine, the Cdrom.update operation may be used to configure the virtual CD-ROM device to start in the disconnected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/cdrom"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cpu": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CPU-related settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cpu_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the CPU-related settings of a virtual machine.",
                "tags": [
                    "vm/hardware/cpu"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cpu_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the CPU-related settings of a virtual machine.",
                "tags": [
                    "vm/hardware/cpu"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/disk": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about the virtual disks.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns commonly used information about the virtual disks belonging to the virtual machine.",
                "tags": [
                    "vm/hardware/disk"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual disk identifier.\nThe result will be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Adds a virtual disk to the virtual machine. While adding the virtual disk, a new VMDK file may be created or an existing VMDK file may be used to back the virtual disk.",
                "tags": [
                    "vm/hardware/disk"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/disk/{disk}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual disk identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                        "in": "path",
                        "name": "disk",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Removes a virtual disk from the virtual machine. This operation does not destroy the VMDK file that backs the virtual disk. It only detaches the VMDK file from the virtual machine. Once detached, the VMDK file will not be destroyed when the virtual machine to which it was associated is deleted.",
                "tags": [
                    "vm/hardware/disk"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual disk identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                        "in": "path",
                        "name": "disk",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual disk.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about a virtual disk.",
                "tags": [
                    "vm/hardware/disk"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual disk identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk.",
                        "in": "path",
                        "name": "disk",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the configuration of a virtual disk. An update operation can be used to detach the existing VMDK file and attach another VMDK file to the virtual machine.",
                "tags": [
                    "vm/hardware/disk"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/ethernet": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual Ethernet adapters.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns commonly used information about the virtual Ethernet adapters belonging to the virtual machine.",
                "tags": [
                    "vm/hardware/ethernet"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual Ethernet adapter identifier.\nThe result will be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or network backing is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Adds a virtual Ethernet adapter to the virtual machine.",
                "tags": [
                    "vm/hardware/ethernet"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/ethernet/{nic}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                        "in": "path",
                        "name": "nic",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Removes a virtual Ethernet adapter from the virtual machine.",
                "tags": [
                    "vm/hardware/ethernet"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                        "in": "path",
                        "name": "nic",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual Ethernet adapter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about a virtual Ethernet adapter.",
                "tags": [
                    "vm/hardware/ethernet"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                        "in": "path",
                        "name": "nic",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine, virtual Ethernet adapter, or backing network is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the configuration of a virtual Ethernet adapter.",
                "tags": [
                    "vm/hardware/ethernet"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/ethernet/{nic}/connect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "connect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                        "in": "path",
                        "name": "nic",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Connects a virtual Ethernet adapter of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Ethernet.update operation may be used to configure the virtual Ethernet adapter to start in the connected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/ethernet"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/ethernet/{nic}/disconnect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "disconnect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Ethernet.",
                        "in": "path",
                        "name": "nic",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Disconnects a virtual Ethernet adapter of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the Ethernet adapter is not connected to its backing resource. \n For a powered-off virtual machine, the Ethernet.update operation may be used to configure the virtual Ethernet adapter to start in the disconnected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/ethernet"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/floppy": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual floppy drives.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns commonly used information about the virtual floppy drives belonging to the virtual machine.",
                "tags": [
                    "vm/hardware/floppy"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual floppy drive identifier.\nThe result will be an identifier for the resource type: vcenter.vm.hardware.Floppy.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Adds a virtual floppy drive to the virtual machine.",
                "tags": [
                    "vm/hardware/floppy"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/floppy/{floppy}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Floppy.",
                        "in": "path",
                        "name": "floppy",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Removes a virtual floppy drive from the virtual machine.",
                "tags": [
                    "vm/hardware/floppy"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Floppy.",
                        "in": "path",
                        "name": "floppy",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual floppy drive.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about a virtual floppy drive.",
                "tags": [
                    "vm/hardware/floppy"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Floppy.",
                        "in": "path",
                        "name": "floppy",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the configuration of a virtual floppy drive.",
                "tags": [
                    "vm/hardware/floppy"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/floppy/{floppy}/connect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "connect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Floppy.",
                        "in": "path",
                        "name": "floppy",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Connects a virtual floppy drive of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Floppy.update operation may be used to configure the virtual floppy drive to start in the connected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/floppy"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/floppy/{floppy}/disconnect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "disconnect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.Floppy.",
                        "in": "path",
                        "name": "floppy",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Disconnects a virtual floppy drive of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the floppy drive is not connected to its backing resource. \n For a powered-off virtual machine, the Floppy.update operation may be used to configure the virtual floppy floppy to start in the disconnected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/floppy"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/memory": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory-related settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.memory_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the memory-related settings of a virtual machine.",
                "tags": [
                    "vm/hardware/memory"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.memory_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the memory-related settings of a virtual machine.",
                "tags": [
                    "vm/hardware/memory"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/parallel": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual parallel ports.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns commonly used information about the virtual parallel ports belonging to the virtual machine.",
                "tags": [
                    "vm/hardware/parallel"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual parallel port identifier.\nThe result will be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Adds a virtual parallel port to the virtual machine.",
                "tags": [
                    "vm/hardware/parallel"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/parallel/{port}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Removes a virtual parallel port from the virtual machine.",
                "tags": [
                    "vm/hardware/parallel"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual parallel port.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about a virtual parallel port.",
                "tags": [
                    "vm/hardware/parallel"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the configuration of a virtual parallel port.",
                "tags": [
                    "vm/hardware/parallel"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/parallel/{port}/connect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "connect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Connects a virtual parallel port of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Parallel.update operation may be used to configure the virtual parallel port to start in the connected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/parallel"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/parallel/{port}/disconnect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "disconnect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Disconnects a virtual parallel port of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the parallel port is not connected to its backing. \n For a powered-off virtual machine, the Parallel.update operation may be used to configure the virtual parallel port to start in the disconnected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/parallel"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/serial": {
            "get": {
                "operationId": "list",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual serial ports.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns commonly used information about the virtual serial ports belonging to the virtual machine.",
                "tags": [
                    "vm/hardware/serial"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual serial port identifier.\nThe result will be an identifier for the resource type: vcenter.vm.hardware.SerialPort.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Adds a virtual serial port to the virtual machine.",
                "tags": [
                    "vm/hardware/serial"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/serial/{port}": {
            "delete": {
                "operationId": "delete",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.SerialPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Removes a virtual serial port from the virtual machine.",
                "tags": [
                    "vm/hardware/serial"
                ]
            },
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.SerialPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual serial port.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns information about a virtual serial port.",
                "tags": [
                    "vm/hardware/serial"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.SerialPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the configuration of a virtual serial port.",
                "tags": [
                    "vm/hardware/serial"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/serial/{port}/connect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "connect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.SerialPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Connects a virtual serial port of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Serial.update operation may be used to configure the virtual serial port to start in the connected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/serial"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/serial/{port}/disconnect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "disconnect",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: vcenter.vm.hardware.SerialPort.",
                        "in": "path",
                        "name": "port",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Disconnects a virtual serial port of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the serial port is not connected to its backing. \n For a powered-off virtual machine, the Serial.update operation may be used to configure the virtual serial port to start in the disconnected state when the virtual machine is powered on.\n",
                "tags": [
                    "vm/hardware/serial"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/library-item": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the library item associated with the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.library_item_resp"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the operation cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the operation is not authorized to perform the operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Returns the information about the library item associated with the virtual machine.",
                "tags": [
                    "vm/library_item"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/power": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Power state information for the specified virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.power_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration or execution state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the power state information of a virtual machine.",
                "tags": [
                    "vm/power"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/power/reset": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "reset",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is performing another operation",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Resets a powered-on virtual machine.",
                "tags": [
                    "vm/power"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/power/start": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "start",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Powers on a powered-off or suspended virtual machine.",
                "tags": [
                    "vm/power"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/power/stop": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "stop",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Powers off a powered-on or suspended virtual machine.",
                "tags": [
                    "vm/power"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/power/suspend": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "suspend",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Suspends a powered-on virtual machine.",
                "tags": [
                    "vm/power"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/storage/policy": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Overview of Storage Policy associated with a virtual machine's home directory and/or its associated virtual hard disks.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns Information about Storage Policy associated with a virtual machine's home directory and/or its virtual hard disks.",
                "tags": [
                    "vm/storage/policy"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine or disk's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required priveleges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Updates the storage policy configuration of a virtual machine and/or its associated virtual hard disks.",
                "tags": [
                    "vm/storage/policy"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/storage/policy/compliance": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual machine storage policy compliance Info Compliance.Info.\nIf unset, neither the virtual machine home directory nor any of it's virtual disks are associated with a storage policy.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy.compliance_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the cached storage policy compliance information of a virtual machine.",
                "tags": [
                    "vm/storage/policy/compliance"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "check",
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy.compliance_check"
                        }
                    },
                    {
                        "description": "action=check",
                        "enum": [
                            "check"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual machine storage policy compliance Compliance.Info structure .\nIf unset, neither the virtual machine home directory nor any of it's virtual disks are associated with a storage policy.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.check_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service necessary to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Returns the storage policy Compliance Compliance.Info of a virtual machine after explicitly re-computing compliance check.",
                "tags": [
                    "vm/storage/policy/compliance"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/tools": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "VMware Tools properties.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.tools_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Get the properties of VMware Tools.",
                "tags": [
                    "vm/tools"
                ]
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "update",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.tools_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the Tools.UpdateSpec.upgrade-policy field contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Update the properties of VMware Tools.",
                "tags": [
                    "vm/tools"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "upgrade",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.tools_upgrade"
                        }
                    },
                    {
                        "description": "action=upgrade",
                        "enum": [
                            "upgrade"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the upgrade process fails inside the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools are not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Begins the Tools upgrade process. To monitor the status of the Tools upgrade, clients should check the Tools status by calling Tools.get and examining Tools.Info.version-status and Tools.Info.run-state.",
                "tags": [
                    "vm/tools"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/tools/installer": {
            "get": {
                "operationId": "get",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "information about the VMware Tools installer.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.tools.installer_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Get information about the VMware Tools installer.",
                "tags": [
                    "vm/tools/installer"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "disconnect",
                "parameters": [
                    {
                        "description": "Virtual machine ID\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "action=disconnect",
                        "enum": [
                            "disconnect"
                        ],
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Disconnect the VMware Tools installer CD image.",
                "tags": [
                    "vm/tools/installer"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}/tools/installer?action=connect": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "connect",
                "parameters": [
                    {
                        "description": "Virtual machine ID\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the Tools installation fails in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "summary": "Connects the VMware Tools CD installer as a CD-ROM for the guest operating system. On Windows guest operating systems with autorun, this should cause the installer to initiate the Tools installation which will need user input to complete. On other (non-Windows) guest operating systems this will make the Tools installation available, and a a user will need to do guest-specific actions. On Linux, this includes opening an archive and running the installer. To monitor the status of the Tools install, clients should check the Tools.Info.version-status and Tools.Info.run-state from Tools.get",
                "tags": [
                    "vm/tools/installer"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}?action=relocate&vmw-task=true": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "relocate$task",
                "parameters": [
                    {
                        "description": "Existing Virtual machine to relocate.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_relocate_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.relocate_task_resp"
                        }
                    },
                    "400": {
                        "description": "if a specified resource (eg. host) is not accessible.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in spec or the given \"vm\" could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Relocates a virtual machine based on the specification. The parts of the virtual machine that can move are: FOLDER, RESOURCE_POOL, HOST, CLUSTER and DATASTORE of home of the virtual machine and disks. \n\n",
                "tags": [
                    "VM"
                ]
            }
        },
        "/rest/vcenter/vm/{vm}?action=unregister": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "unregister",
                "parameters": [
                    {
                        "description": "Identifier of the virtual machine to be unregistered.\nThe parameter must be an identifier for the resource type: VirtualMachine.",
                        "in": "path",
                        "name": "vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is busy performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if there is no virtual machine associated with vm in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Removes the virtual machine corresponding to vm from the vCenter inventory without removing any of the virtual machine's files from storage. All high-level information stored with the management server (ESXi or vCenter) is removed, including information such as statistics, resource pool association, permissions, and alarms.",
                "tags": [
                    "VM"
                ]
            }
        },
        "/rest/vcenter/vm?action=clone": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "clone",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_clone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.\nThe result will be an identifier for the resource type: VirtualMachine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.clone_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to clone the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in spec could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Creates a virtual machine from an existing virtual machine. \n\n",
                "tags": [
                    "VM"
                ]
            }
        },
        "/rest/vcenter/vm?action=clone&vmw-task=true": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "clone$task",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_clone_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.\nThe result will be an identifier for the resource type: VirtualMachine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.clone_task_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to clone the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in spec could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Creates a virtual machine from an existing virtual machine. \n\n",
                "tags": [
                    "VM"
                ]
            }
        },
        "/rest/vcenter/vm?action=instant-clone": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "instant_clone",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_instant_clone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.\nThe result will be an identifier for the resource type: VirtualMachine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.instant_clone_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to create an instant clone could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in spec could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Create an instant clone of an existing virtual machine.",
                "tags": [
                    "VM"
                ]
            }
        },
        "/rest/vcenter/vm?action=register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "operationId": "register",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_register"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the newly-created virtual machine.\nThe result will be an identifier for the resource type: VirtualMachine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.register_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to register the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in spec could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "summary": "Creates a virtual machine from existing virtual machine files on storage.",
                "tags": [
                    "VM"
                ]
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https",
        "http"
    ],
    "security": [
        {
            "api_key": []
        }
    ],
    "securityDefinitions": {
        "api_key": {
            "in": "header",
            "name": "vmware-api-session-id",
            "type": "apiKey"
        },
        "basic_auth": {
            "type": "basic"
        }
    },
    "swagger": "2.0",
    "tags": []
}