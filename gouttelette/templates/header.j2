#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2021, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated by vmware_rest_code_generator.
# See: https://github.com/ansible-collections/vmware_rest_code_generator
from __future__ import absolute_import, division, print_function
__metaclass__ = type


DOCUMENTATION = {{documentation}}

EXAMPLES = r"""
"""

RETURN = r"""
"""

# This structure describes the format of the data expected by the end-points
PAYLOAD_FORMAT = {{payload_format}}  # pylint: disable=line-too-long

import json
import socket
from ansible.module_utils.basic import env_fallback
try:
    from ansible_collections.cloud.common.plugins.module_utils.turbo.exceptions import EmbeddedModuleFailure
    from ansible_collections.cloud.common.plugins.module_utils.turbo.module import AnsibleTurboModule as AnsibleModule
    AnsibleModule.collection_name = "vmware.vmware_rest"
except ImportError:
    from ansible.module_utils.basic import AnsibleModule
from ansible_collections.vmware.vmware_rest.plugins.module_utils.vmware_rest import (
    build_full_device_list,
    exists,
    gen_args,
    get_device_info,
    get_subdevice_type,
    list_devices,
    open_session,
    prepare_payload,
    update_changed_flag,
    session_timeout,
    )



def prepare_argument_spec():
    argument_spec = {
        "vcenter_hostname": dict(
            type='str',
            required=True,
            fallback=(env_fallback, ['VMWARE_HOST']),
        ),
        "vcenter_username": dict(
            type='str',
            required=True,
            fallback=(env_fallback, ['VMWARE_USER']),
        ),
        "vcenter_password": dict(
            type='str',
            required=True,
            no_log=True,
            fallback=(env_fallback, ['VMWARE_PASSWORD']),
        ),
        "vcenter_validate_certs": dict(
            type='bool',
            required=False,
            default=True,
            fallback=(env_fallback, ['VMWARE_VALIDATE_CERTS']),
        ),
        "vcenter_rest_log_file": dict(
            type='str',
            required=False,
            fallback=(env_fallback, ['VMWARE_REST_LOG_FILE']),
        ),
        "session_timeout": dict(
            type='float',
            required=False,
            fallback=(env_fallback, ["VMWARE_SESSION_TIMEOUT"]),
        ),
    }

    {{arguments}}
    return argument_spec


async def main():
    required_if = list([
        {{ required_if|join(",") }}
    ])

    module_args = prepare_argument_spec()
    module = AnsibleModule(argument_spec=module_args, required_if=required_if, supports_check_mode=True)
    if not module.params['vcenter_hostname']:
        module.fail_json('vcenter_hostname cannot be empty')
    if not module.params['vcenter_username']:
        module.fail_json('vcenter_username cannot be empty')
    if not module.params['vcenter_password']:
        module.fail_json('vcenter_password cannot be empty')
    try:
        session = await open_session(
            vcenter_hostname=module.params['vcenter_hostname'],
            vcenter_username=module.params['vcenter_username'],
            vcenter_password=module.params['vcenter_password'],
            validate_certs=module.params['vcenter_validate_certs'],
            log_file=module.params['vcenter_rest_log_file'],)
    except EmbeddedModuleFailure as err:
        module.fail_json(err.get_message())
    result = await entry_point(module, session)
    module.exit_json(**result)
