{
    "swagger": "2.0",
    "info": {
        "description": "VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments",
        "title": "vcenter",
        "version": "2.0.0"
    },
    "host": "<vcenter>",
    "securityDefinitions": {
        "session_id": {
            "in": "header",
            "name": "vmware-api-session-id",
            "type": "apiKey"
        },
        "basic_auth": {
            "type": "basic"
        }
    },
    "basePath": "",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "tags": [],
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/api/vcenter/authentication/token": {
            "post": {
                "tags": [
                    "authentication/token"
                ],
                "summary": "Provides a token endpoint as defined in RFC 6749. \nSupported grant types: \n\n   -   urn:ietf:params:oauth:grant-type:token-exchange - Exchanges incoming token based on the spec and current client authorization data. \n  \nThis operation supercedes vcenter.tokenservice.TokenExchange#exchange. The REST rendering of the newer operation matches RFC8693's definition for both input and output of the operation.\n",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "grant_type",
                        "description": "The value of urn:ietf:params:oauth:grant-type:token-exchange indicates that a token exchange is being performed.\nWhen clients pass a value of this structure as a parameter, the field must be one of urn:ietf:params:oauth:grant-type:token-exchange. When operations return a value of this structure as a result, the field will be one of urn:ietf:params:oauth:grant-type:token-exchange.",
                        "type": "string",
                        "required": "true"
                    },
                    {
                        "in": "formData",
                        "name": "resource",
                        "description": "Indicates the location of the target service or resource where the client intends to use the requested security token.\nIf unset, it is inferred from other arguments.",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "audience",
                        "description": "The logical name of the target service where the client intends to use the requested security token. This serves a purpose similar to the Token.IssueSpec.resource field, but with the client providing a logical name rather than a location.\nIf unset, it is inferred from other arguments.",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "scope",
                        "description": "A list of space-delimited, case-sensitive strings, that allow the client to specify the desired scope of the requested security token in the context of the service or resource where the token will be used.\nIf unset, it is inferred from other arguments.",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "requested_token_type",
                        "description": "An identifier for the type of the requested security token. If the requested type is unspecified, the issued token type is at the discretion of the server and may be dictated by knowledge of the requirements of the service or resource indicated by the Token.IssueSpec.resource or Token.IssueSpec.audience field.\nIf unset, it is inferred from other arguments.",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "subject_token",
                        "description": "A security token that represents the identity of the party on behalf of whom exchange is being made. Typically, the subject of this token will be the subject of the security token issued. Token is base64-encoded. \nThe field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.\n\nThis field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset.",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "subject_token_type",
                        "description": "An identifier, that indicates the type of the security token in the Token.IssueSpec.subject-token field. \nThe field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.\n\nThis field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset.",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "actor_token",
                        "description": "A security token that represents the identity of the acting party. Typically, this will be the party that is authorized to use the requested security token and act on behalf of the subject.\nunset if not needed for the specific case of exchange.",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "actor_token_type",
                        "description": "An identifier, that indicates the type of the security token in the Token.IssueSpec.actor-token field.\nunset if Token.IssueSpec.actor-token field is not present.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TokenInfo structure that contains a newly issued token.",
                        "schema": {
                            "$ref": "#/definitions/Oauth2TokenInfo"
                        }
                    },
                    "500": {
                        "description": "If the server is unwilling or unable to issue a token for all the target services indicated by the Token.IssueSpec.resource or Token.IssueSpec.audience fields.",
                        "schema": {
                            "$ref": "#/definitions/Oauth2ErrorsInvalidScope"
                        }
                    }
                },
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "operationId": "issue",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/certificate-management/vcenter/tls": {
            "put": {
                "tags": [
                    "certificate_management/vcenter/tls"
                ],
                "summary": "Replaces the rhttpproxy TLS certificate with the specified certificate. This {@term operation} can be used in three scenarios : <ol> <li> When the CSR is created and the private key is already stored, this {@term operation} can replace the certificate. The {@link Spec#cert} (but not {@link Spec#key} and {@link Spec#rootCert}) must be provided as input. </li> <li> When the certificate is signed by a third party certificate authority/VMCA and the root certificate of the third party certificate authority/VMCA is already one of the trusted roots in the trust store, this {@term operation} can replace the certificate and private key. The {@link Spec#cert} and {@link Spec#key} (but not {@link Spec#rootCert}) must be provided as input. </li> <li> When the certificate is signed by a third party certificate authority and the root certificate of the third party certificate authority is not one of the trusted roots in the trust store, this {@term operation} can replace the certificate, private key and root CA certificate. The {@link Spec#cert},{@link Spec#key} and {@link Spec#rootCert} must be provided as input. </li> </ol> After this {@term operation} completes, the services using the certificate will be restarted for the new certificate to take effect. <p>The above three scenarios are only supported from vsphere 7.0 onwards.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCertificateManagementVcenterTlsSet"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "If the private key is not present in the VECS store.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "If the specified certificate thumbprint is the same as the existing TLS certificate thumbprint.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyExists"
                        }
                    },
                    "500": {
                        "description": "If the system failed to replace the TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "certificate_management/vcenter/tls"
                ],
                "summary": "Returns the rhttpproxy TLS certificate.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/VcenterCertificateManagementVcenterTlsInfo"
                        }
                    },
                    "404": {
                        "description": "if the rhttpproxy certificate is not present in VECS store.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if failed due to generic exception.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/certificate-management/vcenter/tls-csr": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/tls_csr"
                ],
                "summary": "Generates a CSR with the given Spec.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCertificateManagementVcenterTlsCsrCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A Certificate Signing Request.",
                        "schema": {
                            "$ref": "#/definitions/VcenterCertificateManagementVcenterTlsCsrInfo"
                        }
                    },
                    "500": {
                        "description": "If CSR could not be created for given spec for a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/certificate-management/vcenter/tls?action=renew": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/tls"
                ],
                "summary": "Renews the TLS certificate for the given duration period. <p>After this {@term operation} completes, the services using the certificate will be restarted for the new certificate to take effect.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCertificateManagementVcenterTlsRenew"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the duration period specified is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "If the system failed to renew the TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "renew",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/certificate-management/vcenter/tls?action=replace-vmca-signed": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/tls"
                ],
                "summary": "Replace MACHINE SSL with VMCA signed one with the given Spec.The system will go for restart. <p> After this {@term operation} completes, the services using the certificate will be restarted for the new certificate to take effect.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCertificateManagementVcenterTlsReplaceVmcaSigned"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the Spec given is not complete or invalid",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "If the system failed to replace the machine ssl certificate",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "replace_vmca_signed",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/certificate-management/vcenter/trusted-root-chains": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ],
                "summary": "Creates a new trusted root certificate chain from the CreateSpec.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCertificateManagementVcenterTrustedRootChainsCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The unique identifier for the new trusted root chain.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if a trusted root certificate chain exists with id in given spec.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyExists"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ],
                "summary": "Returns summary information for each trusted root certificate chain.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of trusted root certificate chains summaries.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterCertificateManagementVcenterTrustedRootChainsSummary"
                            }
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/certificate-management/vcenter/trusted-root-chains/{chain}": {
            "get": {
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ],
                "summary": "Retrieve a trusted root certificate chain for a given identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "chain",
                        "description": "Unique identifier for a trusted root cert chain."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TrustedRootChain.",
                        "schema": {
                            "$ref": "#/definitions/VcenterCertificateManagementVcenterTrustedRootChainsInfo"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "404": {
                        "description": "if a trusted root certificate chain does not exist for given id.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ],
                "summary": "Deletes trusted root certificate chain for a given identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "chain",
                        "description": "Unique identifier for a trusted root cert chain."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "404": {
                        "description": "if a trusted root certificate chain does not exist for given id.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/certificate-management/vcenter/vmca-root": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/vmca_root"
                ],
                "summary": "Replace Root Certificate with VMCA signed one using the given Spec. <p>After this {@term operation} completes, the services using the certificate will be restarted for the new certificate to take effect.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCertificateManagementVcenterVmcaRootCreate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "If the system failed to renew the TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/cluster": {
            "get": {
                "tags": [
                    "cluster"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) clusters in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "clusters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of clusters that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that clusters must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the cluster for the cluster to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the cluster for the cluster to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the clusters matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterClusterSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if more than 1000 clusters match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/cluster/{cluster}": {
            "get": {
                "tags": [
                    "cluster"
                ],
                "summary": "Retrieves information about the cluster corresponding to {@param.name cluster}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the cluster associated with {@param.name cluster}.",
                        "schema": {
                            "$ref": "#/definitions/VcenterClusterInfo"
                        }
                    },
                    "404": {
                        "description": "if there is no cluster associated with {@param.name cluster} in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the session id is missing from the request or the corresponding session object cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/compute/policies": {
            "post": {
                "tags": [
                    "compute/policies"
                ],
                "summary": "Creates a new compute policy in VMware Cloud on AWS. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterComputePoliciesCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The identifier of the newly created policy. Use this identifier to get or destroy the policy.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if a parameter passed in the spec is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if more than 100 policies are created.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges, or when used beyond VMware Cloud on AWS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "compute/policies"
                ],
                "summary": "Returns information about the compute policies available in this vCenter server in VMware Cloud on AWS. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The list of compute policies available on this vCenter server.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterComputePoliciesSummary"
                            }
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges, or when used beyond VMware Cloud on AWS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/compute/policies/capabilities": {
            "get": {
                "tags": [
                    "compute/policies/capabilities"
                ],
                "summary": "Returns information about the compute policy capabilities available in this vCenter server in VMware Cloud on AWS. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The list of compute policy capabilities available on this vCenter server.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterComputePoliciesCapabilitiesSummary"
                            }
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges, or when used beyond VMware Cloud on AWS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/compute/policies/capabilities/{capability}": {
            "get": {
                "tags": [
                    "compute/policies/capabilities"
                ],
                "summary": "Returns information about a specific compute policy capability in VMware Cloud on AWS. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "capability",
                        "description": "Identifier of the capability for which information should be retrieved."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the capability.",
                        "schema": {
                            "$ref": "#/definitions/VcenterComputePoliciesCapabilitiesInfo"
                        }
                    },
                    "404": {
                        "description": "if a capability with this identifier does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges, or when used beyond VMware Cloud on AWS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/compute/policies/tag-usage": {
            "get": {
                "tags": [
                    "compute/policies/tag_usage"
                ],
                "summary": "Returns information about the tags used by policies available in this vCenter server matching the {@link FilterSpec} in VMware Cloud on AWS. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "policies",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers that compute policies must have to match the filter. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments."
                    },
                    {
                        "in": "query",
                        "name": "tags",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers that tags must have to match the filter. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments."
                    },
                    {
                        "in": "query",
                        "name": "tag_types",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers that tag types must have to match the filter. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of tags used by policies available on this vCenter server matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterComputePoliciesTagUsageSummary"
                            }
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges, or when used beyond VMware Cloud on AWS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/compute/policies/{policy}": {
            "get": {
                "tags": [
                    "compute/policies"
                ],
                "summary": "Returns information about a specific compute policy in VMware Cloud on AWS. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "policy",
                        "description": "Identifier of the policy for which information should be retrieved."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the specified compute policy. The returned value can be converted to the information type of the capability that this policy is based on. See {@link vcenter.compute.policies.Capabilities.Info#infoType}.",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "if a policy with this identifier does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges, or when used beyond VMware Cloud on AWS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "compute/policies"
                ],
                "summary": "Deletes a specific compute policy in VMware Cloud on AWS. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "policy",
                        "description": "Identifier of the policy to be deleted."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if a policy with this identifier does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges, or when used beyond VMware Cloud on AWS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/content/registries/harbor": {
            "post": {
                "tags": [
                    "content/registries/harbor"
                ],
                "summary": "Creates a Harbor registry in the cluster.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterContentRegistriesHarborCreate"
                        }
                    },
                    {
                        "required": false,
                        "type": "string",
                        "in": "query",
                        "name": "client_token",
                        "description": "A unique token generated on the client for each creation request. The token should be a universally unique identifier (UUID), for example: {@code b8a2a2e3-2314-43cd-a871-6ede0f429751}. This token can be used to guarantee idempotent creation."
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Identifier of the deployed registry.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if {@param.name spec} contains any errors.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if resources/objects could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistry and/or CertificateAuthority.Manage privilege, or user does not have ContentLibrary.ManageClusterRegistryResource privilege on {@link CreateSpec#cluster}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "content/registries/harbor"
                ],
                "summary": "Returns basic information of all Harbor registries.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The list of basic information of all Harbor registries.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterContentRegistriesHarborSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/content/registries/harbor/{registry}": {
            "get": {
                "tags": [
                    "content/registries/harbor"
                ],
                "summary": "Get detailed information of the Harbor registry.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the registry.",
                        "schema": {
                            "$ref": "#/definitions/VcenterContentRegistriesHarborInfo"
                        }
                    },
                    "404": {
                        "description": "if a Harbor registry specified by {@param.name registry} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "content/registries/harbor"
                ],
                "summary": "Delete the Harbor registry in the cluster. All Harbor projects, repositories and images will be deleted upon Harbor registry deletion.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if a registry specified by {@param.name registry} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistry privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/content/registries/harbor/{registry}/projects": {
            "post": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Creates a project in a Harbor registry using the supplied specification. In vSphere 7.0, a Harbor registry is deployed in a vSphere cluster with vSphere namespaces enabled. When a namespace is created, a project with same name as the namespace is created in the Harbor registry, so this {@term operation} should not be called.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the Registry."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterContentRegistriesHarborProjectsCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Identifier of the newly created Harbor project.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if a project with the same name already exists in the registry. In vSphere 7.0, the existing project could have been created automatically when a namespace with the same name is created.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyExists"
                        }
                    },
                    "404": {
                        "description": "if a registry specified by {@param.name registry} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistryProject privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Returns basic information of all projects in a Harbor registry.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of summary information of all Harbor projects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterContentRegistriesHarborProjectsSummary"
                            }
                        }
                    },
                    "404": {
                        "description": "if {@param.name registry} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/content/registries/harbor/{registry}/projects/{project}": {
            "get": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Returns detailed information about the specified Harbor project.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "project",
                        "description": "Identifier of the Harbor project."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the specified Harbor project.",
                        "schema": {
                            "$ref": "#/definitions/VcenterContentRegistriesHarborProjectsInfo"
                        }
                    },
                    "404": {
                        "description": "if {@param.name registry} or {@param.name project} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Deletes the specified project from Harbor registry. Repositories and images in the project will be removed upon project deletion. Storage space of deleted images in the project will be reclaimed through next scheduled Harbor registry garbage collection. In vSphere 7.0, a Harbor registry is deployed in a vSphere cluster with vSphere namespaces enabled. When a namespace is deleted, a project with same name as the namespace is deleted from the Harbor registry, so this {@term operation} should not be called.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "project",
                        "description": "Identifier of the Harbor project."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if Harbor registry is being deleted.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if {@param.name registry} or {@param.name project} cannot be found. In vSphere 7.0, the existing project could have been deleted automatically when a namespace with the same name is deleted.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistryProject privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/content/registries/harbor/{registry}/projects/{project}?action=purge": {
            "post": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Remove all repositories, images and members in the project. Storage space of deleted images in the project will be reclaimed through next scheduled Harbor registry garbage collection.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "project",
                        "description": "Identifier of the Harbor project."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if {@param.name registry} or {@param.name project} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if Harbor registry is being deleted or the project is not in {@link ConfigStatus#READY} status.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistryProject privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "purge",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/content/registries/{registry}/health": {
            "get": {
                "tags": [
                    "content/registries/health"
                ],
                "summary": "Returns the health information of a container registry in the vCenter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Health information of the registry.",
                        "schema": {
                            "$ref": "#/definitions/VcenterContentRegistriesHealthInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the registry does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user is not a member of the Administrators",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/crypto-manager/hosts/{host}/kms/providers": {
            "get": {
                "tags": [
                    "crypto_manager/hosts/kms/providers"
                ],
                "summary": "List the available providers on a host.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "Host identifier."
                    },
                    {
                        "in": "query",
                        "name": "providers",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Provider identifiers."
                    },
                    {
                        "in": "query",
                        "name": "health",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "NONE",
                                "OK",
                                "WARNING",
                                "ERROR"
                            ]
                        },
                        "description": "Provider health status."
                    },
                    {
                        "in": "query",
                        "name": "types",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "NATIVE",
                                "TRUST_AUTHORITY"
                            ]
                        },
                        "description": "Provider types."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summary of providers.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterCryptoManagerHostsKmsProvidersSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the host identifier is empty or the FilterSpec is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the host is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/crypto-manager/hosts/{host}/kms/providers/{provider}": {
            "get": {
                "tags": [
                    "crypto_manager/hosts/kms/providers"
                ],
                "summary": "Get a provider on a host.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "Host identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Provider identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information of the provider.",
                        "schema": {
                            "$ref": "#/definitions/VcenterCryptoManagerHostsKmsProvidersInfo"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the host identifier is empty or the provider identifier is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the provider or the host is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/crypto-manager/kms/providers": {
            "post": {
                "tags": [
                    "crypto_manager/kms/providers"
                ],
                "summary": "Add a new provider.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersCreate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if creating a provider of the type is not supported.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "crypto_manager/kms/providers"
                ],
                "summary": "Return a list of providers. <p>",
                "parameters": [
                    {
                        "in": "query",
                        "name": "providers",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Provider identifiers."
                    },
                    {
                        "in": "query",
                        "name": "health",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "NONE",
                                "OK",
                                "WARNING",
                                "ERROR"
                            ]
                        },
                        "description": "Provider health status."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summary of providers.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the spec is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/crypto-manager/kms/providers/{provider}": {
            "get": {
                "tags": [
                    "crypto_manager/kms/providers"
                ],
                "summary": "Return information about a provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information of the provider.",
                        "schema": {
                            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersInfo"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the provider identifier is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "crypto_manager/kms/providers"
                ],
                "summary": "Update an existing provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the provider's type does not allow updates.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "crypto_manager/kms/providers"
                ],
                "summary": "Remove a provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the provider's type does not allow deletion.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/crypto-manager/kms/providers?action=export": {
            "post": {
                "tags": [
                    "crypto_manager/kms/providers"
                ],
                "summary": "Export provider configuration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersExport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExportResult.",
                        "schema": {
                            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersExportResult"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the provider's type does not allow export.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the provider with the identifier is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "export",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/crypto-manager/kms/providers?action=import": {
            "post": {
                "tags": [
                    "crypto_manager/kms/providers"
                ],
                "summary": "Import provider configuration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersImportProvider"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "importResult ImportResult.",
                        "schema": {
                            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersImportResult"
                        }
                    },
                    "400": {
                        "description": "if the config or the password is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "import_provider",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/datacenter": {
            "post": {
                "tags": [
                    "datacenter"
                ],
                "summary": "Create a new datacenter in the vCenter inventory",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDatacenterCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The identifier of the newly created datacenter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the datacenter name is empty or invalid as per the underlying implementation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the datacenter folder cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "datacenter"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) datacenters in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of datacenters that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that datacenters must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the datacenters for the datacenter to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the datacenters matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterDatacenterSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if more than 1000 datacenters match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/datacenter/{datacenter}": {
            "get": {
                "tags": [
                    "datacenter"
                ],
                "summary": "Retrieves information about the datacenter corresponding to {@param.name datacenter}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "datacenter",
                        "description": "Identifier of the datacenter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the datacenter associated with {@param.name datacenter}.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDatacenterInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no datacenter associated with {@param.name datacenter} in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "datacenter"
                ],
                "summary": "Delete an empty datacenter from the vCenter Server",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "datacenter",
                        "description": "Identifier of the datacenter to be deleted."
                    },
                    {
                        "required": false,
                        "type": "boolean",
                        "in": "query",
                        "name": "force",
                        "description": "If true, delete the datacenter even if it is not empty."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no datacenter associated with {@param.name datacenter} in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the datacenter associated with {@param.name datacenter} is not empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInUse"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/datastore": {
            "get": {
                "tags": [
                    "datastore"
                ],
                "summary": "Returns information about at most 2500 visible (subject to permission checks) datastores in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "datastores",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of datastores that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that datastores must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "types",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "VMFS",
                                "NFS",
                                "NFS41",
                                "CIFS",
                                "VSAN",
                                "VFFS",
                                "VVOL"
                            ]
                        },
                        "description": "Types that datastores must have to match the filter (see {@link Summary#type})."
                    },
                    {
                        "in": "query",
                        "name": "folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the datastore for the datastore to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the datastore for the datastore to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the datastores matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterDatastoreSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#types} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if more than 2500 datastores match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/datastore/{datastore}": {
            "get": {
                "tags": [
                    "datastore"
                ],
                "summary": "Retrieves information about the datastore indicated by {@param.name datastore}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "datastore",
                        "description": "Identifier of the datastore for which information should be retrieved."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the datastore associated with {@param.name datastore}.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDatastoreInfo"
                        }
                    },
                    "404": {
                        "description": "if the datastore indicated by {@param.name datastore} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/datastore/{datastore}/default-policy": {
            "get": {
                "tags": [
                    "datastore/default_policy"
                ],
                "summary": "Returns the identifier of the current default storage policy associated with the specified datastore.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "datastore",
                        "description": "Identifier of the datastore for which the default policy is requested."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the default storage policy associated with the specified datastore.",
                        "schema": {
                            "required": false,
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the specified datastore does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required priveleges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment": {
            "get": {
                "tags": [
                    "deployment"
                ],
                "summary": "Get the current status of the appliance deployment.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the status information about the appliance.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "404": {
                        "description": "if appliance state cannot be determined.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/history": {
            "get": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Get the current status of the vCenter historical data import.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the status information about the historical data import status.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentImportHistoryInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "Generic error",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get"
            }
        },
        "/api/vcenter/deployment/history?action=cancel": {
            "post": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Cancels the task for importing vCenter historical data.",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if vCenter historical data import task is already canceled.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyInDesiredState"
                        }
                    },
                    "500": {
                        "description": "Generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "cancel"
            }
        },
        "/api/vcenter/deployment/history?action=pause": {
            "post": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Pauses the task for importing vCenter historical data.",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if vCenter historical data import task is already paused",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyInDesiredState"
                        }
                    },
                    "500": {
                        "description": "Generic error",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "pause"
            }
        },
        "/api/vcenter/deployment/history?action=resume": {
            "post": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Resumes the task for importing vCenter historical data.",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if vCenter historical data import task is already resumed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyInDesiredState"
                        }
                    },
                    "500": {
                        "description": "Generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "resume"
            }
        },
        "/api/vcenter/deployment/history?action=start": {
            "post": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Creates and starts task for importing vCenter historical data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentImportHistoryStart"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if vCenter historical data import task has already being started.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyInDesiredState"
                        }
                    },
                    "500": {
                        "description": "Generic error",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "start"
            }
        },
        "/api/vcenter/deployment/install": {
            "get": {
                "tags": [
                    "deployment/install"
                ],
                "summary": "Get the parameters used to configure the ongoing appliance installation.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "InstallSpec parameters being used to configure appliance install.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentInstallInstallSpec"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in INSTALL_PROGRESS state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/install/initial-config/remote-psc/thumbprint": {
            "get": {
                "tags": [
                    "deployment/install/initial_config/remote_psc/thumbprint"
                ],
                "summary": "Gets the SHA1 thumbprint of the remote PSC.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "address",
                        "type": "string",
                        "description": "The IP address or DNS resolvable name of the remote PSC.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "https_port",
                        "type": "integer",
                        "description": "The HTTPS port of the remote PSC.",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The thumbprint of the specified remote PSC",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "on exception.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/install/psc/replicated?action=check": {
            "post": {
                "tags": [
                    "deployment/install/psc/replicated"
                ],
                "summary": "Checks whether the provided remote PSC is reachable and can be replicated.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentInstallPscReplicatedCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentCheckInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/install/psc/standalone?action=check": {
            "post": {
                "tags": [
                    "deployment/install/psc/standalone"
                ],
                "summary": "Checks that the information to configure a non-replicated PSC satisfies the requirements.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentInstallPscStandaloneCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentCheckInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/install/remote-psc?action=check": {
            "post": {
                "tags": [
                    "deployment/install/remote_psc"
                ],
                "summary": "Checks whether the remote PSC is reachable and the deployed vCenter Server can be registered with the remote PSC.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentInstallRemotePscCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentCheckInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/install?action=cancel": {
            "post": {
                "tags": [
                    "deployment/install"
                ],
                "summary": "Cancel the appliance installation that is in progress.",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in CONFIG_IN_PROGRESS state and if the operation is not INSTALL.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "cancel",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/install?action=check": {
            "post": {
                "tags": [
                    "deployment/install"
                ],
                "summary": "Run sanity checks using the InstallSpec parameters passed.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentInstallCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckInfo containing the check results.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentCheckInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/install?action=start": {
            "post": {
                "tags": [
                    "deployment/install"
                ],
                "summary": "Start the appliance installation.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentInstallStart"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/migrate": {
            "get": {
                "tags": [
                    "deployment/migrate"
                ],
                "summary": "Get the MigrateSpec parameters used to configure the ongoing appliance migration.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "MigrateSpec parameters being used to configure appliance migration.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentMigrateMigrateSpec"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in MIGRATE_PROGRESS state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/migrate/active-directory?action=check": {
            "post": {
                "tags": [
                    "deployment/migrate/active_directory"
                ],
                "summary": "Checks whether the provided Active Directory user has permission to join the migrated vCenter Server appliance to the domain.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentMigrateActiveDirectoryCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentCheckInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/migrate?action=cancel": {
            "post": {
                "tags": [
                    "deployment/migrate"
                ],
                "summary": "Cancel the appliance migration that is in progress.",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in CONFIG_IN_PROGRESS state and if the operation is not INSTALL.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "cancel",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/migrate?action=check": {
            "post": {
                "tags": [
                    "deployment/migrate"
                ],
                "summary": "Run sanity checks using the MigrateSpec parameters passed.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentMigrateCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckInfo containing the check results.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentCheckInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/migrate?action=start": {
            "post": {
                "tags": [
                    "deployment/migrate"
                ],
                "summary": "Start the appliance migration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentMigrateStart"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/question": {
            "get": {
                "tags": [
                    "deployment/question"
                ],
                "summary": "Get the question that was raised during the configuration.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the question.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentQuestionInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in QUESTION_RAISED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if questions could not be retrieved although the appliance is in QUESTION_RAISED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInternalServerError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/question?action=answer": {
            "post": {
                "tags": [
                    "deployment/question"
                ],
                "summary": "Supply answer to the raised question.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentQuestionAnswer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is NOT in QUESTION_RAISED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if answer file could not be created.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInternalServerError"
                        }
                    }
                },
                "operationId": "answer",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/upgrade": {
            "get": {
                "tags": [
                    "deployment/upgrade"
                ],
                "summary": "Get the UpgradeSpec parameters used to configure the ongoing appliance upgrade.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "UpgradeSpec parameters being used to configure appliance upgrade.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentUpgradeUpgradeSpec"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in UPGRADE_PROGRESS state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/upgrade?action=cancel": {
            "post": {
                "tags": [
                    "deployment/upgrade"
                ],
                "summary": "Cancel the appliance upgrade that is in progress.",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in CONFIG_IN_PROGRESS state and if the operation is not INSTALL.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "cancel",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/upgrade?action=check": {
            "post": {
                "tags": [
                    "deployment/upgrade"
                ],
                "summary": "Run sanity checks using the UpgradeSpec parameters passed.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentUpgradeCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckInfo containing the check results.",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentCheckInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment/upgrade?action=start": {
            "post": {
                "tags": [
                    "deployment/upgrade"
                ],
                "summary": "Start the appliance installation.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterDeploymentUpgradeStart"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/deployment?action=rollback": {
            "post": {
                "tags": [
                    "deployment"
                ],
                "summary": "Rollback a failed appliance so it can be configured once again.",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in FAILED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "rollback",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/folder": {
            "get": {
                "tags": [
                    "folder"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) folders in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of folders that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that folders must have to match the filter (see {@link Summary#name})."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "type": "string",
                        "enum": [
                            "DATACENTER",
                            "DATASTORE",
                            "HOST",
                            "NETWORK",
                            "VIRTUAL_MACHINE"
                        ],
                        "description": "The {@name Type} {@term enumerated type} defines the type of a vCenter Server folder.  The type of a folder determines what what kinds of children can be contained in the folder."
                    },
                    {
                        "in": "query",
                        "name": "parent_folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the folder for the folder to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the folder for the folder to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the folders matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterFolderSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#type} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if more than 1000 folders match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/guest/customization-specs": {
            "post": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Creates a customization specification.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterGuestCustomizationSpecsCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The name of the customization specification that is created.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the specified specification is not a valid one.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) guest customization specifications in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that guest customization specifications must have to match the filter (see {@link Summary#name})."
                    },
                    {
                        "in": "query",
                        "name": "OS_type",
                        "type": "string",
                        "enum": [
                            "WINDOWS",
                            "LINUX"
                        ],
                        "description": "The {@name OsType} {@term enumerated type} defines the types of guest operating systems for which guest customization is supported."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the guest customization specifications matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterGuestCustomizationSpecsSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#osType} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if more than 1000 guest customization specifications match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/guest/customization-specs/{name}": {
            "put": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Sets an existing specification, possibly after retrieving (by using {@link #get}) and editing it.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The name of the customization specification that needs to be set."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterGuestCustomizationSpecsSet"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "If, based on the item's fingerprint value, the set process detects that the specification has changed since its retrieval, then the {@term operation} throws InvalidArgument exception to warn the client that he might overwrite another client's change.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Returns the guest customization specification from vCenter with the specified identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The name of the customization specification."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A customization spec with the specified identifier.",
                        "schema": {
                            "$ref": "#/definitions/VcenterGuestCustomizationSpecsInfo"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Deletes a customization specification with the specified identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The name of the customization specification that needs to be deleted."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if a customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/guest/customization-specs/{name}?action=export": {
            "post": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Returns the content of the customization specification in the specified format. Note that any passwords in the customization specification will be set to blank values during the export {@term operation}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The name of the customization specification that has to be returned."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterGuestCustomizationSpecsExport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The string representation of the customization specification in the specified format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If value of {@param.name format} is not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "export",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/guest/customization-specs?action=import": {
            "post": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Converts a well formatted string to a {@link CreateSpec}. The resulting object can be passed to {@link #create} {@term operation}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterGuestCustomizationSpecsImportSpecification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A proper specification of type {@link CreateSpec}",
                        "schema": {
                            "$ref": "#/definitions/VcenterGuestCustomizationSpecsCreateSpec"
                        }
                    },
                    "400": {
                        "description": "if the specified content cannot be properly converted into a proper valid {@link CreateSpec} object.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "import_specification",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/host": {
            "post": {
                "tags": [
                    "host"
                ],
                "summary": "Add a new standalone host in the vCenter inventory. The newly connected host will be in connected state. The vCenter Server will verify the SSL certificate before adding the host to its inventory. In the case where the SSL certificate cannot be verified because the Certificate Authority is not recognized or the certificate is self signed, the vCenter Server will fall back to thumbprint verification mode as defined by {@link CreateSpec.ThumbprintVerification}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterHostCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created identifier of the host in vCenter.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the software version on the host is not supported.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "500": {
                        "description": "if there are not enough licenses to add the host.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if there is no folder associated with the {@name CreateSpec#folder} {@term field} in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user name or password for the administration account on the host are invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "host"
                ],
                "summary": "Returns information about at most 2500 visible (subject to permission checks) hosts in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "hosts",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of hosts that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that hosts must have to match the filter (see {@link Summary#name})."
                    },
                    {
                        "in": "query",
                        "name": "folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the hosts for the hosts to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the hosts for the hosts to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "standalone",
                        "type": "boolean",
                        "description": "If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "clusters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Clusters that must contain the hosts for the hosts to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "connection_states",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "CONNECTED",
                                "DISCONNECTED",
                                "NOT_RESPONDING"
                            ]
                        },
                        "description": "Connection states that a host must be in to match the filter (see {@link Summary#connectionState}."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the hosts matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterHostSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#connectionStates} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if more than 2500 hosts match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/host/{host}": {
            "delete": {
                "tags": [
                    "host"
                ],
                "summary": "Remove a standalone host from the vCenter Server.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "Identifier of the host to be deleted."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no host associated with {@param.name host} in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the host associated with {@param.name host} is in a vCenter cluster",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInUse"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/host/{host}?action=connect": {
            "post": {
                "tags": [
                    "host"
                ],
                "summary": "Connect to the host corresponding to {@param.name host} previously added to the vCenter server.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "Identifier of the host to be reconnected."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the host associated with {@param.name host} is already connected.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyInDesiredState"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no host associated with {@param.name host} in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/host/{host}?action=disconnect": {
            "post": {
                "tags": [
                    "host"
                ],
                "summary": "Disconnect the host corresponding to {@param.name host} from the vCenter server",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "Identifier of the host to be disconnected."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the host associated with {@param.name host} is already disconnected.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyInDesiredState"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no host associated with {@param.name host} in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/identity/providers": {
            "post": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Create a vCenter Server identity provider.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterIdentityProvidersCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The identifier of the created identity provider.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if provider exists for provider ID in given spec.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyExists"
                        }
                    }
                },
                "operationId": "create"
            },
            "get": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Retrieve all identity providers.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the identity providers.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterIdentityProvidersSummary"
                            }
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/identity/providers/{provider}": {
            "get": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Retrieve detailed information of the specified identity provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "the identifier of the provider"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information of the specified identity provider.",
                        "schema": {
                            "$ref": "#/definitions/VcenterIdentityProvidersInfo"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "404": {
                        "description": "if no provider found with the given provider identifier.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "get"
            },
            "patch": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Update a vCenter Server identity provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "the identifier of the provider to update"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterIdentityProvidersUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if invalid arguments are provided in updateSpec.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no provider found with the given provider identifier.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "update"
            },
            "delete": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Delete a vCenter Server identity provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "the identifier of the provider to delete"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "404": {
                        "description": "if no provider found with the given provider identifier.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "delete"
            }
        },
        "/api/vcenter/inventory/datastore": {
            "get": {
                "tags": [
                    "inventory/datastore"
                ],
                "summary": "Returns datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information.",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "required": true,
                        "in": "query",
                        "name": "datastores",
                        "description": "Identifiers of the datastores for which information will be returned."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/VcenterInventoryDatastoreInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "if no datastore can be found for one or more of the datastore identifiers in {@param.name datastores}",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "find",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/inventory/network": {
            "get": {
                "tags": [
                    "inventory/network"
                ],
                "summary": "Returns network information for the specified vCenter Server networks. The key in the {@term result} {@term map} is the network identifier and the value in the {@term map} is the network information.",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "required": true,
                        "in": "query",
                        "name": "networks",
                        "description": "Identifiers of the vCenter Server networks for which information will be returned."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Network information for the specified vCenter Server networks. The key in the {@term result} {@term map} is the network identifier and the value in the {@term map} is the network information.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/VcenterInventoryNetworkInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "if no datastore can be found for one or more of the vCenter Server network identifiers in {@param.name networks}",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "find",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/iso/image?action=mount": {
            "post": {
                "tags": [
                    "iso/image"
                ],
                "summary": "Mounts an ISO image from a content library on a virtual machine.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterIsoImageMount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the newly created virtual CD-ROM backed by the specified ISO image.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "If either {@param.name vm} or the {@param.name libraryItem} is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "When the operation is not allowed on the virtual machine in its current state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    }
                },
                "operationId": "mount",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/iso/image?action=unmount": {
            "post": {
                "tags": [
                    "iso/image"
                ],
                "summary": "Unmounts a previously mounted CD-ROM using an ISO image as a backing.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterIsoImageUnmount"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "If the virtual machine identified by {@param.name vm} is not found or the {@param.name cdrom} does not identify a virtual CD-ROM in the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "When the operation is not allowed on the virtual machine in its current state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "unmount",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/lcm/discovery/associated-products": {
            "post": {
                "tags": [
                    "lcm/discovery/associated_products"
                ],
                "summary": "Associates a VMware product with vCenter Server manually. The product must be taken from the product catalog API.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires VcLifecycle.View. \n",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterLcmDiscoveryAssociatedProductsCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Identifier of the newly-added product.\nThe result will be an identifier for the resource type: vcenter.lcm.product.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the spec argument is not allowed",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "If there is some unknown internal error. The accompanying error message will give more details about the failure.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "lcm/discovery/associated_products"
                ],
                "summary": "Retrieves a list of all associated VMware product deployments with vCenter Server in the environment. The list contains both product deployments discovered automatically and deployments registered manually through the API.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires VcLifecycle.View. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of all the registered products with vCenter.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterLcmDiscoveryProduct"
                            }
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If there is some unknown internal error. The accompanying error message will give more details about the failure.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/lcm/discovery/associated-products/{product}": {
            "get": {
                "tags": [
                    "lcm/discovery/associated_products"
                ],
                "summary": "Returns the detailed information of a product associated with vCenter Server.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires VcLifecycle.View. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "product",
                        "description": "An identifier of the product to be modified.\nThe parameter must be an identifier for the resource type: vcenter.lcm.product."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details.",
                        "schema": {
                            "$ref": "#/definitions/VcenterLcmDiscoveryProduct"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "404": {
                        "description": "If there is no record associated with product in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "If there is some unknown internal error. The accompanying error message will give more details about the failure.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "lcm/discovery/associated_products"
                ],
                "summary": "Modifies a VMware product associated with vCenter Server which was added manually. Automatically discovered VMware products cannot be modified.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires VcLifecycle.View. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "product",
                        "description": "An id of the product to be modified.\nThe parameter must be an identifier for the resource type: vcenter.lcm.product."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterLcmDiscoveryAssociatedProductsUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the spec argument is not allowed",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If there is no record associated with product in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "If there is some unknown internal error. The accompanying error message will give more details about the failure.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "lcm/discovery/associated_products"
                ],
                "summary": "Deletes or dissociates a VMware product associated with vCenter Server which was added manually. Automatically discovered VMware products cannot be deleted or dissociated.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires VcLifecycle.View. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "product",
                        "description": "An id of the product to be removed.\nThe parameter must be an identifier for the resource type: vcenter.lcm.product."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "404": {
                        "description": "If there is no record associated with product in the system database.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "If there is some unknown internal error. The accompanying error message will give more details about the failure.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/lcm/discovery/interop-report?vmw-task=true": {
            "post": {
                "tags": [
                    "lcm/discovery/interop_report"
                ],
                "summary": "Creates interoperability report between a vCenter Server release version and all registered products with the vCenter Server instance. \n The result of this operation can be queried by calling the cis.Tasks#get operation where task is the response of this operation.\n",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterLcmDiscoveryInteropReportCreateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The interoperability report.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If there is some unknown internal error. The accompanying error message will give more details about the failure.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/lcm/discovery/product-catalog": {
            "get": {
                "tags": [
                    "lcm/discovery/product_catalog"
                ],
                "summary": "Retrieves a list of all VMware products that can be associated with vCenter Server.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires VcLifecycle.View. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of all the VMware products which can be associated with vCenter Server",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterLcmDiscoveryProductCatalogSummary"
                            }
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If there is some unknown internal error. The accompanying error message will give more details about the failure.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/lcm/reports/{report}": {
            "get": {
                "tags": [
                    "lcm/reports"
                ],
                "summary": "Returns the location Reports.Location information for downloading the report for the specified file name. \n Retrieving a report involves two steps: \n\n   - Step 1: Invoke the Reports.get operation to provision a token and a URI.\n   - Step 2: Make an HTTP GET request by using the URI and the token returned in step 1 to retrieve the report.\n  \n The HTTP GET request will: \n\n   -  Return 401 (Not Authorized) if the download URI is recognized, but the token is invalid, 404 if the URL is not recognized otherwise return 200 (OK)\n   -  Provide the CSV contents as the output of the request. The API accepts the file name as input, reads the contents of that CSV file, and returns this text as the result of the API. \n \nif you do not have all of the privileges described as follows: \n   -  Operation execution requires VcLifecycle.View. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "report",
                        "description": "The parameter must be an identifier for the resource type: vcenter.lcm.report."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VcenterLcmReportsLocation"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "404": {
                        "description": "If there is no file associated with report in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "If there is some unknown internal error. The accompanying error message will give more details about the failure.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/lcm/update/pending": {
            "get": {
                "tags": [
                    "lcm/update/pending"
                ],
                "summary": "Lists all available minor and major updates.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires VcLifecycle.View. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Information about the pending patch/updates for the given vCenter server",
                        "schema": {
                            "$ref": "#/definitions/VcenterLcmUpdatePendingListResult"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "if there is some unknown internal error. The accompanying error message will give more details about the error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/lcm/update/pending/{version}": {
            "get": {
                "tags": [
                    "lcm/update/pending"
                ],
                "summary": "Gets detailed update information.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires VcLifecycle.View. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "A version identified the update\nThe parameter must be an identifier for the resource type: vcenter.lcm.update.pending."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A detailed information about the particular vCenter patch/update",
                        "schema": {
                            "$ref": "#/definitions/VcenterLcmUpdatePendingInfo"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "404": {
                        "description": "if there is no pending update assosiated with the version in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if there is some unknown internal error. The accompanying error message will give more details about the error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/lcm/update/pending/{version}/precheck-report?vmw-task=true": {
            "post": {
                "tags": [
                    "lcm/update/precheck_report"
                ],
                "summary": "Creates a vCenter Server pre-update compatibility check report for the pending update version. The report can be exported and downloaded in CSV format. \n The result of this operation can be queried by calling the cis.Tasks#get operation where task is the response of this operation.\n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "Pending update version for which pre-update compatibility check will be executed.\nThe parameter must be an identifier for the resource type: vcenter.lcm.update.pending."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The precheck report, which contains a link to download the CSV report as well",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "404": {
                        "description": "if there is no pending update assosiated with the version in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if a precheck is already in progress.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if there is some unknown internal error. The accompanying error message will give more details about the error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/capability": {
            "get": {
                "tags": [
                    "namespace_management/hosts_config"
                ],
                "summary": "Returns support and licensing information about hosts under a VC.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Compatibility structure containing information about vSphere Namespaces support and licensing.",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementHostsConfigInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/cluster-compatibility": {
            "get": {
                "tags": [
                    "namespace_management/cluster_compatibility"
                ],
                "summary": "Returns Namespaces compatibility information for all clusters in vCenter matching the ClusterCompatibility.FilterSpec. The result contains only visible (subject to permission checks) clusters.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Anonymous. \n",
                "parameters": [
                    {
                        "in": "query",
                        "name": "compatible",
                        "type": "boolean",
                        "description": "Compatibility criteria for matching the filter. If true, only clusters which are compatible for Namespaces match the filter. If false, all clusters match the filter.\nIf unset, both compatible and incompatible clusters match the filter."
                    },
                    {
                        "in": "query",
                        "name": "network_provider",
                        "type": "string",
                        "enum": [
                            "NSXT_CONTAINER_PLUGIN",
                            "VSPHERE_NETWORK"
                        ],
                        "description": "Identifies the network plugin that cluster networking functionalities for this vSphere Namespaces Cluster."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Namespaces compatibility information for the clusters matching the the ClusterCompatibility.FilterSpec.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespaceManagementClusterCompatibilitySummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the server reports an unknown internal error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInternalServerError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/cluster-size-info": {
            "get": {
                "tags": [
                    "namespace_management/cluster_size_info"
                ],
                "summary": "Get information about the default values associated with various sizes.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Information for each size.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/VcenterNamespaceManagementClusterSizeInfoInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters": {
            "get": {
                "tags": [
                    "namespace_management/clusters"
                ],
                "summary": "Returns information about all clusters on which vSphere Namespaces are enabled on this vCenter.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Anonymous. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of summary of all clusters with vSphere Namespaces enabled.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespaceManagementClustersSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}": {
            "put": {
                "tags": [
                    "namespace_management/clusters"
                ],
                "summary": "Set a new configuration on the cluster object. The specified configuration is applied in entirety and will replace the current configuration fully.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster on which vSphere Namespaces is enabled.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementClustersSet"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if vSphere Namespaces is being disabled on this cluster.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if cluster could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Manage privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "namespace_management/clusters"
                ],
                "summary": "Returns information about a specific cluster.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster on which vSphere Namespaces are enabled.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the desired state of the specified cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementClustersInfo"
                        }
                    },
                    "404": {
                        "description": "if cluster could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the specified cluster does not have vSphere Namespaces enabled.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "namespace_management/clusters"
                ],
                "summary": "Update configuration on the cluster object. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster on which vSphere Namespaces is enabled.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementClustersUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if vSphere Namespaces is being disabled on this cluster.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if cluster could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Manage privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}/load-balancers": {
            "get": {
                "tags": [
                    "namespace_management/load_balancers"
                ],
                "summary": "Returns information about all load balancers associated with the given cluster.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster the load balancers are associated with.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of summary of all load balancers associated with a clusters.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if cluster cannot be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if the specified cluster does not have vSphere Namespaces enabled.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}/load-balancers/{id}": {
            "get": {
                "tags": [
                    "namespace_management/load_balancers"
                ],
                "summary": "Returns information LoadBalancers.Info about the load balancer associated with the given cluster.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster the load balancer is associated with.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "id",
                        "description": "Identifier of the load balancer LoadBalancers.ConfigSpec.id.\nThe parameter must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about load balancer associated with a cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if cluster or id cannot be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if the specified cluster does not have vSphere Namespaces enabled.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}/networks": {
            "get": {
                "tags": [
                    "namespace_management/networks"
                ],
                "summary": "Return information about all vSphere Namespaces networks in the cluster.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified vSphere Namespaces network..",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespaceManagementNetworksInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "if cluster or network could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}/networks/{network}": {
            "get": {
                "tags": [
                    "namespace_management/networks"
                ],
                "summary": "Return information about a specific vSphere Namespaces network.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "network",
                        "description": "Identifier for the vSphere Namespaces network.\nThe parameter must be an identifier for the resource type: vcenter.namespace_management.Network."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of information about all vSphere Namespaces networks in the cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementNetworksInfo"
                        }
                    },
                    "404": {
                        "description": "if cluster or network could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}/support-bundle": {
            "post": {
                "tags": [
                    "namespace_management/support_bundle"
                ],
                "summary": "Returns the location SupportBundle.Location information for downloading the Namespaces-related support bundle for the specified cluster. \n Retrieving a support bundle involves two steps: \n\n   - Step 1: Invoke operation to provision a token and a URI.\n   - Step 2: Make an HTTP GET request using URI and one time used token returned in step 1 to generate the support bundle and return it.\n  There can only be one valid token per cluster at any given time. If this operation is invoked again for the same cluster identifier while a token still valid, the API will return the same SupportBundle.Location response. \n The HTTP GET request will: \n\n   -  return 401 (Not Authorized) if the download URL is recognized, but the token is invalid.\n   -  otherwise return 200 (OK), mark the token used (invalidating it for any future use), open a application/tar download stream for the client, and start the bundle process. As part of its work, the API will orchestrate support bundling on the worker nodes of a cluster. If a failure occurs during the collection of support bundle from worker node, the API will not abort the request, but will log a warning and move on to processing other worker nodes' bundles. The API will only abort its operation if the content of the stream has been corrupted. When the API has to abort its operation (and the response stream), it will not provide any indication of failures to the client. The client will need to verify validity of the resultant file based on the format specified in the response's Content-Disposition header.\n \nif you do not have all of the privileges described as follows: \n   -  Operation execution requires Global.Diagnostics. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of cluster for which the Namespaces-related support bundle should be generated.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    }
                ],
                "responses": {
                    "201": {
                        "description": "the download location of the support bundle for the cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementSupportBundleLocation"
                        }
                    },
                    "404": {
                        "description": "if the specified cluster is not registered on this vCenter server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Global.Diagnostics privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}/workload-resource-options": {
            "get": {
                "tags": [
                    "namespace_management/namespace_resource_options"
                ],
                "summary": "Get the information about the objects used to set and update resource quota keys for version of Kubernetes running on {#link cluster}.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster hosting the namespace on which the resource quota needs to be set.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the structures representing the resource spec.",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementNamespaceResourceOptionsInfo"
                        }
                    },
                    "404": {
                        "description": "if cluster could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the specified cluster is not enabled for Namespaces.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}?action=disable": {
            "post": {
                "tags": [
                    "namespace_management/clusters"
                ],
                "summary": "Disable vSphere Namespaces on the cluster. This operation tears down the Kubernetes instance and the worker nodes associated with vSphere Namespaces enabled cluster.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster for which vSphere Namespaces will be disabled.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if cluster could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Manage privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "disable",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}?action=enable": {
            "post": {
                "tags": [
                    "namespace_management/clusters"
                ],
                "summary": "Enable vSphere Namespaces on the cluster. This operation sets up Kubernetes instance for the cluster along with worker nodes.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster on which vSphere Namespaces will be enabled.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementClustersEnable"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the specified cluster is not supported for vSphere Namespaces, the cluster's hosts do not have the required ESX version, or for any other incompatibilities.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "500": {
                        "description": "if the specified cluster is not licensed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if resources/objects could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Manage privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "enable",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/clusters/{cluster}?action=rotate_password": {
            "post": {
                "tags": [
                    "namespace_management/clusters"
                ],
                "summary": "Request a new root password for all control plane nodes in the cluster. This operation generates a new root password and configures every control plane node in the cluster to accept it for authentication.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster for which the password is being generated.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if cluster could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Manage privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if the cluster is in the process of password rotation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "rotate_password",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/distributed-switch-compatibility": {
            "get": {
                "tags": [
                    "namespace_management/distributed_switch_compatibility"
                ],
                "summary": "Returns Namespaces compatibility information of Distributed Switches in vCenter associated with the vCenter cluster, matching the DistributedSwitchCompatibility.FilterSpec.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "query",
                        "name": "cluster",
                        "description": "Identifier of a vCenter Cluster. Only Distributed Switches associated with the vCenter Cluster will be considered by the filter.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    },
                    {
                        "in": "query",
                        "name": "compatible",
                        "type": "boolean",
                        "description": "Compatibility criteria for matching the filter. If true, only Distributed Switches which are compatible with vSphere Namespaces match the filter. If false, only Distributed Switches which are incompatible with vSphere Namespaces match the filter.\nIf unset, both compatible and incompatible Distributed Switches match the filter."
                    },
                    {
                        "in": "query",
                        "name": "network_provider",
                        "type": "string",
                        "enum": [
                            "NSXT_CONTAINER_PLUGIN",
                            "VSPHERE_NETWORK"
                        ],
                        "description": "Identifies the network plugin that cluster networking functionalities for this vSphere Namespaces Cluster."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Namespaces compatibility information for Distributed Switches matching the the DistributedSwitchCompatibility.FilterSpec.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespaceManagementDistributedSwitchCompatibilitySummary"
                            }
                        }
                    },
                    "500": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInternalServerError"
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/edge-cluster-compatibility": {
            "get": {
                "tags": [
                    "namespace_management/edge_cluster_compatibility"
                ],
                "summary": "Returns Namespaces compatibility information of NSX-T Edge Clusters matching the EdgeClusterCompatibility.FilterSpec.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "query",
                        "name": "cluster",
                        "description": "Identifier of a vCenter Cluster. Only Edge Clusters that are associated with the particular vCenter Cluster will be considered by the filter.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "query",
                        "name": "distributed_switch",
                        "description": "Identifier of a Distributed Switch. Only Edge Clusters that are associated with the particular Distributed Switch will be considered by the filter.\nThe parameter must be an identifier for the resource type: vSphereDistributedSwitch."
                    },
                    {
                        "in": "query",
                        "name": "compatible",
                        "type": "boolean",
                        "description": "Compatibility criteria for matching the filter. If true, only Edge Clusters which are compatible with vSphere Namespaces match the filter. If false, only Edge Clusters which are incompatible with vSphere Namespaces match the filter.\nIf unset, both compatible and incompatible Edge Clusters match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of summaries of Edge Clusters associated with the given vCenter Cluster and Distributed Switch matching the EdgeClusterCompatibility.FilterSpec.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespaceManagementEdgeClusterCompatibilitySummary"
                            }
                        }
                    },
                    "500": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInternalServerError"
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/software/cluster-available-versions": {
            "get": {
                "tags": [
                    "namespace_management/cluster_available_versions"
                ],
                "summary": "Get information about each available upgrade.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Information for each upgrade.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespaceManagementClusterAvailableVersionsSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/software/clusters": {
            "get": {
                "tags": [
                    "namespace_management/software/clusters"
                ],
                "summary": "Returns upgrade related information about all WCP enabled clusters.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Anonymous. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of upgrade summary of all WCP enabled clusters.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/software/clusters/{cluster}": {
            "get": {
                "tags": [
                    "namespace_management/software/clusters"
                ],
                "summary": "Returns upgrade related information of a specific cluster.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster which will be upgraded.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the upgrade of the specified WCP enabled cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersInfo"
                        }
                    },
                    "404": {
                        "description": "if cluster could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if the cluster is not WCP enabled.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/software/clusters/{cluster}?action=upgrade": {
            "post": {
                "tags": [
                    "namespace_management/software/clusters"
                ],
                "summary": "Upgrade the cluster to a specific version. This operation upgrades the components on control plane VMs and worker plane hosts based on the selected version. Before upgrading, this operation performs pre-checks and sets the evaluation response in Info.UpgradeStatus.messages with various Message.Severity levels. Depending on the severity, the upgrade may or may not proceed beyond prechecks. Here is a list of severities and corresponding behavior: - ERROR: Upgrade does not proceed beyond precheck operation - WARNING: Upgrade proceeds beyond precheck operation only if UpgradeSpec.ignorePrecheckWarnings is set to true - INFO: Upgrade proceeds beyond precheck operation uninterrupted\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier for the cluster which will be upgraded.\nThe parameter must be an identifier for the resource type: ClusterComputeResource."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersUpgrade"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if pre-check failed of the cluster.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if cluster could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Manage privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "upgrade",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/software/clusters?action=upgradeMultiple": {
            "post": {
                "tags": [
                    "namespace_management/software/clusters"
                ],
                "summary": "Upgrade a set of clusters to its corresponding specific version.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Anonymous. \n",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersUpgradeMultiple"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pre-check result when invoking upgrade for each cluster.\nThe key in the result map will be an identifier for the resource type: ClusterComputeResource.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersResult"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Manage privilege on all specified clusters.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "upgrade_multiple",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespace-management/stats/time-series": {
            "get": {
                "tags": [
                    "namespace_management/stats/time_series"
                ],
                "summary": "Gather statistical values for a cluster, namespace, or pod.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n",
                "parameters": [
                    {
                        "in": "query",
                        "name": "obj_type",
                        "type": "string",
                        "enum": [
                            "CLUSTER",
                            "NAMESPACE",
                            "POD"
                        ],
                        "description": "Type of statistics object that this request is operating on.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "pod",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "namespace",
                        "type": "string",
                        "description": "Namespace name for queries for a namespace.\nThis field is optional and it is only relevant when the value of TimeSeries.Spec.obj-type is NAMESPACE.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "cluster",
                        "type": "string",
                        "description": "Cluster identifier for queries for a cluster.\nThis field is optional and it is only relevant when the value of TimeSeries.Spec.obj-type is CLUSTER.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "start",
                        "type": "integer",
                        "description": "UNIX timestamp value indicating when the requested series of statistical samples should begin. https://en.wikipedia.org/wiki/Unix_time",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "end",
                        "type": "integer",
                        "description": "UNIX timestamp value indicating when the requested series of statistical samples should end. https://en.wikipedia.org/wiki/Unix_time",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of TimeSeries values for each counter specified in the request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespaceManagementStatsTimeSeriesTimeSeries"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the specified cluster in TimeSeries.Spec.cluster is not enabled for Namespaces.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the specified cluster in TimeSeries.Spec.cluster or the namespace in TimeSeries.Spec.namespace or TimeSeries.Spec.pod does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespaces-user/namespaces": {
            "get": {
                "tags": [
                    "namespaces/user/instances"
                ],
                "summary": "Returns namespaces that user making the call is authorized to access.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Anonymous. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of Namespace identifiers together with the API endpoint for each namespace.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespacesUserInstancesSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespaces/instances": {
            "post": {
                "tags": [
                    "namespaces/instances"
                ],
                "summary": "Create namespace object in the cluster.\nif you do not have all of the privileges described as follows: \n   -  The resource ClusterComputeResource referenced by the attribute Instances.CreateSpec.cluster requires Namespaces.Configure. \n",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespacesInstancesCreate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if Instances.CreateSpec.cluster is not enabled for Namespaces, or if the networks field is set when the Instances.CreateSpec.cluster hosting the namespace uses NSXT_CONTAINER_PLUGIN as its network provider, or if the cluster does not support customizable VM classes.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if Instances.CreateSpec.cluster is not registered on this vCenter server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Configure privilege or the namespace identifier begins with \"vmware-system\" prefix.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "namespaces/instances"
                ],
                "summary": "Returns the information about all namespaces on this vCenter.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Anonymous. \n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The list of summary of all namespaces.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNamespacesInstancesSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespaces/instances/{namespace}": {
            "put": {
                "tags": [
                    "namespaces/instances"
                ],
                "summary": "Set a new configuration on the namespace object. The specified configuration is applied in entirety and will replace the current configuration fully.\nif you do not have all of the privileges described as follows: \n   -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "namespace",
                        "description": "Identifier for the namespace.\nThe parameter must be an identifier for the resource type: vcenter.namespaces.Instance."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespacesInstancesSet"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if customizable VM classes are not suported for this cluster.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if namespace with the name namespace could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Configure privilege or the namespace identifier begins with \"vmware-system\" prefix.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "namespaces/instances"
                ],
                "summary": "Returns information about a specific namespace.\nif you do not have all of the privileges described as follows: \n   -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "namespace",
                        "description": "Identifier for the namespace.\nThe parameter must be an identifier for the resource type: vcenter.namespaces.Instance."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the desired state of the specified namespace.",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespacesInstancesInfo"
                        }
                    },
                    "404": {
                        "description": "if namespace could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "namespaces/instances"
                ],
                "summary": "Update the namespace object. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is.\nif you do not have all of the privileges described as follows: \n   -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "namespace",
                        "description": "Identifier for the namespace.\nThe parameter must be an identifier for the resource type: vcenter.namespaces.Instance."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespacesInstancesUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if customizable VM classes are not suported for this cluster.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if namespace with the name namespace could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Configure privilege or the namespace identifier begins with \"vmware-system\" prefix.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "namespaces/instances"
                ],
                "summary": "Delete the namespace object in the cluster.\nif you do not have all of the privileges described as follows: \n   -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "namespace",
                        "description": "Identifier for the namespace.\nThe parameter must be an identifier for the resource type: vcenter.namespaces.Instance."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the specified namespace could not be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Configure privilege or the namespace identifier begins with \"vmware-system\" prefix.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/namespaces/instances/{namespace}/access/{domain}/{subject}": {
            "put": {
                "tags": [
                    "namespaces/access"
                ],
                "summary": "Set new access control on the namespace for the subject on given domain.\nif you do not have all of the privileges described as follows: \n   -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "namespace",
                        "description": "Identifier for the namespace.\nThe parameter must be an identifier for the resource type: vcenter.namespaces.Instance."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "domain",
                        "description": "The domain of the subject."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "subject",
                        "description": "The principal for this operation."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespacesAccessSet"
                        }
                    },
                    {
                        "required": true,
                        "in": "query",
                        "name": "type",
                        "description": "{ 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (user or group). }",
                        "type": "string",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the specified principal on given domain is not associated with the namespace.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if namespace cannot be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Configure privilege or the namespace identifier begins with \"vmware-system\" prefix.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "namespaces/access"
                ],
                "summary": "Get the information about the access control of the subject on given domain on the namespace.\nif you do not have all of the privileges described as follows: \n   -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires System.Read. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "namespace",
                        "description": "Identifier for the namespace.\nThe parameter must be an identifier for the resource type: vcenter.namespaces.Instance."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "domain",
                        "description": "The domain of the subject."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "subject",
                        "description": "The principal for this operation."
                    },
                    {
                        "required": true,
                        "in": "query",
                        "name": "type",
                        "description": "{ 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (user or group). }",
                        "type": "string",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the subject including the type and the role on the namespace.",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespacesAccessInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if namespace cannot be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the specified principal on given domain is not associated with the namespace.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "namespaces/access"
                ],
                "summary": "Set up access control for the subject on given domain on the namespace.\nif you do not have all of the privileges described as follows: \n   -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "namespace",
                        "description": "Identifier for the namespace.\nThe parameter must be an identifier for the resource type: vcenter.namespaces.Instance."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "domain",
                        "description": "The domain of the subject."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "subject",
                        "description": "The principal for this operation."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterNamespacesAccessCreate"
                        }
                    },
                    {
                        "required": true,
                        "in": "query",
                        "name": "type",
                        "description": "{ 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (user or group). }",
                        "type": "string",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the namespace is marked for deletion or the associated cluster is being disabled.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if namespace cannot be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Configure privilege or the namespace identifier begins with \"vmware-system\" prefix.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "namespaces/access"
                ],
                "summary": "Remove access control of the subject on given domain from the namespace.\nif you do not have all of the privileges described as follows: \n   -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure. \n",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "namespace",
                        "description": "Identifier for the namespace.\nThe parameter must be an identifier for the resource type: vcenter.namespaces.Instance."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "domain",
                        "description": "The domain of the subject."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "subject",
                        "description": "The principal for this operation."
                    },
                    {
                        "required": true,
                        "in": "query",
                        "name": "type",
                        "description": "{ 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (user or group). }",
                        "type": "string",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the specified principal on given domain is not associated with the namespace.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if namespace cannot be located.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have Namespaces.Configure privilege or the namespace identifier begins with \"vmware-system\" prefix.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/network": {
            "get": {
                "tags": [
                    "network"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) networks in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "networks",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of networks that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that networks must have to match the filter (see {@link Summary#name})."
                    },
                    {
                        "in": "query",
                        "name": "types",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "STANDARD_PORTGROUP",
                                "DISTRIBUTED_PORTGROUP",
                                "OPAQUE_NETWORK"
                            ]
                        },
                        "description": "Types that networks must have to match the filter (see {@link Summary#type})."
                    },
                    {
                        "in": "query",
                        "name": "folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the network for the network to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the network for the network to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the networks matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterNetworkSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#types} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if more than 1000 networks match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/ovf/export-flag": {
            "get": {
                "tags": [
                    "ovf/export_flag"
                ],
                "summary": "Returns information about the supported export flags by the server. <p> The supported flags are: <dl> <dt>PRESERVE_MAC</dt> <dd>Include MAC addresses for network adapters.</dd> <dt>EXTRA_CONFIG</dt> <dd>Include extra configuration in OVF export.</dd> </dl> <p> Future server versions might support additional flags.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "A {@term list} of supported export flags.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterOvfExportFlagInfo"
                            }
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/ovf/import-flag": {
            "get": {
                "tags": [
                    "ovf/import_flag"
                ],
                "summary": "Returns information about the import flags supported by the deployment platform. <p> The supported flags are: <dl> <dt>LAX</dt> <dd>Lax mode parsing of the OVF descriptor.</dd> </dl> <p> Future server versions might support additional flags.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "query",
                        "name": "rp",
                        "description": "The identifier of resource pool target for retrieving the import flag(s)."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A {@term list} of supported import flags.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterOvfImportFlagInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "If the resource pool associated with {@param.name rp} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/ovf/library-item": {
            "post": {
                "tags": [
                    "ovf/library_item"
                ],
                "summary": "Creates a library item in content library from a virtual machine or virtual appliance. <p> This {@term operation} creates a library item in content library whose content is an OVF package derived from a source virtual machine or virtual appliance, using the supplied create specification. The OVF package may be stored as in a newly created library item or in an in an existing library item. For an existing library item whose content is updated by this {@term operation}, the original content is overwritten. Meta data such as name and description is not updated for the exisitng library item. </p>",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterOvfLibraryItemCreate"
                        }
                    },
                    {
                        "required": false,
                        "type": "string",
                        "in": "query",
                        "name": "client_token",
                        "description": "Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried."
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Information about the success or failure of the {@term operation}, along with the details of the result or failure.",
                        "schema": {
                            "$ref": "#/definitions/VcenterOvfLibraryItemCreateResult"
                        }
                    },
                    "400": {
                        "description": "if the operation cannot be performed because of the specified virtual machine or virtual appliance's current state. For example, if the virtual machine configuration information is not available, or if the virtual appliance is running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual appliance specified by {@param.name source} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the specified virtual machine or virtual appliance is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/ovf/library-item/{ovf_library_item_id}?action=deploy": {
            "post": {
                "tags": [
                    "ovf/library_item"
                ],
                "summary": "Deploys an OVF package stored in content library to a newly created virtual machine or virtual appliance. <p> This {@term operation} deploys an OVF package which is stored in the library item specified by {@param.name ovfLibraryItemId}. It uses the deployment specification in {@param.name deploymentSpec} to deploy the OVF package to the location specified by {@param.name target}. </p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "ovf_library_item_id",
                        "description": "Identifier of the content library item containing the OVF package to be deployed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterOvfLibraryItemDeploy"
                        }
                    },
                    {
                        "required": false,
                        "type": "string",
                        "in": "query",
                        "name": "client_token",
                        "description": "Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the {@term operation}, along with the details of the result or failure.",
                        "schema": {
                            "$ref": "#/definitions/VcenterOvfLibraryItemDeploymentResult"
                        }
                    },
                    "400": {
                        "description": "if {@param.name target} contains invalid arguments.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the library item specified by {@param.name ovfLibraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if there was an error accessing the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "403": {
                        "description": "if you do not have all of the privileges described as follows : <ul> <li>{@term Operation} execution requires VirtualMachine.Config.AddNewDisk if the OVF descriptor has a disk drive (type 17) section. </li> <li>{@term Operation} execution requires VirtualMachine.Config.AdvancedConfig if the OVF descriptor has an ExtraConfig section. </li> <li>{@term Operation} execution requires Extension.Register for specified resource group if the OVF descriptor has a vServiceDependency section. </li> <li>{@term Operation} execution requires Network.Assign for target network if specified. </li> <li>{@term Operation} execution requires Datastore.AllocateSpace for target datastore if specified. </li> </ul>",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "deploy",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/ovf/library-item/{ovf_library_item_id}?action=filter": {
            "post": {
                "tags": [
                    "ovf/library_item"
                ],
                "summary": "Queries an OVF package stored in content library to retrieve information to use when deploying the package. See {@link #deploy}. <p> This {@term operation} retrieves information from the descriptor of the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}. The information returned by the {@term operation} can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec} when deploying the OVF package to the deployment target specified by {@param.name target}. </p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "ovf_library_item_id",
                        "description": "Identifier of the content library item containing the OVF package to query."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterOvfLibraryItemFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information that can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec}) when deploying the OVF package to the deployment target specified by {@param.name target}.",
                        "schema": {
                            "$ref": "#/definitions/VcenterOvfLibraryItemOvfSummary"
                        }
                    },
                    "400": {
                        "description": "if {@param.name target} contains invalid arguments.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the library item specified by {@param.name ovfLibraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if there was an error accessing the OVF package at the specified {@param.name ovfLibraryItemId}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    }
                },
                "operationId": "filter",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/resource-pool": {
            "post": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Creates a resource pool.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterResourcePoolCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The identifier of the newly created resource pool.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if any of the resources needed to create the resource pool could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "400": {
                        "description": "If a parameter passed in the spec is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the resource specified in {@term parent} could not be found",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) resource pools in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "resource_pools",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of resource pools that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that resource pools must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "parent_resource_pools",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Resource pools that must contain the resource pool for the resource pool to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the resource pool for the resource pool to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "hosts",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Hosts that must contain the resource pool for the resource pool to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "clusters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Clusters that must contain the resource pool for the resource pool to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the resource pools matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterResourcePoolSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "If more than 1000 resource pools match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/resource-pool/{resource_pool}": {
            "get": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Retrieves information about the resource pool indicated by {@param.name resourcePool}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "resource_pool",
                        "description": "Identifier of the resource pool for which information should be retrieved."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the resource pool.",
                        "schema": {
                            "$ref": "#/definitions/VcenterResourcePoolInfo"
                        }
                    },
                    "404": {
                        "description": "If the resource pool indicated by {@param.name resourcePool} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Updates the configuration of a resource pool.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "resource_pool",
                        "description": "Identifier of the resource pool."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterResourcePoolUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "If any of the resources needed to reconfigure the resource pool could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "400": {
                        "description": "If any of the specified parameters is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the resource pool is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Deletes a resource pool.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "resource_pool",
                        "description": "Identifier of the resource pool to be deleted."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "If the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "If the resource pool is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "If the resource pool is a root resource pool.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/services": {
            "get": {
                "tags": [
                    "services/service"
                ],
                "summary": "Lists details of vCenter services.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Map of service identifiers to service Info structures.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/VcenterServicesServiceInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "if any error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "list_details",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/services/{service}": {
            "get": {
                "tags": [
                    "services/service"
                ],
                "summary": "Returns the state of a service.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service whose state is being queried."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service Info structure.",
                        "schema": {
                            "$ref": "#/definitions/VcenterServicesServiceInfo"
                        }
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "services/service"
                ],
                "summary": "Updates the properties of a service.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service whose properties are being updated."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterServicesServiceUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the operation is denied in the current state of the service. If a start, stop or restart operation is in progress, update operation will fail with this error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/services/{service}?action=restart": {
            "post": {
                "tags": [
                    "services/service"
                ],
                "summary": "Restarts a service",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service to restart"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the operation is denied in the current state of the service. If a stop or start operation is in progress, issuing a restart operation will lead to this error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "restart",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/services/{service}?action=start": {
            "post": {
                "tags": [
                    "services/service"
                ],
                "summary": "Starts a service",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service to start"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the operation is denied in the current state of the service. If a stop or restart operation is in progress, the start operation will not be allowed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/services/{service}?action=stop": {
            "post": {
                "tags": [
                    "services/service"
                ],
                "summary": "Stops a service",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service to stop"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the operation is denied in the current state of the service. If a stop operation is in progress, issuing another stop operation will lead to this error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "stop",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/storage/policies": {
            "get": {
                "tags": [
                    "storage/policies"
                ],
                "summary": "Returns information about at most 1024 visible (subject to permission checks) storage solicies availabe in vCenter. These storage policies can be used for provisioning virtual machines or disks.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "policies",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of storage policies that can match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used Information about the storage policies.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterStoragePoliciesSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "if more than 1024 storage policies exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/storage/policies/compliance/vm": {
            "get": {
                "tags": [
                    "storage/policies/compliance/VM"
                ],
                "summary": "Returns compliance information about at most 1000 virtual machines matching the filter {@link FilterSpec}. If there are no virtual machines matching the {@link FilterSpec} an empty List is returned. Virtual machines without storage policy association are not returned.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "status",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "COMPLIANT",
                                "NON_COMPLIANT",
                                "UNKNOWN_COMPLIANCE",
                                "NOT_APPLICABLE",
                                "OUT_OF_DATE"
                            ]
                        },
                        "description": "Compliance Status that a virtual machine must have to match the filter. Atleast one status must be specified."
                    },
                    {
                        "in": "query",
                        "name": "vms",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of virtual machines that can match the filter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "compliance information about virtual machines matching the filter {@link FilterSpec}.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/VcenterStoragePoliciesComplianceVMInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "If more than 1000 results match the {@link FilterSpec}",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "400": {
                        "description": "if the API is invoked against vCenter Server version is less than 6.5",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/storage/policies/entities/compliance": {
            "get": {
                "tags": [
                    "storage/policies/compliance"
                ],
                "summary": "Returns compliance information about entities matching the filter {@link FilterSpec}. Entities without storage policy association are not returned.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "status",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "COMPLIANT",
                                "NON_COMPLIANT",
                                "UNKNOWN",
                                "NOT_APPLICABLE",
                                "OUT_OF_DATE"
                            ]
                        },
                        "description": "Compliance Status that a virtual machine must have to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "compliance information about entities matching the filter {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterStoragePoliciesComplianceSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#status} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/storage/policies/{policy}/vm": {
            "get": {
                "tags": [
                    "storage/policies/VM"
                ],
                "summary": "Returns information about the virtual machines and/or their virtual disks that are  associated with the given storage policy.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "policy",
                        "description": "storage policy identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the virtual machines and/or their virtual disks that are associated with the given storage policy.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/VcenterStoragePoliciesVMInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "if there is no policy associated with {@param.name policy} in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the backend server encounters some an error while processing the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service necessary to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required priveleges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/storage/policies/{policy}?action=check-compatibility": {
            "post": {
                "tags": [
                    "storage/policies"
                ],
                "summary": "Returns datastore compatibility summary about a specific storage policy.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "policy",
                        "description": "The storage policy identifier"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterStoragePoliciesCheckCompatibility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "datastore compatibility summary about a specific storage policy.",
                        "schema": {
                            "$ref": "#/definitions/VcenterStoragePoliciesCompatibilityInfo"
                        }
                    },
                    "500": {
                        "description": "if input more than 1024 datastores.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if the storage policy specified does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "check_compatibility",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/system-config/deployment-type": {
            "get": {
                "tags": [
                    "system_config/deployment_type"
                ],
                "summary": "Get the type of the vCenter appliance.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The type of the vCenter appliance.",
                        "schema": {
                            "$ref": "#/definitions/VcenterSystemConfigDeploymentTypeInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in CONFIGURED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "get"
            },
            "put": {
                "tags": [
                    "system_config/deployment_type"
                ],
                "summary": "Reconfigure the type of the vCenter appliance.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterSystemConfigDeploymentTypeReconfigure"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED or CONFIGURED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "reconfigure"
            }
        },
        "/api/vcenter/system-config/psc-registration": {
            "get": {
                "tags": [
                    "system_config/psc_registration"
                ],
                "summary": "Get information of the PSC that this appliance is registered with.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing information about the external PSC node this appliance is registered with.",
                        "schema": {
                            "$ref": "#/definitions/VcenterSystemConfigPscRegistrationInfo"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is in NOT_INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/system-config/psc-registration?action=repoint": {
            "post": {
                "tags": [
                    "system_config/psc_registration"
                ],
                "summary": "Repoint this vCenter Server appliance to a different external PSC.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterSystemConfigPscRegistrationRepoint"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "400": {
                        "description": "if the appliance is NOT in CONFIGURED state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "repoint",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/tagging/associations": {
            "get": {
                "tags": [
                    "tagging/associations"
                ],
                "summary": "Returns tag associations that match the specified iteration spec.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "marker",
                        "type": "string",
                        "description": "Marker is an opaque token that allows the caller to request the next page of tag associations."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of the tag associations matching the iteration spec.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTaggingAssociationsListResult"
                        }
                    },
                    "400": {
                        "description": "if {@link IterationSpec#marker} is not a marker returned from an earlier invocation of this {@term operation).",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/topology/nodes": {
            "get": {
                "tags": [
                    "topology/nodes"
                ],
                "summary": "Returns information about all vCenter and Platform Services Controller nodes matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "types",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "VCSA_EMBEDDED",
                                "VCSA_EXTERNAL",
                                "PSC_EXTERNAL"
                            ]
                        },
                        "description": "Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see {@link ApplianceType}."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "commonly used information for all vCenter and Platform Services Controller nodes matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterTopologyNodesSummary"
                            }
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#types} {@term field} contains a value that is not supported.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/topology/nodes/{node}": {
            "get": {
                "tags": [
                    "topology/nodes"
                ],
                "summary": "Retrieve details for a given identifier of the vCenter or Platform Services Controller node.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "node",
                        "description": "Identifier of the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "vCenter or Platform Services Controller node details with replication partners and client affinity information as applicable. See {@link Info}.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTopologyNodesInfo"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "404": {
                        "description": "if a node doesn't exist for given node identifier.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/topology/replication-status": {
            "get": {
                "tags": [
                    "topology/replication_status"
                ],
                "summary": "Returns the replication information of vCenter and Platform Services Controller nodes of type VCSA_EMBEDDED/PSC_EXTERNAL (see {@link Nodes.Info#type}) matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "nodes",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifier that a vCenter and Platform Services Controller node must have to match the filter. (see {@link Summary#node})."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used replication information about vCenter and Platform Services Controller nodes matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterTopologyReplicationStatusSummary"
                            }
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#nodes} {@term field} contains a invalid value.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/attestation/services": {
            "post": {
                "tags": [
                    "trusted_infrastructure/attestation/services"
                ],
                "summary": "Registers a new Attestation Service instance in this vCenter.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureAttestationServicesCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID of the newly registered Attestation Service instance.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the CreateSpec contains invalid data.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/attestation/services/{service}": {
            "get": {
                "tags": [
                    "trusted_infrastructure/attestation/services"
                ],
                "summary": "Returns the detailed information about a registered Attestation Service instance in this vCenter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "the Attestation Service instance unique identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the specified Attestation Service instance.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureAttestationServicesInfo"
                        }
                    },
                    "500": {
                        "description": "if an error occurred while getting the data.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no registered Attestation Service instance with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/attestation/services"
                ],
                "summary": "Removes a registered Attestation Service instance from this vCenter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "the Attestation Service instance unique identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the Attestation Service instance is used by a configuration on a cluster level.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "404": {
                        "description": "if the Attestation Service instance is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/attestation/services?action=query": {
            "post": {
                "tags": [
                    "trusted_infrastructure/attestation/services"
                ],
                "summary": "Returns detailed information about all registered Attestation Service instances in this vCenter.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureAttestationServicesList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about all registered Attestation Service instances in this vCenter.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterTrustedInfrastructureAttestationServicesSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if an error occurred while getting the data.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/kms/services": {
            "post": {
                "tags": [
                    "trusted_infrastructure/kms/services"
                ],
                "summary": "Registers a Key Provider Service instance in this vCenter.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureKmsServicesCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID of the newly registered Key Provider Service instance.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the CreateSpec contains invalid data.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/kms/services/{service}": {
            "get": {
                "tags": [
                    "trusted_infrastructure/kms/services"
                ],
                "summary": "Returns the detailed information about a registered Key Provider Service instance in this vCenter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "the Key Provider Service instance unique identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the specified Key Provider Service instance.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureKmsServicesInfo"
                        }
                    },
                    "500": {
                        "description": "if an error occurred while getting the data.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no Key Provider Service instance with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/kms/services"
                ],
                "summary": "Removes a currently registered Key Provider Service instance from this vCenter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "the Key Provider Service instance unique identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the Key Provider Service instance is used by a configuration on a cluster level.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "404": {
                        "description": "if the Key Provider Service instance is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/kms/services?action=query": {
            "post": {
                "tags": [
                    "trusted_infrastructure/kms/services"
                ],
                "summary": "Returns basic information about all registered Key Provider Service instances in this vCenter.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureKmsServicesList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Basic information about all registered Key Provider Service instances in this vCenter.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterTrustedInfrastructureKmsServicesSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if an error occurred while getting the data.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/principal": {
            "get": {
                "tags": [
                    "trusted_infrastructure/principal"
                ],
                "summary": "Returns information about the STS used by this vCenter instance.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "@{link Info} a summary containing the certificates used to sign tokens and the solution user used to retrieve them.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructurePrincipalInfo"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters"
                ],
                "summary": "Returns a list of clusters for this vCenter instance which matches the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "cluster",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifies the cluster."
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "ENABLE",
                                "DISABLE"
                            ]
                        },
                        "description": "The state of the {@link TrustAuthorityClusters}."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of {@link Summary} for a {@link TrustAuthorityClusters}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters"
                ],
                "summary": "Get the result of the last Update operation which matches the cluster id.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Cluster id."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link Info} instance which contains information about the state of the cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersInfo"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if {@param.name cluster} doesn't match to any ClusterComputeResource.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images/{version}?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/os/esx/base_images"
                ],
                "summary": "Get the trusted ESX base version details.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "The ESX base image version."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The version info",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the version is invalid or the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the version or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/os/esx/base_images"
                ],
                "summary": "Remove a trusted ESX base image of each ESX in the cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "The ESX base image version."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the version is invalid or the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the version or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images?action=import-from-imgdb&vmw-task=true": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/os/esx/base_images"
                ],
                "summary": "Import ESX metadata as a new trusted base image to each host in the cluster. <p> Import a boot_imgdb.tgz file which contains metadata that describes a trusted ESX base image. A boot_imgdb.tgz file can be downloaded from a representative host.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesImportFromImgdbTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The imported imgdb version identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the imgdb is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "import_from_imgdb$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/os/esx/base_images"
                ],
                "summary": "Return a list of trusted ESX base images.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "in": "query",
                        "name": "version",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Search criteria by ESX base image version numbers."
                    },
                    {
                        "in": "query",
                        "name": "display_name",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Search criteria by ESX base image version version numbers."
                    },
                    {
                        "in": "query",
                        "name": "health",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "NONE",
                                "OK",
                                "WARNING",
                                "ERROR"
                            ]
                        },
                        "description": "Search criteria by health indicator."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "A list of configured trusted ESX base images.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/service-status?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/service_status"
                ],
                "summary": "Return the Attestation service health in the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The Attestation service health status in the entire cluster.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "If the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/ca-certificates/{name}?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/ca_certificates"
                ],
                "summary": "Get the TPM CA certificate details on a cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The CA certificate name."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "CA certificate info.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the name is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the CA certificate is not found or {@param.name cluster} doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/ca_certificates"
                ],
                "summary": "Remove a TPM CA certificate on a cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The CA certificate name."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the name is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the {@param.name cluster} doesn't match to any cluster in the vCenter or given name is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/ca-certificates?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/ca_certificates"
                ],
                "summary": "Return a list of configured TPM CA certificates on a cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "A list of configured TPM CA certificates.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the {@param.name cluster} doesn't match to any cluster in the vCenter or given name is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/ca_certificates"
                ],
                "summary": "Add a new TPM CA certificate on a cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2CaCertificatesCreateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the configuration is invalid or the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if {@param.name cluster} doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/endorsement-keys/{name}?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/endorsement_keys"
                ],
                "summary": "Get the TPM endorsement key details on a cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The endorsement key name."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The endorsement key info.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the name is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the endorsement key is not found or {@param.name cluster} doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/endorsement_keys"
                ],
                "summary": "Remove a TPM endorsement key on a cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The endorsement key name."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the name is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the name is not found or {@param.name cluster} doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/endorsement-keys?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/endorsement_keys"
                ],
                "summary": "Return a list of configured TPM endorsement keys in a cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "A list of configured endorsement keys.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/endorsement_keys"
                ],
                "summary": "Add a new TPM endorsement key on a cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2EndorsementKeysCreateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the configuration is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if {@param.name cluster} doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/tpm2/settings?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/settings"
                ],
                "summary": "Return the TPM 2.0 protocol settings.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The settings.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if {@param.name cluster} doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/attestation/tpm2/settings"
                ],
                "summary": "Set the TPM 2.0 protocol settings.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The id of the cluster on which the operation will be executed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2SettingsUpdateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the spec is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if {@param.name cluster} doesn't match to any cluster in the vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "update$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/consumer-principals/{profile}?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/consumer_principals"
                ],
                "summary": "Retrieve information for a specific profile.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the Trust Authority Cluster on which the profile is configured."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "profile",
                        "description": "The ID of the profile."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "information for a specific profile.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no profile configured with that ID.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/consumer_principals"
                ],
                "summary": "Removes the read-only policy configured on ESX for a specific principal.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the Trust Authority Cluster to configure."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "profile",
                        "description": "The ID of the connection profile to modify."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no profile configured with that ID.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/consumer-principals?action=query&vmw-task=true": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/consumer_principals"
                ],
                "summary": "Lists all policies configured on a specific cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the Trust Authority Cluster on which the profile is configured."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsListTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "the list of profiles matching the filter for that cluster.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no profile configured with that ID.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/consumer-principals?vmw-task=true": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/consumer_principals"
                ],
                "summary": "Creates a profile with the specified connection information on all hosts from a Trust Authority Cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the Trust Authority Cluster to configure."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsCreateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "a unique identifier of the profile",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if a profile for the issuer already exists.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyExists"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if there is no such cluster.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/client-certificate/csr?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate/csr"
                ],
                "summary": "Get existing certificate signing request (CSR) for the client certificate. <p> The CSR will allow the certificate to be signed by a third party. Once the CSR is signed, certificate may be added as a client certificate. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The client CSR, PEM and host ID which issued it.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the provider or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate/csr"
                ],
                "summary": "Generate a certificate signing request (CSR) for the client certificate. This overwrites any existing CSR. <p> The CSR will allow the certificate to be signed by a third party. Once the CSR is signed, certificate may be added as a client certificate. <p> Calling the API repeatedly will result in a generating a new CSR each time.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The client CSR, PEM and host ID which issued it.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the provider or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/client-certificate?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate"
                ],
                "summary": "Return the existing client certificate.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Client certificate, PEM.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate"
                ],
                "summary": "Update the client certificate. <p> The key server will use this certificate to validate the client connection. If a client certificate already exists, it will be replaced. <p> An optional private key can be specified if the certificate has already been provisioned.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateUpdateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the certificate or private key is invalid or cluster/provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "update$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/client_certificate"
                ],
                "summary": "Generate a new self signed client certificate. Existing client certificate is overwritten. The key server will use this certificate to validate the client connection.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/credential?vmw-task=true": {
            "put": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/credential"
                ],
                "summary": "Set the key server credential.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersCredentialSetTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the provider or cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "set$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/peer-certs/current?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/current_peer_certificates"
                ],
                "summary": "Return the remote server certificates. <p> Contacts the configured key servers and attempts to retrieve their certificates. These certificates might not yet be trusted. <p> If the returned certificates are to be considered trustworthy, then it must be added to the list of trusted server certificates by adding to the certificates returned by {@link TrustedPeerCertificates#get} and invoking {@link TrustedPeerCertificates#update} with the updated {@term list} of certificates.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    },
                    {
                        "in": "query",
                        "name": "server_names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that key server must have to match the filter (see {@link Summary#serverName})."
                    },
                    {
                        "in": "query",
                        "name": "trusted",
                        "type": "boolean",
                        "description": "Trust status that server certificates must have to match the filter (see {@link Summary#trusted})."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Summary of server certificates.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster or provider id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "list$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/peer-certs/trusted?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/trusted_peer_certificates"
                ],
                "summary": "Return the list of trusted server certificates.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Info containing server certificates, PEM.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If cluster or provider id are empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers/trusted_peer_certificates"
                ],
                "summary": "Update trusted server certificate(s). <p> The client will use these certificates to validate the server connection. The existing list of trusted certificates will be overwritten. <p> The client will not trust the server connection until a server certificate has been set.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersTrustedPeerCertificatesUpdateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If one or more certificates are invalid or the cluster/provider Id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "update$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ],
                "summary": "Return information about a Key Provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Provider information.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster or provider id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ],
                "summary": "Update an existing Key Provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersUpdateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster or provider id is empty, or the spec is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "update$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ],
                "summary": "Remove a Key Provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Identifier of the provider."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster or provider id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster or provider is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ],
                "summary": "Return a list of summary of Key Providers.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "List of providers.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "list$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/providers"
                ],
                "summary": "Add a new Key Provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersCreateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the spec is invalid or cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/service-status?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters/kms/service_status"
                ],
                "summary": "Return the Key Provider Service health in the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The Key Provider Service health status in the entire cluster.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "For any other error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "If the cluster id is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "If the cluster is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "If the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}?vmw-task=true": {
            "patch": {
                "tags": [
                    "trusted_infrastructure/trust_authority_clusters"
                ],
                "summary": "Updates the state of a cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Cluster id."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersUpdateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if {@param.name spec} doesn't match to any cluster compute resource.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "update$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-hosts/attestation": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_hosts/attestation"
                ],
                "summary": "Returns a list of the hosts running a Attestation Service matching the specified {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsAttestationList"
                        }
                    },
                    {
                        "required": false,
                        "in": "query",
                        "name": "projection",
                        "description": "{ 1. The connection information could include the certificates or be a shorter summary. }, { 2. The type of the returned summary - brief, normal, or full. }",
                        "type": "string",
                        "enum": [
                            "FULL",
                            "NORMAL",
                            "BRIEF"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of {@link Summary} of Attestation Services.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the response data will exceed the message limit.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-hosts/kms?action=query": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trust_authority_hosts/kms"
                ],
                "summary": "Returns a list of the hosts running a Key Provider Service matching the specified {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsKmsList"
                        }
                    },
                    {
                        "required": false,
                        "in": "query",
                        "name": "projection",
                        "description": "{ 1. The connection information could include the certificates or be a shorter summary. }, { 2. The type of the returned summary - brief, normal, or full. }",
                        "type": "string",
                        "enum": [
                            "FULL",
                            "NORMAL",
                            "BRIEF"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of {@link Summary} of Key Provider Services.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsKmsSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the response data will exceed the message limit.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-hosts/{host}/attestation/": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_hosts/attestation"
                ],
                "summary": "Returns the connection info about the Attestation Service running on the specified host.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "@{link vcenter.Host} id."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link Info} instance which contains the information necessary to connect to the Attestation Service.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsAttestationInfo"
                        }
                    },
                    "500": {
                        "description": "if connection to {@param.name host} failed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if {@param.name host} doesn't match to any Host.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trust-authority-hosts/{host}/kms/": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trust_authority_hosts/kms"
                ],
                "summary": "Returns the connection info about the Key Provider Service running on the specified host.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "@{link vcenter.Host} id."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link Info} instance which contains the information necessary to connect to the Key Provider Service.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsKmsInfo"
                        }
                    },
                    "500": {
                        "description": "if connection to {@param.name host} failed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if {@param.name host} doesn't match to any Host.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/attestation/services-applied-config?action=query&vmw-task=true": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services_applied_config"
                ],
                "summary": "Returns basic information about the health of all Attestation Service configurations applied to the cluster with respect to the desired state.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster against which the operation will be executed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigListTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The health status for each applied configuration in the given cluster.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/attestation/services-applied-config?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services_applied_config"
                ],
                "summary": "Returns detailed information about the health of the specified Attestation Service configuration applied to the cluster with respect to the desired state.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster against which the operation will be executed."
                    },
                    {
                        "in": "query",
                        "name": "hostname",
                        "type": "string",
                        "description": "The IP address or DNS resolvable name of the service.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "port",
                        "type": "integer",
                        "description": "The port of the service.",
                        "required": false
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Detailed information about the health of the specified Attestation Service configuration applied to the cluster with respect to the desired state.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter or if no service corresponding to the given address is found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services_applied_config"
                ],
                "summary": "Update the applied Attestation Service configuration on the given Trusted Cluster to be consistent with the desired state. This method has no affect on the desired state, apart from it being used as a reference point for the remediation.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the Trusted Cluster against which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "update$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services_applied_config"
                ],
                "summary": "Delete the Attestation Service configuration that has been applied to the given cluster. This method has no affect on the desired state, it only removes applied Attestation Service configuration from any Trusted Hosts within the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster against which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/attestation/services/{service}": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services"
                ],
                "summary": "Returns detailed information about the given registered Attestation Service instance that is configured for the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "The ID of the service."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the specified Attestation Service configured for the given cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesInfo"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the cluster or the service ID is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/attestation/services/{service}?vmw-task=true": {
            "delete": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services"
                ],
                "summary": "Removes the Attestation Service instance from the configuration of the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "the unique ID of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "the registered Attestation Service instance unique identifier."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the Attestation Service instance or the cluster are not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/attestation/services?action=query": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services"
                ],
                "summary": "Returns the basic information about all configured Attestation Service instances used by this cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Basic information about all configured Attestation Service instances used by this cluster.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the cluster ID is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/attestation/services?vmw-task=true": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/attestation/services"
                ],
                "summary": "Configures the cluster to use a the given registered Attestation Service.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesCreateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "ID of the configured Attestation Service instance.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the CreateSpec is not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if all the hosts in the cluster do not have VMware vSphere Trust Authority enabled license.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if the cluster ID is not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/kms/services-applied-config?action=query&vmw-task=true": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services_applied_config"
                ],
                "summary": "Returns basic information about the health of all Key Provider Service configurations applied to the cluster with respect to the desired state.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster against which the operation will be executed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigListTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The health status for each applied configuration in the given cluster.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/kms/services-applied-config?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services_applied_config"
                ],
                "summary": "Returns detailed information about the health of the specified Key Provider Service configuration applied to the cluster with respect to the desired state.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster against which the operation will be executed."
                    },
                    {
                        "in": "query",
                        "name": "hostname",
                        "type": "string",
                        "description": "The IP address or DNS resolvable name of the service.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "port",
                        "type": "integer",
                        "description": "The port of the service.",
                        "required": false
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Detailed information about the health of the specified Key Provider Service configuration applied to the cluster with respect to the desired state.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter or if no service corresponding to the given address is found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services_applied_config"
                ],
                "summary": "Update the applied Key Provider Service configuration on the given Trusted Cluster to be consistent with the desired state. This method has no affect on the desired state, apart from it being used as a reference point for the remediation.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the Trusted Cluster against which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "update$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services_applied_config"
                ],
                "summary": "Delete the Key Provider Service configuration that has been applied to the given cluster. This method has no affect on the desired state, it only removes applied Key Provider Service configuration from any Trusted Hosts within the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster against which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/kms/services/{service}": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services"
                ],
                "summary": "Returns detailed information about the given Key Provider Service instance used by the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "The ID of the service."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the given Key Provider Service instance used by the given cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesInfo"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the cluster or the service ID is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/kms/services/{service}?vmw-task=true": {
            "delete": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services"
                ],
                "summary": "Removes the Key Provider Service instance from the configuration of the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "the unique ID of the cluster."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "the registered Key Provider Service instance unique identifier."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the Key Provider Service instance or the cluster are not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/kms/services?action=query": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services"
                ],
                "summary": "Returns basic information about all configured Key Provider Service instances used by this cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "basic information about all configured Key Provider Service instances used by this cluster",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if there is a generic error.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the cluster ID is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/kms/services?vmw-task=true": {
            "post": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/kms/services"
                ],
                "summary": "Configures the cluster to use a the given registered Key Provider Service.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesCreateTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "ID of the configured Key Provider Service instance.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the CreateSpec is not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if all the hosts in the cluster do not have VMware vSphere Trust Authority enabled license.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if the cluster ID is not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "create$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/trusted-infrastructure/trusted-clusters/{cluster}/services-applied-config?vmw-task=true": {
            "get": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/services_applied_config"
                ],
                "summary": "Returns detailed information about the health of the applied Trust Authority Component configurations in the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster against which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Detailed information about the health of the applied Trust Authority Component configurations in the given cluster.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/services_applied_config"
                ],
                "summary": "Update all applied Trust Authority Component configuration on the given cluster to be consistent with the desired state. This method has no affect on the desired state, apart from it being used as a reference point for the remediation. If the cluster is not a Trusted Cluster, the method will remove all Trust Authority Component configuration from the Trusted Hosts in the cluster, if such hosts are found.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster against which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "update$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "trusted_infrastructure/trusted_clusters/services_applied_config"
                ],
                "summary": "Delete all Trust Authority Components configuration that has been applied to the given cluster. This method has no affect on the desired state, it only removes applied Trust Authority Component configurations from any Trusted Hosts within the given cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "The ID of the cluster against which the operation will be executed."
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if there are ongoing mutating operations.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the cluster ID is empty.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if no cluster corresponding to the given ID is found within this vCenter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "delete$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster/active?action=get": {
            "post": {
                "tags": [
                    "vcha/cluster/active"
                ],
                "summary": "Retrieves information about the active node of a VCHA cluster.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterActiveGet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Info Information about the VCHA network and placement of the active node.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterActiveInfo"
                        }
                    },
                    "400": {
                        "description": "If the active node is on more than one datastore.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidElementConfiguration"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. <ul> <li> If {@param.name partial} is false or unset, then the operation execution requires the Global.VCServer privilege.</li> <li> If {@param.name partial} is true, then the operation execution requires the System.Read privilege.</li> </ul>",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "404": {
                        "description": "If the active virtual machine is not managed by the specified vCenter server for the active node.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "If the management interface IP address assignment is not static.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster/deployment-type": {
            "get": {
                "tags": [
                    "vcha/cluster/deployment_type"
                ],
                "summary": "Retrieves the deployment type of a VCHA cluster.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the deployment type information of the the VCHA cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterDeploymentTypeInfo"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster/mode": {
            "get": {
                "tags": [
                    "vcha/cluster/mode"
                ],
                "summary": "Retrieves the current mode of a VCHA cluster.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the mode of the the VCHA cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterModeInfo"
                        }
                    },
                    "400": {
                        "description": "If the VCHA cluster is not configured.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster/mode?vmw-task=true": {
            "put": {
                "tags": [
                    "vcha/cluster/mode"
                ],
                "summary": "Manipulates the mode of a VCHA Cluster. Following mode transitions are allowed:<br> enabled -> disabled - Allowed only in healthy and degraded states.<br> enabled -> maintenance - Allowed only in healthy state.<br> disabled -> enabled - Allowed only in healthy state.<br> maintenance -> enabled - Allowed only in healthy state with all nodes are running the same version.<br> maintenance -> disabled - Allowed only in healthy state with all nodes are running the same version.<br> All other transitions are not allowed. <p> VCHA Cluster configuration remains intact in any of the cluster modes.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterModeSetTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "set$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster/passive?action=check": {
            "post": {
                "tags": [
                    "vcha/cluster/passive"
                ],
                "summary": "Validates the specified passive node's placement configuration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterPassiveCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckResult structure containing errors and warnings.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterPassiveCheckResult"
                        }
                    },
                    "400": {
                        "description": "If the clone operation is not allowed in the current state of the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "If the active virtual machine is not managed by the specified vCenter server for the active node.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster/passive?action=redeploy&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster/passive"
                ],
                "summary": "Creates the passive node in a degraded cluster with node location information and pre-existing VCHA cluster configuration from the active node.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterPassiveRedeployTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the SSL certificate of the management vCenter server cannot be validated.<br> The value of the data {@term field} of {@link Error} will be a {@term structure} that contains all the {@term fields} defined in {@link vcenter.vcha.CertificateInfo}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnverifiedPeer"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "redeploy$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster/witness?action=check": {
            "post": {
                "tags": [
                    "vcha/cluster/witness"
                ],
                "summary": "Validates the specified witness node's placement configuration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterWitnessCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckResult structure containing errors and warnings.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterWitnessCheckResult"
                        }
                    },
                    "400": {
                        "description": "If the clone operation is not allowed in the current state of the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "If the active virtual machine is not managed by the specified vCenter server for the active node.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster/witness?action=redeploy&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster/witness"
                ],
                "summary": "Creates the witness node in a degraded cluster with node location information and pre-existing VCHA cluster configuration from the active node.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterWitnessRedeployTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the SSL certificate of the management vCenter server cannot be validated.<br> The value of the data {@term field} of {@link Error} will be a {@term structure} that contains all the {@term fields} defined in {@link vcenter.vcha.CertificateInfo}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnverifiedPeer"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "redeploy$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster?action=deploy&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster"
                ],
                "summary": "Prepares, clones, and configures a VCHA cluster.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterDeployTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the SSL certificate of the management vCenter server cannot be validated.<br> The value of the data {@term field} of {@link Error} will be a {@term structure} that contains all the {@term fields} defined in {@link CertificateInfo}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnverifiedPeer"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "deploy$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster?action=failover&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster"
                ],
                "summary": "Initiates failover from the active vCenter node to the passive node. <p> For forced failover, Active node immediately initiates a failover. This may result into a data loss after failover. <p> For planned failover, Active node flushes all the state to the Passive node, waits for the flush to complete before causing a failover. After the failover, Passive node starts without any data loss. <p> A failover is allowed only in the following cases: <ol> <li> Cluster's mode is enabled and all cluster members are present.</li> <li> Cluster's mode is maintenance and all cluster members are present.</li> </ol>",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterFailoverTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "failover$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster?action=get": {
            "post": {
                "tags": [
                    "vcha/cluster"
                ],
                "summary": "Retrieves the status of a VCHA cluster.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterGet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Info structure containing the VCHA configuration and health information.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterInfo"
                        }
                    },
                    "400": {
                        "description": "If the SSL certificate of the management vCenter server cannot be validated.<br> The value of the data {@term field} of {@link Error} will be a {@term structure} that contains all the {@term fields} defined in {@link CertificateInfo}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnverifiedPeer"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. <ul> <li> If {@param.name partial} is false or unset, then the operation execution requires the Global.VCServer privilege.</li> <li> If {@param.name partial} is true, then the operation execution requires the System.Read privilege.</li> </ul>",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/cluster?action=undeploy&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster"
                ],
                "summary": "Destroys the VCHA cluster and removes all VCHA specific information from the VCVA appliance. Optionally, the passive and witness node virtual machines will be deleted only if VCHA was deployed using automatic deployment. The active node in the cluster continues to run as a standalone VCVA appliance after the destroy operation has been performed. <p> If the VCHA cluster is in a transition state and not configured, then the VCHA cluster specific information is removed.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaClusterUndeployTask"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the SSL certificate of the management vCenter server cannot be validated.<br> The value of the data {@term field} of {@link Error} will be a {@term structure} that contains all the {@term fields} defined in {@link CertificateInfo}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnverifiedPeer"
                        }
                    },
                    "404": {
                        "description": "If the passive virtual machine is not managed by the specified vCenter server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "undeploy$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vcha/operations": {
            "get": {
                "tags": [
                    "vcha/operations"
                ],
                "summary": "Retrieves the current active and disabled operations of a VCHA cluster.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the current running and disabled operations of a VCHA cluster.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVchaOperationsInfo"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Creates a virtual machine.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVMCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID of newly-created virtual machine.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if {@name CreateSpec#guestOS} is not supported for the requested virtual hardware version and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "500": {
                        "description": "if any of the resources needed to create the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "VM"
                ],
                "summary": "Returns information about at most 4000 visible (subject to permission checks) virtual machines in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "vms",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of virtual machines that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that virtual machines must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "hosts",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Hosts that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "clusters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Clusters that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "resource_pools",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Resource pools that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "power_states",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "POWERED_OFF",
                                "POWERED_ON",
                                "SUSPENDED"
                            ]
                        },
                        "description": "Power states that a virtual machine must be in to match the filter (see {@link Power.Info#state}."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the virtual machines matching the {@link FilterSpec}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVMSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#powerStates} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if more than 4000 virtual machines match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items": {
            "post": {
                "tags": [
                    "vm_template/library_items"
                ],
                "summary": "Creates a library item in content library from a virtual machine. This {@term operation} creates a library item in content library whose content is a virtual machine template created from the source virtual machine, using the supplied create specification. The virtual machine template is stored in a newly created library item.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Identifier of the newly created library item.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the source virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInUse"
                        }
                    },
                    "500": {
                        "description": "if any of the resources needed to create the virtual machine template could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if the source virtual machine specified by {@link CreateSpec#sourceVm} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if any of the services involved in the {@term operation} are unavailable.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items/{template_library_item}": {
            "get": {
                "tags": [
                    "vm_template/library_items"
                ],
                "summary": "Returns information about a virtual machine template contained in the library item specified by {@param.name templateLibraryItem}",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "identifier of the library item containing the virtual machine template."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the virtual machine template item contained in the library item.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine template's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the library item could not be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if any of the services involved in the {@term operation} are unavailable.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items/{template_library_item}/check-outs": {
            "get": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Returns commonly used information about the virtual machines that are checked out of the library item.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about the check outs.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCheckOutsSummary"
                            }
                        }
                    },
                    "404": {
                        "description": "if the library item is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the library item does not contain a virtual machine template.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}": {
            "get": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Returns the information about a checked out virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the checked out virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about a check out.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCheckOutsInfo"
                        }
                    },
                    "404": {
                        "description": "if the library item or virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not checked out of the library item.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Deletes the checked out virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the checked out virtual machine to delete."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the library item or virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is running (powered on).",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}?action=check-in": {
            "post": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Checks in a virtual machine into the library item. This {@term operation} updates the library item to contain the virtual machine being checked in as a template. This template becomes the latest version of the library item. The previous virtual machine template contained in the library item is available as a backup and its information can be queried using the {@name Versions} {@term service}. At most one previous version of a virtual machine template is retained in the library item.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the content library item in which the virtual machine is checked in."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine to check into the library item."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCheckOutsCheckIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The new version of the library item.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the {@term operation} cannot be performed because of the virtual machine's current state. For example, if the virtual machine is not powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if the item specified by {@param.name templateLibraryItem} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "check_in",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items/{template_library_item}/check-outs?action=check-out": {
            "post": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Checks out a library item containing a virtual machine template. This {@term operation} makes a copy of the source virtual machine template contained in the library item as a virtual machine. The virtual machine is copied with the same storage specification as the source virtual machine template. Changes to the checked out virtual machine do not affect the virtual machine template contained in the library item. To save these changes back into the library item, {@link #checkIn} the virtual machine. To discard the changes, {@link #delete} the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the content library item containing the source virtual machine template to be checked out."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCheckOutsCheckOut"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the virtual machine that was checked out of the library item.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if {@param.name spec} contains invalid arguments.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the library item specified by {@param.name templateLibraryItem} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "check_out",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items/{template_library_item}/versions": {
            "get": {
                "tags": [
                    "vm_template/library_items/versions"
                ],
                "summary": "Returns commonly used information about the live versions of a virtual machine template library item.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about the library item versions.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmTemplateLibraryItemsVersionsSummary"
                            }
                        }
                    },
                    "404": {
                        "description": "if the library item is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the library item does not contain a virtual machine template.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items/{template_library_item}/versions/{version}": {
            "get": {
                "tags": [
                    "vm_template/library_items/versions"
                ],
                "summary": "Returns information about the live version of a library item containing a virtual machine template.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "Version of the library item."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified library item version.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsVersionsInfo"
                        }
                    },
                    "404": {
                        "description": "if the library item or version is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the library item does not contain a virtual machine template.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm_template/library_items/versions"
                ],
                "summary": "Deletes the virtual machine template contained in the library item at the specified version.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "Version of the library item to delete."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the library item or version is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the specified version is the latest version of the library item.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items/{template_library_item}/versions/{version}?action=rollback": {
            "post": {
                "tags": [
                    "vm_template/library_items/versions"
                ],
                "summary": "Rollbacks a library item containing a virtual machine template to a previous version. The virtual machine template at the specified version becomes the latest virtual machine template with a new version identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "Version of the library item to rollback."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsVersionsRollback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The new version of the library item.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "if the library item or version is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if a virtual machine is checked out of the library item.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "rollback",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm-template/library-items/{template_library_item}?action=deploy": {
            "post": {
                "tags": [
                    "vm_template/library_items"
                ],
                "summary": "Deploys a virtual machine as a copy of the source virtual machine template contained in the library item specified by {@param.name templateLibraryItem}. It uses the deployment specification in {@param.name spec}. If {@link DeploySpec#poweredOn} and/or {@link DeploySpec#guestCustomization} are specified, the server triggers the power on and/or guest customization operations, which are executed asynchronously.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "identifier of the content library item containing the source virtual machine template to be deployed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeploy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the deployed virtual machine.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if either a specified host or a specified datastore is in an invalid state for the deployment, such as maintenance mode.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if there was an error in allocating any of the resources required by the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if the library item specified by {@param.name templateLibraryItem} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if any of the services involved in the {@term operation} are unavailable.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "deploy",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}": {
            "get": {
                "tags": [
                    "VM"
                ],
                "summary": "Returns information about a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVMInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "VM"
                ],
                "summary": "Deletes a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is running (powered on).",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/compute/policies/{policy}": {
            "get": {
                "tags": [
                    "vm/compute/policies"
                ],
                "summary": "Returns information about the compliance of a virtual machine with a compute policy in VMware Cloud on AWS. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine to query the status for."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "policy",
                        "description": "Identifier of the policy to query the status for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the compliance of the specified virtual machine with the specified compute policy.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmComputePoliciesInfo"
                        }
                    },
                    "404": {
                        "description": "if a virtual machine with the given identifier does not exist, or if a policy with the given identifier does not exist.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/console/tickets": {
            "post": {
                "tags": [
                    "vm/console/tickets"
                ],
                "summary": "Creates a virtual machine console ticket of a given ticket type. The created ticket is a one time use URI. The validity of the ticket is 30 minutes, if not used with in the time frame the ticket expires. <p> The {@link Type#VMRC} ticket contains the IP address or the DNS resolvable name of the vCenter server. This ticket requires installation of VMware Workstation, VMware Fusion or VMRC to be installed on the machine where the ticket has to be opened. This ticket can be acquired even when the VM is turned off. <p> The {@link Type#WEBMKS} ticket contains the IP address of the DNS resolvable name of the ESX server. This ticket requires user to embed this ticket in a HTML page using VMware HTML Console SDK - https://www.vmware.com/support/developer/html-console This ticket can be acquired only when the VM is turned on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmConsoleTicketsCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Commonly used information about the virtual machine console ticket.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmConsoleTicketsSummary"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration or execution state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is powered off and requested ticket type is {@link Type#WEBMKS}",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/customization": {
            "put": {
                "tags": [
                    "vm/guest/customization"
                ],
                "summary": "Applies a customization specification in {@param.name spec} on the virtual machine in {@param.name vm}. This {@term operation} only sets the specification settings for the virtual machine. The actual customization happens inside the guest when the virtual machine is powered on. If {@param.name spec} has {@term unset} values, then any pending customization settings for the virtual machine are cleared. If there is a pending customization for the virtual machine and {@param.name spec} has valid content, then the existing customization setting will be overwritten with the new settings.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "The unique identifier of the virtual machine that needs to be customized."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestCustomizationSet"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine {@param.name vm} is not in a powered off state.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found with the unique name in {@param.name spec}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/environment/{name}?action=get": {
            "post": {
                "tags": [
                    "vm/guest/environment"
                ],
                "summary": "Reads a single environment variable from the guest operating system. <p> If the authentication uses {@link Credentials#interactiveSession}, then the environment being read will be that of the user logged into the desktop. Otherwise it's the environment of the system user. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine to perform the operation on."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The name of the environment variable to be read."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestEnvironmentGet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The value of the {@param.name name} environment variable.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine {@param.name vm} is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine {@param.name vm} is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} are not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "503": {
                        "description": "if the VMware tools are not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/environment?action=list": {
            "post": {
                "tags": [
                    "vm/guest/environment"
                ],
                "summary": "Reads a list of environment variables from the guest operating system. <p> If the authentication uses {@link Credentials#interactiveSession}, then the environment being read will be that of the user logged into the desktop. Otherwise it's the environment of the system user. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestEnvironmentList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mapping from environment variable names to environment variable values, or all environment variables if nothing is specified. If any specified environment variable contained in {@param.name names} is not set, then nothing is returned for that variable.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "if the virtual machine {@param.name vm} is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine {@param.name vm} is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} are not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "503": {
                        "description": "if the VMware tools are not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/directories?action=create": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/directories"
                ],
                "summary": "Creates a directory in the guest operating system. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemDirectoriesCreate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if {@param.name path} cannot be created because the guest authentication will not allow the operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/directories?action=createTemporary": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/directories"
                ],
                "summary": "Creates a temporary directory. <p> Creates a new unique temporary directory for the user to use as needed. The guest operating system may clean up the directory after a guest specific amount of time if {@param.name parentPath} is not set, or the user can remove the directory when no longer needed. <p> The new directory name will be created in a guest-specific format using {@param.name prefix}, a guest generated string and {@param.name suffix} in {@param.name parentPath}. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemDirectoriesCreateTemporary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The absolute path of the temporary directory that is created.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if {@param.name parentPath} cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create_temporary",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/directories?action=delete": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/directories"
                ],
                "summary": "Deletes a directory in the guest operating system. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemDirectoriesDelete"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if {@param.name path} cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/directories?action=move": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/directories"
                ],
                "summary": "Renames a directory in the guest. <p> Renames the directory, or copies and deletes the old contents as required by the underlying filsystem. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemDirectoriesMove"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if a path cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "move",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/files/{path}?action=delete": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/files"
                ],
                "summary": "Deletes a file in the guest operating system <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "path",
                        "description": "The complete path to the file or symbolic link to be deleted."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemFilesDelete"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if {@param.name path} cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/files/{path}?action=get": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/files"
                ],
                "summary": "Returns information about a file or directory in the guest. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "path",
                        "description": "The complete path to the file."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemFilesGet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{@link Info} object containing information for the file.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemFilesInfo"
                        }
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if {@param.name path} cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/files?action=createTemporary": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/files"
                ],
                "summary": "Creates a temporary file. <p> Creates a new unique temporary file for the user to use as needed. The user is responsible for removing it when it is no longer needed. <p> The new file name will be created in a guest-specific format using {@param.name prefix}, a guest generated string and {@param.name suffix} in {@param.name parentPath}. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemFilesCreateTemporary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The absolute path of the temporary file that is created.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if {@param.name parentPath} is {@term set} and does not exist. The value of {@link vapi.std.errors.Error#data} will contain all the {@term fields} defined in the {@link vcenter.vm.guest.filesystem.FileErrorDetails} providing additional information about the failure.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if {@param.name parentPath} cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create_temporary",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/files?action=list": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/files"
                ],
                "summary": "Returns information about files and directories in the guest. <p> Files are returned in operating system-specific (inode) order.  If the directory is modified between queries, missing or duplicate results can occur. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemFilesList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A {@link ListResult} object containing information for all the matching files in {@param.name filter} and the total number of files that can be returned.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemFilesListResult"
                        }
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "403": {
                        "description": "if {@param.name path} cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/files?action=move": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/files"
                ],
                "summary": "Renames a file in the guest. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemFilesMove"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if a path cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "move",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem/files?action=update": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/files"
                ],
                "summary": "Changes the file attributes of a specified file or directory inside the guest. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemFilesUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if {@param.name path} cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/filesystem?action=create": {
            "post": {
                "tags": [
                    "vm/guest/filesystem/transfers"
                ],
                "summary": "Initiates an operation to transfer a file to or from the guest. <p> If the power state of the Virtual Machine is changed when the file transfer is in progress, or the Virtual Machine is migrated, then the transfer operation is aborted. <p> When transferring a file into the guest and overwriting an existing file, the old file attributes are not preserved. <p> In order to ensure a secure connection to the host when transferring a file using HTTPS, the X.509 certificate for the host must be used to authenticate the remote end of the connection. The certificate of the host that the virtual machine is running on can be retrieved using the following fields: XXX insert link to certificate in Host config XXX <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual Machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestFilesystemTransfersCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The URL to which the user has to send an HTTP request. The URL will become invalid once a successful request is sent. If the file is being transferred from the guest, an HTTP GET should be used.  If the file is being transferred to the guest, HTTP PUT should be used. <br> The URL is valid only for 10 minutes from the time it is generated. The URL becomes invalid whenever the virtual machine is powered off, suspended, unregistered or migrated to a new host. The host part of the URL is returned as <b>*</b> if the hostname to be used is the name of the server to which the call was made. For example, if the call is made to <b>esx-svr-1.domain1.com</b>, and the file is available for download from {@literal https://esx-svr-1.domain1.com/guestFile?id=1&token=1234}, the URL returned may be {@literal https://&#42;/guestFile?id=1&token=1234}. The client replaces the asterisk with the server name on which it invoked the call. <br>",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware Tools in the guest OS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if is insuffcient space for the new file when transferring a file to the guest.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} object was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if {@link CreateSpec#path} in {@param.name spec} cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/identity": {
            "get": {
                "tags": [
                    "vm/guest/identity"
                ],
                "summary": "Return information about the guest.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "guest identification information.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestIdentityInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/local-filesystem": {
            "get": {
                "tags": [
                    "vm/guest/local_filesystem"
                ],
                "summary": "Returns details of the local file systems in the guest operating system.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the local file systems configured in the guest operating system.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/VcenterVmGuestLocalFilesystemInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/networking": {
            "get": {
                "tags": [
                    "vm/guest/networking"
                ],
                "summary": "Returns information about the network configuration in the guest operating system.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the networking configuration in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestNetworkingInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/networking/interfaces": {
            "get": {
                "tags": [
                    "vm/guest/networking/interfaces"
                ],
                "summary": "Returns information about the networking interfaces in the guest operating system.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the interfaces configured in the guest operating system.  Interfaces are ordered in a guest operating system specific determined order.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmGuestNetworkingInterfacesInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/networking/routes": {
            "get": {
                "tags": [
                    "vm/guest/networking/routes"
                ],
                "summary": "Returns information about network routing in the guest operating system.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the network routes configured in the guest operating system.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmGuestNetworkingRoutesInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/operations": {
            "get": {
                "tags": [
                    "vm/guest/operations"
                ],
                "summary": "Get information about the guest operation status.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "guest operations readiness.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestOperationsInfo"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the state of VMware Tools is unknown.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/power": {
            "get": {
                "tags": [
                    "vm/guest/power"
                ],
                "summary": "Returns information about the guest operating system power state.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest OS powerstate information.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestPowerInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/power?action=reboot": {
            "post": {
                "tags": [
                    "vm/guest/power"
                ],
                "summary": "Issues a request to the guest operating system asking it to perform a reboot. This request returns immediately and does not wait for the guest operating system to complete the operation.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine does not support being powered on (e.g. marked as a template, serving as a fault-tolerance secondary virtual machine).",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "reboot",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/power?action=shutdown": {
            "post": {
                "tags": [
                    "vm/guest/power"
                ],
                "summary": "Issues a request to the guest operating system asking it to perform a clean shutdown of all services. This request returns immediately and does not wait for the guest operating system to complete the operation.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine does not support being powered on (e.g. marked as a template, serving as a fault-tolerance secondary virtual machine).",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "shutdown",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/power?action=standby": {
            "post": {
                "tags": [
                    "vm/guest/power"
                ],
                "summary": "Issues a request to the guest operating system asking it to perform a suspend operation.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine does not support being powered on (e.g. marked as a template, serving as a fault-tolerance secondary virtual machine).",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    }
                },
                "operationId": "standby",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/processes/{pid}?action=delete": {
            "post": {
                "tags": [
                    "vm/guest/processes"
                ],
                "summary": "Terminates a process in the guest OS. <p> On Posix guests, the process is sent a TERM signal.  If that doesn't terminate the process, a KILL signal is sent.  A process may still be running if it's stuck. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine to perform the operation on."
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "required": true,
                        "in": "path",
                        "name": "pid",
                        "description": "Process ID of the process to be terminated"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestProcessesDelete"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware tools in the guest OS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine {@param.name vm} is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware tools are not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if {@param.name credentials} is not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if {@param.name credentials} does not have permission to terminate the process.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/processes/{pid}?action=get": {
            "post": {
                "tags": [
                    "vm/guest/processes"
                ],
                "summary": "Returns the status of a process running in the guest operating system, including those started by {@link Processes#create} that may have recently completed. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine to perform the operation on."
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "required": true,
                        "in": "path",
                        "name": "pid",
                        "description": "Specifies the process to query."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestProcessesGet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link #Info} for the process with id {@param.name pid}.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestProcessesInfo"
                        }
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware tools in the guest OS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine {@param.name vm} is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware tools are not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} is not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/processes?action=create": {
            "post": {
                "tags": [
                    "vm/guest/processes"
                ],
                "summary": "Starts a program in the guest operating system. <p> A process started this way can have its status queried with {@link #list} or {@link #get}. When the process completes, its exit code and end time will be available for 5 minutes after completion. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestProcessesCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The process id of the program started.",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware tools in the guest OS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine {@param.name vm} is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the program fails to start.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "503": {
                        "description": "if the VMware tools are not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} was not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the {@basename CreateSpec#path} {@term field} of {@param.name spec} cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/guest/processes?action=list": {
            "post": {
                "tags": [
                    "vm/guest/processes"
                ],
                "summary": "List the processes running in the guest operating system, plus those started by {@link Processes#create} that have recently completed. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine to perform the operation on."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmGuestProcessesList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of running processes is returned in an array of {@link #Summary} {@term structures}.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmGuestProcessesSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "if the operation is not supported by the VMware tools in the guest OS.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine {@param.name vm} is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the VMware tools are not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the {@param.name credentials} is not valid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware": {
            "get": {
                "tags": [
                    "vm/hardware"
                ],
                "summary": "Returns the virtual hardware settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual hardware settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware"
                ],
                "summary": "Updates the virtual hardware settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the requested virtual hardware version is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/adapter/sata": {
            "post": {
                "tags": [
                    "vm/hardware/adapter/sata"
                ],
                "summary": "Adds a virtual SATA adapter to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareAdapterSataCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Virtual SATA adapter identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "vm/hardware/adapter/sata"
                ],
                "summary": "Returns commonly used information about the virtual SATA adapters belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual SATA adapters.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmHardwareAdapterSataSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}": {
            "get": {
                "tags": [
                    "vm/hardware/adapter/sata"
                ],
                "summary": "Returns information about a virtual SATA adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SATA adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual SATA adapter.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareAdapterSataInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SATA adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm/hardware/adapter/sata"
                ],
                "summary": "Removes a virtual SATA adapter from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SATA adapter identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is suspended",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SATA adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/adapter/scsi": {
            "post": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Adds a virtual SCSI adapter to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareAdapterScsiCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Virtual SCSI adapter identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Returns commonly used information about the virtual SCSI adapters belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual SCSI adapters.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmHardwareAdapterScsiSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/adapter/scsi/{adapter}": {
            "get": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Returns information about a virtual SCSI adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SCSI adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual SCSI adapter.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareAdapterScsiInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Updates the configuration of a virtual SCSI adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SCSI adapter identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareAdapterScsiUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if one or more of the {@term fields} specified in the {@param.name spec} {@term parameter} cannot be modified due to the current power state of the virtual machine or the connection state of the virtual SCSI adapter.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Removes a virtual SCSI adapter from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SCSI adapter identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is suspended",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/boot": {
            "get": {
                "tags": [
                    "vm/hardware/boot"
                ],
                "summary": "Returns the boot-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Boot-related settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareBootInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/boot"
                ],
                "summary": "Updates the boot-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareBootUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if one of the provided settings is not permitted; for example, specifying a negative value for {@name UpdateSpec#delay}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/boot/device": {
            "put": {
                "tags": [
                    "vm/hardware/boot/device"
                ],
                "summary": "Sets the virtual devices that will be used to boot the virtual machine.  The virtual machine will check the devices in order, attempting to boot from each, until the virtual machine boots successfully.  If the {@term list} is empty, the virtual machine will use a default boot sequence. There should be no more than one instance of {@link Entry} for a given device type except {@link Device.Type#ETHERNET} in the {@term list}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareBootDeviceSet"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found, or if any of the specified virtual devices is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if a any of the {@enum.values Device.Type} values appears in more than one {@name Device.Entry} with the exception of {@link Device.Type#ETHERNET}, which may appear multiple times if the virtual machine has been configured with multiple Ethernet adapters.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "vm/hardware/boot/device"
                ],
                "summary": "Returns an ordered list of boot devices for the virtual machine. If the {@term list} is empty, the virtual machine uses a default boot sequence.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ordered list of configured boot devices.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmHardwareBootDeviceEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/cdrom": {
            "post": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Adds a virtual CD-ROM device to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareCdromCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Virtual CD-ROM device identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Returns commonly used information about the virtual CD-ROM devices belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual CD-ROM devices.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmHardwareCdromSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/cdrom/{cdrom}": {
            "get": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Returns information about a virtual CD-ROM device.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual CD-ROM device.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareCdromInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Updates the configuration of a virtual CD-ROM device.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareCdromUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if one or more of the {@term fields} specified in the {@param.name spec} {@term parameter} cannot be modified due to the current power state of the virtual machine or the connection state of the virtual CD-ROM device.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Removes a virtual CD-ROM device from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is suspended or if the virtual machine is powered on and virtual CD-ROM type is IDE.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/cdrom/{cdrom}?action=connect": {
            "post": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Connects a virtual CD-ROM device of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual CD-ROM device to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/cdrom/{cdrom}?action=disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Disconnects a virtual CD-ROM device of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the CD-ROM device is not connected to its backing resource. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual CD-ROM device to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/cpu": {
            "get": {
                "tags": [
                    "vm/hardware/cpu"
                ],
                "summary": "Returns the CPU-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CPU-related settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareCpuInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/cpu"
                ],
                "summary": "Updates the CPU-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareCpuUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if {@name UpdateSpec#hotAddEnabled} or {@name UpdateSpec#hotRemoveEnabled} is specified and the virtual machine is not powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/disk": {
            "post": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Adds a virtual disk to the virtual machine.  While adding the virtual disk, a new VMDK file may be created or an existing VMDK file may be used to back the virtual disk.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareDiskCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Virtual disk identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Returns commonly used information about the virtual disks belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about the virtual disks.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmHardwareDiskSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/disk/{disk}": {
            "get": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Returns information about a virtual disk.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "disk",
                        "description": "Virtual disk identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual disk.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareDiskInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Updates the configuration of a virtual disk.  An update {@term operation} can be used to detach the existing VMDK file and attach another VMDK file to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "disk",
                        "description": "Virtual disk identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareDiskUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if one or more of the {@term fields} specified in the {@param.name spec} {@term parameter} cannot be modified due to the current power state of the virtual machine or the connection state of the virtual disk.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Removes a virtual disk from the virtual machine.  This {@term operation} does not destroy the VMDK file that backs the virtual disk.  It only detaches the VMDK file from the virtual machine.  Once detached, the VMDK file will not be destroyed when the virtual machine to which it was associated is deleted.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "disk",
                        "description": "Virtual disk identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is suspended or if the virtual machine is powered on and virtual disk type is IDE.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/ethernet": {
            "post": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Adds a virtual Ethernet adapter to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareEthernetCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Virtual Ethernet adapter identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or network backing is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Returns commonly used information about the virtual Ethernet adapters belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual Ethernet adapters.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmHardwareEthernetSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/ethernet/{nic}": {
            "get": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Returns information about a virtual Ethernet adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual Ethernet adapter.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareEthernetInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Updates the configuration of a virtual Ethernet adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareEthernetUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "400": {
                        "description": "if HOST_DEVICE is specified as the type.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine, virtual Ethernet adapter, or backing network is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Removes a virtual Ethernet adapter from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/ethernet/{nic}?action=connect": {
            "post": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Connects a virtual Ethernet adapter of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual Ethernet adapter to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/ethernet/{nic}?action=disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Disconnects a virtual Ethernet adapter of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the Ethernet adapter is not connected to its backing resource. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual Ethernet adapter to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/floppy": {
            "post": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Adds a virtual floppy drive to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareFloppyCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Virtual floppy drive identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Returns commonly used information about the virtual floppy drives belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual floppy drives.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmHardwareFloppySummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/floppy/{floppy}": {
            "get": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Returns information about a virtual floppy drive.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual floppy drive.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareFloppyInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Updates the configuration of a virtual floppy drive.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareFloppyUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if one or more of the {@term fields} specified in the {@param.name spec} {@term parameter} cannot be modified due to the current power state of the virtual machine or the connection state of the virtual floppy drive.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Removes a virtual floppy drive from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/floppy/{floppy}?action=connect": {
            "post": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Connects a virtual floppy drive of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual floppy drive to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/floppy/{floppy}?action=disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Disconnects a virtual floppy drive of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the floppy drive is not connected to its backing resource. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual floppy floppy to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/memory": {
            "get": {
                "tags": [
                    "vm/hardware/memory"
                ],
                "summary": "Returns the memory-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory-related settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareMemoryInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/memory"
                ],
                "summary": "Updates the memory-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareMemoryUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if {@name UpdateSpec#hotAddEnabled} is specified and the virtual machine is not powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/parallel": {
            "post": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Adds a virtual parallel port to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareParallelCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Virtual parallel port identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Returns commonly used information about the virtual parallel ports belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual parallel ports.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmHardwareParallelSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/parallel/{port}": {
            "get": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Returns information about a virtual parallel port.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual parallel port.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareParallelInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Updates the configuration of a virtual parallel port.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareParallelUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if one or more of the {@term fields} specified in the {@param.name spec} {@term parameter} cannot be modified due to the current power state of the virtual machine or the connection state of the virtual parallel port.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Removes a virtual parallel port from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/parallel/{port}?action=connect": {
            "post": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Connects a virtual parallel port of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual parallel port to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/parallel/{port}?action=disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Disconnects a virtual parallel port of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the parallel port is not connected to its backing. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual parallel port to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/serial": {
            "post": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Adds a virtual serial port to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareSerialCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Virtual serial port identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Returns commonly used information about the virtual serial ports belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual serial ports.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VcenterVmHardwareSerialSummary"
                            }
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/serial/{port}": {
            "get": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Returns information about a virtual serial port.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual serial port.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareSerialInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Updates the configuration of a virtual serial port.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareSerialUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if one or more of the {@term fields} specified in the {@param.name spec} {@term parameter} cannot be modified due to the current power state of the virtual machine or the connection state of the virtual serial port.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Removes a virtual serial port from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/serial/{port}?action=connect": {
            "post": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Connects a virtual serial port of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual serial port to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware/serial/{port}?action=disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Disconnects a virtual serial port of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the serial port is not connected to its backing. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual serial port to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/hardware?action=upgrade": {
            "post": {
                "tags": [
                    "vm/hardware"
                ],
                "summary": "Upgrades the virtual machine to a newer virtual hardware version.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmHardwareUpgrade"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if {@param.name version} is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnsupported"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "upgrade",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/library-item": {
            "get": {
                "tags": [
                    "vm/library_item"
                ],
                "summary": "Returns the information about the library item associated with the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the library item associated with the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmLibraryItemInfo"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/power": {
            "get": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Returns the power state information of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Power state information for the specified virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmPowerInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration or execution state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/power?action=reset": {
            "post": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Resets a powered-on virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine is performing another operation",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is powered off or suspended.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "reset",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/power?action=start": {
            "post": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Powers on a powered-off or suspended virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if resources required by the virtual machine are in use (e.g. virtual machine configuration files or virtual disks are locked, host containing the virtual machine is an HA failover host).",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInUse"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/power?action=stop": {
            "post": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Powers off a powered-on or suspended virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is already powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyInDesiredState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "stop",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/power?action=suspend": {
            "post": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Suspends a powered-on virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is powered off.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "suspend",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/storage/policy": {
            "get": {
                "tags": [
                    "vm/storage/policy"
                ],
                "summary": "Returns Information about Storage Policy associated with a virtual machine's home directory and/or its virtual hard disks.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Overview of Storage Policy associated with a virtual machine's home directory and/or its associated virtual hard disks.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmStoragePolicyInfo"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/storage/policy"
                ],
                "summary": "Updates the storage policy configuration of a virtual machine and/or its associated virtual hard disks.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmStoragePolicyUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the virtual machine or disk's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required priveleges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    },
                    "400": {
                        "description": "if the storage policy specified is invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/storage/policy/compliance": {
            "get": {
                "tags": [
                    "vm/storage/policy/compliance"
                ],
                "summary": "Returns the cached storage policy compliance information of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual machine storage policy compliance Info {@link Info}.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmStoragePolicyComplianceInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/storage/policy/compliance?action=check": {
            "post": {
                "tags": [
                    "vm/storage/policy/compliance"
                ],
                "summary": "Returns the storage policy Compliance {@link Info} of a virtual machine after explicitly re-computing compliance check.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmStoragePolicyComplianceCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual machine storage policy compliance {@name Info} {@term structure} .",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmStoragePolicyComplianceInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service necessary to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/tools": {
            "get": {
                "tags": [
                    "vm/tools"
                ],
                "summary": "Get the properties of VMware Tools.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "VMware Tools properties.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmToolsInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "vm/tools"
                ],
                "summary": "Update the properties of VMware Tools.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmToolsUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "400": {
                        "description": "if the {@link UpdateSpec#upgradePolicy} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/tools/installer": {
            "get": {
                "tags": [
                    "vm/tools/installer"
                ],
                "summary": "Get information about the VMware Tools installer.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "information about the VMware Tools installer.",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmToolsInstallerInfo"
                        }
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/tools/installer?action=connect": {
            "post": {
                "tags": [
                    "vm/tools/installer"
                ],
                "summary": "Connects the VMware Tools CD installer as a CD-ROM for the guest operating system. On Windows guest operating systems with autorun, this should cause the installer to initiate the Tools installation which will need user input to complete. On other (non-Windows) guest operating systems this will make the Tools installation available, and a a user will need to do guest-specific actions.  On Linux, this includes opening an archive and running the installer. To monitor the status of the Tools install, clients should check the {@name vcenter.vm.Tools.Info#versionStatus} and {@name vcenter.vm.Tools.Info#runState} from {@link vcenter.vm.Tools#get}",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the VMware Tools CD is already connected.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyInDesiredState"
                        }
                    },
                    "500": {
                        "description": "if the Tools installation fails in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/tools/installer?action=disconnect": {
            "post": {
                "tags": [
                    "vm/tools/installer"
                ],
                "summary": "Disconnect the VMware Tools installer CD image.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}/tools?action=upgrade": {
            "post": {
                "tags": [
                    "vm/tools"
                ],
                "summary": "Begins the Tools upgrade process. To monitor the status of the Tools upgrade, clients should check the Tools status by calling {@link #get} and examining {@name Info#versionStatus} and {@name Info#runState}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVmToolsUpgrade"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools are not running.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "400": {
                        "description": "is an upgrade is already in progress.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsAlreadyInDesiredState"
                        }
                    },
                    "500": {
                        "description": "if the upgrade process fails inside the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsError"
                        }
                    }
                },
                "operationId": "upgrade",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}?action=relocate": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Relocates a virtual machine based on the specification. The parts of the virtual machine that can move are: FOLDER, RESOURCE_POOL, HOST, CLUSTER and DATASTORE of home of the virtual machine and disks. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Existing Virtual machine to relocate."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVMRelocate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": "if a specified resource (eg. host) is not accessible.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "400": {
                        "description": "if any of the specified parameters are invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} or the given \"vm\" could not be found",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "relocate",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}?action=relocate&vmw-task=true": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Relocates a virtual machine based on the specification. The parts of the virtual machine that can move are: FOLDER, RESOURCE_POOL, HOST, CLUSTER and DATASTORE of home of the virtual machine and disks. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Existing Virtual machine to relocate."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVMRelocateTask"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "if a specified resource (eg. host) is not accessible.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceInaccessible"
                        }
                    },
                    "400": {
                        "description": "if any of the specified parameters are invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} or the given \"vm\" could not be found",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "relocate$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm/{vm}?action=unregister": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Removes the virtual machine corresponding to {@param.name vm} from the vCenter inventory without removing any of the virtual machine's files from storage. All high-level information stored with the management server (ESXi or vCenter) is removed, including information such as statistics, resource pool association, permissions, and alarms.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine to be unregistered."
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is running (powered on).",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotAllowedInCurrentState"
                        }
                    },
                    "404": {
                        "description": "if there is no virtual machine associated with {@param.name vm} in the system.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "500": {
                        "description": "if the virtual machine is busy performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsResourceBusy"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "unregister",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm?action=clone": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Creates a virtual machine from an existing virtual machine. <p>",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVMClone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if any of the specified parameters are invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if any of the resources needed to clone the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "clone",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm?action=clone&vmw-task=true": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Creates a virtual machine from an existing virtual machine. <p>",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVMCloneTask"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if any of the specified parameters are invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if any of the resources needed to clone the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "clone$task",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm?action=instant-clone": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Create an instant clone of an existing virtual machine.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVMInstantClone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if any of the specified parameters are invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if any of the resources needed to create an instant clone could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "instant_clone",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/api/vcenter/vm?action=register": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Creates a virtual machine from existing virtual machine files on storage.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/VcenterVMRegister"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the newly-created virtual machine.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "if any of the specified parameters are invalid.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsInvalidArgument"
                        }
                    },
                    "500": {
                        "description": "if any of the resources needed to register the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnableToAllocateResource"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsNotFound"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsServiceUnavailable"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthenticated"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/VapiStdErrorsUnauthorized"
                        }
                    }
                },
                "operationId": "register",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/vcenter/inventory/datastore?~action=find": {
            "post": {
                "tags": [
                    "inventory/datastore"
                ],
                "summary": "Returns datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.inventory.datastore_find"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.inventory.datastore.find_resp"
                        }
                    },
                    "404": {
                        "description": "if no datastore can be found for one or more of the datastore identifiers in {@param.name datastores}",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "find",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1inventory~1datastore/get"
                }
            }
        },
        "/rest/com/vmware/vcenter/inventory/network?~action=find": {
            "post": {
                "tags": [
                    "inventory/network"
                ],
                "summary": "Returns network information for the specified vCenter Server networks. The key in the {@term result} {@term map} is the network identifier and the value in the {@term map} is the network information.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.inventory.network_find"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Network information for the specified vCenter Server networks. The key in the {@term result} {@term map} is the network identifier and the value in the {@term map} is the network information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.inventory.network.find_resp"
                        }
                    },
                    "404": {
                        "description": "if no datastore can be found for one or more of the vCenter Server network identifiers in {@param.name networks}",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "find",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1inventory~1network/get"
                }
            }
        },
        "/rest/com/vmware/vcenter/iso/image/id:{library_item}?~action=mount": {
            "post": {
                "tags": [
                    "iso/image"
                ],
                "summary": "Mounts an ISO image from a content library on a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_item",
                        "description": "The identifier of the library item having the ISO image to mount on the virtual machine."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.iso.image_mount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the newly created virtual CD-ROM backed by the specified ISO image.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.iso.image.mount_resp"
                        }
                    },
                    "404": {
                        "description": "If either {@param.name vm} or the {@param.name libraryItem} is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    }
                },
                "operationId": "mount",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1iso~1image?action=mount/post"
                }
            }
        },
        "/rest/com/vmware/vcenter/iso/image/id:{vm}?~action=unmount": {
            "post": {
                "tags": [
                    "iso/image"
                ],
                "summary": "Unmounts a previously mounted CD-ROM using an ISO image as a backing.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "The identifier of the virtual machine from which to unmount the virtual CD-ROM."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.iso.image_unmount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "If the virtual machine identified by {@param.name vm} is not found or the {@param.name cdrom} does not identify a virtual CD-ROM in the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "When the operation is not allowed on the virtual machine in its current state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "unmount",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1iso~1image?action=unmount/post"
                }
            }
        },
        "/rest/com/vmware/vcenter/ovf/export-flag": {
            "get": {
                "tags": [
                    "ovf/export_flag"
                ],
                "summary": "Returns information about the supported export flags by the server. <p> The supported flags are: <dl> <dt>PRESERVE_MAC</dt> <dd>Include MAC addresses for network adapters.</dd> <dt>EXTRA_CONFIG</dt> <dd>Include extra configuration in OVF export.</dd> </dl> <p> Future server versions might support additional flags.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "A {@term list} of supported export flags.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.ovf.export_flag.list_resp"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1ovf~1export-flag/get"
                }
            }
        },
        "/rest/com/vmware/vcenter/ovf/import-flag": {
            "get": {
                "tags": [
                    "ovf/import_flag"
                ],
                "summary": "Returns information about the import flags supported by the deployment platform. <p> The supported flags are: <dl> <dt>LAX</dt> <dd>Lax mode parsing of the OVF descriptor.</dd> </dl> <p> Future server versions might support additional flags.",
                "parameters": [
                    {
                        "type": "string",
                        "in": "query",
                        "name": "rp",
                        "description": "The identifier of resource pool target for retrieving the import flag(s).",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A {@term list} of supported import flags.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.ovf.import_flag.list_resp"
                        }
                    },
                    "404": {
                        "description": "If the resource pool associated with {@param.name rp} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1ovf~1import-flag/get"
                }
            }
        },
        "/rest/com/vmware/vcenter/ovf/library-item": {
            "post": {
                "tags": [
                    "ovf/library_item"
                ],
                "summary": "Creates a library item in content library from a virtual machine or virtual appliance. <p> This {@term operation} creates a library item in content library whose content is an OVF package derived from a source virtual machine or virtual appliance, using the supplied create specification. The OVF package may be stored as in a newly created library item or in an in an existing library item. For an existing library item whose content is updated by this {@term operation}, the original content is overwritten. Meta data such as name and description is not updated for the exisitng library item. </p>",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.ovf.library_item_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the {@term operation}, along with the details of the result or failure.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.ovf.library_item.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the specified virtual machine or virtual appliance is busy.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual appliance specified by {@param.name source} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1ovf~1library-item/post"
                }
            }
        },
        "/rest/com/vmware/vcenter/ovf/library-item/id:{ovf_library_item_id}?~action=deploy": {
            "post": {
                "tags": [
                    "ovf/library_item"
                ],
                "summary": "Deploys an OVF package stored in content library to a newly created virtual machine or virtual appliance. <p> This {@term operation} deploys an OVF package which is stored in the library item specified by {@param.name ovfLibraryItemId}. It uses the deployment specification in {@param.name deploymentSpec} to deploy the OVF package to the location specified by {@param.name target}. </p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "ovf_library_item_id",
                        "description": "Identifier of the content library item containing the OVF package to be deployed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.ovf.library_item_deploy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the {@term operation}, along with the details of the result or failure.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.ovf.library_item.deploy_resp"
                        }
                    },
                    "400": {
                        "description": "if there was an error accessing the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the library item specified by {@param.name ovfLibraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "403": {
                        "description": "if you do not have all of the privileges described as follows : <ul> <li>{@term Operation} execution requires VirtualMachine.Config.AddNewDisk if the OVF descriptor has a disk drive (type 17) section. </li> <li>{@term Operation} execution requires VirtualMachine.Config.AdvancedConfig if the OVF descriptor has an ExtraConfig section. </li> <li>{@term Operation} execution requires Extension.Register for specified resource group if the OVF descriptor has a vServiceDependency section. </li> <li>{@term Operation} execution requires Network.Assign for target network if specified. </li> <li>{@term Operation} execution requires Datastore.AllocateSpace for target datastore if specified. </li> </ul>",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "deploy",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1ovf~1library-item~1{ovf_library_item_id}?action=deploy/post"
                }
            }
        },
        "/rest/com/vmware/vcenter/ovf/library-item/id:{ovf_library_item_id}?~action=filter": {
            "post": {
                "tags": [
                    "ovf/library_item"
                ],
                "summary": "Queries an OVF package stored in content library to retrieve information to use when deploying the package. See {@link #deploy}. <p> This {@term operation} retrieves information from the descriptor of the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}. The information returned by the {@term operation} can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec} when deploying the OVF package to the deployment target specified by {@param.name target}. </p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "ovf_library_item_id",
                        "description": "Identifier of the content library item containing the OVF package to query."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.ovf.library_item_filter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information that can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec}) when deploying the OVF package to the deployment target specified by {@param.name target}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.ovf.library_item.filter_resp"
                        }
                    },
                    "400": {
                        "description": "if there was an error accessing the OVF package at the specified {@param.name ovfLibraryItemId}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the library item specified by {@param.name ovfLibraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "filter",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1ovf~1library-item~1{ovf_library_item_id}?action=filter/post"
                }
            }
        },
        "/rest/hvc/links": {
            "post": {
                "tags": [
                    "hvc/links"
                ],
                "summary": "Creates a new hybrid link between the local and foreign PSC. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the newly linked domain.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1links/post"
                }
            },
            "get": {
                "tags": [
                    "hvc/links"
                ],
                "summary": "Enumerates the list of registered hybrid links. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The {@term list} of hybrid link information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "list",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1links/get"
                }
            }
        },
        "/rest/hvc/links/{link}": {
            "delete": {
                "tags": [
                    "hvc/links"
                ],
                "summary": "Deletes an existing hybrid link. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "link",
                        "description": "Identifier of the hybrid link."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "If the hybrid link associated with {@param.name link} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "delete",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1links~1{link}/delete"
                }
            }
        },
        "/rest/hvc/links/{link}/sync/providers": {
            "get": {
                "tags": [
                    "hvc/links/sync/providers"
                ],
                "summary": "Enumerates the sync providers. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "link",
                        "description": "Unique identifier of the link"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@term list} of sync provider information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links.sync.providers.list_resp"
                        }
                    },
                    "400": {
                        "description": "If list fails.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authorized to perform this operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1links~1{link}~1sync~1providers/get"
                }
            }
        },
        "/rest/hvc/links/{link}/sync/providers/{provider}": {
            "get": {
                "tags": [
                    "hvc/links/sync/providers"
                ],
                "summary": "Gets Sync information for a sync provider. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "link",
                        "description": "Unique identifier of the link"
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Unique identifier of the sync provider."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@term Info} of sync information for the provider.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.links.sync.providers_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the sync provider associated with {@param.name provider} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "403": {
                        "description": "if the user is not authorized to perform this operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1links~1{link}~1sync~1providers~1{provider}/get"
                }
            }
        },
        "/rest/hvc/links/{link}/sync/providers/{provider}?action=start": {
            "post": {
                "tags": [
                    "hvc/links/sync/providers"
                ],
                "summary": "Initiates synchronization between the local and remote replicas for the sync provider. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "link",
                        "description": "Unique identifier of the link"
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "Unique identifier representing the sync provider"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if a sync is already running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "404": {
                        "description": "if the link associated with {@param.name link} does not exist if the provider associated with {@param.name provider} is not registered for sync",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "403": {
                        "description": "if the user is not authorized to perform this operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "start",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1links~1{link}~1sync~1providers~1{provider}?action=start/post"
                }
            }
        },
        "/rest/hvc/links/{link}/sync?action=reset": {
            "post": {
                "tags": [
                    "hvc/links/sync"
                ],
                "summary": "Resets the sync state between the linked domains by initiating a fresh sync for all providers. If an existing sync is in progress this cancels the sync. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "link",
                        "description": "Unique identifier of the link."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the link Identifier associated with {@param.name link} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "403": {
                        "description": "if the user is not authorized to perform this operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "reset",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1links~1{link}~1sync?action=reset/post"
                }
            }
        },
        "/rest/hvc/management/administrators": {
            "put": {
                "tags": [
                    "hvc/management/administrators"
                ],
                "summary": "Sets the groups in the local sso group. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.management.administrators_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1management~1administrators/put"
                }
            },
            "get": {
                "tags": [
                    "hvc/management/administrators"
                ],
                "summary": "Enumerates the set of all the groups in the local sso group. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The {@term set} of all the groups.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.management.administrators_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1management~1administrators/get"
                }
            }
        },
        "/rest/hvc/management/administrators?action=add": {
            "post": {
                "tags": [
                    "hvc/management/administrators"
                ],
                "summary": "Add the local sso group with the new group. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.management.administrators_add"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "add",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1management~1administrators?action=add/post"
                }
            }
        },
        "/rest/hvc/management/administrators?action=remove": {
            "post": {
                "tags": [
                    "hvc/management/administrators"
                ],
                "summary": "Remove the group from the local sso group. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This operation is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.hvc.management.administrators_remove"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "403": {
                        "description": "If the user is not authorized.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "remove",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1hvc~1management~1administrators?action=remove/post"
                }
            }
        },
        "/rest/vcenter/certificate-management/vcenter/tls": {
            "put": {
                "tags": [
                    "certificate_management/vcenter/tls"
                ],
                "summary": "Replaces the rhttpproxy TLS certificate with the specified certificate. This {@term operation} can be used in three scenarios : <ol> <li> When the CSR is created and the private key is already stored, this {@term operation} can replace the certificate. The {@link Spec#cert} (but not {@link Spec#key} and {@link Spec#rootCert}) must be provided as input. </li> <li> When the certificate is signed by a third party certificate authority/VMCA and the root certificate of the third party certificate authority/VMCA is already one of the trusted roots in the trust store, this {@term operation} can replace the certificate and private key. The {@link Spec#cert} and {@link Spec#key} (but not {@link Spec#rootCert}) must be provided as input. </li> <li> When the certificate is signed by a third party certificate authority and the root certificate of the third party certificate authority is not one of the trusted roots in the trust store, this {@term operation} can replace the certificate, private key and root CA certificate. The {@link Spec#cert},{@link Spec#key} and {@link Spec#rootCert} must be provided as input. </li> </ol> After this {@term operation} completes, the services using the certificate will be restarted for the new certificate to take effect. <p>The above three scenarios are only supported from vsphere 7.0 onwards.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "If the private key is not present in the VECS store.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "If the system failed to replace the TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1tls/put"
                }
            },
            "get": {
                "tags": [
                    "certificate_management/vcenter/tls"
                ],
                "summary": "Returns the rhttpproxy TLS certificate.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_resp"
                        }
                    },
                    "404": {
                        "description": "if the rhttpproxy certificate is not present in VECS store.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if failed due to generic exception.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1tls/get"
                }
            }
        },
        "/rest/vcenter/certificate-management/vcenter/tls-csr": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/tls_csr"
                ],
                "summary": "Generates a CSR with the given Spec.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_csr_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Certificate Signing Request.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_csr.create_resp"
                        }
                    },
                    "400": {
                        "description": "If CSR could not be created for given spec for a generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1tls-csr/post"
                }
            }
        },
        "/rest/vcenter/certificate-management/vcenter/tls?action=renew": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/tls"
                ],
                "summary": "Renews the TLS certificate for the given duration period. <p>After this {@term operation} completes, the services using the certificate will be restarted for the new certificate to take effect.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_renew"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the system failed to renew the TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "renew",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1tls?action=renew/post"
                }
            }
        },
        "/rest/vcenter/certificate-management/vcenter/tls?action=replace-vmca-signed": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/tls"
                ],
                "summary": "Replace MACHINE SSL with VMCA signed one with the given Spec.The system will go for restart. <p> After this {@term operation} completes, the services using the certificate will be restarted for the new certificate to take effect.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_replace_vmca_signed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the system failed to replace the machine ssl certificate",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "replace_vmca_signed",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1tls?action=replace-vmca-signed/post"
                }
            }
        },
        "/rest/vcenter/certificate-management/vcenter/trusted-root-chains": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ],
                "summary": "Creates a new trusted root certificate chain from the CreateSpec.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The unique identifier for the new trusted root chain.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.create_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "if a trusted root certificate chain exists with id in given spec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.already_exists_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1trusted-root-chains/post"
                }
            },
            "get": {
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ],
                "summary": "Returns summary information for each trusted root certificate chain.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of trusted root certificate chains summaries.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.list_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1trusted-root-chains/get"
                }
            }
        },
        "/rest/vcenter/certificate-management/vcenter/trusted-root-chains/{chain}": {
            "get": {
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ],
                "summary": "Retrieve a trusted root certificate chain for a given identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "chain",
                        "description": "Unique identifier for a trusted root cert chain."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TrustedRootChain.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a trusted root certificate chain does not exist for given id.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1trusted-root-chains~1{chain}/get"
                }
            },
            "delete": {
                "tags": [
                    "certificate_management/vcenter/trusted_root_chains"
                ],
                "summary": "Deletes trusted root certificate chain for a given identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "chain",
                        "description": "Unique identifier for a trusted root cert chain."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a trusted root certificate chain does not exist for given id.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1trusted-root-chains~1{chain}/delete"
                }
            }
        },
        "/rest/vcenter/certificate-management/vcenter/vmca-root": {
            "post": {
                "tags": [
                    "certificate_management/vcenter/vmca_root"
                ],
                "summary": "Replace Root Certificate with VMCA signed one using the given Spec. <p>After this {@term operation} completes, the services using the certificate will be restarted for the new certificate to take effect.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.certificate_management.vcenter.vmca_root_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the system failed to renew the TLS certificate.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1certificate-management~1vcenter~1vmca-root/post"
                }
            }
        },
        "/rest/vcenter/cluster": {
            "get": {
                "tags": [
                    "cluster"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) clusters in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.clusters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of clusters that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that clusters must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "filter.folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the cluster for the cluster to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the cluster for the cluster to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the clusters matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.cluster.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 clusters match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1cluster/get"
                }
            }
        },
        "/rest/vcenter/cluster/{cluster}": {
            "get": {
                "tags": [
                    "cluster"
                ],
                "summary": "Retrieves information about the cluster corresponding to {@param.name cluster}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cluster",
                        "description": "Identifier of the cluster."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the cluster associated with {@param.name cluster}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.cluster_resp"
                        }
                    },
                    "404": {
                        "description": "if there is no cluster associated with {@param.name cluster} in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the session id is missing from the request or the corresponding session object cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1cluster~1{cluster}/get"
                }
            }
        },
        "/rest/vcenter/content/registries/harbor": {
            "post": {
                "tags": [
                    "content/registries/harbor"
                ],
                "summary": "Creates a Harbor registry in the cluster.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.content.registries.harbor_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the deployed registry.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.content.registries.harbor.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if resources/objects could not be located.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistry and/or CertificateAuthority.Manage privilege, or user does not have ContentLibrary.ManageClusterRegistryResource privilege on {@link CreateSpec#cluster}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1harbor/post"
                }
            },
            "get": {
                "tags": [
                    "content/registries/harbor"
                ],
                "summary": "Returns basic information of all Harbor registries.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The list of basic information of all Harbor registries.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.content.registries.harbor.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1harbor/get"
                }
            }
        },
        "/rest/vcenter/content/registries/harbor/{registry}": {
            "get": {
                "tags": [
                    "content/registries/harbor"
                ],
                "summary": "Get detailed information of the Harbor registry.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the registry.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.content.registries.harbor_resp"
                        }
                    },
                    "404": {
                        "description": "if a Harbor registry specified by {@param.name registry} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1harbor~1{registry}/get"
                }
            },
            "delete": {
                "tags": [
                    "content/registries/harbor"
                ],
                "summary": "Delete the Harbor registry in the cluster. All Harbor projects, repositories and images will be deleted upon Harbor registry deletion.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if a registry specified by {@param.name registry} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistry privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1harbor~1{registry}/delete"
                }
            }
        },
        "/rest/vcenter/content/registries/harbor/{registry}/projects": {
            "post": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Creates a project in a Harbor registry using the supplied specification. In vSphere 7.0, a Harbor registry is deployed in a vSphere cluster with vSphere namespaces enabled. When a namespace is created, a project with same name as the namespace is created in the Harbor registry, so this {@term operation} should not be called.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the Registry."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.content.registries.harbor.projects_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the newly created Harbor project.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.content.registries.harbor.projects.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if a registry specified by {@param.name registry} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistryProject privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1harbor~1{registry}~1projects/post"
                }
            },
            "get": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Returns basic information of all projects in a Harbor registry.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of summary information of all Harbor projects.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.content.registries.harbor.projects.list_resp"
                        }
                    },
                    "404": {
                        "description": "if {@param.name registry} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1harbor~1{registry}~1projects/get"
                }
            }
        },
        "/rest/vcenter/content/registries/harbor/{registry}/projects/{project}": {
            "get": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Returns detailed information about the specified Harbor project.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "project",
                        "description": "Identifier of the Harbor project."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information about the specified Harbor project.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.content.registries.harbor.projects_resp"
                        }
                    },
                    "404": {
                        "description": "if {@param.name registry} or {@param.name project} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1harbor~1{registry}~1projects~1{project}/get"
                }
            },
            "delete": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Deletes the specified project from Harbor registry. Repositories and images in the project will be removed upon project deletion. Storage space of deleted images in the project will be reclaimed through next scheduled Harbor registry garbage collection. In vSphere 7.0, a Harbor registry is deployed in a vSphere cluster with vSphere namespaces enabled. When a namespace is deleted, a project with same name as the namespace is deleted from the Harbor registry, so this {@term operation} should not be called.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "project",
                        "description": "Identifier of the Harbor project."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if {@param.name registry} or {@param.name project} cannot be found. In vSphere 7.0, the existing project could have been deleted automatically when a namespace with the same name is deleted.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistryProject privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1harbor~1{registry}~1projects~1{project}/delete"
                }
            }
        },
        "/rest/vcenter/content/registries/harbor/{registry}/projects/{project}?action=purge": {
            "post": {
                "tags": [
                    "content/registries/harbor/projects"
                ],
                "summary": "Remove all repositories, images and members in the project. Storage space of deleted images in the project will be reclaimed through next scheduled Harbor registry garbage collection.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "project",
                        "description": "Identifier of the Harbor project."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if {@param.name registry} or {@param.name project} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have ContentLibrary.ManageRegistryProject privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "purge",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1harbor~1{registry}~1projects~1{project}?action=purge/post"
                }
            }
        },
        "/rest/vcenter/content/registries/{registry}/health": {
            "get": {
                "tags": [
                    "content/registries/health"
                ],
                "summary": "Returns the health information of a container registry in the vCenter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "registry",
                        "description": "Identifier of the registry."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Health information of the registry.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.content.registries.health_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the registry does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user is not a member of the Administrators",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1content~1registries~1{registry}~1health/get"
                }
            }
        },
        "/rest/vcenter/datacenter": {
            "post": {
                "tags": [
                    "datacenter"
                ],
                "summary": "Create a new datacenter in the vCenter inventory",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.datacenter_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the newly created datacenter",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datacenter.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the datacenter name is empty or invalid as per the underlying implementation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "404": {
                        "description": "if the datacenter folder cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1datacenter/post"
                }
            },
            "get": {
                "tags": [
                    "datacenter"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) datacenters in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of datacenters that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that datacenters must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "filter.folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the datacenters for the datacenter to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the datacenters matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datacenter.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 datacenters match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1datacenter/get"
                }
            }
        },
        "/rest/vcenter/datacenter/{datacenter}": {
            "get": {
                "tags": [
                    "datacenter"
                ],
                "summary": "Retrieves information about the datacenter corresponding to {@param.name datacenter}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "datacenter",
                        "description": "Identifier of the datacenter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the datacenter associated with {@param.name datacenter}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datacenter_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if there is no datacenter associated with {@param.name datacenter} in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1datacenter~1{datacenter}/get"
                }
            },
            "delete": {
                "tags": [
                    "datacenter"
                ],
                "summary": "Delete an empty datacenter from the vCenter Server",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "datacenter",
                        "description": "Identifier of the datacenter to be deleted."
                    },
                    {
                        "required": false,
                        "type": "boolean",
                        "in": "query",
                        "name": "force",
                        "description": "If true, delete the datacenter even if it is not empty."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the datacenter associated with {@param.name datacenter} is not empty.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_in_use_error"
                        }
                    },
                    "404": {
                        "description": "if there is no datacenter associated with {@param.name datacenter} in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1datacenter~1{datacenter}/delete"
                }
            }
        },
        "/rest/vcenter/datastore": {
            "get": {
                "tags": [
                    "datastore"
                ],
                "summary": "Returns information about at most 2500 visible (subject to permission checks) datastores in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.datastores",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of datastores that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that datastores must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "filter.types",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "VMFS",
                                "NFS",
                                "NFS41",
                                "CIFS",
                                "VSAN",
                                "VFFS",
                                "VVOL"
                            ]
                        },
                        "description": "Types that datastores must have to match the filter (see {@link Summary#type})."
                    },
                    {
                        "in": "query",
                        "name": "filter.folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the datastore for the datastore to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the datastore for the datastore to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the datastores matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datastore.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 2500 datastores match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1datastore/get"
                }
            }
        },
        "/rest/vcenter/datastore/{datastore}": {
            "get": {
                "tags": [
                    "datastore"
                ],
                "summary": "Retrieves information about the datastore indicated by {@param.name datastore}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "datastore",
                        "description": "Identifier of the datastore for which information should be retrieved."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the datastore associated with {@param.name datastore}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datastore_resp"
                        }
                    },
                    "404": {
                        "description": "if the datastore indicated by {@param.name datastore} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1datastore~1{datastore}/get"
                }
            }
        },
        "/rest/vcenter/datastore/{datastore}/default-policy": {
            "get": {
                "tags": [
                    "datastore/default_policy"
                ],
                "summary": "Returns the identifier of the current default storage policy associated with the specified datastore.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "datastore",
                        "description": "Identifier of the datastore for which the default policy is requested."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the default storage policy associated with the specified datastore.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.datastore.default_policy_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the specified datastore does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required priveleges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1datastore~1{datastore}~1default-policy/get"
                }
            }
        },
        "/rest/vcenter/deployment": {
            "get": {
                "tags": [
                    "deployment"
                ],
                "summary": "Get the current status of the appliance deployment.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the status information about the appliance.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "404": {
                        "description": "if appliance state cannot be determined.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment/get"
                }
            }
        },
        "/rest/vcenter/deployment/history": {
            "get": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Get the current status of the vCenter historical data import.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the status information about the historical data import status.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.import_history_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "Generic error",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "get",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1history/get"
                }
            }
        },
        "/rest/vcenter/deployment/history?action=cancel": {
            "post": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Cancels the task for importing vCenter historical data.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "Generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "cancel",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1history?action=cancel/post"
                }
            }
        },
        "/rest/vcenter/deployment/history?action=pause": {
            "post": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Pauses the task for importing vCenter historical data.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "Generic error",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "pause",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1history?action=pause/post"
                }
            }
        },
        "/rest/vcenter/deployment/history?action=resume": {
            "post": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Resumes the task for importing vCenter historical data.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "Generic error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "resume",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1history?action=resume/post"
                }
            }
        },
        "/rest/vcenter/deployment/history?action=start": {
            "post": {
                "tags": [
                    "deployment/import_history"
                ],
                "summary": "Creates and starts task for importing vCenter historical data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.import_history_start"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the caller is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "Generic error",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "start",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1history?action=start/post"
                }
            }
        },
        "/rest/vcenter/deployment/install": {
            "get": {
                "tags": [
                    "deployment/install"
                ],
                "summary": "Get the parameters used to configure the ongoing appliance installation.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "InstallSpec parameters being used to configure appliance install.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in INSTALL_PROGRESS state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1install/get"
                }
            }
        },
        "/rest/vcenter/deployment/install/initial-config/remote-psc/thumbprint": {
            "get": {
                "tags": [
                    "deployment/install/initial_config/remote_psc/thumbprint"
                ],
                "summary": "Gets the SHA1 thumbprint of the remote PSC.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "spec.address",
                        "type": "string",
                        "description": "The IP address or DNS resolvable name of the remote PSC.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "spec.https_port",
                        "type": "integer",
                        "description": "The HTTPS port of the remote PSC.",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The thumbprint of the specified remote PSC",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.initial_config.remote_psc.thumbprint_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "on exception.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1install~1initial-config~1remote-psc~1thumbprint/get"
                }
            }
        },
        "/rest/vcenter/deployment/install/psc/replicated?action=check": {
            "post": {
                "tags": [
                    "deployment/install/psc/replicated"
                ],
                "summary": "Checks whether the provided remote PSC is reachable and can be replicated.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.psc.replicated_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.psc.replicated.check_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1install~1psc~1replicated?action=check/post"
                }
            }
        },
        "/rest/vcenter/deployment/install/psc/standalone?action=check": {
            "post": {
                "tags": [
                    "deployment/install/psc/standalone"
                ],
                "summary": "Checks that the information to configure a non-replicated PSC satisfies the requirements.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.psc.standalone_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.psc.standalone.check_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1install~1psc~1standalone?action=check/post"
                }
            }
        },
        "/rest/vcenter/deployment/install/remote-psc?action=check": {
            "post": {
                "tags": [
                    "deployment/install/remote_psc"
                ],
                "summary": "Checks whether the remote PSC is reachable and the deployed vCenter Server can be registered with the remote PSC.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.remote_psc_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.remote_psc.check_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1install~1remote-psc?action=check/post"
                }
            }
        },
        "/rest/vcenter/deployment/install?action=cancel": {
            "post": {
                "tags": [
                    "deployment/install"
                ],
                "summary": "Cancel the appliance installation that is in progress.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in CONFIG_IN_PROGRESS state and if the operation is not INSTALL.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "cancel",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1install?action=cancel/post"
                }
            }
        },
        "/rest/vcenter/deployment/install?action=check": {
            "post": {
                "tags": [
                    "deployment/install"
                ],
                "summary": "Run sanity checks using the InstallSpec parameters passed.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckInfo containing the check results.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install.check_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1install?action=check/post"
                }
            }
        },
        "/rest/vcenter/deployment/install?action=start": {
            "post": {
                "tags": [
                    "deployment/install"
                ],
                "summary": "Start the appliance installation.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.install_start"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1install?action=start/post"
                }
            }
        },
        "/rest/vcenter/deployment/migrate": {
            "get": {
                "tags": [
                    "deployment/migrate"
                ],
                "summary": "Get the MigrateSpec parameters used to configure the ongoing appliance migration.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "MigrateSpec parameters being used to configure appliance migration.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in MIGRATE_PROGRESS state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1migrate/get"
                }
            }
        },
        "/rest/vcenter/deployment/migrate/active-directory?action=check": {
            "post": {
                "tags": [
                    "deployment/migrate/active_directory"
                ],
                "summary": "Checks whether the provided Active Directory user has permission to join the migrated vCenter Server appliance to the domain.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate.active_directory_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the checks that were performed.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate.active_directory.check_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1migrate~1active-directory?action=check/post"
                }
            }
        },
        "/rest/vcenter/deployment/migrate?action=cancel": {
            "post": {
                "tags": [
                    "deployment/migrate"
                ],
                "summary": "Cancel the appliance migration that is in progress.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in CONFIG_IN_PROGRESS state and if the operation is not INSTALL.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "cancel",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1migrate?action=cancel/post"
                }
            }
        },
        "/rest/vcenter/deployment/migrate?action=check": {
            "post": {
                "tags": [
                    "deployment/migrate"
                ],
                "summary": "Run sanity checks using the MigrateSpec parameters passed.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckInfo containing the check results.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate.check_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1migrate?action=check/post"
                }
            }
        },
        "/rest/vcenter/deployment/migrate?action=start": {
            "post": {
                "tags": [
                    "deployment/migrate"
                ],
                "summary": "Start the appliance migration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.migrate_start"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1migrate?action=start/post"
                }
            }
        },
        "/rest/vcenter/deployment/question": {
            "get": {
                "tags": [
                    "deployment/question"
                ],
                "summary": "Get the question that was raised during the configuration.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the question.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.question_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in QUESTION_RAISED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "500": {
                        "description": "if questions could not be retrieved although the appliance is in QUESTION_RAISED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.internal_server_error_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1question/get"
                }
            }
        },
        "/rest/vcenter/deployment/question?action=answer": {
            "post": {
                "tags": [
                    "deployment/question"
                ],
                "summary": "Supply answer to the raised question.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.question_answer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is NOT in QUESTION_RAISED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "500": {
                        "description": "if answer file could not be created.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.internal_server_error_error"
                        }
                    }
                },
                "operationId": "answer",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1question?action=answer/post"
                }
            }
        },
        "/rest/vcenter/deployment/upgrade": {
            "get": {
                "tags": [
                    "deployment/upgrade"
                ],
                "summary": "Get the UpgradeSpec parameters used to configure the ongoing appliance upgrade.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "UpgradeSpec parameters being used to configure appliance upgrade.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.upgrade_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in UPGRADE_PROGRESS state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1upgrade/get"
                }
            }
        },
        "/rest/vcenter/deployment/upgrade?action=cancel": {
            "post": {
                "tags": [
                    "deployment/upgrade"
                ],
                "summary": "Cancel the appliance upgrade that is in progress.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in CONFIG_IN_PROGRESS state and if the operation is not INSTALL.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "cancel",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1upgrade?action=cancel/post"
                }
            }
        },
        "/rest/vcenter/deployment/upgrade?action=check": {
            "post": {
                "tags": [
                    "deployment/upgrade"
                ],
                "summary": "Run sanity checks using the UpgradeSpec parameters passed.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.upgrade_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckInfo containing the check results.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.upgrade.check_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1upgrade?action=check/post"
                }
            }
        },
        "/rest/vcenter/deployment/upgrade?action=start": {
            "post": {
                "tags": [
                    "deployment/upgrade"
                ],
                "summary": "Start the appliance installation.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.deployment.upgrade_start"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment~1upgrade?action=start/post"
                }
            }
        },
        "/rest/vcenter/deployment?action=rollback": {
            "post": {
                "tags": [
                    "deployment"
                ],
                "summary": "Rollback a failed appliance so it can be configured once again.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in FAILED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "operationId": "rollback",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1deployment?action=rollback/post"
                }
            }
        },
        "/rest/vcenter/folder": {
            "get": {
                "tags": [
                    "folder"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) folders in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of folders that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that folders must have to match the filter (see {@link Summary#name})."
                    },
                    {
                        "in": "query",
                        "name": "filter.type",
                        "type": "string",
                        "enum": [
                            "DATACENTER",
                            "DATASTORE",
                            "HOST",
                            "NETWORK",
                            "VIRTUAL_MACHINE"
                        ],
                        "description": "The {@name Type} {@term enumerated type} defines the type of a vCenter Server folder.  The type of a folder determines what what kinds of children can be contained in the folder."
                    },
                    {
                        "in": "query",
                        "name": "filter.parent_folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the folder for the folder to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the folder for the folder to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the folders matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.folder.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 folders match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1folder/get"
                }
            }
        },
        "/rest/vcenter/guest/customization-specs": {
            "post": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Creates a customization specification.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The name of the customization specification that is created.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the specified specification is not a valid one.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1guest~1customization-specs/post"
                }
            },
            "get": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) guest customization specifications in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that guest customization specifications must have to match the filter (see {@link Summary#name})."
                    },
                    {
                        "in": "query",
                        "name": "filter.OS_type",
                        "type": "string",
                        "enum": [
                            "WINDOWS",
                            "LINUX"
                        ],
                        "description": "The {@name OsType} {@term enumerated type} defines the types of guest operating systems for which guest customization is supported."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the guest customization specifications matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 guest customization specifications match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1guest~1customization-specs/get"
                }
            }
        },
        "/rest/vcenter/guest/customization-specs/{name}": {
            "post": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Sets an existing specification, possibly after retrieving (by using {@link #get}) and editing it.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The name of the customization specification that needs to be set."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If, based on the item's fingerprint value, the set process detects that the specification has changed since its retrieval, then the {@term operation} throws InvalidArgument exception to warn the client that he might overwrite another client's change.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1guest~1customization-specs~1{name}/put"
                }
            },
            "get": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Returns the guest customization specification from vCenter with the specified identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The name of the customization specification."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A customization spec with the specified identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_resp"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1guest~1customization-specs~1{name}/get"
                }
            },
            "delete": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Deletes a customization specification with the specified identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The name of the customization specification that needs to be deleted."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if a customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1guest~1customization-specs~1{name}/delete"
                }
            }
        },
        "/rest/vcenter/guest/customization-specs/{name}?action=export": {
            "post": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Returns the content of the customization specification in the specified format. Note that any passwords in the customization specification will be set to blank values during the export {@term operation}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "name",
                        "description": "The name of the customization specification that has to be returned."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_export"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The string representation of the customization specification in the specified format.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs.export_resp"
                        }
                    },
                    "400": {
                        "description": "If value of {@param.name format} is not valid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "404": {
                        "description": "if the customization specification is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "export",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1guest~1customization-specs~1{name}?action=export/post"
                }
            }
        },
        "/rest/vcenter/guest/customization-specs?action=import": {
            "post": {
                "tags": [
                    "guest/customization_specs"
                ],
                "summary": "Converts a well formatted string to a {@link CreateSpec}. The resulting object can be passed to {@link #create} {@term operation}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs_import_specification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A proper specification of type {@link CreateSpec}",
                        "schema": {
                            "$ref": "#/definitions/vcenter.guest.customization_specs.import_specification_resp"
                        }
                    },
                    "400": {
                        "description": "if the specified content cannot be properly converted into a proper valid {@link CreateSpec} object.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "import_specification",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1guest~1customization-specs?action=import/post"
                }
            }
        },
        "/rest/vcenter/host": {
            "post": {
                "tags": [
                    "host"
                ],
                "summary": "Add a new standalone host in the vCenter inventory. The newly connected host will be in connected state. The vCenter Server will verify the SSL certificate before adding the host to its inventory. In the case where the SSL certificate cannot be verified because the Certificate Authority is not recognized or the certificate is self signed, the vCenter Server will fall back to thumbprint verification mode as defined by {@link CreateSpec.ThumbprintVerification}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.host_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created identifier of the host in vCenter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.host.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the software version on the host is not supported.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if there is no folder associated with the {@name CreateSpec#folder} {@term field} in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "401": {
                        "description": "if the user name or password for the administration account on the host are invalid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1host/post"
                }
            },
            "get": {
                "tags": [
                    "host"
                ],
                "summary": "Returns information about at most 2500 visible (subject to permission checks) hosts in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.hosts",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of hosts that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that hosts must have to match the filter (see {@link Summary#name})."
                    },
                    {
                        "in": "query",
                        "name": "filter.folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the hosts for the hosts to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the hosts for the hosts to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.standalone",
                        "type": "boolean",
                        "description": "If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.clusters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Clusters that must contain the hosts for the hosts to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.connection_states",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "CONNECTED",
                                "DISCONNECTED",
                                "NOT_RESPONDING"
                            ]
                        },
                        "description": "Connection states that a host must be in to match the filter (see {@link Summary#connectionState}."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the hosts matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.host.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 2500 hosts match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1host/get"
                }
            }
        },
        "/rest/vcenter/host/{host}": {
            "delete": {
                "tags": [
                    "host"
                ],
                "summary": "Remove a standalone host from the vCenter Server.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "Identifier of the host to be deleted."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the host associated with {@param.name host} is in a vCenter cluster",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_in_use_error"
                        }
                    },
                    "404": {
                        "description": "if there is no host associated with {@param.name host} in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1host~1{host}/delete"
                }
            }
        },
        "/rest/vcenter/host/{host}/connect": {
            "post": {
                "tags": [
                    "host"
                ],
                "summary": "Connect to the host corresponding to {@param.name host} previously added to the vCenter server.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "Identifier of the host to be reconnected."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if there is no host associated with {@param.name host} in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1host~1{host}?action=connect/post"
                }
            }
        },
        "/rest/vcenter/host/{host}/disconnect": {
            "post": {
                "tags": [
                    "host"
                ],
                "summary": "Disconnect the host corresponding to {@param.name host} from the vCenter server",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "host",
                        "description": "Identifier of the host to be disconnected."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if there is no host associated with {@param.name host} in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1host~1{host}?action=disconnect/post"
                }
            }
        },
        "/rest/vcenter/identity/providers": {
            "post": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Create a vCenter Server identity provider.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the created identity provider.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers.create_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "if provider exists for provider ID in given spec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.already_exists_error"
                        }
                    }
                },
                "operationId": "create",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1identity~1providers/post"
                }
            },
            "get": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Retrieve all identity providers.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the identity providers.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers.list_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1identity~1providers/get"
                }
            }
        },
        "/rest/vcenter/identity/providers/{provider}": {
            "get": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Retrieve detailed information of the specified identity provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "the identifier of the provider"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information of the specified identity provider.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers_resp"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if no provider found with the given provider identifier.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1identity~1providers~1{provider}/get"
                }
            },
            "patch": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Update a vCenter Server identity provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "the identifier of the provider to update"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.identity.providers_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "if invalid arguments are provided in updateSpec.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "404": {
                        "description": "if no provider found with the given provider identifier.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "update",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1identity~1providers~1{provider}/patch"
                }
            },
            "delete": {
                "tags": [
                    "identity/providers"
                ],
                "summary": "Delete a vCenter Server identity provider.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "provider",
                        "description": "the identifier of the provider to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "403": {
                        "description": "if authorization is not given to caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if no provider found with the given provider identifier.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "delete",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1identity~1providers~1{provider}/delete"
                }
            }
        },
        "/rest/vcenter/network": {
            "get": {
                "tags": [
                    "network"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) networks in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.networks",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of networks that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that networks must have to match the filter (see {@link Summary#name})."
                    },
                    {
                        "in": "query",
                        "name": "filter.types",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "STANDARD_PORTGROUP",
                                "DISTRIBUTED_PORTGROUP",
                                "OPAQUE_NETWORK"
                            ]
                        },
                        "description": "Types that networks must have to match the filter (see {@link Summary#type})."
                    },
                    {
                        "in": "query",
                        "name": "filter.folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the network for the network to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the network for the network to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the networks matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.network.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1000 networks match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1network/get"
                }
            }
        },
        "/rest/vcenter/resource-pool": {
            "post": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Creates a resource pool.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The identifier of the newly created resource pool.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool.create_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to create the resource pool could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "404": {
                        "description": "If the resource specified in {@term parent} could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1resource-pool/post"
                }
            },
            "get": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Returns information about at most 1000 visible (subject to permission checks) resource pools in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.resource_pools",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of resource pools that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that resource pools must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "filter.parent_resource_pools",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Resource pools that must contain the resource pool for the resource pool to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the resource pool for the resource pool to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.hosts",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Hosts that must contain the resource pool for the resource pool to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.clusters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Clusters that must contain the resource pool for the resource pool to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the resource pools matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool.list_resp"
                        }
                    },
                    "400": {
                        "description": "If more than 1000 resource pools match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1resource-pool/get"
                }
            }
        },
        "/rest/vcenter/resource-pool/{resource_pool}": {
            "get": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Retrieves information about the resource pool indicated by {@param.name resourcePool}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "resource_pool",
                        "description": "Identifier of the resource pool for which information should be retrieved."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the resource pool.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool_resp"
                        }
                    },
                    "404": {
                        "description": "If the resource pool indicated by {@param.name resourcePool} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1resource-pool~1{resource_pool}/get"
                }
            },
            "patch": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Updates the configuration of a resource pool.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "resource_pool",
                        "description": "Identifier of the resource pool."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.resource_pool_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If any of the resources needed to reconfigure the resource pool could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "404": {
                        "description": "If the resource pool is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1resource-pool~1{resource_pool}/patch"
                }
            },
            "delete": {
                "tags": [
                    "resource_pool"
                ],
                "summary": "Deletes a resource pool.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "resource_pool",
                        "description": "Identifier of the resource pool to be deleted."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "If the resource pool is a root resource pool.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "If the resource pool is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "If the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "If the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "If the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1resource-pool~1{resource_pool}/delete"
                }
            }
        },
        "/rest/vcenter/services": {
            "get": {
                "tags": [
                    "services/service"
                ],
                "summary": "Lists details of vCenter services.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Map of service identifiers to service Info structures.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.services.service.list_details_resp"
                        }
                    },
                    "400": {
                        "description": "if any error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "list_details",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1services/get"
                }
            }
        },
        "/rest/vcenter/services/{service}": {
            "get": {
                "tags": [
                    "services/service"
                ],
                "summary": "Returns the state of a service.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service whose state is being queried."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service Info structure.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.services.service_resp"
                        }
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1services~1{service}/get"
                }
            },
            "patch": {
                "tags": [
                    "services/service"
                ],
                "summary": "Updates the properties of a service.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service whose properties are being updated."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.services.service_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the operation is denied in the current state of the service. If a start, stop or restart operation is in progress, update operation will fail with this error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1services~1{service}/patch"
                }
            }
        },
        "/rest/vcenter/services/{service}/restart": {
            "post": {
                "tags": [
                    "services/service"
                ],
                "summary": "Restarts a service",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service to restart"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "504": {
                        "description": "if any timeout occurs during the execution of the restart operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.timed_out_error"
                        }
                    },
                    "400": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "restart",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1services~1{service}?action=restart/post"
                }
            }
        },
        "/rest/vcenter/services/{service}/start": {
            "post": {
                "tags": [
                    "services/service"
                ],
                "summary": "Starts a service",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service to start"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if any other error occurs during the execution of the operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "504": {
                        "description": "if any timeout occurs during the execution of the start operation. Timeout occurs when the service takes longer than StartTimeout to start.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.timed_out_error"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1services~1{service}?action=start/post"
                }
            }
        },
        "/rest/vcenter/services/{service}/stop": {
            "post": {
                "tags": [
                    "services/service"
                ],
                "summary": "Stops a service",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "service",
                        "description": "identifier of the service to stop"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the service associated with {@param.name service} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the operation is denied in the current state of the service. If a stop operation is in progress, issuing another stop operation will lead to this error.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "stop",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1services~1{service}?action=stop/post"
                }
            }
        },
        "/rest/vcenter/storage/policies": {
            "get": {
                "tags": [
                    "storage/policies"
                ],
                "summary": "Returns information about at most 1024 visible (subject to permission checks) storage solicies availabe in vCenter. These storage policies can be used for provisioning virtual machines or disks.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.policies",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of storage policies that can match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used Information about the storage policies.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 1024 storage policies exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1storage~1policies/get"
                }
            }
        },
        "/rest/vcenter/storage/policies/compliance/vm": {
            "get": {
                "tags": [
                    "storage/policies/compliance/VM"
                ],
                "summary": "Returns compliance information about at most 1000 virtual machines matching the filter {@link FilterSpec}. If there are no virtual machines matching the {@link FilterSpec} an empty List is returned. Virtual machines without storage policy association are not returned.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.status",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "COMPLIANT",
                                "NON_COMPLIANT",
                                "UNKNOWN_COMPLIANCE",
                                "NOT_APPLICABLE",
                                "OUT_OF_DATE"
                            ]
                        },
                        "description": "Compliance Status that a virtual machine must have to match the filter. Atleast one status must be specified."
                    },
                    {
                        "in": "query",
                        "name": "filter.vms",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of virtual machines that can match the filter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "compliance information about virtual machines matching the filter {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.list_resp"
                        }
                    },
                    "400": {
                        "description": "If more than 1000 results match the {@link FilterSpec}",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1storage~1policies~1compliance~1vm/get"
                }
            }
        },
        "/rest/vcenter/storage/policies/entities/compliance": {
            "get": {
                "tags": [
                    "storage/policies/compliance"
                ],
                "summary": "Returns compliance information about entities matching the filter {@link FilterSpec}. Entities without storage policy association are not returned.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.status",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "COMPLIANT",
                                "NON_COMPLIANT",
                                "UNKNOWN",
                                "NOT_APPLICABLE",
                                "OUT_OF_DATE"
                            ]
                        },
                        "description": "Compliance Status that a virtual machine must have to match the filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "compliance information about entities matching the filter {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.compliance.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#status} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1storage~1policies~1entities~1compliance/get"
                }
            }
        },
        "/rest/vcenter/storage/policies/{policy}/vm": {
            "get": {
                "tags": [
                    "storage/policies/VM"
                ],
                "summary": "Returns information about the virtual machines and/or their virtual disks that are  associated with the given storage policy.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "policy",
                        "description": "storage policy identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the virtual machines and/or their virtual disks that are associated with the given storage policy.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.VM.list_resp"
                        }
                    },
                    "404": {
                        "description": "if there is no policy associated with {@param.name policy} in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the backend server encounters some an error while processing the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service necessary to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required priveleges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1storage~1policies~1{policy}~1vm/get"
                }
            }
        },
        "/rest/vcenter/storage/policies/{policy}?action=check-compatibility": {
            "post": {
                "tags": [
                    "storage/policies"
                ],
                "summary": "Returns datastore compatibility summary about a specific storage policy.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "policy",
                        "description": "The storage policy identifier"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies_check_compatibility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "datastore compatibility summary about a specific storage policy.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.storage.policies.check_compatibility_resp"
                        }
                    },
                    "400": {
                        "description": "if input more than 1024 datastores.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "404": {
                        "description": "if the storage policy specified does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "check_compatibility",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1storage~1policies~1{policy}?action=check-compatibility/post"
                }
            }
        },
        "/rest/vcenter/system-config/deployment-type": {
            "get": {
                "tags": [
                    "system_config/deployment_type"
                ],
                "summary": "Get the type of the vCenter appliance.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The type of the vCenter appliance.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.system_config.deployment_type_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if appliance is not in CONFIGURED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "get",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1system-config~1deployment-type/get"
                }
            },
            "post": {
                "tags": [
                    "system_config/deployment_type"
                ],
                "summary": "Reconfigure the type of the vCenter appliance.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.system_config.deployment_type_reconfigure"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the appliance is not in INITIALIZED or CONFIGURED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    }
                },
                "operationId": "reconfigure",
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1system-config~1deployment-type/put"
                }
            }
        },
        "/rest/vcenter/system-config/psc-registration": {
            "post": {
                "tags": [
                    "system_config/psc_registration"
                ],
                "summary": "Repoint this vCenter Server appliance to a different external PSC.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.system_config.psc_registration_repoint"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is NOT in CONFIGURED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "repoint",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1system-config~1psc-registration?action=repoint/post"
                }
            },
            "get": {
                "tags": [
                    "system_config/psc_registration"
                ],
                "summary": "Get information of the PSC that this appliance is registered with.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing information about the external PSC node this appliance is registered with.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.system_config.psc_registration_resp"
                        }
                    },
                    "401": {
                        "description": "if the caller is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "400": {
                        "description": "if the appliance is in NOT_INITIALIZED state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1system-config~1psc-registration/get"
                }
            }
        },
        "/rest/vcenter/tokenservice/token-exchange": {
            "post": {
                "tags": [
                    "tokenservice/token_exchange"
                ],
                "summary": "Exchanges incoming token based on the spec and current client authorization data. <p>This {@term operation} has been deprecated in the vSphere 7.0 U2 release. Use {@code vcenter.authentication.Token#issue} instead.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.tokenservice.token_exchange_exchange"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{@link Info} {@term structure} that contains new token.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.tokenservice.token_exchange.exchange_resp"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_request_error"
                        }
                    },
                    "500": {
                        "description": "If the server is unwilling or unable to issue a token for all the target services indicated by the {@link ExchangeSpec#resource} or {@link ExchangeSpec#audience} parameters.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.tokenservice.invalid_scope_error"
                        }
                    },
                    "403": {
                        "description": "if authorization is not given to a caller.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "exchange",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1authentication~1token/post"
                }
            }
        },
        "/rest/vcenter/topology/nodes": {
            "get": {
                "tags": [
                    "topology/nodes"
                ],
                "summary": "Returns information about all vCenter and Platform Services Controller nodes matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.types",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "VCSA_EMBEDDED",
                                "VCSA_EXTERNAL",
                                "PSC_EXTERNAL"
                            ]
                        },
                        "description": "Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see {@link ApplianceType}."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "commonly used information for all vCenter and Platform Services Controller nodes matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.topology.nodes.list_resp"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#types} {@term field} contains a value that is not supported.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1topology~1nodes/get"
                }
            }
        },
        "/rest/vcenter/topology/nodes/{node}": {
            "get": {
                "tags": [
                    "topology/nodes"
                ],
                "summary": "Retrieve details for a given identifier of the vCenter or Platform Services Controller node.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "node",
                        "description": "Identifier of the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "vCenter or Platform Services Controller node details with replication partners and client affinity information as applicable. See {@link Info}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.topology.nodes_resp"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "if a node doesn't exist for given node identifier.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1topology~1nodes~1{node}/get"
                }
            }
        },
        "/rest/vcenter/topology/replication-status": {
            "get": {
                "tags": [
                    "topology/replication_status"
                ],
                "summary": "Returns the replication information of vCenter and Platform Services Controller nodes of type VCSA_EMBEDDED/PSC_EXTERNAL (see {@link Nodes.Info#type}) matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.nodes",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifier that a vCenter and Platform Services Controller node must have to match the filter. (see {@link Summary#node})."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used replication information about vCenter and Platform Services Controller nodes matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.topology.replication_status.list_resp"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "if the {@link FilterSpec#nodes} {@term field} contains a invalid value.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1topology~1replication-status/get"
                }
            }
        },
        "/rest/vcenter/vcha/cluster/active?action=get": {
            "post": {
                "tags": [
                    "vcha/cluster/active"
                ],
                "summary": "Retrieves information about the active node of a VCHA cluster.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.active_get"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Info Information about the VCHA network and placement of the active node.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.active_resp"
                        }
                    },
                    "400": {
                        "description": "If the management interface IP address assignment is not static.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. <ul> <li> If {@param.name partial} is false or unset, then the operation execution requires the Global.VCServer privilege.</li> <li> If {@param.name partial} is true, then the operation execution requires the System.Read privilege.</li> </ul>",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "404": {
                        "description": "If the active virtual machine is not managed by the specified vCenter server for the active node.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster~1active?action=get/post"
                }
            }
        },
        "/rest/vcenter/vcha/cluster/deployment-type": {
            "get": {
                "tags": [
                    "vcha/cluster/deployment_type"
                ],
                "summary": "Retrieves the deployment type of a VCHA cluster.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the deployment type information of the the VCHA cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.deployment_type_resp"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster~1deployment-type/get"
                }
            }
        },
        "/rest/vcenter/vcha/cluster/mode": {
            "get": {
                "tags": [
                    "vcha/cluster/mode"
                ],
                "summary": "Retrieves the current mode of a VCHA cluster.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the mode of the the VCHA cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.mode_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster~1mode/get"
                }
            }
        },
        "/rest/vcenter/vcha/cluster/mode?vmw-task=true": {
            "put": {
                "tags": [
                    "vcha/cluster/mode"
                ],
                "summary": "Manipulates the mode of a VCHA Cluster. Following mode transitions are allowed:<br> enabled -> disabled - Allowed only in healthy and degraded states.<br> enabled -> maintenance - Allowed only in healthy state.<br> disabled -> enabled - Allowed only in healthy state.<br> maintenance -> enabled - Allowed only in healthy state with all nodes are running the same version.<br> maintenance -> disabled - Allowed only in healthy state with all nodes are running the same version.<br> All other transitions are not allowed. <p> VCHA Cluster configuration remains intact in any of the cluster modes.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.mode_set_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.mode.set_task_resp"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "set$task",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster~1mode?vmw-task=true/put"
                }
            }
        },
        "/rest/vcenter/vcha/cluster/passive?action=check": {
            "post": {
                "tags": [
                    "vcha/cluster/passive"
                ],
                "summary": "Validates the specified passive node's placement configuration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.passive_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckResult structure containing errors and warnings.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.passive.check_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "If the active virtual machine is not managed by the specified vCenter server for the active node.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster~1passive?action=check/post"
                }
            }
        },
        "/rest/vcenter/vcha/cluster/passive?action=redeploy&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster/passive"
                ],
                "summary": "Creates the passive node in a degraded cluster with node location information and pre-existing VCHA cluster configuration from the active node.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.passive_redeploy_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.passive.redeploy_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "redeploy$task",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster~1passive?action=redeploy&vmw-task=true/post"
                }
            }
        },
        "/rest/vcenter/vcha/cluster/witness?action=check": {
            "post": {
                "tags": [
                    "vcha/cluster/witness"
                ],
                "summary": "Validates the specified witness node's placement configuration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.witness_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CheckResult structure containing errors and warnings.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.witness.check_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "If the active virtual machine is not managed by the specified vCenter server for the active node.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster~1witness?action=check/post"
                }
            }
        },
        "/rest/vcenter/vcha/cluster/witness?action=redeploy&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster/witness"
                ],
                "summary": "Creates the witness node in a degraded cluster with node location information and pre-existing VCHA cluster configuration from the active node.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.witness_redeploy_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.witness.redeploy_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "redeploy$task",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster~1witness?action=redeploy&vmw-task=true/post"
                }
            }
        },
        "/rest/vcenter/vcha/cluster?action=deploy&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster"
                ],
                "summary": "Prepares, clones, and configures a VCHA cluster.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_deploy_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.deploy_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "deploy$task",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster?action=deploy&vmw-task=true/post"
                }
            }
        },
        "/rest/vcenter/vcha/cluster?action=failover&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster"
                ],
                "summary": "Initiates failover from the active vCenter node to the passive node. <p> For forced failover, Active node immediately initiates a failover. This may result into a data loss after failover. <p> For planned failover, Active node flushes all the state to the Passive node, waits for the flush to complete before causing a failover. After the failover, Passive node starts without any data loss. <p> A failover is allowed only in the following cases: <ol> <li> Cluster's mode is enabled and all cluster members are present.</li> <li> Cluster's mode is maintenance and all cluster members are present.</li> </ol>",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_failover_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.failover_task_resp"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "failover$task",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster?action=failover&vmw-task=true/post"
                }
            }
        },
        "/rest/vcenter/vcha/cluster?action=get": {
            "post": {
                "tags": [
                    "vcha/cluster"
                ],
                "summary": "Retrieves the status of a VCHA cluster.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_get"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Info structure containing the VCHA configuration and health information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. <ul> <li> If {@param.name partial} is false or unset, then the operation execution requires the Global.VCServer privilege.</li> <li> If {@param.name partial} is true, then the operation execution requires the System.Read privilege.</li> </ul>",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster?action=get/post"
                }
            }
        },
        "/rest/vcenter/vcha/cluster?action=undeploy&vmw-task=true": {
            "post": {
                "tags": [
                    "vcha/cluster"
                ],
                "summary": "Destroys the VCHA cluster and removes all VCHA specific information from the VCVA appliance. Optionally, the passive and witness node virtual machines will be deleted only if VCHA was deployed using automatic deployment. The active node in the cluster continues to run as a standalone VCVA appliance after the destroy operation has been performed. <p> If the VCHA cluster is in a transition state and not configured, then the VCHA cluster specific information is removed.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster_undeploy_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.cluster.undeploy_task_resp"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "If the passive virtual machine is not managed by the specified vCenter server.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the Global.VCServer privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "undeploy$task",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1cluster?action=undeploy&vmw-task=true/post"
                }
            }
        },
        "/rest/vcenter/vcha/operations": {
            "get": {
                "tags": [
                    "vcha/operations"
                ],
                "summary": "Retrieves the current active and disabled operations of a VCHA cluster.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Info structure containing the current running and disabled operations of a VCHA cluster.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vcha.operations_resp"
                        }
                    },
                    "403": {
                        "description": "If the user has insufficient privilege to perform the operation. Operation execution requires the System.Read privilege.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    },
                    "400": {
                        "description": "If any other error occurs.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vcha~1operations/get"
                }
            }
        },
        "/rest/vcenter/vm": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Creates a virtual machine.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.create_resp"
                        }
                    },
                    "400": {
                        "description": "if {@name CreateSpec#guestOS} is not supported for the requested virtual hardware version and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm/post"
                }
            },
            "get": {
                "tags": [
                    "VM"
                ],
                "summary": "Returns information about at most 4000 visible (subject to permission checks) virtual machines in vCenter matching the {@link FilterSpec}.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter.vms",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifiers of virtual machines that can match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.names",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names that virtual machines must have to match the filter (see {@link Info#name})."
                    },
                    {
                        "in": "query",
                        "name": "filter.folders",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Folders that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.datacenters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Datacenters that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.hosts",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Hosts that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.clusters",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Clusters that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.resource_pools",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        },
                        "description": "Resource pools that must contain the virtual machine for the virtual machine to match the filter."
                    },
                    {
                        "in": "query",
                        "name": "filter.power_states",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string",
                            "enum": [
                                "POWERED_OFF",
                                "POWERED_ON",
                                "SUSPENDED"
                            ]
                        },
                        "description": "Power states that a virtual machine must be in to match the filter (see {@link Power.Info#state}."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the virtual machines matching the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.list_resp"
                        }
                    },
                    "400": {
                        "description": "if more than 4000 virtual machines match the {@link FilterSpec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm/get"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items": {
            "post": {
                "tags": [
                    "vm_template/library_items"
                ],
                "summary": "Creates a library item in content library from a virtual machine. This {@term operation} creates a library item in content library whose content is a virtual machine template created from the source virtual machine, using the supplied create specification. The virtual machine template is stored in a newly created library item.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the newly created library item.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.create_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to create the virtual machine template could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "404": {
                        "description": "if the source virtual machine specified by {@link CreateSpec#sourceVm} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if any of the services involved in the {@term operation} are unavailable.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items/post"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items/{template_library_item}": {
            "get": {
                "tags": [
                    "vm_template/library_items"
                ],
                "summary": "Returns information about a virtual machine template contained in the library item specified by {@param.name templateLibraryItem}",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "identifier of the library item containing the virtual machine template."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the virtual machine template item contained in the library item.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine template's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the library item could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if any of the services involved in the {@term operation} are unavailable.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}/get"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items/{template_library_item}/check-outs": {
            "get": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Returns commonly used information about the virtual machines that are checked out of the library item.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about the check outs.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs.list_resp"
                        }
                    },
                    "404": {
                        "description": "if the library item is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}~1check-outs/get"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}": {
            "get": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Returns the information about a checked out virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the checked out virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about a check out.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs_resp"
                        }
                    },
                    "404": {
                        "description": "if the library item or virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}~1check-outs~1{vm}/get"
                }
            },
            "delete": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Deletes the checked out virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the checked out virtual machine to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the library item or virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}~1check-outs~1{vm}/delete"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}?action=check-in": {
            "post": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Checks in a virtual machine into the library item. This {@term operation} updates the library item to contain the virtual machine being checked in as a template. This template becomes the latest version of the library item. The previous virtual machine template contained in the library item is available as a backup and its information can be queried using the {@name Versions} {@term service}. At most one previous version of a virtual machine template is retained in the library item.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the content library item in which the virtual machine is checked in."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine to check into the library item."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs_check_in"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The new version of the library item.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs.check_in_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the item specified by {@param.name templateLibraryItem} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "check_in",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}~1check-outs~1{vm}?action=check-in/post"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items/{template_library_item}/check-outs?action=check-out": {
            "post": {
                "tags": [
                    "vm_template/library_items/check_outs"
                ],
                "summary": "Checks out a library item containing a virtual machine template. This {@term operation} makes a copy of the source virtual machine template contained in the library item as a virtual machine. The virtual machine is copied with the same storage specification as the source virtual machine template. Changes to the checked out virtual machine do not affect the virtual machine template contained in the library item. To save these changes back into the library item, {@link #checkIn} the virtual machine. To discard the changes, {@link #delete} the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the content library item containing the source virtual machine template to be checked out."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs_check_out"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the virtual machine that was checked out of the library item.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs.check_out_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the library item specified by {@param.name templateLibraryItem} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "check_out",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}~1check-outs?action=check-out/post"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items/{template_library_item}/versions": {
            "get": {
                "tags": [
                    "vm_template/library_items/versions"
                ],
                "summary": "Returns commonly used information about the live versions of a virtual machine template library item.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about the library item versions.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.versions.list_resp"
                        }
                    },
                    "404": {
                        "description": "if the library item is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}~1versions/get"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items/{template_library_item}/versions/{version}": {
            "get": {
                "tags": [
                    "vm_template/library_items/versions"
                ],
                "summary": "Returns information about the live version of a library item containing a virtual machine template.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "Version of the library item."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified library item version.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.versions_resp"
                        }
                    },
                    "404": {
                        "description": "if the library item or version is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}~1versions~1{version}/get"
                }
            },
            "delete": {
                "tags": [
                    "vm_template/library_items/versions"
                ],
                "summary": "Deletes the virtual machine template contained in the library item at the specified version.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "Version of the library item to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the library item or version is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}~1versions~1{version}/delete"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items/{template_library_item}/versions/{version}?action=rollback": {
            "post": {
                "tags": [
                    "vm_template/library_items/versions"
                ],
                "summary": "Rollbacks a library item containing a virtual machine template to a previous version. The virtual machine template at the specified version becomes the latest virtual machine template with a new version identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "Identifier of the VM template library item."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "version",
                        "description": "Version of the library item to rollback."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.versions_rollback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The new version of the library item.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.versions.rollback_resp"
                        }
                    },
                    "404": {
                        "description": "if the library item or version is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "rollback",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}~1versions~1{version}?action=rollback/post"
                }
            }
        },
        "/rest/vcenter/vm-template/library-items/{template_library_item}?action=deploy": {
            "post": {
                "tags": [
                    "vm_template/library_items"
                ],
                "summary": "Deploys a virtual machine as a copy of the source virtual machine template contained in the library item specified by {@param.name templateLibraryItem}. It uses the deployment specification in {@param.name spec}. If {@link DeploySpec#poweredOn} and/or {@link DeploySpec#guestCustomization} are specified, the server triggers the power on and/or guest customization operations, which are executed asynchronously.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "template_library_item",
                        "description": "identifier of the content library item containing the source virtual machine template to be deployed."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items_deploy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the deployed virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_resp"
                        }
                    },
                    "400": {
                        "description": "if there was an error in allocating any of the resources required by the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "404": {
                        "description": "if the library item specified by {@param.name templateLibraryItem} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if any of the services involved in the {@term operation} are unavailable.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "deploy",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm-template~1library-items~1{template_library_item}?action=deploy/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}": {
            "get": {
                "tags": [
                    "VM"
                ],
                "summary": "Returns information about a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}/get"
                }
            },
            "delete": {
                "tags": [
                    "VM"
                ],
                "summary": "Deletes a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}/delete"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/console/tickets": {
            "post": {
                "tags": [
                    "vm/console/tickets"
                ],
                "summary": "Creates a virtual machine console ticket of a given ticket type. The created ticket is a one time use URI. The validity of the ticket is 30 minutes, if not used with in the time frame the ticket expires. <p> The {@link Type#VMRC} ticket contains the IP address or the DNS resolvable name of the vCenter server. This ticket requires installation of VMware Workstation, VMware Fusion or VMRC to be installed on the machine where the ticket has to be opened. This ticket can be acquired even when the VM is turned off. <p> The {@link Type#WEBMKS} ticket contains the IP address of the DNS resolvable name of the ESX server. This ticket requires user to embed this ticket in a HTML page using VMware HTML Console SDK - https://www.vmware.com/support/developer/html-console This ticket can be acquired only when the VM is turned on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.console.tickets_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commonly used information about the virtual machine console ticket.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.console.tickets.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration or execution state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1console~1tickets/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/customization": {
            "put": {
                "tags": [
                    "vm/guest/customization"
                ],
                "summary": "Applies a customization specification in {@param.name spec} on the virtual machine in {@param.name vm}. This {@term operation} only sets the specification settings for the virtual machine. The actual customization happens inside the guest when the virtual machine is powered on. If {@param.name spec} has {@term unset} values, then any pending customization settings for the virtual machine are cleared. If there is a pending customization for the virtual machine and {@param.name spec} has valid content, then the existing customization setting will be overwritten with the new settings.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "The unique identifier of the virtual machine that needs to be customized."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.customization_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine {@param.name vm} is not in a powered off state.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "404": {
                        "description": "if a customization specification is not found with the unique name in {@param.name spec}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1customization/put"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/identity": {
            "get": {
                "tags": [
                    "vm/guest/identity"
                ],
                "summary": "Return information about the guest.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "guest identification information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.identity_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1identity/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/local-filesystem": {
            "get": {
                "tags": [
                    "vm/guest/local_filesystem"
                ],
                "summary": "Returns details of the local file systems in the guest operating system.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the local file systems configured in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.local_filesystem_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1local-filesystem/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/networking": {
            "get": {
                "tags": [
                    "vm/guest/networking"
                ],
                "summary": "Returns information about the network configuration in the guest operating system.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the networking configuration in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.networking_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1networking/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/networking/interfaces": {
            "get": {
                "tags": [
                    "vm/guest/networking/interfaces"
                ],
                "summary": "Returns information about the networking interfaces in the guest operating system.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the interfaces configured in the guest operating system.  Interfaces are ordered in a guest operating system specific determined order.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1networking~1interfaces/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/networking/routes": {
            "get": {
                "tags": [
                    "vm/guest/networking/routes"
                ],
                "summary": "Returns information about network routing in the guest operating system.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the network routes configured in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.networking.routes.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1networking~1routes/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/power": {
            "get": {
                "tags": [
                    "vm/guest/power"
                ],
                "summary": "Returns information about the guest operating system power state.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest OS powerstate information.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.guest.power_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1power/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/power?action=reboot": {
            "post": {
                "tags": [
                    "vm/guest/power"
                ],
                "summary": "Issues a request to the guest operating system asking it to perform a reboot. This request returns immediately and does not wait for the guest operating system to complete the operation.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine does not support being powered on (e.g. marked as a template, serving as a fault-tolerance secondary virtual machine).",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "operationId": "reboot",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1power?action=reboot/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/power?action=shutdown": {
            "post": {
                "tags": [
                    "vm/guest/power"
                ],
                "summary": "Issues a request to the guest operating system asking it to perform a clean shutdown of all services. This request returns immediately and does not wait for the guest operating system to complete the operation.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine does not support being powered on (e.g. marked as a template, serving as a fault-tolerance secondary virtual machine).",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "operationId": "shutdown",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1power?action=shutdown/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/guest/power?action=standby": {
            "post": {
                "tags": [
                    "vm/guest/power"
                ],
                "summary": "Issues a request to the guest operating system asking it to perform a suspend operation.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine does not support being powered on (e.g. marked as a template, serving as a fault-tolerance secondary virtual machine).",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if VMware Tools is not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    }
                },
                "operationId": "standby",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1guest~1power?action=standby/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware": {
            "get": {
                "tags": [
                    "vm/hardware"
                ],
                "summary": "Returns the virtual hardware settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual hardware settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware"
                ],
                "summary": "Updates the virtual hardware settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware/patch"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/action/upgrade": {
            "post": {
                "tags": [
                    "vm/hardware"
                ],
                "summary": "Upgrades the virtual machine to a newer virtual hardware version.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware_upgrade"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "upgrade",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware?action=upgrade/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/adapter/sata": {
            "post": {
                "tags": [
                    "vm/hardware/adapter/sata"
                ],
                "summary": "Adds a virtual SATA adapter to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual SATA adapter identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1adapter~1sata/post"
                }
            },
            "get": {
                "tags": [
                    "vm/hardware/adapter/sata"
                ],
                "summary": "Returns commonly used information about the virtual SATA adapters belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual SATA adapters.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1adapter~1sata/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}": {
            "get": {
                "tags": [
                    "vm/hardware/adapter/sata"
                ],
                "summary": "Returns information about a virtual SATA adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SATA adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual SATA adapter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SATA adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1adapter~1sata~1{adapter}/get"
                }
            },
            "delete": {
                "tags": [
                    "vm/hardware/adapter/sata"
                ],
                "summary": "Removes a virtual SATA adapter from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SATA adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SATA adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1adapter~1sata~1{adapter}/delete"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/adapter/scsi": {
            "post": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Adds a virtual SCSI adapter to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual SCSI adapter identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1adapter~1scsi/post"
                }
            },
            "get": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Returns commonly used information about the virtual SCSI adapters belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual SCSI adapters.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1adapter~1scsi/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/adapter/scsi/{adapter}": {
            "get": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Returns information about a virtual SCSI adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SCSI adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual SCSI adapter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1adapter~1scsi~1{adapter}/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Updates the configuration of a virtual SCSI adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SCSI adapter identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1adapter~1scsi~1{adapter}/patch"
                }
            },
            "delete": {
                "tags": [
                    "vm/hardware/adapter/scsi"
                ],
                "summary": "Removes a virtual SCSI adapter from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "adapter",
                        "description": "Virtual SCSI adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1adapter~1scsi~1{adapter}/delete"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/boot": {
            "get": {
                "tags": [
                    "vm/hardware/boot"
                ],
                "summary": "Returns the boot-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Boot-related settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.boot_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1boot/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/boot"
                ],
                "summary": "Updates the boot-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.boot_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1boot/patch"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/boot/device": {
            "put": {
                "tags": [
                    "vm/hardware/boot/device"
                ],
                "summary": "Sets the virtual devices that will be used to boot the virtual machine.  The virtual machine will check the devices in order, attempting to boot from each, until the virtual machine boots successfully.  If the {@term list} is empty, the virtual machine will use a default boot sequence. There should be no more than one instance of {@link Entry} for a given device type except {@link Device.Type#ETHERNET} in the {@term list}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.boot.device_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found, or if any of the specified virtual devices is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1boot~1device/put"
                }
            },
            "get": {
                "tags": [
                    "vm/hardware/boot/device"
                ],
                "summary": "Returns an ordered list of boot devices for the virtual machine. If the {@term list} is empty, the virtual machine uses a default boot sequence.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ordered list of configured boot devices.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.boot.device_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1boot~1device/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cdrom": {
            "post": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Adds a virtual CD-ROM device to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual CD-ROM device identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1cdrom/post"
                }
            },
            "get": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Returns commonly used information about the virtual CD-ROM devices belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual CD-ROM devices.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1cdrom/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cdrom/{cdrom}": {
            "get": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Returns information about a virtual CD-ROM device.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual CD-ROM device.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1cdrom~1{cdrom}/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Updates the configuration of a virtual CD-ROM device.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cdrom_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1cdrom~1{cdrom}/patch"
                }
            },
            "delete": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Removes a virtual CD-ROM device from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1cdrom~1{cdrom}/delete"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cdrom/{cdrom}/connect": {
            "post": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Connects a virtual CD-ROM device of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual CD-ROM device to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1cdrom~1{cdrom}?action=connect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cdrom/{cdrom}/disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/cdrom"
                ],
                "summary": "Disconnects a virtual CD-ROM device of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the CD-ROM device is not connected to its backing resource. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual CD-ROM device to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "cdrom",
                        "description": "Virtual CD-ROM device identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1cdrom~1{cdrom}?action=disconnect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/cpu": {
            "get": {
                "tags": [
                    "vm/hardware/cpu"
                ],
                "summary": "Returns the CPU-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CPU-related settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cpu_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1cpu/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/cpu"
                ],
                "summary": "Updates the CPU-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.cpu_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1cpu/patch"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/disk": {
            "post": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Adds a virtual disk to the virtual machine.  While adding the virtual disk, a new VMDK file may be created or an existing VMDK file may be used to back the virtual disk.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual disk identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1disk/post"
                }
            },
            "get": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Returns commonly used information about the virtual disks belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about the virtual disks.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1disk/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/disk/{disk}": {
            "get": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Returns information about a virtual disk.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "disk",
                        "description": "Virtual disk identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual disk.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1disk~1{disk}/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Updates the configuration of a virtual disk.  An update {@term operation} can be used to detach the existing VMDK file and attach another VMDK file to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "disk",
                        "description": "Virtual disk identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.disk_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1disk~1{disk}/patch"
                }
            },
            "delete": {
                "tags": [
                    "vm/hardware/disk"
                ],
                "summary": "Removes a virtual disk from the virtual machine.  This {@term operation} does not destroy the VMDK file that backs the virtual disk.  It only detaches the VMDK file from the virtual machine.  Once detached, the VMDK file will not be destroyed when the virtual machine to which it was associated is deleted.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "disk",
                        "description": "Virtual disk identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1disk~1{disk}/delete"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/ethernet": {
            "post": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Adds a virtual Ethernet adapter to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual Ethernet adapter identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and {@term spec} includes {@term unset} {@term fields} that default to guest-specific values.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or network backing is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1ethernet/post"
                }
            },
            "get": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Returns commonly used information about the virtual Ethernet adapters belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual Ethernet adapters.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1ethernet/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/ethernet/{nic}": {
            "get": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Returns information about a virtual Ethernet adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual Ethernet adapter.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1ethernet~1{nic}/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Updates the configuration of a virtual Ethernet adapter.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.ethernet_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine, virtual Ethernet adapter, or backing network is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1ethernet~1{nic}/patch"
                }
            },
            "delete": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Removes a virtual Ethernet adapter from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1ethernet~1{nic}/delete"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/ethernet/{nic}/connect": {
            "post": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Connects a virtual Ethernet adapter of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual Ethernet adapter to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1ethernet~1{nic}?action=connect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/ethernet/{nic}/disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/ethernet"
                ],
                "summary": "Disconnects a virtual Ethernet adapter of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the Ethernet adapter is not connected to its backing resource. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual Ethernet adapter to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "nic",
                        "description": "Virtual Ethernet adapter identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1ethernet~1{nic}?action=disconnect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/floppy": {
            "post": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Adds a virtual floppy drive to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual floppy drive identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1floppy/post"
                }
            },
            "get": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Returns commonly used information about the virtual floppy drives belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual floppy drives.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1floppy/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/floppy/{floppy}": {
            "get": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Returns information about a virtual floppy drive.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual floppy drive.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1floppy~1{floppy}/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Updates the configuration of a virtual floppy drive.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.floppy_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1floppy~1{floppy}/patch"
                }
            },
            "delete": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Removes a virtual floppy drive from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1floppy~1{floppy}/delete"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/floppy/{floppy}/connect": {
            "post": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Connects a virtual floppy drive of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual floppy drive to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1floppy~1{floppy}?action=connect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/floppy/{floppy}/disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/floppy"
                ],
                "summary": "Disconnects a virtual floppy drive of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the floppy drive is not connected to its backing resource. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual floppy floppy to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "floppy",
                        "description": "Virtual floppy drive identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1floppy~1{floppy}?action=disconnect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/memory": {
            "get": {
                "tags": [
                    "vm/hardware/memory"
                ],
                "summary": "Returns the memory-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory-related settings of the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.memory_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1memory/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/memory"
                ],
                "summary": "Updates the memory-related settings of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.memory_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1memory/patch"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/parallel": {
            "post": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Adds a virtual parallel port to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual parallel port identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1parallel/post"
                }
            },
            "get": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Returns commonly used information about the virtual parallel ports belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual parallel ports.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1parallel/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/parallel/{port}": {
            "get": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Returns information about a virtual parallel port.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual parallel port.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1parallel~1{port}/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Updates the configuration of a virtual parallel port.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.parallel_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1parallel~1{port}/patch"
                }
            },
            "delete": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Removes a virtual parallel port from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1parallel~1{port}/delete"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/parallel/{port}/connect": {
            "post": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Connects a virtual parallel port of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual parallel port to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1parallel~1{port}?action=connect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/parallel/{port}/disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/parallel"
                ],
                "summary": "Disconnects a virtual parallel port of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the parallel port is not connected to its backing. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual parallel port to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual parallel port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1parallel~1{port}?action=disconnect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/serial": {
            "post": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Adds a virtual serial port to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual serial port identifier.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1serial/post"
                }
            },
            "get": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Returns commonly used information about the virtual serial ports belonging to the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual serial ports.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1serial/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/serial/{port}": {
            "get": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Returns information about a virtual serial port.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual serial port.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1serial~1{port}/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Updates the configuration of a virtual serial port.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.hardware.serial_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1serial~1{port}/patch"
                }
            },
            "delete": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Removes a virtual serial port from the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1serial~1{port}/delete"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/serial/{port}/connect": {
            "post": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Connects a virtual serial port of a powered-on virtual machine to its backing.  Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual serial port to start in the connected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1serial~1{port}?action=connect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/hardware/serial/{port}/disconnect": {
            "post": {
                "tags": [
                    "vm/hardware/serial"
                ],
                "summary": "Disconnects a virtual serial port of a powered-on virtual machine from its backing.  The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the serial port is not connected to its backing. <p> For a powered-off virtual machine, the {@link #update} {@term operation} may be used to configure the virtual serial port to start in the disconnected state when the virtual machine is powered on.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "port",
                        "description": "Virtual serial port identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1hardware~1serial~1{port}?action=disconnect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/library-item": {
            "get": {
                "tags": [
                    "vm/library_item"
                ],
                "summary": "Returns the information about the library item associated with the virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the library item associated with the virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.library_item_resp"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "401": {
                        "description": "if the user that requested the {@term operation} cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user that requested the {@term operation} is not authorized to perform the {@term operation}.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1library-item/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/power": {
            "get": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Returns the power state information of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Power state information for the specified virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.power_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration or execution state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1power/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/power/reset": {
            "post": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Resets a powered-on virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is performing another operation",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "reset",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1power?action=reset/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/power/start": {
            "post": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Powers on a powered-off or suspended virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "start",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1power?action=start/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/power/stop": {
            "post": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Powers off a powered-on or suspended virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "stop",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1power?action=stop/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/power/suspend": {
            "post": {
                "tags": [
                    "vm/power"
                ],
                "summary": "Suspends a powered-on virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "suspend",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1power?action=suspend/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/storage/policy": {
            "get": {
                "tags": [
                    "vm/storage/policy"
                ],
                "summary": "Returns Information about Storage Policy associated with a virtual machine's home directory and/or its virtual hard disks.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Overview of Storage Policy associated with a virtual machine's home directory and/or its associated virtual hard disks.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy_resp"
                        }
                    },
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1storage~1policy/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/storage/policy"
                ],
                "summary": "Updates the storage policy configuration of a virtual machine and/or its associated virtual hard disks.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine or disk's configuration state cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user is not authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required priveleges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1storage~1policy/patch"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/storage/policy/compliance": {
            "get": {
                "tags": [
                    "vm/storage/policy/compliance"
                ],
                "summary": "Returns the cached storage policy compliance information of a virtual machine.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual machine storage policy compliance Info {@link Info}.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy.compliance_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1storage~1policy~1compliance/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/storage/policy/compliance?action=check": {
            "post": {
                "tags": [
                    "vm/storage/policy/compliance"
                ],
                "summary": "Returns the storage policy Compliance {@link Info} of a virtual machine after explicitly re-computing compliance check.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine identifier."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy.compliance_check"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Virtual machine storage policy compliance {@name Info} {@term structure} .",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.check_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service necessary to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user does not have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "check",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1storage~1policy~1compliance?action=check/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/tools": {
            "get": {
                "tags": [
                    "vm/tools"
                ],
                "summary": "Get the properties of VMware Tools.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "VMware Tools properties.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.tools_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1tools/get"
                }
            },
            "patch": {
                "tags": [
                    "vm/tools"
                ],
                "summary": "Update the properties of VMware Tools.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.tools_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the {@link UpdateSpec#upgradePolicy} {@term field} contains a value that is not supported by the server.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1tools/patch"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/tools/installer": {
            "get": {
                "tags": [
                    "vm/tools/installer"
                ],
                "summary": "Get information about the VMware Tools installer.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "information about the VMware Tools installer.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.tools.installer_resp"
                        }
                    },
                    "400": {
                        "description": "if the system reports an error while responding to the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1tools~1installer/get"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/tools/installer?action=connect": {
            "post": {
                "tags": [
                    "vm/tools/installer"
                ],
                "summary": "Connects the VMware Tools CD installer as a CD-ROM for the guest operating system. On Windows guest operating systems with autorun, this should cause the installer to initiate the Tools installation which will need user input to complete. On other (non-Windows) guest operating systems this will make the Tools installation available, and a a user will need to do guest-specific actions.  On Linux, this includes opening an archive and running the installer. To monitor the status of the Tools install, clients should check the {@name vcenter.vm.Tools.Info#versionStatus} and {@name vcenter.vm.Tools.Info#runState} from {@link vcenter.vm.Tools#get}",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the Tools installation fails in the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "connect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1tools~1installer?action=connect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/tools/installer?action=disconnect": {
            "post": {
                "tags": [
                    "vm/tools/installer"
                ],
                "summary": "Disconnect the VMware Tools installer CD image.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Virtual machine ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is not powered on.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "disconnect",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1tools~1installer?action=disconnect/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}/tools?action=upgrade": {
            "post": {
                "tags": [
                    "vm/tools"
                ],
                "summary": "Begins the Tools upgrade process. To monitor the status of the Tools upgrade, clients should check the Tools status by calling {@link #get} and examining {@name Info#versionStatus} and {@name Info#runState}.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "schema": {
                            "$ref": "#/definitions/vcenter.vm.tools_upgrade"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the virtual machine is not found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the VMware Tools are not running.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "400": {
                        "description": "if the upgrade process fails inside the guest operating system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "upgrade",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}~1tools?action=upgrade/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}?action=relocate": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Relocates a virtual machine based on the specification. The parts of the virtual machine that can move are: FOLDER, RESOURCE_POOL, HOST, CLUSTER and DATASTORE of home of the virtual machine and disks. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Existing Virtual machine to relocate."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_relocate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if a specified resource (eg. host) is not accessible.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} or the given \"vm\" could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "relocate",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}?action=relocate/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}?action=relocate&vmw-task=true": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Relocates a virtual machine based on the specification. The parts of the virtual machine that can move are: FOLDER, RESOURCE_POOL, HOST, CLUSTER and DATASTORE of home of the virtual machine and disks. <p>",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Existing Virtual machine to relocate."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_relocate_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.relocate_task_resp"
                        }
                    },
                    "400": {
                        "description": "if a specified resource (eg. host) is not accessible.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} or the given \"vm\" could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "relocate$task",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}?action=relocate&vmw-task=true/post"
                }
            }
        },
        "/rest/vcenter/vm/{vm}?action=unregister": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Removes the virtual machine corresponding to {@param.name vm} from the vCenter inventory without removing any of the virtual machine's files from storage. All high-level information stored with the management server (ESXi or vCenter) is removed, including information such as statistics, resource pool association, permissions, and alarms.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vm",
                        "description": "Identifier of the virtual machine to be unregistered."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the virtual machine is busy performing another operation.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_busy_error"
                        }
                    },
                    "404": {
                        "description": "if there is no virtual machine associated with {@param.name vm} in the system.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "unregister",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm~1{vm}?action=unregister/post"
                }
            }
        },
        "/rest/vcenter/vm?action=clone": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Creates a virtual machine from an existing virtual machine. <p>",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_clone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.clone_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to clone the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "clone",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm?action=clone/post"
                }
            }
        },
        "/rest/vcenter/vm?action=clone&vmw-task=true": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Creates a virtual machine from an existing virtual machine. <p>",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_clone_task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.clone_task_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to clone the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "clone$task",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm?action=clone&vmw-task=true/post"
                }
            }
        },
        "/rest/vcenter/vm?action=instant-clone": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Create an instant clone of an existing virtual machine.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_instant_clone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.instant_clone_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to create an instant clone could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user can not be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "instant_clone",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm?action=instant-clone/post"
                }
            }
        },
        "/rest/vcenter/vm?action=register": {
            "post": {
                "tags": [
                    "VM"
                ],
                "summary": "Creates a virtual machine from existing virtual machine files on storage.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM_register"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the newly-created virtual machine.",
                        "schema": {
                            "$ref": "#/definitions/vcenter.VM.register_resp"
                        }
                    },
                    "400": {
                        "description": "if any of the resources needed to register the virtual machine could not be allocated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource_error"
                        }
                    },
                    "404": {
                        "description": "if any of the resources specified in {@term spec} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.service_unavailable_error"
                        }
                    },
                    "401": {
                        "description": "if the user cannot be authenticated.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthenticated_error"
                        }
                    },
                    "403": {
                        "description": "if the user doesn't have the required privileges.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unauthorized_error"
                        }
                    }
                },
                "operationId": "register",
                "security": [
                    {
                        "session_id": []
                    }
                ],
                "deprecated": true,
                "x-vmw-deprecated": {
                    "replacement": "vcenter.json#/paths/~1api~1vcenter~1vm?action=register/post"
                }
            }
        }
    },
    "definitions": {
        "CisTaskProgress": {
            "type": "object",
            "properties": {
                "total": {
                    "description": "Total amount of the work for the operation.",
                    "type": "integer",
                    "format": "int64"
                },
                "completed": {
                    "description": "The amount of work completed for the operation. The value can only be incremented.",
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "description": "Message about the work progress.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "total",
                "completed",
                "message"
            ]
        },
        "CisTaskStatus": {
            "type": "string",
            "description": "The Status enumerated type defines the status values that can be reported for an operation.",
            "enum": [
                "PENDING",
                "RUNNING",
                "BLOCKED",
                "SUCCEEDED",
                "FAILED"
            ]
        },
        "VapiStdDynamicID": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of resource being identified (for example {@code com.acme.Person}). <p> {@term Services} that contain {@term operations} for creating and deleting resources typically contain a {@term constant} specifying the resource type for the resources being created and deleted. The API metamodel metadata {@term services} include a {@term service} that allows retrieving all the known resource types.",
                    "type": "string"
                },
                "id": {
                    "description": "The identifier for a resource whose type is specified by {@link #type}.",
                    "type": "string"
                }
            },
            "required": [
                "type",
                "id"
            ]
        },
        "VapiStdErrorsAlreadyExists": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsAlreadyInDesiredState": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsError": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsErrorType": {
            "type": "string",
            "description": "Enumeration of all standard errors. Used as discriminator in protocols that have no standard means for transporting the error type, e.g. REST.",
            "enum": [
                "ERROR",
                "ALREADY_EXISTS",
                "ALREADY_IN_DESIRED_STATE",
                "CANCELED",
                "CONCURRENT_CHANGE",
                "FEATURE_IN_USE",
                "INTERNAL_SERVER_ERROR",
                "INVALID_ARGUMENT",
                "INVALID_ELEMENT_CONFIGURATION",
                "INVALID_ELEMENT_TYPE",
                "INVALID_REQUEST",
                "NOT_ALLOWED_IN_CURRENT_STATE",
                "NOT_FOUND",
                "OPERATION_NOT_FOUND",
                "RESOURCE_BUSY",
                "RESOURCE_IN_USE",
                "RESOURCE_INACCESSIBLE",
                "SERVICE_UNAVAILABLE",
                "TIMED_OUT",
                "UNABLE_TO_ALLOCATE_RESOURCE",
                "UNAUTHENTICATED",
                "UNAUTHORIZED",
                "UNEXPECTED_INPUT",
                "UNSUPPORTED",
                "UNVERIFIED_PEER"
            ]
        },
        "VapiStdErrorsInternalServerError": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsInvalidArgument": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsInvalidElementConfiguration": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsInvalidElementType": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsNotAllowedInCurrentState": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsNotFound": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsResourceBusy": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsResourceInUse": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsResourceInaccessible": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsServiceUnavailable": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsTimedOut": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsUnableToAllocateResource": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsUnauthenticated": {
            "type": "object",
            "properties": {
                "challenge": {
                    "description": "Indicates the authentication challenges applicable to the target API provider. It can be used by a client to discover the correct authentication scheme to use. The exact syntax of the value is defined by the specific provider, the protocol and authentication schemes used. <p> For example, a provider using REST may adhere to the WWW-Authenticate HTTP header specification, RFC7235, section 4.1. In this case an example challenge value may be: SIGN realm=\"27da1358-2ba4-11e9-b210-d663bd873d93\",sts=\"http://vcenter/sso?vsphere.local\", Basic realm=\"vCenter\"",
                    "type": "string"
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsUnauthorized": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsUnsupported": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdErrorsUnverifiedPeer": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/VapiStdErrorsErrorType"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VapiStdLocalizableMessage": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier of the localizable string or message template. <p> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog.",
                    "type": "string"
                },
                "default_message": {
                    "description": "The value of this localizable string or message template in the {@code en_US} (English) locale.  If {@link #id} refers to a message template, the default message will contain the substituted arguments. This value can be used by clients that do not need to display strings and messages in the native language of the user.  It could also be used as a fallback if a client is unable to access the appropriate message catalog.",
                    "type": "string"
                },
                "args": {
                    "description": "Positional arguments to be substituted into the message template. This list will be empty if the message uses named arguments or has no arguments.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "params": {
                    "description": "Named arguments to be substituted into the message template.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VapiStdLocalizationParam"
                    }
                },
                "localized": {
                    "description": "Localized string value as per request requirements.",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "default_message",
                "args"
            ]
        },
        "VapiStdLocalizationParam": {
            "type": "object",
            "properties": {
                "s": {
                    "description": "{@term String} value associated with the parameter.",
                    "type": "string"
                },
                "dt": {
                    "description": "Date and time value associated with the parameter. Use the {@name #format} {@term field} to specify date and time display style.",
                    "type": "string",
                    "format": "date-time"
                },
                "i": {
                    "description": "{@term long} value associated with the parameter.",
                    "type": "integer",
                    "format": "int64"
                },
                "d": {
                    "description": "The {@term double} value associated with the parameter. The number of displayed fractional digits is changed via {@name #precision} {@term field}.",
                    "type": "number",
                    "format": "double"
                },
                "l": {
                    "description": "Nested localizable value associated with the parameter. This is useful construct to convert to human readable localized form {@term enumerated type} and {@term boolean} values. It can also be used for proper handling of pluralization and gender forms in localization. Recursive {@name NestedLocalizableMessage} instances can be used for localizing short lists of items.",
                    "$ref": "#/definitions/VapiStdNestedLocalizableMessage"
                },
                "format": {
                    "description": "Format associated with the date and time value in {@name #dt} {@term field}. The {@term enumeration value} {@code SHORT_DATETIME} will be used as default.",
                    "$ref": "#/definitions/VapiStdLocalizationParamDateTimeFormat"
                },
                "precision": {
                    "description": "Number of fractional digits to include in formatted {@term double} value.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "VapiStdLocalizationParamDateTimeFormat": {
            "type": "string",
            "description": "The {@name DateTimeFormat} {@term enumerated type} lists possible date and time formatting options. It combines the Unicode CLDR format types - full, long, medium and short with 3 different presentations - date only, time only and combined date and time presentation.",
            "enum": [
                "SHORT_DATE",
                "MED_DATE",
                "LONG_DATE",
                "FULL_DATE",
                "SHORT_TIME",
                "MED_TIME",
                "LONG_TIME",
                "FULL_TIME",
                "SHORT_DATE_TIME",
                "MED_DATE_TIME",
                "LONG_DATE_TIME",
                "FULL_DATE_TIME"
            ]
        },
        "VapiStdNestedLocalizableMessage": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier of the localizable string or message template. <p> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog.",
                    "type": "string"
                },
                "params": {
                    "description": "Named Arguments to be substituted into the message template.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VapiStdLocalizationParam"
                    }
                }
            },
            "required": [
                "id"
            ]
        },
        "VcenterAuthenticationTokenIssue": {
            "$ref": "#/definitions/VcenterAuthenticationTokenIssueSpec",
            "description": "Token.IssueSpec structure containing arguments that define the exchange process."
        },
        "VcenterAuthenticationTokenIssueSpec": {
            "type": "object",
            "properties": {
                "grant_type": {
                    "description": "The value of urn:ietf:params:oauth:grant-type:token-exchange indicates that a token exchange is being performed.\nWhen clients pass a value of this structure as a parameter, the field must be one of urn:ietf:params:oauth:grant-type:token-exchange. When operations return a value of this structure as a result, the field will be one of urn:ietf:params:oauth:grant-type:token-exchange.",
                    "type": "string"
                },
                "resource": {
                    "description": "Indicates the location of the target service or resource where the client intends to use the requested security token.\nIf unset, it is inferred from other arguments.",
                    "type": "string"
                },
                "audience": {
                    "description": "The logical name of the target service where the client intends to use the requested security token. This serves a purpose similar to the Token.IssueSpec.resource field, but with the client providing a logical name rather than a location.\nIf unset, it is inferred from other arguments.",
                    "type": "string"
                },
                "scope": {
                    "description": "A list of space-delimited, case-sensitive strings, that allow the client to specify the desired scope of the requested security token in the context of the service or resource where the token will be used.\nIf unset, it is inferred from other arguments.",
                    "type": "string"
                },
                "requested_token_type": {
                    "description": "An identifier for the type of the requested security token. If the requested type is unspecified, the issued token type is at the discretion of the server and may be dictated by knowledge of the requirements of the service or resource indicated by the Token.IssueSpec.resource or Token.IssueSpec.audience field.\nIf unset, it is inferred from other arguments.",
                    "type": "string"
                },
                "subject_token": {
                    "description": "A security token that represents the identity of the party on behalf of whom exchange is being made. Typically, the subject of this token will be the subject of the security token issued. Token is base64-encoded. \nThe field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.\n\nThis field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset.",
                    "type": "string"
                },
                "subject_token_type": {
                    "description": "An identifier, that indicates the type of the security token in the Token.IssueSpec.subject-token field. \nThe field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.\n\nThis field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset.",
                    "type": "string"
                },
                "actor_token": {
                    "description": "A security token that represents the identity of the acting party. Typically, this will be the party that is authorized to use the requested security token and act on behalf of the subject.\nunset if not needed for the specific case of exchange.",
                    "type": "string"
                },
                "actor_token_type": {
                    "description": "An identifier, that indicates the type of the security token in the Token.IssueSpec.actor-token field.\nunset if Token.IssueSpec.actor-token field is not present.",
                    "type": "string"
                }
            },
            "required": [
                "grant_type"
            ]
        },
        "VcenterCertificateManagementVcenterTlsCsrCreate": {
            "$ref": "#/definitions/VcenterCertificateManagementVcenterTlsCsrSpec",
            "description": "The information needed to create a CSR."
        },
        "VcenterCertificateManagementVcenterTlsCsrInfo": {
            "type": "object",
            "properties": {
                "csr": {
                    "description": "Certificate Signing Request in PEM format.",
                    "type": "string"
                }
            },
            "required": [
                "csr"
            ]
        },
        "VcenterCertificateManagementVcenterTlsCsrSpec": {
            "type": "object",
            "properties": {
                "key_size": {
                    "description": "",
                    "type": "integer",
                    "format": "int64"
                },
                "common_name": {
                    "description": "",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization field in certificate subject",
                    "type": "string"
                },
                "organization_unit": {
                    "description": "Organization unit field in certificate subject",
                    "type": "string"
                },
                "locality": {
                    "description": "Locality field in certificate subject",
                    "type": "string"
                },
                "state_or_province": {
                    "description": "State field in certificate subject",
                    "type": "string"
                },
                "country": {
                    "description": "Country field in certificate subject",
                    "type": "string"
                },
                "email_address": {
                    "description": "Email field in Certificate extensions",
                    "type": "string"
                },
                "subject_alt_name": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "organization",
                "organization_unit",
                "locality",
                "state_or_province",
                "country",
                "email_address"
            ]
        },
        "VcenterCertificateManagementVcenterTlsInfo": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "Version (version number) value from the certificate.",
                    "type": "integer",
                    "format": "int64"
                },
                "serial_number": {
                    "description": "SerialNumber value from the certificate.",
                    "type": "string"
                },
                "signature_algorithm": {
                    "description": "Signature algorithm name from the certificate.",
                    "type": "string"
                },
                "issuer_dn": {
                    "description": "Issuer (issuer distinguished name) value from the certificate.",
                    "type": "string"
                },
                "valid_from": {
                    "description": "validFrom specify the start date of the certificate.",
                    "type": "string",
                    "format": "date-time"
                },
                "valid_to": {
                    "description": "validTo specify the end date of the certificate.",
                    "type": "string",
                    "format": "date-time"
                },
                "subject_dn": {
                    "description": "Subject (subject distinguished name) value from the certificate.",
                    "type": "string"
                },
                "thumbprint": {
                    "description": "Thumbprint value from the certificate.",
                    "type": "string"
                },
                "is_CA": {
                    "description": "Certificate constraints isCA from the critical BasicConstraints extension, (OID = 2.5.29.19).",
                    "type": "boolean"
                },
                "path_length_constraint": {
                    "description": "Certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19).",
                    "type": "integer",
                    "format": "int64"
                },
                "key_usage": {
                    "description": "Collection of keyusage contained in the certificate.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extended_key_usage": {
                    "description": "Collection of extended keyusage that contains details for which the certificate can be used for.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject_alternative_name": {
                    "description": "Collection of subject alternative names.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authority_information_access_uri": {
                    "description": "Collection of authority information access URI.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cert": {
                    "description": "TLS certificate in PEM format.",
                    "type": "string"
                }
            },
            "required": [
                "version",
                "serial_number",
                "signature_algorithm",
                "issuer_dn",
                "valid_from",
                "valid_to",
                "subject_dn",
                "thumbprint",
                "is_CA",
                "path_length_constraint",
                "key_usage",
                "extended_key_usage",
                "subject_alternative_name",
                "authority_information_access_uri",
                "cert"
            ]
        },
        "VcenterCertificateManagementVcenterTlsRenew": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The duration (in days) of the new TLS certificate. The duration should be less than or equal to 730 days."
                }
            }
        },
        "VcenterCertificateManagementVcenterTlsReplaceSpec": {
            "type": "object",
            "properties": {
                "key_size": {
                    "description": "The size of the key  to be used for public and private key generation.",
                    "type": "integer",
                    "format": "int64"
                },
                "common_name": {
                    "description": "The common name of the host for which certificate is generated",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization field in certificate subject",
                    "type": "string"
                },
                "organization_unit": {
                    "description": "Organization unit field in certificate subject",
                    "type": "string"
                },
                "locality": {
                    "description": "Locality field in certificate subject",
                    "type": "string"
                },
                "state_or_province": {
                    "description": "State field in certificate subject",
                    "type": "string"
                },
                "country": {
                    "description": "Country field in certificate subject",
                    "type": "string"
                },
                "email_address": {
                    "description": "Email field in Certificate extensions",
                    "type": "string"
                },
                "subject_alt_name": {
                    "description": "SubjectAltName is list of Dns Names and Ip addresses",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "organization",
                "organization_unit",
                "locality",
                "state_or_province",
                "country",
                "email_address"
            ]
        },
        "VcenterCertificateManagementVcenterTlsReplaceVmcaSigned": {
            "$ref": "#/definitions/VcenterCertificateManagementVcenterTlsReplaceSpec",
            "description": "The information needed to generate VMCA signed Machine SSL"
        },
        "VcenterCertificateManagementVcenterTlsSet": {
            "$ref": "#/definitions/VcenterCertificateManagementVcenterTlsSpec",
            "description": "The information needed to replace the TLS certificate."
        },
        "VcenterCertificateManagementVcenterTlsSpec": {
            "type": "object",
            "properties": {
                "cert": {
                    "description": "Certificate string in PEM format.",
                    "type": "string"
                },
                "key": {
                    "description": "Private key string in PEM format.",
                    "type": "string",
                    "format": "password"
                },
                "root_cert": {
                    "description": "Third party Root CA certificate in PEM format.",
                    "type": "string"
                }
            },
            "required": [
                "cert"
            ]
        },
        "VcenterCertificateManagementVcenterTrustedRootChainsCreate": {
            "$ref": "#/definitions/VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec",
            "description": "The information needed to create a trusted root certificate chain."
        },
        "VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec": {
            "type": "object",
            "properties": {
                "cert_chain": {
                    "description": "Certificate chain in base64 encoding",
                    "$ref": "#/definitions/VcenterCertificateManagementX509CertChain"
                },
                "chain": {
                    "description": "Unique identifier for this trusted root. Client can specify at creation as long as it is unique, otherwise one will be generated. An example of a client providing the identifier would be if this trusted root is associated with a VC trust. In this case the identifier would be the domain id.",
                    "type": "string"
                }
            },
            "required": [
                "cert_chain"
            ]
        },
        "VcenterCertificateManagementVcenterTrustedRootChainsInfo": {
            "type": "object",
            "properties": {
                "cert_chain": {
                    "description": "A certificate chain in base64 encoding",
                    "$ref": "#/definitions/VcenterCertificateManagementX509CertChain"
                }
            },
            "required": [
                "cert_chain"
            ]
        },
        "VcenterCertificateManagementVcenterTrustedRootChainsSummary": {
            "type": "object",
            "properties": {
                "chain": {
                    "description": "Unique identifier for chain.",
                    "type": "string"
                }
            },
            "required": [
                "chain"
            ]
        },
        "VcenterCertificateManagementVcenterVmcaRootCreate": {
            "$ref": "#/definitions/VcenterCertificateManagementVcenterVmcaRootCreateSpec",
            "description": "The information needed to generate VMCA signed Root Certificate."
        },
        "VcenterCertificateManagementVcenterVmcaRootCreateSpec": {
            "type": "object",
            "properties": {
                "key_size": {
                    "description": "The size of the key to be used for public and private key generation.",
                    "type": "integer",
                    "format": "int64"
                },
                "common_name": {
                    "description": "The common name of the host for which certificate is generated.",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization field in certificate subject.",
                    "type": "string"
                },
                "organization_unit": {
                    "description": "Organization unit field in certificate subject.",
                    "type": "string"
                },
                "locality": {
                    "description": "Locality field in certificate subject.",
                    "type": "string"
                },
                "state_or_province": {
                    "description": "State field in certificate subject.",
                    "type": "string"
                },
                "country": {
                    "description": "Country field in certificate subject.",
                    "type": "string"
                },
                "email_address": {
                    "description": "Email field in Certificate extensions.",
                    "type": "string"
                },
                "subject_alt_name": {
                    "description": "SubjectAltName is list of Dns Names and Ip addresses.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterCertificateManagementX509CertChain": {
            "type": "object",
            "properties": {
                "cert_chain": {
                    "description": "Certificate chain in base64 format",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "cert_chain"
            ]
        },
        "VcenterClusterFilterSpec": {
            "type": "object",
            "properties": {
                "clusters": {
                    "description": "Identifiers of clusters that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that clusters must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the cluster for the cluster to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the cluster for the cluster to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterClusterInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the cluster",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Identifier of the root resource pool of the cluster",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "resource_pool"
            ]
        },
        "VcenterClusterSummary": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the cluster.",
                    "type": "string"
                },
                "ha_enabled": {
                    "description": "Flag indicating whether the vSphere HA feature is enabled for the cluster.",
                    "type": "boolean"
                },
                "drs_enabled": {
                    "description": "Flag indicating whether the vSphere DRS service is enabled for the cluster.",
                    "type": "boolean"
                }
            },
            "required": [
                "cluster",
                "name",
                "ha_enabled",
                "drs_enabled"
            ]
        },
        "VcenterComputePoliciesCapabilitiesInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the capability. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the capability. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "create_spec_type": {
                    "description": "Identifier of the {@term structure} used to create a policy based on this capability. See {@link vcenter.compute.Policies#create}. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "info_type": {
                    "description": "Identifier of the {@term structure} returned when retrieving information about a policy based on this capability. See {@link vcenter.compute.Policies#get}. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "description",
                "create_spec_type",
                "info_type"
            ]
        },
        "VcenterComputePoliciesCapabilitiesSummary": {
            "type": "object",
            "properties": {
                "capability": {
                    "description": "Identifier of the capability. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the capability. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the capability. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                }
            },
            "required": [
                "capability",
                "name",
                "description"
            ]
        },
        "VcenterComputePoliciesCreate": {
            "type": "object",
            "description": "Specification for the new policy to be created. The new policy will be an instance of the capability that has the creation type (see {@link vcenter.compute.policies.Capabilities.Info#createSpecType}) equal to the type of the specified value (see {@param.name spec})."
        },
        "VcenterComputePoliciesObjectCompliance": {
            "type": "string",
            "description": "The {@name ObjectCompliance} {@term enumerated type} defines the compliance states a policy can be in on a particular object in VMware Cloud on AWS. Usage beyond VMware Cloud on AWS is not supported. *Warning:* This enumeration is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
            "enum": [
                "UNKNOWN",
                "NOT_APPLICABLE",
                "COMPLIANT",
                "NOT_COMPLIANT"
            ]
        },
        "VcenterComputePoliciesSummary": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the policy. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the policy. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the policy. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "capability": {
                    "description": "Identifier of the capability this policy is based on. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                }
            },
            "required": [
                "policy",
                "name",
                "description",
                "capability"
            ]
        },
        "VcenterComputePoliciesTagUsageFilterSpec": {
            "type": "object",
            "properties": {
                "policies": {
                    "description": "Identifiers that compute policies must have to match the filter. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "Identifiers that tags must have to match the filter. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "tag_types": {
                    "description": "Identifiers that tag types must have to match the filter. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterComputePoliciesTagUsageSummary": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the policy that uses the tag indicated by {@link #tag}. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "tag_type": {
                    "description": "Identifier of the tag type used by the policy indicated by {@link #policy}. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "tag": {
                    "description": "Identifier of the tag used by the policy indicated by {@link #policy}. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "tag_name": {
                    "description": "Name of the tag used by the policy indicated by {@link #policy}. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "category_name": {
                    "description": "Name of the category that has {@link #tag}. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                }
            },
            "required": [
                "policy",
                "tag_type",
                "tag",
                "tag_name",
                "category_name"
            ]
        },
        "VcenterContentRegistriesDayOfWeek": {
            "type": "string",
            "description": "The {@name DayOfWeek} {@term enumerated type} describes the supported days of the week to run a specific operation for a container registry.",
            "enum": [
                "SUNDAY",
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY"
            ]
        },
        "VcenterContentRegistriesHarborCreate": {
            "$ref": "#/definitions/VcenterContentRegistriesHarborCreateSpec",
            "description": "Specification for creating the Harbor registry."
        },
        "VcenterContentRegistriesHarborCreateSpec": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster hosting the registry.",
                    "type": "string"
                },
                "garbage_collection": {
                    "description": "Garbage collection configuration for the Harbor registry.",
                    "$ref": "#/definitions/VcenterContentRegistriesHarborGarbageCollection"
                },
                "storage": {
                    "description": "Storage associated with the Harbor registry. The list contains only one storage backing in this version.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterContentRegistriesHarborStorageSpec"
                    }
                }
            },
            "required": [
                "storage"
            ]
        },
        "VcenterContentRegistriesHarborGarbageCollection": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Frequency of garbage collection.",
                    "$ref": "#/definitions/VcenterContentRegistriesRecurrence"
                },
                "day_of_week": {
                    "description": "Day of the week when garbage collection should run.",
                    "$ref": "#/definitions/VcenterContentRegistriesDayOfWeek"
                },
                "hour": {
                    "description": "Hour at which garbage collection should run.",
                    "type": "integer",
                    "format": "int64"
                },
                "minute": {
                    "description": "Minute at which garbage collection should run.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterContentRegistriesHarborInfo": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Identifier of the Harbor namespace in case it is created in a Kubernetes environment.",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the registry.",
                    "type": "string"
                },
                "creation_time": {
                    "description": "The date and time when the harbor registry was created.",
                    "type": "string",
                    "format": "date-time"
                },
                "ui_access_url": {
                    "description": "URL to access the UI of the registry.",
                    "type": "string",
                    "format": "uri"
                },
                "cert_chain": {
                    "description": "Harbor certificate chain in base64 format.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "garbage_collection": {
                    "description": "Garbage collection information for the registry.",
                    "$ref": "#/definitions/VcenterContentRegistriesHarborGarbageCollection"
                },
                "storage": {
                    "description": "Storage information associated with the registry.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterContentRegistriesHarborStorageInfo"
                    }
                },
                "health": {
                    "description": "Health status of the container registry.",
                    "$ref": "#/definitions/VcenterContentRegistriesHealthInfo"
                }
            },
            "required": [
                "version",
                "creation_time",
                "ui_access_url",
                "cert_chain",
                "garbage_collection",
                "storage",
                "health"
            ]
        },
        "VcenterContentRegistriesHarborProjectsConfigStatus": {
            "type": "string",
            "description": "The {@name ConfigStatus} {@term enumerated type} describes the status of reaching the desired configuration state for the Harbor project.",
            "enum": [
                "PENDING",
                "REMOVING",
                "ERROR",
                "READY"
            ]
        },
        "VcenterContentRegistriesHarborProjectsCreate": {
            "$ref": "#/definitions/VcenterContentRegistriesHarborProjectsCreateSpec",
            "description": "Information used to create the Harbor project."
        },
        "VcenterContentRegistriesHarborProjectsCreateSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the Harbor project. Should be between 1-63 characters long alphanumeric string and may contain the following characters: a-z,0-9, and '-'. Must be starting with characters or numbers, with the '-' character allowed anywhere except the first or last character.",
                    "type": "string"
                },
                "scope": {
                    "description": "Access type of a Harbor project.",
                    "$ref": "#/definitions/VcenterContentRegistriesHarborProjectsScope"
                }
            },
            "required": [
                "name",
                "scope"
            ]
        },
        "VcenterContentRegistriesHarborProjectsInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the Harbor project. Should be between 1-63 characters long alphanumeric string and may contain the following characters: a-z,0-9, and '-'. Must be starting with characters or numbers, with the '-' character allowed anywhere except the first or last character.",
                    "type": "string"
                },
                "config_status": {
                    "description": "The status of the Harbor project.",
                    "$ref": "#/definitions/VcenterContentRegistriesHarborProjectsConfigStatus"
                },
                "scope": {
                    "description": "The access type of a Harbor project.",
                    "$ref": "#/definitions/VcenterContentRegistriesHarborProjectsScope"
                },
                "creation_time": {
                    "description": "The date and time when the harbor project creation API was triggered and project identifier generated.",
                    "type": "string",
                    "format": "date-time"
                },
                "update_time": {
                    "description": "The date and time when the harbor project purge API was triggered. In case no purge was triggered, {@name #updateTime} is same as {@name #creationTime}.",
                    "type": "string",
                    "format": "date-time"
                },
                "access_url": {
                    "description": "URL to access the harbor project through docker client.",
                    "type": "string",
                    "format": "uri"
                },
                "message": {
                    "description": "Details about the ERROR project status.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "name",
                "config_status",
                "scope",
                "creation_time"
            ]
        },
        "VcenterContentRegistriesHarborProjectsScope": {
            "type": "string",
            "description": "The {@name Scope} {@term enumerated type} in a project defines access levels of the project.",
            "enum": [
                "PUBLIC",
                "PRIVATE"
            ]
        },
        "VcenterContentRegistriesHarborProjectsSummary": {
            "type": "object",
            "properties": {
                "project": {
                    "description": "Identifier of the harbor project.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the Harbor project. Should be between 1-63 characters long alphanumeric string and may contain the following characters: a-z,0-9, and '-'. Must be starting with characters or numbers, with the '-' character allowed anywhere except the first or last character.",
                    "type": "string"
                },
                "scope": {
                    "description": "Access type of a Harbor project.",
                    "$ref": "#/definitions/VcenterContentRegistriesHarborProjectsScope"
                }
            },
            "required": [
                "project",
                "name",
                "scope"
            ]
        },
        "VcenterContentRegistriesHarborStorageInfo": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy.",
                    "type": "string"
                },
                "capacity": {
                    "description": "Total capacity for the registry storage (in mebibytes). This is the storage limit set on the Harbor registry. If a storage limit was not set on the registry, the default registry capacity - 204800 mebibytes is used.",
                    "type": "integer",
                    "format": "int64"
                },
                "used": {
                    "description": "Overall storage used by the registry (in mebibytes). This is the sum of used storage associated with storage policies configured for the registry.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "policy",
                "capacity",
                "used"
            ]
        },
        "VcenterContentRegistriesHarborStorageSpec": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy.",
                    "type": "string"
                },
                "limit": {
                    "description": "The maximum amount of storage (in mebibytes) which can be utilized by the registry for this specification.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "policy"
            ]
        },
        "VcenterContentRegistriesHarborSummary": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster.",
                    "type": "string"
                },
                "registry": {
                    "description": "Identifier of the registry.",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the registry.",
                    "type": "string"
                },
                "ui_access_url": {
                    "description": "URL to access the UI of the registry.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "registry",
                "version",
                "ui_access_url"
            ]
        },
        "VcenterContentRegistriesHealthInfo": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Container registry status.",
                    "$ref": "#/definitions/VcenterContentRegistriesHealthStatus"
                },
                "details": {
                    "description": "Details about the status.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "status"
            ]
        },
        "VcenterContentRegistriesHealthStatus": {
            "type": "string",
            "description": "The {@name Status} {@term enumerated type} describes the status of the container registry.",
            "enum": [
                "STARTING",
                "RUNNING",
                "WARNING",
                "ERROR",
                "DELETING"
            ]
        },
        "VcenterContentRegistriesRecurrence": {
            "type": "string",
            "description": "The {@name Recurrence} {@term enumerated type} defines the supported values for how often to run a specific operation for a container registry.",
            "enum": [
                "NONE",
                "DAILY",
                "WEEKLY"
            ]
        },
        "VcenterCryptoManagerHostsKmsProvidersFilterSpec": {
            "type": "object",
            "properties": {
                "providers": {
                    "description": "Provider identifiers.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "health": {
                    "description": "Provider health status.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterCryptoManagerHostsKmsProvidersHealth"
                    }
                },
                "types": {
                    "description": "Provider types.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterCryptoManagerHostsKmsProvidersType"
                    }
                }
            }
        },
        "VcenterCryptoManagerHostsKmsProvidersHealth": {
            "type": "string",
            "enum": [
                "NONE",
                "OK",
                "WARNING",
                "ERROR"
            ]
        },
        "VcenterCryptoManagerHostsKmsProvidersInfo": {
            "type": "object",
            "properties": {
                "health": {
                    "description": "Health status of the provider",
                    "$ref": "#/definitions/VcenterCryptoManagerHostsKmsProvidersHealth"
                },
                "details": {
                    "description": "Details regarding the health status of the provider.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "type": {
                    "description": "Provider type",
                    "$ref": "#/definitions/VcenterCryptoManagerHostsKmsProvidersType"
                },
                "native_info": {
                    "description": "Native provider information",
                    "$ref": "#/definitions/VcenterCryptoManagerHostsKmsProvidersNativeProviderInfo"
                }
            },
            "required": [
                "health",
                "details",
                "type"
            ]
        },
        "VcenterCryptoManagerHostsKmsProvidersNativeProviderInfo": {
            "type": "object",
            "properties": {
                "key_id": {
                    "description": "Key identifier for the provider",
                    "type": "string"
                }
            },
            "required": [
                "key_id"
            ]
        },
        "VcenterCryptoManagerHostsKmsProvidersSummary": {
            "type": "object",
            "properties": {
                "provider": {
                    "description": "Identifier of the provider",
                    "type": "string"
                },
                "type": {
                    "description": "Provider type",
                    "$ref": "#/definitions/VcenterCryptoManagerHostsKmsProvidersType"
                },
                "health": {
                    "description": "Health status of the provider",
                    "$ref": "#/definitions/VcenterCryptoManagerHostsKmsProvidersHealth"
                }
            },
            "required": [
                "provider",
                "type",
                "health"
            ]
        },
        "VcenterCryptoManagerHostsKmsProvidersType": {
            "type": "string",
            "enum": [
                "NATIVE",
                "TRUST_AUTHORITY"
            ]
        },
        "VcenterCryptoManagerKmsProvidersConstraints": {
            "type": "object",
            "properties": {
                "tpm_required": {
                    "description": "Determines if a provider is restricted to hosts with TPM 2.0 capability.",
                    "type": "boolean"
                }
            },
            "required": [
                "tpm_required"
            ]
        },
        "VcenterCryptoManagerKmsProvidersConstraintsSpec": {
            "type": "object",
            "properties": {
                "tpm_required": {
                    "description": "Determines if a provider is restricted to hosts with TPM 2.0 capability.",
                    "type": "boolean"
                }
            }
        },
        "VcenterCryptoManagerKmsProvidersCreate": {
            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersCreateSpec",
            "description": "Provider information."
        },
        "VcenterCryptoManagerKmsProvidersCreateSpec": {
            "type": "object",
            "properties": {
                "provider": {
                    "description": "Provider identifier. <p> A unique string provided by the client.",
                    "type": "string"
                },
                "constraints": {
                    "description": "The constraints on the provider.",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersConstraintsSpec"
                },
                "native_spec": {
                    "description": "Native provider create spec.",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersNativeProviderCreateSpec"
                }
            },
            "required": [
                "provider"
            ]
        },
        "VcenterCryptoManagerKmsProvidersExport": {
            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersExportSpec",
            "description": "ExportSpec needed to export a provider."
        },
        "VcenterCryptoManagerKmsProvidersExportResult": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of provider export result",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersExportType"
                },
                "location": {
                    "description": "Location of the exported configuration",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersLocation"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterCryptoManagerKmsProvidersExportSpec": {
            "type": "object",
            "properties": {
                "provider": {
                    "description": "Provider identifier",
                    "type": "string"
                },
                "password": {
                    "description": "Password used to encrypt the exported configuration.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "provider"
            ]
        },
        "VcenterCryptoManagerKmsProvidersExportType": {
            "type": "string",
            "description": "The {@name ExportType} {@term enumerated type} identifies the type of result that is returned when a provider is exported.",
            "enum": [
                "LOCATION"
            ]
        },
        "VcenterCryptoManagerKmsProvidersFilterSpec": {
            "type": "object",
            "properties": {
                "providers": {
                    "description": "Provider identifiers.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "health": {
                    "description": "Provider health status.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersHealth"
                    }
                }
            }
        },
        "VcenterCryptoManagerKmsProvidersHealth": {
            "type": "string",
            "enum": [
                "NONE",
                "OK",
                "WARNING",
                "ERROR"
            ]
        },
        "VcenterCryptoManagerKmsProvidersImportProvider": {
            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersImportSpec",
            "description": "ImportSpec needed to import a provider."
        },
        "VcenterCryptoManagerKmsProvidersImportResult": {
            "type": "object",
            "properties": {
                "provider": {
                    "description": "Provider identifier",
                    "type": "string"
                },
                "type": {
                    "description": "Provider type",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersType"
                },
                "native_info": {
                    "description": "Native provider information",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersNativeProviderInfo"
                },
                "export_time": {
                    "description": "Time when the provider was exported",
                    "type": "string",
                    "format": "date-time"
                },
                "constraints": {
                    "description": "The constraints on the provider.",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersConstraints"
                }
            },
            "required": [
                "provider",
                "type",
                "export_time"
            ]
        },
        "VcenterCryptoManagerKmsProvidersImportSpec": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Configuration to import.",
                    "type": "string",
                    "format": "binary"
                },
                "password": {
                    "description": "Password to decrypt the configuration to import.",
                    "type": "string",
                    "format": "password"
                },
                "constraints": {
                    "description": "Constraints to impose on the imported provider",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersConstraintsSpec"
                },
                "dry_run": {
                    "description": "Whether to perform a trial import without actuallly creating a provider.",
                    "type": "boolean"
                }
            }
        },
        "VcenterCryptoManagerKmsProvidersInfo": {
            "type": "object",
            "properties": {
                "health": {
                    "description": "Health status of the provider",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersHealth"
                },
                "details": {
                    "description": "Details regarding the health status of the provider. <p> When the provider {@name Health} is not {@link Health#NONE} or {@link Health#OK}, this {@term field} will provide actionable descriptions of the issues.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "constraints": {
                    "description": "The constraints on the provider.",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersConstraints"
                },
                "type": {
                    "description": "Provider type",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersType"
                },
                "native_info": {
                    "description": "Native provider information",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersNativeProviderInfo"
                }
            },
            "required": [
                "health",
                "details",
                "type"
            ]
        },
        "VcenterCryptoManagerKmsProvidersLocation": {
            "type": "object",
            "properties": {
                "url": {
                    "description": "Provider configuration download URL",
                    "type": "string",
                    "format": "uri"
                },
                "download_token": {
                    "description": "Information about the token required in the HTTP GET request to download the provider configuration.",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersToken"
                }
            },
            "required": [
                "url",
                "download_token"
            ]
        },
        "VcenterCryptoManagerKmsProvidersNativeProviderCreateSpec": {
            "type": "object",
            "properties": {
                "key_id": {
                    "description": "Key identifier for the provider. <p> The key identifier is required to be a 128-bit UUID represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.",
                    "type": "string"
                },
                "key_derivation_key": {
                    "description": "Key used to derive data encryption keys. Base64 encoded.",
                    "type": "string",
                    "format": "password"
                }
            }
        },
        "VcenterCryptoManagerKmsProvidersNativeProviderInfo": {
            "type": "object",
            "properties": {
                "key_id": {
                    "description": "Key identifier for the provider",
                    "type": "string"
                }
            },
            "required": [
                "key_id"
            ]
        },
        "VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec": {
            "type": "object",
            "properties": {
                "key_id": {
                    "description": "Key identifier for the provider. <p> The key identifier is required to be a 128-bit UUID represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.",
                    "type": "string"
                }
            }
        },
        "VcenterCryptoManagerKmsProvidersSummary": {
            "type": "object",
            "properties": {
                "provider": {
                    "description": "Provider identifier",
                    "type": "string"
                },
                "type": {
                    "description": "Provider type",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersType"
                },
                "health": {
                    "description": "Health status of the provider",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersHealth"
                }
            },
            "required": [
                "provider",
                "type",
                "health"
            ]
        },
        "VcenterCryptoManagerKmsProvidersToken": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "A one-time, short-lived token required in \"Authorization\" field of the HTTP header of the request to the url. <p> After the token expires, any attempt to download the configuration with said token will fail.",
                    "type": "string",
                    "format": "password"
                },
                "expiry": {
                    "description": "Expiry time of the token",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "token",
                "expiry"
            ]
        },
        "VcenterCryptoManagerKmsProvidersType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} contains the types of providers.",
            "enum": [
                "NATIVE"
            ]
        },
        "VcenterCryptoManagerKmsProvidersUpdate": {
            "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersUpdateSpec",
            "description": "Provider information."
        },
        "VcenterCryptoManagerKmsProvidersUpdateSpec": {
            "type": "object",
            "properties": {
                "native_spec": {
                    "description": "New Configuration for {@link Type#NATIVE} provider. <p>",
                    "$ref": "#/definitions/VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec"
                }
            }
        },
        "VcenterDatacenterCreate": {
            "$ref": "#/definitions/VcenterDatacenterCreateSpec",
            "description": "Specification for the new datacenter to be created."
        },
        "VcenterDatacenterCreateSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the datacenter to be created.",
                    "type": "string"
                },
                "folder": {
                    "description": "Datacenter folder in which the new datacenter should be created.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ]
        },
        "VcenterDatacenterFilterSpec": {
            "type": "object",
            "properties": {
                "datacenters": {
                    "description": "Identifiers of datacenters that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that datacenters must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the datacenters for the datacenter to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterDatacenterInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the datacenter.",
                    "type": "string"
                },
                "datastore_folder": {
                    "description": "The root datastore folder associated with the datacenter.",
                    "type": "string"
                },
                "host_folder": {
                    "description": "The root host and cluster folder associated with the datacenter.",
                    "type": "string"
                },
                "network_folder": {
                    "description": "The root network folder associated with the datacenter.",
                    "type": "string"
                },
                "vm_folder": {
                    "description": "The root virtual machine folder associated with the datacenter.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "datastore_folder",
                "host_folder",
                "network_folder",
                "vm_folder"
            ]
        },
        "VcenterDatacenterSummary": {
            "type": "object",
            "properties": {
                "datacenter": {
                    "description": "Identifier of the datacenter.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the datacenter.",
                    "type": "string"
                }
            },
            "required": [
                "datacenter",
                "name"
            ]
        },
        "VcenterDatastoreFilterSpec": {
            "type": "object",
            "properties": {
                "datastores": {
                    "description": "Identifiers of datastores that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that datastores must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "types": {
                    "description": "Types that datastores must have to match the filter (see {@link Summary#type}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterDatastoreType"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the datastore for the datastore to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the datastore for the datastore to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterDatastoreInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the datastore.",
                    "type": "string"
                },
                "type": {
                    "description": "Type ({@enum.values Type}) of the datastore.",
                    "$ref": "#/definitions/VcenterDatastoreType"
                },
                "accessible": {
                    "description": "Whether or not this datastore is accessible.",
                    "type": "boolean"
                },
                "free_space": {
                    "description": "Available space of this datastore, in bytes. <p> The server periodically updates this value.",
                    "type": "integer",
                    "format": "int64"
                },
                "multiple_host_access": {
                    "description": "Whether or not more than one host in the datacenter has been configured with access to the datastore.",
                    "type": "boolean"
                },
                "thin_provisioning_supported": {
                    "description": "Whether or not the datastore supports thin provisioning on a per file basis. When thin provisioning is used, backing storage is lazily allocated.",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "type",
                "accessible",
                "multiple_host_access",
                "thin_provisioning_supported"
            ]
        },
        "VcenterDatastoreSummary": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the datastore.",
                    "type": "string"
                },
                "type": {
                    "description": "Type ({@enum.values Type}) of the datatore.",
                    "$ref": "#/definitions/VcenterDatastoreType"
                },
                "free_space": {
                    "description": "Available space of this datastore, in bytes. <p> The server periodically updates this value.",
                    "type": "integer",
                    "format": "int64"
                },
                "capacity": {
                    "description": "Capacity of this datastore, in bytes. <p> The server periodically updates this value.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "datastore",
                "name",
                "type"
            ]
        },
        "VcenterDatastoreType": {
            "type": "string",
            "enum": [
                "VMFS",
                "NFS",
                "NFS41",
                "CIFS",
                "VSAN",
                "VFFS",
                "VVOL"
            ]
        },
        "VcenterDeploymentApplianceSize": {
            "type": "string",
            "description": "The {@name ApplianceSize} {@term enumerated type} defines the vCenter Server Appliance sizes.",
            "enum": [
                "TINY",
                "SMALL",
                "MEDIUM",
                "LARGE",
                "XLARGE"
            ]
        },
        "VcenterDeploymentApplianceState": {
            "type": "string",
            "description": "The {@name ApplianceState} {@term enumerated type} defines the various states the vCenter Appliance can be in.",
            "enum": [
                "NOT_INITIALIZED",
                "INITIALIZED",
                "CONFIG_IN_PROGRESS",
                "QUESTION_RAISED",
                "FAILED",
                "CONFIGURED"
            ]
        },
        "VcenterDeploymentApplianceType": {
            "type": "string",
            "description": "The {@name ApplianceType} {@term enumerated type} defines the vCenter appliance types.",
            "enum": [
                "VCSA_EMBEDDED",
                "VCSA_EXTERNAL",
                "PSC_EXTERNAL"
            ]
        },
        "VcenterDeploymentCheckInfo": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status of the check.",
                    "$ref": "#/definitions/VcenterDeploymentCheckStatus"
                },
                "result": {
                    "description": "Result of the check.",
                    "$ref": "#/definitions/VcenterDeploymentNotifications"
                },
                "source_info": {
                    "description": "Information collected from the source machine.",
                    "$ref": "#/definitions/VcenterDeploymentSourceInfo"
                }
            },
            "required": [
                "status"
            ]
        },
        "VcenterDeploymentCheckStatus": {
            "type": "string",
            "description": "The {@name CheckStatus} {@term enumerated type} defines the status of the checks.",
            "enum": [
                "SUCCESS",
                "FAILED"
            ]
        },
        "VcenterDeploymentDataMigrationEstimate": {
            "type": "object",
            "properties": {
                "estimated_export_time": {
                    "description": "The time estimated to export data from the source vCenter Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "estimated_import_time": {
                    "description": "The time estimated to import data to the upgraded vCenter Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "required_free_disk_space_on_source": {
                    "description": "The extra free space required on source vCenter Server.",
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "estimated_export_time",
                "estimated_import_time",
                "required_free_disk_space_on_source"
            ]
        },
        "VcenterDeploymentDataMigrationInfo": {
            "type": "object",
            "properties": {
                "core": {
                    "description": "Migrate only core data and configuration from vCenter Server. Events, tasks, and stats will not be migrated.",
                    "$ref": "#/definitions/VcenterDeploymentDataMigrationEstimate"
                },
                "core_events_tasks": {
                    "description": "Migrate core, events, and tasks from vCenter Server. Stats will not be migrated.",
                    "$ref": "#/definitions/VcenterDeploymentDataMigrationEstimate"
                },
                "all": {
                    "description": "Migrate all data from vCenter Server.",
                    "$ref": "#/definitions/VcenterDeploymentDataMigrationEstimate"
                },
                "core_events_tasks_with_deferred": {
                    "description": "Migrate core, events, and tasks from vCenter Server. Events and tasks will be migrated after the upgrade. Stats will not be migrated.",
                    "$ref": "#/definitions/VcenterDeploymentDataMigrationEstimate"
                },
                "all_with_deferred": {
                    "description": "Migrate all data from vCenter Server. Events, tasks, and stats will be migrated after the upgrade.",
                    "$ref": "#/definitions/VcenterDeploymentDataMigrationEstimate"
                }
            },
            "required": [
                "core",
                "core_events_tasks",
                "all"
            ]
        },
        "VcenterDeploymentHistoryMigrationOption": {
            "type": "string",
            "description": "The {@name HistoryMigrationOption} {@term enumerated type} defines the vCenter history migration option choices.",
            "enum": [
                "EVENTS_TASKS",
                "ALL"
            ]
        },
        "VcenterDeploymentHistoryMigrationSpec": {
            "type": "object",
            "properties": {
                "data_set": {
                    "description": "Defines what part of vCenter historical data will be migrated along with core data.",
                    "$ref": "#/definitions/VcenterDeploymentHistoryMigrationOption"
                },
                "defer_import": {
                    "description": "Defines how vCenter history will be migrated. If set to true, vCenter history will be migrated separately after successful upgrade(supported scenarios are upgrade from 6.0 or 6.5 to 6.7) or migration, otherwise it will be migrated along with core data during the upgrade or migration process. vCSA upgrade with deferred import is no longer supported for target version 7.0 and later.",
                    "type": "boolean"
                }
            },
            "required": [
                "data_set"
            ]
        },
        "VcenterDeploymentImportHistoryCreateSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the vCenter history import task",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the vCenter history import task.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "description"
            ]
        },
        "VcenterDeploymentImportHistoryInfo": {
            "type": "object",
            "properties": {
                "progress": {
                    "description": "The progress info of this task.",
                    "$ref": "#/definitions/CisTaskProgress"
                },
                "result": {
                    "description": "Result of the operation. If an operation reports partial results before it completes, this {@term field} could be {@term set} before the {@link cis.task.CommonInfo#status} has the value {@link cis.task.Status#SUCCEEDED}. The value could change as the operation progresses.",
                    "$ref": "#/definitions/VcenterDeploymentNotifications"
                },
                "description": {
                    "description": "Description of the operation associated with the task.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "service": {
                    "description": "Identifier of the service containing the operation.",
                    "type": "string"
                },
                "operation": {
                    "description": "Identifier of the operation associated with the task.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the current task.",
                    "type": "string"
                },
                "target": {
                    "description": "Identifier of the target created by the operation or an existing one the operation performed on.",
                    "$ref": "#/definitions/VapiStdDynamicID"
                },
                "status": {
                    "description": "Status of the operation associated with the task.",
                    "$ref": "#/definitions/CisTaskStatus"
                },
                "cancelable": {
                    "description": "Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.",
                    "type": "boolean"
                },
                "error": {
                    "description": "Description of the error if the operation status is \"FAILED\".",
                    "type": "string"
                },
                "start_time": {
                    "description": "Time when the operation is started.",
                    "type": "string",
                    "format": "date-time"
                },
                "end_time": {
                    "description": "Time when the operation is completed.",
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "description": "Name of the user who performed the operation.",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "service",
                "operation",
                "status",
                "cancelable"
            ]
        },
        "VcenterDeploymentImportHistoryStart": {
            "$ref": "#/definitions/VcenterDeploymentImportHistoryCreateSpec",
            "description": "An optional {@name CreateSpec} info that can be passed for creating a new historical data import task and starts it."
        },
        "VcenterDeploymentInfo": {
            "type": "object",
            "properties": {
                "state": {
                    "description": "State of the vCenter Server Appliance.",
                    "$ref": "#/definitions/VcenterDeploymentApplianceState"
                },
                "progress": {
                    "description": "The progress info of the current appliance status.",
                    "$ref": "#/definitions/CisTaskProgress"
                },
                "subtask_order": {
                    "description": "The ordered list of subtasks for this deployment operation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subtasks": {
                    "description": "The map of the deployment subtasks and their status infomation.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterDeploymentTask"
                    }
                },
                "description": {
                    "description": "Description of the operation associated with the task.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "service": {
                    "description": "Identifier of the service containing the operation.",
                    "type": "string"
                },
                "operation": {
                    "description": "Identifier of the operation associated with the task.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the current task.",
                    "type": "string"
                },
                "target": {
                    "description": "Identifier of the target created by the operation or an existing one the operation performed on.",
                    "$ref": "#/definitions/VapiStdDynamicID"
                },
                "status": {
                    "description": "Status of the operation associated with the task.",
                    "$ref": "#/definitions/CisTaskStatus"
                },
                "cancelable": {
                    "description": "Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.",
                    "type": "boolean"
                },
                "error": {
                    "description": "Description of the error if the operation status is \"FAILED\".",
                    "type": "string"
                },
                "start_time": {
                    "description": "Time when the operation is started.",
                    "type": "string",
                    "format": "date-time"
                },
                "end_time": {
                    "description": "Time when the operation is completed.",
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "description": "Name of the user who performed the operation.",
                    "type": "string"
                }
            },
            "required": [
                "state",
                "description",
                "service",
                "operation",
                "status",
                "cancelable"
            ]
        },
        "VcenterDeploymentInstallCheck": {
            "$ref": "#/definitions/VcenterDeploymentInstallInstallSpec",
            "description": "InstallSpec parameters to run sanity check with."
        },
        "VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The IP address or DNS resolvable name of the remote PSC.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the remote PSC.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address"
            ]
        },
        "VcenterDeploymentInstallInstallSpec": {
            "type": "object",
            "properties": {
                "vcsa_embedded": {
                    "description": "Spec used to configure an embedded vCenter Server. This field describes how the embedded vCenter Server appliance should be configured.",
                    "$ref": "#/definitions/VcenterDeploymentInstallVcsaEmbeddedSpec"
                },
                "auto_answer": {
                    "description": "Use the default option for any questions that may come up during appliance configuration.",
                    "type": "boolean"
                }
            },
            "required": [
                "vcsa_embedded"
            ]
        },
        "VcenterDeploymentInstallPscReplicatedCheck": {
            "$ref": "#/definitions/VcenterDeploymentReplicatedPscSpec",
            "description": "Information to configure a replicated PSC."
        },
        "VcenterDeploymentInstallPscStandaloneCheck": {
            "$ref": "#/definitions/VcenterDeploymentStandalonePscSpec",
            "description": "Information to configure a non-replicated PSC."
        },
        "VcenterDeploymentInstallRemotePscCheck": {
            "$ref": "#/definitions/VcenterDeploymentRemotePscSpec",
            "description": "Information to connect to the remote PSC."
        },
        "VcenterDeploymentInstallStart": {
            "$ref": "#/definitions/VcenterDeploymentInstallInstallSpec",
            "description": "InstallSpec parameters to configure the appliance install."
        },
        "VcenterDeploymentInstallVcsaEmbeddedSpec": {
            "type": "object",
            "properties": {
                "standalone": {
                    "description": "Spec used to configure a standalone embedded vCenter Server. This field describes how the standalone vCenter Server appliance should be configured.",
                    "$ref": "#/definitions/VcenterDeploymentStandaloneSpec"
                },
                "replicated": {
                    "description": "Spec used to configure a replicated embedded vCenter Server. This field describes how the replicated vCenter Server appliance should be configured.",
                    "$ref": "#/definitions/VcenterDeploymentReplicatedSpec"
                },
                "ceip_enabled": {
                    "description": "Whether CEIP should be enabled or disabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "VcenterDeploymentLocationSpec": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the container.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the container.",
                    "type": "integer",
                    "format": "int64"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled. If {@name #sslVerify} is true and and {@name #sslThumbprint} is {@term unset}, the CA certificate will be used for verification. If {@name #sslVerify} is true and {@name #sslThumbprint} is set then the thumbprint will be used for verification. No verification will be performed if {@name #sslVerify} value is set to false.",
                    "type": "boolean"
                },
                "username": {
                    "description": "The administrator account on the host.",
                    "type": "string"
                },
                "password": {
                    "description": "The administrator account password.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "hostname",
                "username",
                "password"
            ]
        },
        "VcenterDeploymentMigrateActiveDirectoryCheck": {
            "$ref": "#/definitions/VcenterDeploymentMigrateActiveDirectoryCheckSpec",
            "description": "Information to connect to Active Directory."
        },
        "VcenterDeploymentMigrateActiveDirectoryCheckSpec": {
            "type": "object",
            "properties": {
                "dns_servers": {
                    "description": "IP addresses of the DNS servers of the Active Directory server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "domain": {
                    "description": "The domain name of the Active Directory server to which the migrated vCenter Server appliance should be joined.",
                    "type": "string"
                },
                "username": {
                    "description": "Active Directory user that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                },
                "password": {
                    "description": "Active Directory user password that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                }
            },
            "required": [
                "dns_servers",
                "domain",
                "username",
                "password"
            ]
        },
        "VcenterDeploymentMigrateActiveDirectorySpec": {
            "type": "object",
            "properties": {
                "domain": {
                    "description": "The domain name of the Active Directory server to which the migrated vCenter Server appliance should be joined.",
                    "type": "string"
                },
                "username": {
                    "description": "Active Directory user that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                },
                "password": {
                    "description": "Active Directory user password that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                }
            },
            "required": [
                "domain",
                "username",
                "password"
            ]
        },
        "VcenterDeploymentMigrateCheck": {
            "$ref": "#/definitions/VcenterDeploymentMigrateMigrateSpec",
            "description": "MigrateSpec parameters to run sanity check on."
        },
        "VcenterDeploymentMigrateMigrateSpec": {
            "type": "object",
            "properties": {
                "source_vc_windows": {
                    "description": "Information specific to the Windows vCenter Server.",
                    "$ref": "#/definitions/VcenterDeploymentMigrateSourceVcWindows"
                },
                "existing_migration_assistant": {
                    "description": "Information specific to the Migration Assistant that is running on the Windows vCenter Server.",
                    "$ref": "#/definitions/VcenterDeploymentMigrateMigrationAssistantSpec"
                },
                "history": {
                    "description": "Determines how vCenter history will be migrated during the migration process. vCenter history consists of: <ul> <li>Statistics</li> <li>Events</li> <li>Tasks</li> </ul> By default only core data will be migrated. Use this spec to define which part of vCenter history data will be migrated and when.",
                    "$ref": "#/definitions/VcenterDeploymentHistoryMigrationSpec"
                },
                "vcsa_embedded": {
                    "description": "Information specific to an embedded vCenter Server.",
                    "$ref": "#/definitions/VcenterDeploymentMigrateVcsaEmbeddedSpec"
                },
                "psc": {
                    "description": "Information specific to a Platform Services Controller.",
                    "$ref": "#/definitions/VcenterDeploymentMigratePscSpec"
                },
                "active_directory": {
                    "description": "Information specific to the Active Directory server to which the source windows vCenter Server is joined.",
                    "$ref": "#/definitions/VcenterDeploymentMigrateActiveDirectorySpec"
                },
                "auto_answer": {
                    "description": "Use the default option for any questions that may come up during appliance configuration.",
                    "type": "boolean"
                }
            },
            "required": [
                "source_vc_windows",
                "existing_migration_assistant"
            ]
        },
        "VcenterDeploymentMigrateMigrationAssistantSpec": {
            "type": "object",
            "properties": {
                "https_port": {
                    "description": "The HTTPS port being used by Migration Assistant.",
                    "type": "integer",
                    "format": "int64"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the Migration Assistant SSL certificate that will be used for verification.",
                    "type": "string"
                }
            },
            "required": [
                "ssl_thumbprint"
            ]
        },
        "VcenterDeploymentMigratePscSpec": {
            "type": "object",
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this Platform Services Controller migration.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "VcenterDeploymentMigrateSourceVcWindows": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the source Windows machine.",
                    "type": "string"
                },
                "username": {
                    "description": "The SSO account with administrative privilege to perform the migration operation.",
                    "type": "string"
                },
                "password": {
                    "description": "The SSO administrator account password.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "hostname",
                "username",
                "password"
            ]
        },
        "VcenterDeploymentMigrateStart": {
            "$ref": "#/definitions/VcenterDeploymentMigrateMigrateSpec",
            "description": "MigrateSpec parameters to configure the appliance migration."
        },
        "VcenterDeploymentMigrateVcsaEmbeddedSpec": {
            "type": "object",
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this embedded vCenter Server migration.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "VcenterDeploymentNotification": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The notification id.",
                    "type": "string"
                },
                "time": {
                    "description": "The time the notification was raised/found.",
                    "type": "string",
                    "format": "date-time"
                },
                "message": {
                    "description": "The notification message.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "resolution": {
                    "description": "The resolution message, if any.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "id",
                "message"
            ]
        },
        "VcenterDeploymentNotifications": {
            "type": "object",
            "properties": {
                "info": {
                    "description": "Info notification messages reported.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterDeploymentNotification"
                    }
                },
                "warnings": {
                    "description": "Warning notification messages reported.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterDeploymentNotification"
                    }
                },
                "errors": {
                    "description": "Error notification messages reported.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterDeploymentNotification"
                    }
                }
            }
        },
        "VcenterDeploymentQuestionAnswer": {
            "$ref": "#/definitions/VcenterDeploymentQuestionAnswerSpec",
            "description": "AnswerSpec with the answer to the raised question."
        },
        "VcenterDeploymentQuestionAnswerSpec": {
            "type": "object",
            "properties": {
                "question_id": {
                    "description": "Id of the question being answered.",
                    "type": "string"
                },
                "answer_val": {
                    "description": "The answer value.",
                    "type": "string"
                }
            },
            "required": [
                "question_id",
                "answer_val"
            ]
        },
        "VcenterDeploymentQuestionInfo": {
            "type": "object",
            "properties": {
                "questions": {
                    "description": "One or more questions raised during the deployment.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterDeploymentQuestionQuestion"
                    }
                }
            },
            "required": [
                "questions"
            ]
        },
        "VcenterDeploymentQuestionQuestion": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Id of the question raised.",
                    "type": "string"
                },
                "question": {
                    "description": "Message describing the question.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "type": {
                    "description": "Type of the question raised.",
                    "$ref": "#/definitions/VcenterDeploymentQuestionQuestionType"
                },
                "default_answer": {
                    "description": "Default answer value.",
                    "type": "string"
                },
                "possible_answers": {
                    "description": "Possible answers values.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "id",
                "question",
                "type",
                "default_answer",
                "possible_answers"
            ]
        },
        "VcenterDeploymentQuestionQuestionType": {
            "type": "string",
            "description": "The {@name QuestionType} {@term enumerated type} defines the type of the question raised.",
            "enum": [
                "YES_NO",
                "OK_CANCEL",
                "ABORT_RETRY_IGNORE"
            ]
        },
        "VcenterDeploymentRemotePscSpec": {
            "type": "object",
            "properties": {
                "psc_hostname": {
                    "description": "The IP address or DNS resolvable name of the remote PSC to which this configuring vCenter Server will be registered to.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the external PSC appliance.",
                    "type": "integer",
                    "format": "int64"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification when ssl_verify field is set to true.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled. If {@name #sslVerify} is true and and {@name #sslThumbprint} is {@term unset}, the CA certificate will be used for verification. If {@name #sslVerify} is true and {@name #sslThumbprint} is set then the thumbprint will be used for verification. No verification will be performed if {@name #sslVerify} value is set to false.",
                    "type": "boolean"
                }
            },
            "required": [
                "psc_hostname",
                "sso_admin_password"
            ]
        },
        "VcenterDeploymentReplicatedPscSpec": {
            "type": "object",
            "properties": {
                "sso_site_name": {
                    "description": "The SSO sitename that will be used in PSC replication.",
                    "type": "string"
                },
                "partner_hostname": {
                    "description": "The IP address or DNS resolvable name of the partner PSC appliance.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the external PSC appliance.",
                    "type": "integer",
                    "format": "int64"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "partner_hostname",
                "sso_admin_password"
            ]
        },
        "VcenterDeploymentReplicatedSpec": {
            "type": "object",
            "properties": {
                "partner_hostname": {
                    "description": "The IP address or DNS resolvable name of the partner PSC appliance.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the external PSC appliance.",
                    "type": "integer",
                    "format": "int64"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "partner_hostname",
                "sso_admin_password"
            ]
        },
        "VcenterDeploymentSourceInfo": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the source vCenter Server.",
                    "type": "string"
                },
                "version": {
                    "description": "Source vCenter Server version.",
                    "type": "string"
                },
                "deployment_type": {
                    "description": "Deployment type of the source vCenter Server.",
                    "$ref": "#/definitions/VcenterDeploymentApplianceType"
                },
                "deployment_size": {
                    "description": "Deployment size of the source vCenter Server.",
                    "$ref": "#/definitions/VcenterDeploymentApplianceSize"
                },
                "sso_domain_name": {
                    "description": "The SSO domain name of the source vCenter Server.",
                    "type": "string"
                },
                "active_directory_domain": {
                    "description": "The domain name of the Active Directory server to which the source vCenter Server is joined.",
                    "type": "string"
                },
                "dns_servers": {
                    "description": "IP addresses of the DNS servers of the Active Directory server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "data_migration_info": {
                    "description": "Contains all the available migrate options, estimated export and import time and the space required to migrate the data.",
                    "$ref": "#/definitions/VcenterDeploymentDataMigrationInfo"
                }
            },
            "required": [
                "hostname",
                "version",
                "deployment_type",
                "deployment_size",
                "sso_domain_name",
                "active_directory_domain",
                "dns_servers"
            ]
        },
        "VcenterDeploymentStandalonePscSpec": {
            "type": "object",
            "properties": {
                "sso_site_name": {
                    "description": "The SSO site name used for this PSC.",
                    "type": "string"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "sso_domain_name": {
                    "description": "The SSO domain name to be used to configure this appliance.",
                    "type": "string"
                }
            },
            "required": [
                "sso_admin_password"
            ]
        },
        "VcenterDeploymentStandaloneSpec": {
            "type": "object",
            "properties": {
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "sso_domain_name": {
                    "description": "The SSO domain name to be used to configure this appliance.",
                    "type": "string"
                }
            },
            "required": [
                "sso_admin_password"
            ]
        },
        "VcenterDeploymentTask": {
            "type": "object",
            "properties": {
                "progress": {
                    "description": "The progress info of this deployment task.",
                    "$ref": "#/definitions/CisTaskProgress"
                },
                "result": {
                    "description": "Result of the task.",
                    "$ref": "#/definitions/VcenterDeploymentNotifications"
                },
                "description": {
                    "description": "Description of the operation associated with the task.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "service": {
                    "description": "Identifier of the service containing the operation.",
                    "type": "string"
                },
                "operation": {
                    "description": "Identifier of the operation associated with the task.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the current task.",
                    "type": "string"
                },
                "target": {
                    "description": "Identifier of the target created by the operation or an existing one the operation performed on.",
                    "$ref": "#/definitions/VapiStdDynamicID"
                },
                "status": {
                    "description": "Status of the operation associated with the task.",
                    "$ref": "#/definitions/CisTaskStatus"
                },
                "cancelable": {
                    "description": "Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.",
                    "type": "boolean"
                },
                "error": {
                    "description": "Description of the error if the operation status is \"FAILED\".",
                    "type": "string"
                },
                "start_time": {
                    "description": "Time when the operation is started.",
                    "type": "string",
                    "format": "date-time"
                },
                "end_time": {
                    "description": "Time when the operation is completed.",
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "description": "Name of the user who performed the operation.",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "service",
                "operation",
                "status",
                "cancelable"
            ]
        },
        "VcenterDeploymentUpgradeCheck": {
            "$ref": "#/definitions/VcenterDeploymentUpgradeUpgradeSpec",
            "description": "UpgradeSpec parameters to run sanity check on."
        },
        "VcenterDeploymentUpgradePscSpec": {
            "type": "object",
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this Platform Services Controller upgrade.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "VcenterDeploymentUpgradeSourceApplianceSpec": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the source appliance.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the source appliance.",
                    "type": "integer",
                    "format": "int64"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled for the source appliance validations. By default it is enabled and will use SSL certificate for verification. If thumbprint is provided, will use thumbprint for the verification.",
                    "type": "boolean"
                },
                "sso_admin_username": {
                    "description": "The SSO administrator account on the source appliance.",
                    "type": "string"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string",
                    "format": "password"
                },
                "root_password": {
                    "description": "The password of the root user on the source appliance.",
                    "type": "string",
                    "format": "password"
                },
                "ssh_verify": {
                    "description": "Appliance SSH verification should be enabled or disabled. By default it is disabled and will not use any verification. If thumbprint is provided, thumbprint verification will be performed.",
                    "type": "boolean"
                },
                "ssh_thumbprint": {
                    "description": "MD5 thumbprint of the server SSH key will be used for verification.",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "sso_admin_username",
                "sso_admin_password",
                "root_password"
            ]
        },
        "VcenterDeploymentUpgradeStart": {
            "$ref": "#/definitions/VcenterDeploymentUpgradeUpgradeSpec",
            "description": "UpgradeSpec parameters to configure the appliance upgrade."
        },
        "VcenterDeploymentUpgradeUpgradeSpec": {
            "type": "object",
            "properties": {
                "source_appliance": {
                    "description": "Source appliance spec.",
                    "$ref": "#/definitions/VcenterDeploymentUpgradeSourceApplianceSpec"
                },
                "source_location": {
                    "description": "Source location spec.",
                    "$ref": "#/definitions/VcenterDeploymentLocationSpec"
                },
                "history": {
                    "description": "Determines how vCenter history will be migrated during the upgrade process. vCenter history consists of: <ul> <li>Statistics</li> <li>Events</li> <li>Tasks</li> </ul> By default only core data will be migrated. Use this spec to define which part of vCenter history data will be migrated and when.",
                    "$ref": "#/definitions/VcenterDeploymentHistoryMigrationSpec"
                },
                "vcsa_embedded": {
                    "description": "Information that are specific to this embedded vCenter Server.",
                    "$ref": "#/definitions/VcenterDeploymentUpgradeVcsaEmbeddedSpec"
                },
                "psc": {
                    "description": "Information that are specific to this Platform Services Controller.",
                    "$ref": "#/definitions/VcenterDeploymentUpgradePscSpec"
                },
                "auto_answer": {
                    "description": "Use the default option for any questions that may come up during appliance configuration.",
                    "type": "boolean"
                }
            },
            "required": [
                "source_appliance",
                "source_location"
            ]
        },
        "VcenterDeploymentUpgradeVcsaEmbeddedSpec": {
            "type": "object",
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this embedded vCenter Server upgrade.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "VcenterFolderFilterSpec": {
            "type": "object",
            "properties": {
                "folders": {
                    "description": "Identifiers of folders that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that folders must have to match the filter (see {@link Summary#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Type that folders must have to match the filter (see {@link Summary#type}).",
                    "$ref": "#/definitions/VcenterFolderType"
                },
                "parent_folders": {
                    "description": "Folders that must contain the folder for the folder to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the folder for the folder to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterFolderSummary": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Identifier of the folder.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the vCenter Server folder.",
                    "type": "string"
                },
                "type": {
                    "description": "Type ({@enum.values Type}) of the vCenter Server folder.",
                    "$ref": "#/definitions/VcenterFolderType"
                }
            },
            "required": [
                "folder",
                "name",
                "type"
            ]
        },
        "VcenterFolderType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the type of a vCenter Server folder.  The type of a folder determines what what kinds of children can be contained in the folder.",
            "enum": [
                "DATACENTER",
                "DATASTORE",
                "HOST",
                "NETWORK",
                "VIRTUAL_MACHINE"
            ]
        },
        "VcenterGuestAdapterMapping": {
            "type": "object",
            "properties": {
                "mac_address": {
                    "description": "The MAC address of a network adapter being customized.",
                    "type": "string"
                },
                "adapter": {
                    "description": "The IP settings for the associated virtual network adapter.",
                    "$ref": "#/definitions/VcenterGuestIPSettings"
                }
            },
            "required": [
                "adapter"
            ]
        },
        "VcenterGuestConfigurationSpec": {
            "type": "object",
            "properties": {
                "windows_config": {
                    "description": "Guest customization specification for a Windows guest operating system",
                    "$ref": "#/definitions/VcenterGuestWindowsConfiguration"
                },
                "linux_config": {
                    "description": "Guest customization specification for a linux guest operating system",
                    "$ref": "#/definitions/VcenterGuestLinuxConfiguration"
                }
            }
        },
        "VcenterGuestCustomizationSpec": {
            "type": "object",
            "properties": {
                "configuration_spec": {
                    "description": "Settings to be applied to the guest during the customization.",
                    "$ref": "#/definitions/VcenterGuestConfigurationSpec"
                },
                "global_DNS_settings": {
                    "description": "Global DNS settings constitute the DNS settings that are not specific to a particular virtual network adapter.",
                    "$ref": "#/definitions/VcenterGuestGlobalDNSSettings"
                },
                "interfaces": {
                    "description": "IP settings that are specific to a particular virtual network adapter. The {@link AdapterMapping} {@term structure} maps a network adapter's MAC address to its {@link IPSettings}. May be empty if there are no network adapters, else should match number of network adapters configured for the VM.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterGuestAdapterMapping"
                    }
                }
            },
            "required": [
                "configuration_spec",
                "global_DNS_settings",
                "interfaces"
            ]
        },
        "VcenterGuestCustomizationSpecsCreate": {
            "$ref": "#/definitions/VcenterGuestCustomizationSpecsCreateSpec",
            "description": "The information i.e. name, description and the settings i.e hostname, ip address etc for the new customization specification that needs to be created."
        },
        "VcenterGuestCustomizationSpecsCreateSpec": {
            "type": "object",
            "properties": {
                "spec": {
                    "description": "The specification object.",
                    "$ref": "#/definitions/VcenterGuestCustomizationSpec"
                },
                "description": {
                    "description": "Description of the specification.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the specification.",
                    "type": "string"
                }
            },
            "required": [
                "spec",
                "description",
                "name"
            ]
        },
        "VcenterGuestCustomizationSpecsExport": {
            "type": "object",
            "properties": {
                "format": {
                    "$ref": "#/definitions/VcenterGuestCustomizationSpecsFormat",
                    "description": "The format in which the customization specification has to be returned."
                }
            },
            "required": [
                "format"
            ]
        },
        "VcenterGuestCustomizationSpecsFilterSpec": {
            "type": "object",
            "properties": {
                "names": {
                    "description": "Names that guest customization specifications must have to match the filter (see {@link Summary#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "OS_type": {
                    "description": "Guest operating system type that guest customization specifications must have to match the filter (see {@link Summary#osType}).",
                    "$ref": "#/definitions/VcenterGuestCustomizationSpecsOsType"
                }
            }
        },
        "VcenterGuestCustomizationSpecsFormat": {
            "type": "string",
            "description": "The {@name Format} {@term enumerated type} specifies the formats the customization specification can be exported to.",
            "enum": [
                "JSON",
                "XML"
            ]
        },
        "VcenterGuestCustomizationSpecsImportSpecification": {
            "type": "object",
            "properties": {
                "customization_spec": {
                    "type": "string",
                    "description": "content to be converted to the spec."
                }
            },
            "required": [
                "customization_spec"
            ]
        },
        "VcenterGuestCustomizationSpecsInfo": {
            "type": "object",
            "properties": {
                "last_modified": {
                    "description": "Time when the specification was last modified.",
                    "type": "string",
                    "format": "date-time"
                },
                "spec": {
                    "description": "The Spec object including specification and metadata information.",
                    "$ref": "#/definitions/VcenterGuestCustomizationSpecsSpec"
                }
            },
            "required": [
                "last_modified",
                "spec"
            ]
        },
        "VcenterGuestCustomizationSpecsOsType": {
            "type": "string",
            "description": "The {@name OsType} {@term enumerated type} defines the types of guest operating systems for which guest customization is supported.",
            "enum": [
                "WINDOWS",
                "LINUX"
            ]
        },
        "VcenterGuestCustomizationSpecsSet": {
            "$ref": "#/definitions/VcenterGuestCustomizationSpecsSpec",
            "description": "The new specification that will overwrite the existing specification."
        },
        "VcenterGuestCustomizationSpecsSpec": {
            "type": "object",
            "properties": {
                "fingerprint": {
                    "description": "The fingerprint is a unique identifier for a given version of the configuration. Each change to the configuration will update this value. A client cannot change this value. If specified when updating a specification, the changes will only be applied if the current fingerprint matches the specified fingerprint. This field can be used to guard against updates that has happened between the specification content was read and until it is applied.",
                    "type": "string"
                },
                "spec": {
                    "description": "The specification object.",
                    "$ref": "#/definitions/VcenterGuestCustomizationSpec"
                },
                "description": {
                    "description": "Description of the specification.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the specification.",
                    "type": "string"
                }
            },
            "required": [
                "fingerprint",
                "spec",
                "description",
                "name"
            ]
        },
        "VcenterGuestCustomizationSpecsSummary": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the guest customization specification.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the guest customization specification.",
                    "type": "string"
                },
                "OS_type": {
                    "description": "Guest operating system type for which that this guest customization specification applies.",
                    "$ref": "#/definitions/VcenterGuestCustomizationSpecsOsType"
                },
                "last_modified": {
                    "description": "Date and tme when this guest customization specification was last modified.",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "name",
                "description",
                "OS_type",
                "last_modified"
            ]
        },
        "VcenterGuestDomain": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of network to join after the customization.",
                    "$ref": "#/definitions/VcenterGuestDomainType"
                },
                "workgroup": {
                    "description": "The workgroup that the virtual machine should join.",
                    "type": "string"
                },
                "domain": {
                    "description": "The domain to which the virtual machine should be joined.",
                    "type": "string"
                },
                "domain_username": {
                    "description": "The domain user that has permission to join the domain after virtual machine is joined.",
                    "type": "string"
                },
                "domain_password": {
                    "description": "The domain user password that has permission to join the {@link Domain#domainUsername} after customization.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterGuestDomainType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the types of network the virtual machine should join to after the customization is completed.",
            "enum": [
                "WORKGROUP",
                "DOMAIN"
            ]
        },
        "VcenterGuestGlobalDNSSettings": {
            "type": "object",
            "properties": {
                "dns_suffix_list": {
                    "description": "List of name resolution suffixes for the virtual network adapter. This list applies to both Windows and Linux guest customization. For Linux, this setting is global, whereas in Windows, this setting is listed on a per-adapter basis.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dns_servers": {
                    "description": "List of DNS servers, for a virtual network adapter with a static IP address. If this list is empty, then the guest operating system is expected to use a DHCP server to get its DNS server settings. These settings configure the virtual machine to use the specified DNS servers. These DNS server settings are listed in the order of preference.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterGuestGuiUnattended": {
            "type": "object",
            "properties": {
                "auto_logon": {
                    "description": "Flag to determine whether or not the machine automatically logs on as Administrator. See the {@link GuiUnattended#password} property. If {@link GuiUnattended#autoLogon} flag is set, then {@link GuiUnattended#password} must not be {@term unset} or the guest customization will fail.",
                    "type": "boolean"
                },
                "auto_logon_count": {
                    "description": "If the {@link GuiUnattended#autoLogon} flag is {@term set}, then this property specifies the number of times the machine should automatically log on as Administrator. Generally it should be 1, but if the setup requires a number of reboots, you may want to increase it. This number may be determined by the list of commands.",
                    "type": "integer",
                    "format": "int64"
                },
                "password": {
                    "description": "The new administrator password for the machine. To specify that the password should be set to blank (that is, no password), leave it unset.",
                    "type": "string",
                    "format": "password"
                },
                "time_zone": {
                    "description": "The time zone index for the virtual machine. Numbers correspond to time zones at https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "auto_logon",
                "auto_logon_count",
                "time_zone"
            ]
        },
        "VcenterGuestHostnameGenerator": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of the Name Generator",
                    "$ref": "#/definitions/VcenterGuestHostnameGeneratorType"
                },
                "fixed_name": {
                    "description": "The virtual machine name specified by the client.",
                    "type": "string"
                },
                "prefix": {
                    "description": "Base prefix, to which a unique number is appended.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterGuestHostnameGeneratorType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} specifies different types of Name Generators.",
            "enum": [
                "FIXED",
                "PREFIX",
                "VIRTUAL_MACHINE",
                "USER_INPUT_REQUIRED"
            ]
        },
        "VcenterGuestIPSettings": {
            "type": "object",
            "properties": {
                "ipv4": {
                    "description": "Specification to configure IPv4 address, subnet mask and gateway info for this virtual network adapter.",
                    "$ref": "#/definitions/VcenterGuestIpv4"
                },
                "ipv6": {
                    "description": "Specification to configure IPv6 address, subnet mask and gateway info for this virtual network adapter.",
                    "$ref": "#/definitions/VcenterGuestIpv6"
                },
                "windows": {
                    "description": "Windows settings to be configured for this specific virtual Network adapter. This is valid only for Windows guest operating systems.",
                    "$ref": "#/definitions/VcenterGuestWindowsNetworkAdapterSettings"
                }
            }
        },
        "VcenterGuestIpv4": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of the IPv4 configuration.",
                    "$ref": "#/definitions/VcenterGuestIpv4Type"
                },
                "ip_address": {
                    "description": "The static IPv4 address",
                    "type": "string"
                },
                "prefix": {
                    "description": "The IPv4 CIDR prefix, for example, 24.  See http://www.oav.net/mirrors/cidr.html for netmask-to-prefix conversion.",
                    "type": "integer",
                    "format": "int64"
                },
                "gateways": {
                    "description": "Gateways for the IPv4 address.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterGuestIpv4Type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} specifies different types of the IPv4 configuration.",
            "enum": [
                "DHCP",
                "STATIC",
                "USER_INPUT_REQUIRED"
            ]
        },
        "VcenterGuestIpv6": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The IPv6 configuration type",
                    "$ref": "#/definitions/VcenterGuestIpv6Type"
                },
                "ipv6": {
                    "description": "IPv6 address",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterGuestIpv6Address"
                    }
                },
                "gateways": {
                    "description": "gateways for the IPv6 address.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterGuestIpv6Address": {
            "type": "object",
            "properties": {
                "ip_address": {
                    "description": "Static IPv6 Address.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix for the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "ip_address",
                "prefix"
            ]
        },
        "VcenterGuestIpv6Type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} specifies different types of the IPv6 configuration.",
            "enum": [
                "DHCP",
                "STATIC",
                "USER_INPUT_REQUIRED"
            ]
        },
        "VcenterGuestLinuxConfiguration": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The network host name of the Linux virtual machine.",
                    "$ref": "#/definitions/VcenterGuestHostnameGenerator"
                },
                "domain": {
                    "description": "The fully qualified domain name.",
                    "type": "string"
                },
                "time_zone": {
                    "description": "The case-sensitive time zone, such as Europe/Sofia. Valid time zone values are based on the tz (time zone) database used by Linux. The values are strings ({@term string}) in the form \"Area/Location,\" in which Area is a continent or ocean name, and Location is the city, island, or other regional designation. <p> See the https://kb.vmware.com/kb/2145518 for a list of supported time zones for different versions in Linux.",
                    "type": "string"
                },
                "script_text": {
                    "description": "The script to run before and after Linux guest customization.<br> The max size of the script is 1500 bytes. As long as the script (shell, perl, python...) has the right \"#!\" in the header, it is supported. The caller should not assume any environment variables when the script is run. <p> The script is invoked by the customization engine using the command line: 1) with argument \"precustomization\" before customization, 2) with argument \"postcustomization\" after customization. The script should parse this argument and implement pre-customization or post-customization task code details in the corresponding block. <p> A Linux shell script example: <p> <code> #!/bin/sh<br> if [ x$1 == x\"precustomization\" ]; then<br> echo \"Do Precustomization tasks\"<br> #code for pre-customization actions...<br> elif [ x$1 == x\"postcustomization\" ]; then<br> echo \"Do Postcustomization tasks\"<br> #code for post-customization actions...<br> fi<br> </code>",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "domain"
            ]
        },
        "VcenterGuestUserData": {
            "type": "object",
            "properties": {
                "computer_name": {
                    "description": "The computer name of the (Windows) virtual machine. A computer name may contain letters (A-Z), numbers(0-9) and hyphens (-) but no spaces or periods (.). The name may not consist entirely of digits. A computer name is restricted to 15 characters in length. If the computer name is longer than 15 characters, it will be truncated to 15 characters. Check {@link HostnameGenerator} for various options.",
                    "$ref": "#/definitions/VcenterGuestHostnameGenerator"
                },
                "full_name": {
                    "description": "Full name of the end user. Note that this is not the username but full name specified in \"Firstname Lastname\" format.",
                    "type": "string"
                },
                "organization": {
                    "description": "Name of the organization that owns the computer.",
                    "type": "string"
                },
                "product_key": {
                    "description": "The product Key to use for activating Windows guest operating system.",
                    "type": "string"
                }
            },
            "required": [
                "computer_name",
                "full_name",
                "organization",
                "product_key"
            ]
        },
        "VcenterGuestWindowsConfiguration": {
            "type": "object",
            "properties": {
                "reboot": {
                    "description": "A value specifying the action that should be taken after customization.",
                    "$ref": "#/definitions/VcenterGuestWindowsConfigurationRebootOption"
                },
                "sysprep": {
                    "description": "Customization settings like user details, administrator details, etc for the windows guest operating system. Exactly one of {@name #sysprep} or {@name #sysprepXml} must be specified.",
                    "$ref": "#/definitions/VcenterGuestWindowsSysprep"
                },
                "sysprep_xml": {
                    "description": "All settings specified in a XML format. This is the content of a typical answer.xml file that is used by System administrators during the Windows image customization. Check https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs Exactly one of {@name #sysprep} or {@name #sysprepXml} must be specified.",
                    "type": "string"
                }
            }
        },
        "VcenterGuestWindowsConfigurationRebootOption": {
            "type": "string",
            "description": "The {@name RebootOption} {@term enumerated type} specifies what should be done to the guest after the customization.",
            "enum": [
                "REBOOT",
                "NO_REBOOT",
                "SHUTDOWN"
            ]
        },
        "VcenterGuestWindowsNetworkAdapterSettings": {
            "type": "object",
            "properties": {
                "dns_servers": {
                    "description": "A list of server IP addresses to use for DNS lookup in a Windows guest operating system. <p> These servers should be specified in the order of preference. If this list is not empty, and if a DHCP IP address is used, then these settings override the DHCP settings.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dns_domain": {
                    "description": "A DNS domain suffix such as vmware.com.",
                    "type": "string"
                },
                "wins_servers": {
                    "description": "List of WINS Servers to set for the Windows guest operating system. A Maximum of two IP addresses can be specified in this list. The first IP address will be set as the primary WINS server. The second IP address will be set as the secondary WINS server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "net_BIOS_mode": {
                    "description": "NetBIOS setting for Windows.",
                    "$ref": "#/definitions/VcenterGuestWindowsNetworkAdapterSettingsNetBIOSMode"
                }
            }
        },
        "VcenterGuestWindowsNetworkAdapterSettingsNetBIOSMode": {
            "type": "string",
            "description": "The {@name NetBIOSMode} {@term enumerated type} specifies different NetBIOS settings for Windows guest operating systems.",
            "enum": [
                "USE_DHCP",
                "ENABLE",
                "DISABLE"
            ]
        },
        "VcenterGuestWindowsSysprep": {
            "type": "object",
            "properties": {
                "gui_run_once_commands": {
                    "description": "A list of commands to run at first user logon, after customizing the guest. These commands are directly mapped to the GuiRunOnce key in the sysprep.xml answer file. These commands are transferred into the sysprep.xml file that VirtualCenter stores on the target virtual disk. For more information about performing unattended installation, check https://technet.microsoft.com/en-us/library/cc771830(v=ws.10).aspx The commands listed here ar executed when a user logs on the first time after customization completes. The logon may be driven by {@link GuiUnattended#autoLogon} setting. These commands are directly mapped to the GuiRunOnce key in the",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_data": {
                    "description": "Personal data pertaining to the owner of the virtual machine.",
                    "$ref": "#/definitions/VcenterGuestUserData"
                },
                "domain": {
                    "description": "Information needed to join a workgroup or domain.",
                    "$ref": "#/definitions/VcenterGuestDomain"
                },
                "gui_unattended": {
                    "description": "Information related to unattended installation.",
                    "$ref": "#/definitions/VcenterGuestGuiUnattended"
                }
            },
            "required": [
                "user_data",
                "gui_unattended"
            ]
        },
        "VcenterHostConnectionState": {
            "type": "string",
            "enum": [
                "CONNECTED",
                "DISCONNECTED",
                "NOT_RESPONDING"
            ]
        },
        "VcenterHostCreate": {
            "$ref": "#/definitions/VcenterHostCreateSpec",
            "description": "Specification for the new host to be created."
        },
        "VcenterHostCreateSpec": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the host.",
                    "type": "string"
                },
                "port": {
                    "description": "The port of the host.",
                    "type": "integer",
                    "format": "int64"
                },
                "user_name": {
                    "description": "The administrator account on the host.",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the administrator account on the host.",
                    "type": "string",
                    "format": "password"
                },
                "folder": {
                    "description": "Host and cluster folder in which the new standalone host should be created.",
                    "type": "string"
                },
                "thumbprint_verification": {
                    "description": "Type of host's SSL certificate verification to be done.",
                    "$ref": "#/definitions/VcenterHostCreateSpecThumbprintVerification"
                },
                "thumbprint": {
                    "description": "The thumbprint of the SSL certificate, which the host is expected to have. The thumbprint is always computed using the SHA1 hash and is the string representation of that hash in the format: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx where, 'x' represents a hexadecimal digit.",
                    "type": "string"
                },
                "force_add": {
                    "description": "Whether host should be added to the vCenter Server even if it is being managed by another vCenter Server. The original vCenterServer loses connection to the host.",
                    "type": "boolean"
                }
            },
            "required": [
                "hostname",
                "user_name",
                "password",
                "thumbprint_verification"
            ]
        },
        "VcenterHostCreateSpecThumbprintVerification": {
            "type": "string",
            "description": "The {@name ThumbprintVerification} {@term enumerated type} defines the thumbprint verification schemes for a host's SSL certificate.",
            "enum": [
                "NONE",
                "THUMBPRINT"
            ]
        },
        "VcenterHostFilterSpec": {
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "Identifiers of hosts that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that hosts must have to match the filter (see {@link Summary#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the hosts for the hosts to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the hosts for the hosts to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "standalone": {
                    "description": "If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter.",
                    "type": "boolean"
                },
                "clusters": {
                    "description": "Clusters that must contain the hosts for the hosts to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "connection_states": {
                    "description": "Connection states that a host must be in to match the filter (see {@link Summary#connectionState}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterHostConnectionState"
                    }
                }
            }
        },
        "VcenterHostPowerState": {
            "type": "string",
            "description": "The {@name PowerState} {@term enumerated type} defines the power states of a host.",
            "enum": [
                "POWERED_ON",
                "POWERED_OFF",
                "STANDBY"
            ]
        },
        "VcenterHostSummary": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Identifier of the host.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the host.",
                    "type": "string"
                },
                "connection_state": {
                    "description": "Connection status of the host",
                    "$ref": "#/definitions/VcenterHostConnectionState"
                },
                "power_state": {
                    "description": "Power state of the host",
                    "$ref": "#/definitions/VcenterHostPowerState"
                }
            },
            "required": [
                "host",
                "name",
                "connection_state"
            ]
        },
        "VcenterIdentityProvidersActiveDirectoryOverLdap": {
            "type": "object",
            "properties": {
                "user_name": {
                    "description": "User name to connect to the active directory server.",
                    "type": "string"
                },
                "password": {
                    "description": "Password to connect to the active directory server.",
                    "type": "string",
                    "format": "password"
                },
                "users_base_dn": {
                    "description": "Base distinguished name for users",
                    "type": "string"
                },
                "groups_base_dn": {
                    "description": "Base distinguished name for groups",
                    "type": "string"
                },
                "server_endpoints": {
                    "description": "Active directory server endpoints. At least one active directory server endpoint must be set.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "cert_chain": {
                    "description": "SSL certificate chain in base64 encoding.",
                    "$ref": "#/definitions/VcenterCertificateManagementX509CertChain"
                }
            },
            "required": [
                "user_name",
                "password",
                "users_base_dn",
                "groups_base_dn",
                "server_endpoints"
            ]
        },
        "VcenterIdentityProvidersConfigType": {
            "type": "string",
            "description": "The {@name ConfigType} {@term structure} contains the possible types of vCenter Server identity providers.",
            "enum": [
                "Oauth2",
                "Oidc"
            ]
        },
        "VcenterIdentityProvidersCreate": {
            "$ref": "#/definitions/VcenterIdentityProvidersCreateSpec",
            "description": "the CreateSpec contains the information used to create the provider"
        },
        "VcenterIdentityProvidersCreateSpec": {
            "type": "object",
            "properties": {
                "config_tag": {
                    "description": "The config type of the identity provider",
                    "$ref": "#/definitions/VcenterIdentityProvidersConfigType"
                },
                "oauth2": {
                    "description": "OAuth2 CreateSpec",
                    "$ref": "#/definitions/VcenterIdentityProvidersOauth2CreateSpec"
                },
                "oidc": {
                    "description": "OIDC CreateSpec",
                    "$ref": "#/definitions/VcenterIdentityProvidersOidcCreateSpec"
                },
                "org_ids": {
                    "description": "The set of orgIds as part of SDDC creation which provides the basis for tenancy",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "is_default": {
                    "description": "Specifies whether the provider is the default provider. Setting {@name CreateSpec#isDefault} of current provider to True makes all other providers non-default. If no other providers created in this vCenter Server before, this parameter will be disregarded, and the provider will always be set to the default.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The user friendly name for the provider. This name can be used for human-readable identification purposes, but it does not have to be unique, as the system will use internal UUIDs to differentiate providers.",
                    "type": "string"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "idm_protocol": {
                    "description": "Communication protocol to the identity management endpoints.",
                    "$ref": "#/definitions/VcenterIdentityProvidersIdmProtocol"
                },
                "idm_endpoints": {
                    "description": "Identity management endpoints. When specified, at least one endpoint must be provided.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "active_directory_over_ldap": {
                    "description": "Identity management configuration. If the protocol is LDAP, the configuration must be set, else InvalidArgument is thrown.",
                    "$ref": "#/definitions/VcenterIdentityProvidersActiveDirectoryOverLdap"
                },
                "upn_claim": {
                    "description": "Specifies which claim provides the user principal name (UPN) for the user.",
                    "type": "string"
                },
                "groups_claim": {
                    "description": "Specifies which claim provides the group membership for the token subject. These groups will be used for mapping to local groups per the claim map.",
                    "type": "string"
                }
            },
            "required": [
                "config_tag"
            ]
        },
        "VcenterIdentityProvidersIdmProtocol": {
            "type": "string",
            "description": "The {@name IdmProtocol} {@term structure} contains the possible types of communication protocols to the identity management endpoints.",
            "enum": [
                "REST",
                "SCIM",
                "SCIM2_0",
                "LDAP"
            ]
        },
        "VcenterIdentityProvidersInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The user friendly name for the provider",
                    "type": "string"
                },
                "org_ids": {
                    "description": "The set of orgIds as part of SDDC creation which provides the basis for tenancy",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "config_tag": {
                    "description": "The config type of the identity provider",
                    "$ref": "#/definitions/VcenterIdentityProvidersConfigType"
                },
                "oauth2": {
                    "description": "OAuth2 Info",
                    "$ref": "#/definitions/VcenterIdentityProvidersOauth2Info"
                },
                "oidc": {
                    "description": "OIDC Info",
                    "$ref": "#/definitions/VcenterIdentityProvidersOidcInfo"
                },
                "is_default": {
                    "description": "Specifies whether the provider is the default provider.",
                    "type": "boolean"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains. If domainNames is an empty set, domain validation behavior at login with this identity provider will be as follows: the user's domain will be parsed from the User Principal Name (UPN) value that is found in the tokens returned by the identity provider. This domain will then be implicitly trusted and used to filter any groups that are also provided in the tokens.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "idm_protocol": {
                    "description": "Communication protocol to the identity management endpoints.",
                    "$ref": "#/definitions/VcenterIdentityProvidersIdmProtocol"
                },
                "idm_endpoints": {
                    "description": "Identity management endpoints.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "active_directory_over_ldap": {
                    "description": "Identity management configuration.",
                    "$ref": "#/definitions/VcenterIdentityProvidersActiveDirectoryOverLdap"
                },
                "upn_claim": {
                    "description": "Specifies which claim provides the user principal name (UPN) for the user.",
                    "type": "string"
                },
                "groups_claim": {
                    "description": "Specifies which claim provides the group membership for the token subject. If empty, the default behavior for CSP is used. In this case, the groups for the subject will be comprised of the groups in 'group_names' and 'group_ids' claims.",
                    "type": "string"
                }
            },
            "required": [
                "org_ids",
                "config_tag",
                "is_default"
            ]
        },
        "VcenterIdentityProvidersOauth2AuthenticationMethod": {
            "type": "string",
            "description": "The {@name Oauth2AuthenticationMethod} {@term structure} contains the possible types of OAuth2 authentication methods.",
            "enum": [
                "CLIENT_SECRET_BASIC",
                "CLIENT_SECRET_POST",
                "CLIENT_SECRET_JWT",
                "PRIVATE_KEY_JWT"
            ]
        },
        "VcenterIdentityProvidersOauth2CreateSpec": {
            "type": "object",
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token.",
                    "type": "string"
                },
                "authentication_method": {
                    "description": "Authentication method used by the provider",
                    "$ref": "#/definitions/VcenterIdentityProvidersOauth2AuthenticationMethod"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "public_key_uri",
                "client_id",
                "client_secret",
                "claim_map",
                "issuer",
                "authentication_method"
            ]
        },
        "VcenterIdentityProvidersOauth2Info": {
            "type": "object",
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                    "type": "string"
                },
                "authentication_method": {
                    "description": "Authentication method used by the provider",
                    "$ref": "#/definitions/VcenterIdentityProvidersOauth2AuthenticationMethod"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "public_key_uri",
                "client_id",
                "client_secret",
                "claim_map",
                "issuer",
                "authentication_method",
                "auth_query_params"
            ]
        },
        "VcenterIdentityProvidersOauth2Summary": {
            "type": "object",
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "authentication_header": {
                    "description": "The authentication data used as part of request header to acquire or refresh an OAuth2 token. The data format depends on the authentication method used. Example of basic authentication format: Authorization: Basic [base64Encode(clientId + \":\" + secret)]",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "client_id",
                "authentication_header",
                "auth_query_params"
            ]
        },
        "VcenterIdentityProvidersOauth2UpdateSpec": {
            "type": "object",
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider.",
                    "type": "string",
                    "format": "uri"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "Shared secret between identity provider and client",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                    "type": "string"
                },
                "authentication_method": {
                    "description": "Authentication method used by the provider",
                    "$ref": "#/definitions/VcenterIdentityProvidersOauth2AuthenticationMethod"
                },
                "auth_query_params": {
                    "description": "key/value pairs that are to be appended to the authEndpoint request. How to append to authEndpoint request: If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details: If the value contains only one string, then the key is added with \"k=v\". If the value is an empty list, then the key is added without a \"=v\". If the value contains multiple strings, then the key is repeated in the query-string for each string in the value. If the map is empty, deletes all params.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "VcenterIdentityProvidersOidcCreateSpec": {
            "type": "object",
            "properties": {
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "required": [
                "discovery_endpoint",
                "client_id",
                "client_secret",
                "claim_map"
            ]
        },
        "VcenterIdentityProvidersOidcInfo": {
            "type": "object",
            "properties": {
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "type": "string",
                    "format": "uri"
                },
                "logout_endpoint": {
                    "description": "The endpoint to use for terminating the user's session at the identity provider. This value is automatically derived from the metadata information provided by the OIDC discovery endpoint.",
                    "type": "string",
                    "format": "uri"
                },
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                    "type": "string"
                },
                "authentication_method": {
                    "description": "Authentication method used by the provider",
                    "$ref": "#/definitions/VcenterIdentityProvidersOauth2AuthenticationMethod"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "required": [
                "discovery_endpoint",
                "auth_endpoint",
                "token_endpoint",
                "public_key_uri",
                "client_id",
                "client_secret",
                "claim_map",
                "issuer",
                "authentication_method",
                "auth_query_params"
            ]
        },
        "VcenterIdentityProvidersOidcSummary": {
            "type": "object",
            "properties": {
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "type": "string",
                    "format": "uri"
                },
                "logout_endpoint": {
                    "description": "The endpoint to use for terminating the user's session at the identity provider. This value is automatically derived from the metadata information provided by the OIDC discovery endpoint.",
                    "type": "string",
                    "format": "uri"
                },
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "authentication_header": {
                    "description": "The authentication data used as part of request header to acquire or refresh an OAuth2 token. The data format depends on the authentication method used. Example of basic authentication format: Authorization: Basic [base64Encode(clientId + \":\" + secret)]",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "client_id",
                "authentication_header",
                "auth_query_params"
            ]
        },
        "VcenterIdentityProvidersOidcUpdateSpec": {
            "type": "object",
            "properties": {
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "VcenterIdentityProvidersSummary": {
            "type": "object",
            "properties": {
                "provider": {
                    "description": "The identifier of the provider",
                    "type": "string"
                },
                "name": {
                    "description": "The user friendly name for the provider",
                    "type": "string"
                },
                "config_tag": {
                    "description": "The config type of the identity provider",
                    "$ref": "#/definitions/VcenterIdentityProvidersConfigType"
                },
                "oauth2": {
                    "description": "OAuth2 Summary",
                    "$ref": "#/definitions/VcenterIdentityProvidersOauth2Summary"
                },
                "oidc": {
                    "description": "OIDC Summary",
                    "$ref": "#/definitions/VcenterIdentityProvidersOidcSummary"
                },
                "is_default": {
                    "description": "Specifies whether the provider is the default provider.",
                    "type": "boolean"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains. If domainNames is an empty set, domain validation behavior at login with this identity provider will be as follows: the user's domain will be parsed from the User Principal Name (UPN) value that is found in the tokens returned by the identity provider. This domain will then be implicitly trusted and used to filter any groups that are also provided in the tokens.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "required": [
                "provider",
                "config_tag",
                "is_default"
            ]
        },
        "VcenterIdentityProvidersUpdate": {
            "$ref": "#/definitions/VcenterIdentityProvidersUpdateSpec",
            "description": "the UpdateSpec contains the information used to update the provider"
        },
        "VcenterIdentityProvidersUpdateSpec": {
            "type": "object",
            "properties": {
                "config_tag": {
                    "description": "The config type of the identity provider",
                    "$ref": "#/definitions/VcenterIdentityProvidersConfigType"
                },
                "oauth2": {
                    "description": "OAuth2 UpdateSpec",
                    "$ref": "#/definitions/VcenterIdentityProvidersOauth2UpdateSpec"
                },
                "oidc": {
                    "description": "OIDC UpdateSpec",
                    "$ref": "#/definitions/VcenterIdentityProvidersOidcUpdateSpec"
                },
                "org_ids": {
                    "description": "The set orgIds as part of SDDC creation which provides the basis for tenancy",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "make_default": {
                    "description": "Specifies whether to make this the default provider. If {@name UpdateSpec#makeDefault} is set to true, this provider will be flagged as the default provider and any other providers that had previously been flagged as the default will be made non-default. If {@name UpdateSpec#makeDefault} is set to false, this provider's default flag will not be modified.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The user friendly name for the provider. This name can be used for human-readable identification purposes, but it does not have to be unique, as the system will use internal UUIDs to differentiate providers.",
                    "type": "string"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "auth_query_params": {
                    "description": "key/value pairs that are to be appended to the authEndpoint request. How to append to authEndpoint request: If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details: If the value contains only one string, then the key is added with \"k=v\". If the value is an empty list, then the key is added without a \"=v\". If the value contains multiple strings, then the key is repeated in the query-string for each string in the value. If the map is empty, deletes all params.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "idm_protocol": {
                    "description": "The protocol to communicate to the identity management endpoints",
                    "$ref": "#/definitions/VcenterIdentityProvidersIdmProtocol"
                },
                "idm_endpoints": {
                    "description": "Identity management endpoints. When specified, at least one endpoint must be provided.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "active_directory_over_ldap": {
                    "description": "Identity management configuration. If the protocol is LDAP, the configuration must be set, else InvalidArgument is thrown",
                    "$ref": "#/definitions/VcenterIdentityProvidersActiveDirectoryOverLdap"
                },
                "upn_claim": {
                    "description": "Specifies which claim provides the user principal name (UPN) for the subject of the token.",
                    "type": "string"
                },
                "reset_upn_claim": {
                    "description": "Flag indicating whether the user principal name (UPN) claim should be set back to its default value. If this field is set to {@code true}, the user principal name (UPN) claim will be set to 'acct', which is used for backwards compatibility with CSP. If this field is set to {@code false}, the existing user principal name (UPN) claim will be changed to the value specified in {@link #upnClaim}, if any.",
                    "type": "boolean"
                },
                "groups_claim": {
                    "description": "Specifies which claim provides the group membership for the token subject.",
                    "type": "string"
                },
                "reset_groups_claim": {
                    "description": "Flag indicating whether any existing groups claim value should be removed. If this field is set to {@code true}, the existing groups claim value is removed which defaults to backwards compatibility with CSP. In this case, the groups for the subject will be comprised of the groups in 'group_names' and 'group_ids' claims. If this field is set to {@code false}, the existing groups claim will be changed to the value specified in {@link #groupsClaim}, if any.",
                    "type": "boolean"
                }
            },
            "required": [
                "config_tag"
            ]
        },
        "VcenterInventoryDatastoreInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of the datastore.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterInventoryNetworkInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of the vCenter Server network.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterIsoImageMount": {
            "type": "object",
            "properties": {
                "library_item": {
                    "type": "string",
                    "description": "The identifier of the library item having the ISO image to mount on the virtual machine."
                },
                "vm": {
                    "type": "string",
                    "description": "The identifier of the virtual machine where the specified ISO image will be mounted."
                }
            },
            "required": [
                "library_item",
                "vm"
            ]
        },
        "VcenterIsoImageUnmount": {
            "type": "object",
            "properties": {
                "vm": {
                    "type": "string",
                    "description": "The identifier of the virtual machine from which to unmount the virtual CD-ROM."
                },
                "cdrom": {
                    "type": "string",
                    "description": "The device identifier of the CD-ROM."
                }
            },
            "required": [
                "vm",
                "cdrom"
            ]
        },
        "VcenterLcmDiscoveryAssociatedProductsCreate": {
            "$ref": "#/definitions/VcenterLcmDiscoveryAssociatedProductsCreateSpec",
            "description": "Info creation specification."
        },
        "VcenterLcmDiscoveryAssociatedProductsCreateSpec": {
            "type": "object",
            "properties": {
                "product_name": {
                    "description": "The name of the product.",
                    "type": "string"
                },
                "version": {
                    "description": "Current product version.",
                    "type": "string"
                },
                "deployments": {
                    "description": "The list of hostname/IPs of the instances of the VMware products deployed in the environment.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "product_name",
                "version"
            ]
        },
        "VcenterLcmDiscoveryAssociatedProductsUpdate": {
            "$ref": "#/definitions/VcenterLcmDiscoveryAssociatedProductsUpdateSpec",
            "description": ""
        },
        "VcenterLcmDiscoveryAssociatedProductsUpdateSpec": {
            "type": "object",
            "properties": {
                "deployments": {
                    "description": "The list of hostname/IPs of the instances of the VMware products deployed in the environment.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterLcmDiscoveryInteropReportCreateTask": {
            "$ref": "#/definitions/VcenterLcmDiscoveryInteropReportSpec",
            "description": "Specifies the target version against this interoperability check report will be generated. If unset the report will be generated for the currently installed version of the vCenter server."
        },
        "VcenterLcmDiscoveryInteropReportSpec": {
            "type": "object",
            "properties": {
                "target_version": {
                    "description": "The vCenter Server version. \n It is used for checking against the other products registered with that instance of vCenter Server.\n",
                    "type": "string"
                }
            },
            "required": [
                "target_version"
            ]
        },
        "VcenterLcmDiscoveryProduct": {
            "type": "object",
            "properties": {
                "installed_product": {
                    "description": "Identifies a product and a version uniquely. \nThe identifier consists of product internal name and version.\n\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: PRODUCT. When operations return a value of this structure as a result, the field will be an identifier for the resource type: PRODUCT.",
                    "type": "string"
                },
                "name": {
                    "description": "A public official product name.",
                    "type": "string"
                },
                "version": {
                    "description": "Current product version.",
                    "type": "string"
                },
                "target_version": {
                    "description": "Future version of the product after upgrade.\nProduct.target-version may not be applicable.",
                    "type": "string"
                },
                "deployments": {
                    "description": "The list of hostname/IPs of the instances of the VMware products deployed in the environment. This field would be empty for manually added products.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auto": {
                    "description": "Indicates if the product is auto-detected by the system or manually added. If it is set to true it means it is auto-detected.",
                    "type": "boolean"
                }
            },
            "required": [
                "installed_product",
                "name",
                "version",
                "auto"
            ]
        },
        "VcenterLcmDiscoveryProductCatalogSummary": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "A product name that the customer is aware of.",
                    "type": "string"
                },
                "versions": {
                    "description": "List of versions the customer can select from.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name",
                "versions"
            ]
        },
        "VcenterLcmNotification": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The notification id.",
                    "type": "string"
                },
                "time": {
                    "description": "The time the notification was raised/found.\nOnly if the time information is available.",
                    "type": "string",
                    "format": "date-time"
                },
                "message": {
                    "description": "The notification message.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "resolution": {
                    "description": "The resolution message, if any.\nOnly set for warnings and errors.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "id",
                "message"
            ]
        },
        "VcenterLcmNotifications": {
            "type": "object",
            "properties": {
                "info": {
                    "description": "Info notification messages reported.\nOnly set if an info was reported by the appliance task.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterLcmNotification"
                    }
                },
                "warnings": {
                    "description": "Warning notification messages reported.\nOnly set if an warning was reported by the appliance task.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterLcmNotification"
                    }
                },
                "errors": {
                    "description": "Error notification messages reported.\nOnly set if an error was reported by the appliance task.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterLcmNotification"
                    }
                }
            }
        },
        "VcenterLcmReportsLocation": {
            "type": "object",
            "properties": {
                "uri": {
                    "description": "Report Download URI.",
                    "type": "string",
                    "format": "uri"
                },
                "download_file_token": {
                    "description": "Information about the token required in the HTTP GET request to retrieve the report",
                    "$ref": "#/definitions/VcenterLcmReportsToken"
                }
            },
            "required": [
                "uri",
                "download_file_token"
            ]
        },
        "VcenterLcmReportsToken": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "A one-time, short-lived token required in the HTTP header of the request to the url. This token needs to be passed in as a header with the name \"session-id\".",
                    "type": "string"
                },
                "expiry": {
                    "description": "Expiry time of the token",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "token",
                "expiry"
            ]
        },
        "VcenterLcmUpdatePendingCategory": {
            "type": "string",
            "description": "The Pending.Category enumerated type defines the type of payload this release has on top of previous release",
            "enum": [
                "SECURITY",
                "FIX",
                "UPDATE",
                "UPGRADE"
            ]
        },
        "VcenterLcmUpdatePendingInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the vSphere update",
                    "type": "string"
                },
                "pending_update": {
                    "description": "Identifier of the given vSphere update\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.lcm.update.pending. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.lcm.update.pending.",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the vSphere update or patch",
                    "type": "string"
                },
                "release_date": {
                    "description": "Release date of the vSphere update or patch",
                    "type": "string",
                    "format": "date-time"
                },
                "severity": {
                    "description": "Severity of the issues fixed in the vSphere update or patch",
                    "$ref": "#/definitions/VcenterLcmUpdatePendingSeverityType"
                },
                "build": {
                    "description": "Build number of the vCenter Release",
                    "type": "string"
                },
                "update_type": {
                    "description": "Type of the Release based on the current vCenter version",
                    "$ref": "#/definitions/VcenterLcmUpdatePendingUpdateType"
                },
                "category": {
                    "description": "Category of the release based on features bundled on top of previous release",
                    "$ref": "#/definitions/VcenterLcmUpdatePendingCategory"
                },
                "reboot_required": {
                    "description": "Flag to suggest a reboot after the release is applied",
                    "type": "boolean"
                },
                "execute_URL": {
                    "description": "VAMI or ISO URL for update or upgrade execute phase redirection",
                    "type": "string",
                    "format": "uri"
                },
                "release_notes": {
                    "description": "List of URI pointing to patch or update release notes",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "required": [
                "description",
                "pending_update",
                "version",
                "release_date",
                "severity",
                "build",
                "update_type",
                "category",
                "reboot_required",
                "execute_URL",
                "release_notes"
            ]
        },
        "VcenterLcmUpdatePendingListResult": {
            "type": "object",
            "properties": {
                "last_check_time": {
                    "description": "Time when the software depo was last checked.",
                    "type": "string",
                    "format": "date-time"
                },
                "update_count": {
                    "description": "Number of pending updates\nOnly set if there are available updates",
                    "type": "integer",
                    "format": "int64"
                },
                "upgrade_count": {
                    "description": "Number of pending upgrades\nOnly set if there are available upgrades",
                    "type": "integer",
                    "format": "int64"
                },
                "updates": {
                    "description": "List of pending update details",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterLcmUpdatePendingSummary"
                    }
                },
                "issues": {
                    "description": "Lists of issues encountered during pending updates retrieval.\nset if any issues encountered.",
                    "$ref": "#/definitions/VcenterLcmNotifications"
                }
            },
            "required": [
                "last_check_time",
                "updates"
            ]
        },
        "VcenterLcmUpdatePendingSeverityType": {
            "type": "string",
            "description": "Level of severity for applying a given patch or update.",
            "enum": [
                "CRITICAL",
                "IMPORTANT",
                "MODERATE",
                "LOW"
            ]
        },
        "VcenterLcmUpdatePendingSummary": {
            "type": "object",
            "properties": {
                "pending_update": {
                    "description": "Identifier of the given vSphere update\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.lcm.update.pending. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.lcm.update.pending.",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the vSphere update or patch",
                    "type": "string"
                },
                "release_date": {
                    "description": "Release date of the vSphere update or patch",
                    "type": "string",
                    "format": "date-time"
                },
                "severity": {
                    "description": "Severity of the issues fixed in the vSphere update or patch",
                    "$ref": "#/definitions/VcenterLcmUpdatePendingSeverityType"
                },
                "build": {
                    "description": "Build number of the vCenter Release",
                    "type": "string"
                },
                "update_type": {
                    "description": "Type of the Release based on the current vCenter version",
                    "$ref": "#/definitions/VcenterLcmUpdatePendingUpdateType"
                },
                "category": {
                    "description": "Category of the release based on features bundled on top of previous release",
                    "$ref": "#/definitions/VcenterLcmUpdatePendingCategory"
                },
                "reboot_required": {
                    "description": "Flag to suggest a reboot after the release is applied",
                    "type": "boolean"
                },
                "execute_URL": {
                    "description": "VAMI or ISO URL for update or upgrade execute phase redirection",
                    "type": "string",
                    "format": "uri"
                },
                "release_notes": {
                    "description": "List of URI pointing to patch or update release notes",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "required": [
                "pending_update",
                "version",
                "release_date",
                "severity",
                "build",
                "update_type",
                "category",
                "reboot_required",
                "execute_URL",
                "release_notes"
            ]
        },
        "VcenterLcmUpdatePendingUpdateType": {
            "type": "string",
            "description": "The Pending.UpdateType enumerated type defines update type",
            "enum": [
                "PATCH",
                "UPDATE",
                "UPGRADE"
            ]
        },
        "VcenterNamespaceManagementClusterAvailableVersionsSummary": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "Version of the upgrade.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the upgrade.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the upgrade.",
                    "type": "string"
                },
                "release_date": {
                    "description": "Release date of the upgrade.",
                    "type": "string",
                    "format": "date-time"
                },
                "release_notes": {
                    "description": "Release details of the upgrade.",
                    "type": "string"
                }
            },
            "required": [
                "version",
                "name",
                "description",
                "release_date",
                "release_notes"
            ]
        },
        "VcenterNamespaceManagementClusterCompatibilityFilterSpec": {
            "type": "object",
            "properties": {
                "compatible": {
                    "description": "Compatibility criteria for matching the filter. If true, only clusters which are compatible for Namespaces match the filter. If false, all clusters match the filter.\nIf unset, both compatible and incompatible clusters match the filter.",
                    "type": "boolean"
                },
                "network_provider": {
                    "description": "The network provider whose networks will be considered. If unset, this will default to NSXT_CONTAINER_PLUGIN.\nThis field is optional because it was added in a newer version than its parent node.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkProvider"
                }
            }
        },
        "VcenterNamespaceManagementClusterCompatibilitySummary": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "compatible": {
                    "description": "Compatibility of this cluster.",
                    "type": "boolean"
                },
                "incompatibility_reasons": {
                    "description": "Reasons for incompatibility.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                }
            },
            "required": [
                "cluster",
                "compatible",
                "incompatibility_reasons"
            ]
        },
        "VcenterNamespaceManagementClusterSizeInfoInfo": {
            "type": "object",
            "properties": {
                "num_supported_pods": {
                    "description": "The maximum number of supported pods.",
                    "type": "integer",
                    "format": "int64"
                },
                "num_supported_services": {
                    "description": "The maximum number of supported services.",
                    "type": "integer",
                    "format": "int64"
                },
                "default_service_cidr": {
                    "description": "Default CIDR range from which Kubernetes allocates service cluster IP addresses.",
                    "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                },
                "default_pod_cidr": {
                    "description": "Default CIDR range from which Kubernetes allocates pod IP addresses.",
                    "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                },
                "master_vm_info": {
                    "description": "Information about Kubernetes API server virtual machine configuration.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClusterSizeInfoVmInfo"
                },
                "worker_vm_info": {
                    "description": "Information about worker virtual machine configuration.\nIf unset, the configuration of the worker VM is not fixed.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClusterSizeInfoVmInfo"
                }
            },
            "required": [
                "num_supported_pods",
                "num_supported_services",
                "default_service_cidr",
                "default_pod_cidr",
                "master_vm_info"
            ]
        },
        "VcenterNamespaceManagementClusterSizeInfoVmInfo": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of CPU cores.",
                    "type": "integer",
                    "format": "int64"
                },
                "cores_per_socket": {
                    "description": "Number of CPU cores per socket.",
                    "type": "integer",
                    "format": "int64"
                },
                "memory": {
                    "description": "Memory size, in mebibytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "capacity": {
                    "description": "Overall capacity of the disks in the virtual machine, in mebibytes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "count",
                "cores_per_socket",
                "memory",
                "capacity"
            ]
        },
        "VcenterNamespaceManagementClustersConfigStatus": {
            "type": "string",
            "description": "The Clusters.ConfigStatus enumerated type describes the status of reaching the desired state configuration for the cluster.",
            "enum": [
                "CONFIGURING",
                "REMOVING",
                "RUNNING",
                "ERROR"
            ]
        },
        "VcenterNamespaceManagementClustersEnable": {
            "$ref": "#/definitions/VcenterNamespaceManagementClustersEnableSpec",
            "description": "Specification for setting up the Kubernetes API server and the worker nodes."
        },
        "VcenterNamespaceManagementClustersEnableSpec": {
            "type": "object",
            "properties": {
                "size_hint": {
                    "description": "This affects the size and resources allocated to the Kubernetes API server and the worker nodes. It also affects the suggested default serviceCidr and podCidrs.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSizingHint"
                },
                "service_cidr": {
                    "description": "CIDR block from which Kubernetes allocates service cluster IP addresses. This range should not overlap with those in vcenter.namespace_management.NCPClusterNetworkEnableSpec#podCidrs, vcenter.namespace_management.NCPClusterNetworkEnableSpec#ingressCidrs, vcenter.namespace_management.NCPClusterNetworkEnableSpec#egressCidrs, or other services running in the datacenter.",
                    "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                },
                "network_provider": {
                    "description": "The provider of cluster networking for this vSphere Namespaces cluster.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkProvider"
                },
                "ncp_cluster_network_spec": {
                    "description": "Specification for the NSX Container Plugin cluster network.\nThis field is optional and it is only relevant when the value of Clusters.EnableSpec.network-provider is NSXT_CONTAINER_PLUGIN.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec"
                },
                "workload_networks_spec": {
                    "description": "Specification for the workload networks to be associated with the cluster.\nThis field is optional and it is only relevant when the value of Clusters.EnableSpec.network-provider is VSPHERE_NETWORK.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec"
                },
                "workload_ntp_servers": {
                    "description": "List of NTP server DNS names or IP addresses to use for workloads such as Tanzu Kubernetes Grid VMs, specified in order of preference.\nIf unset, NTP server for Kubernetes API servers will be used.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "load_balancer_config_spec": {
                    "description": "A LoadBalancer dictates configuration derived from a user-provisioned load balancer that will be used to operate a load balancer that fronts vSphere Namespaces cluster servers, Tanzu Kubernetes Grid API servers, and other servers upon request. This configuration is required for network providers that do not have a default load balancer included.\nThis field is optional and it is only relevant when the value of Clusters.EnableSpec.network-provider is VSPHERE_NETWORK.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersConfigSpec"
                },
                "master_management_network": {
                    "description": "Specification for the management network on Kubernetes API server. Clusters.NetworkSpec.mode must be STATICRANGE as we require Kubernetes API server to have a stable address.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkSpec"
                },
                "master_DNS": {
                    "description": "List of DNS server IP addresses to use on Kubernetes API server, specified in order of preference.\nIf unset, no default DNS servers are set.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "worker_DNS": {
                    "description": "List of DNS server IP addresses to use on the worker nodes, specified in order of preference.\nIf unset, no default DNS servers are set.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_DNS_search_domains": {
                    "description": "List of domains (for example \"vmware.com\") to be searched when trying to lookup a host name on Kubernetes API server, specified in order of preference.\nIf unset, no default DNS search domains are set.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_NTP_servers": {
                    "description": "List of NTP server DNS names or IP addresses to use on Kubernetes API server, specified in order of preference.\nIf unset, VMware Tools based time synchronization is enabled.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_storage_policy": {
                    "description": "Identifier of storage policy associated with Kubernetes API server.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                },
                "ephemeral_storage_policy": {
                    "description": "Identifier of storage policy associated with ephemeral disks of all the Kubernetes Pods in the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                },
                "login_banner": {
                    "description": "Disclaimer to be displayed prior to login via the Kubectl plugin.\nIf unset, just skip it.",
                    "type": "string"
                },
                "Master_DNS_names": {
                    "description": "List of additional DNS names to associate with the Kubernetes API server. These DNS names are embedded in the TLS certificate presented by the API server.\nIf unset, no additional DNS names are embedded in the TLS certificate.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image_storage": {
                    "description": "Specification for storage to be used for container images.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersImageStorageSpec"
                },
                "default_image_registry": {
                    "description": "Default image registry to use when Kubernetes Pod container specification does not specify it as part of the container image name.\nIf unset, defaults to Docker Hub.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersImageRegistry"
                },
                "default_image_repository": {
                    "description": "Default image repository to use when Kubernetes Pod container specification does not specify it as part of the container image name.\nIf unset, defaults to Docker Hub official repository in case of Docker Hub image registry, otherwise defaults to empty string.",
                    "type": "string"
                },
                "default_kubernetes_service_content_library": {
                    "description": "Identifier of the Content Library which holds the VM Images for vSphere Kubernetes Service. This Content Library should be subscribed to VMware's hosted vSphere Kubernetes Service Repository.\nIf unset, the Content Library identifier will not be set.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.Library.",
                    "type": "string"
                }
            },
            "required": [
                "size_hint",
                "service_cidr",
                "network_provider",
                "master_management_network",
                "master_storage_policy",
                "ephemeral_storage_policy",
                "image_storage"
            ]
        },
        "VcenterNamespaceManagementClustersImageRegistry": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "IP address or the hostname of container image registry.",
                    "type": "string"
                },
                "port": {
                    "description": "Port number of the container image registry.\nIf unset, defaults to 443.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "hostname"
            ]
        },
        "VcenterNamespaceManagementClustersImageStorageSpec": {
            "type": "object",
            "properties": {
                "storage_policy": {
                    "description": "Identifier of the storage policy.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                }
            },
            "required": [
                "storage_policy"
            ]
        },
        "VcenterNamespaceManagementClustersInfo": {
            "type": "object",
            "properties": {
                "size_hint": {
                    "description": "Current setting for SizingHint. This affects the size and resources allocated to the Kubernetes API server.\nThis field is optional because it was added in a newer version than its parent node.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSizingHint"
                },
                "stat_summary": {
                    "description": "Basic runtime statistics for the cluster.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersStats"
                },
                "config_status": {
                    "description": "Current setting for Clusters.ConfigStatus.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersConfigStatus"
                },
                "messages": {
                    "description": "Current set of messages associated with the object.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementClustersMessage"
                    }
                },
                "kubernetes_status": {
                    "description": "Current setting for Clusters.KubernetesStatus.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersKubernetesStatus"
                },
                "kubernetes_status_messages": {
                    "description": "Current set of messages associated with the object.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementClustersMessage"
                    }
                },
                "api_server_management_endpoint": {
                    "description": "Kubernetes API Server IP address on the management network. This is a floating IP and assigned to one of the control plane VMs on the management network. This endpoint is used by vSphere components.",
                    "type": "string"
                },
                "api_server_cluster_endpoint": {
                    "description": "Kubernetes API Server IP address via cluster network. This is the IP address of the Kubernetes LoadBalancer type service fronting the apiservers. This endpoint is the one configured in kubeconfig after login, and used for most human and application interaction with Kubernetes.",
                    "type": "string"
                },
                "api_servers": {
                    "description": "Identifier of the Kubernetes API servers. These are the IP addresses of the VM instances for the Kubernetes control plane on the management network.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "tls_management_endpoint_certificate": {
                    "description": "PEM-encoded x509 certificate used by TLS endpoint on Kubernetes API servers when accessed from the management network, e.g. from ESX servers or VCSA. This certificate is only valid for use with the apiServerManagementEndpoint.",
                    "type": "string"
                },
                "tls_endpoint_certificate": {
                    "description": "PEM-encoded x509 certificate used by TLS endpoint on Kubernetes API servers when accessed via the load balancer, e.g. devops user on corporate network. This certificate is only valid for use with the apiServerClusterEndpoint.",
                    "type": "string"
                },
                "network_provider": {
                    "description": "The provider of cluster networking for this vSphere Namespaces cluster.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkProvider"
                },
                "ncp_cluster_network_info": {
                    "description": "Specification for the NSX Container Plugin cluster network.\nThis field is optional and it is only relevant when the value of Clusters.Info.network-provider is NSXT_CONTAINER_PLUGIN.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNCPClusterNetworkInfo"
                },
                "workload_networks": {
                    "description": "Information about workload networks associated with the cluster.\nThis field is optional and it is only relevant when the value of Clusters.Info.network-provider is VSPHERE_NETWORK.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersWorkloadNetworksInfo"
                },
                "workload_ntp_servers": {
                    "description": "Information about NTP server DNS names or IP addresses to use for workloads such as Tanzu Kubernetes Grid VMs, specified in order of preference.\nThis field is optional because it was added in a newer version than its parent node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "load_balancers": {
                    "description": "Information related to the Load balancer used for provisioning virtual servers in the namespace.\nThis field is optional and it is only relevant when the value of Clusters.Info.network-provider is VSPHERE_NETWORK.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersInfo"
                    }
                },
                "service_cidr": {
                    "description": "CIDR block from which Kubernetes allocates service cluster IP addresses.",
                    "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                },
                "master_management_network": {
                    "description": "Specification for the management network on Kubernetes API server.\nThis field is optional because it was added in a newer version than its parent node.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkSpec"
                },
                "master_DNS": {
                    "description": "List of DNS server IP addresses to use on Kubernetes API server, specified in order of preference.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "worker_DNS": {
                    "description": "List of DNS server IP addresses to use for pods that execute on the worker nodes (which are native pods on ESXi hosts in the vSphere Namespaces Supervisor).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_storage_policy": {
                    "description": "Identifier of storage policy associated with Kubernetes API server.\nThis field is optional because it was added in a newer version than its parent node.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                },
                "ephemeral_storage_policy": {
                    "description": "Identifier of storage policy associated with ephemeral disks of all the Kubernetes Pods in the cluster.\nThis field is optional because it was added in a newer version than its parent node.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                },
                "login_banner": {
                    "description": "Disclaimer to be displayed prior to login via the Kubectl plugin.\nIf unset, just skip it.",
                    "type": "string"
                },
                "Master_DNS_names": {
                    "description": "List of additional DNS names to associate with the Kubernetes API server. These DNS names are embedded in the TLS certificate presented by the API server.\nIf unset, no additional DNS names are embedded in the TLS certificate.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image_storage": {
                    "description": "Specification for storage to be used for container images.\nThis field is optional because it was added in a newer version than its parent node.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersImageStorageSpec"
                },
                "default_image_registry": {
                    "description": "Default image registry to use when Kubernetes Pod container specification does not specify it as part of the container image name.\nIf unset, defaults to Docker Hub.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersImageRegistry"
                },
                "default_image_repository": {
                    "description": "Default image repository to use when Kubernetes Pod container specification does not specify it as part of the container image name.\nIf unset, defaults to Docker Hub official repository in case of Docker Hub image registry, otherwise defaults to empty string.",
                    "type": "string"
                },
                "master_DNS_search_domains": {
                    "description": "List of domains (for example \"vmware.com\") to be searched when trying to lookup a host name on Kubernetes API server, specified in order of preference.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_NTP_servers": {
                    "description": "List of NTP server DNS names or IP addresses to use on Kubernetes API server, specified in order of preference.\nIf unset, VMware Tools based time synchronization is enabled.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default_kubernetes_service_content_library": {
                    "description": "Identifier of the Content Library which holds the VM Images for vSphere Kubernetes Service. This Content Library should be subscribed to VMware's hosted vSphere Kubernetes Service Repository.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.Library.",
                    "type": "string"
                }
            },
            "required": [
                "stat_summary",
                "config_status",
                "messages",
                "kubernetes_status",
                "kubernetes_status_messages",
                "api_server_management_endpoint",
                "api_server_cluster_endpoint",
                "api_servers",
                "network_provider",
                "service_cidr"
            ]
        },
        "VcenterNamespaceManagementClustersIpv4Range": {
            "type": "object",
            "properties": {
                "starting_address": {
                    "description": "The IPv4 address denoting the start of the range.",
                    "type": "string"
                },
                "address_count": {
                    "description": "The number of IP addresses in the range. Addresses are derived by incrementing Clusters.Ipv4Range.starting-address.",
                    "type": "integer",
                    "format": "int64"
                },
                "subnet_mask": {
                    "description": "Subnet mask to be set.",
                    "type": "string"
                },
                "gateway": {
                    "description": "The IPv4 address of the gateway associated with the range indicated by Clusters.Ipv4Range.starting-address and Clusters.Ipv4Range.address-count.",
                    "type": "string"
                }
            },
            "required": [
                "starting_address",
                "address_count",
                "subnet_mask",
                "gateway"
            ]
        },
        "VcenterNamespaceManagementClustersKubernetesStatus": {
            "type": "string",
            "description": "The Clusters.KubernetesStatus enumerated type describes the cluster's ability to deploy pods.",
            "enum": [
                "READY",
                "WARNING",
                "ERROR"
            ]
        },
        "VcenterNamespaceManagementClustersMessage": {
            "type": "object",
            "properties": {
                "severity": {
                    "description": "Type of the message.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersMessageSeverity"
                },
                "details": {
                    "description": "Details about the message.\nIf unset, message details are not required for taking actions.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "severity"
            ]
        },
        "VcenterNamespaceManagementClustersMessageSeverity": {
            "type": "string",
            "description": "The Clusters.Message.Severity enumerated type represents the severity of the message.",
            "enum": [
                "INFO",
                "WARNING",
                "ERROR"
            ]
        },
        "VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec": {
            "type": "object",
            "properties": {
                "pod_cidrs": {
                    "description": "CIDR blocks from which Kubernetes allocates pod IP addresses. This range should not overlap with those in vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkEnableSpec.ingress-cidrs, Clusters.NCPClusterNetworkEnableSpec.egress-cidrs, or other services running in the datacenter. All Pod CIDR blocks must be of at least subnet size /23.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "ingress_cidrs": {
                    "description": "CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer. These ranges should not overlap with those in Clusters.NCPClusterNetworkEnableSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkEnableSpec.egress-cidrs, or other services running in the datacenter.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "egress_cidrs": {
                    "description": "CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs. These ranges should not overlap with those in Clusters.NCPClusterNetworkEnableSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkEnableSpec.ingress-cidrs, or other services running in the datacenter.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "cluster_distributed_switch": {
                    "description": "vSphere Distributed Switch used to connect this cluster.\nThis field is required when configuring a cluster that uses NSX-T. If unset and using NSXe, the system will choose a suitable vSphere Distributed Switch.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vSphereDistributedSwitch. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vSphereDistributedSwitch.",
                    "type": "string"
                },
                "nsx_edge_cluster": {
                    "description": "NSX Edge Cluster to be used for Kubernetes Services of type LoadBalancer, Kubernetes Ingresses, and NSX SNAT.\nThis field is required when configuring a cluster that uses NSX-T. If unset and using NSXe, the system will choose a suitable NSX Edge Cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: NSXEdgeCluster. When operations return a value of this structure as a result, the field will be an identifier for the resource type: NSXEdgeCluster.",
                    "type": "string"
                }
            },
            "required": [
                "pod_cidrs",
                "ingress_cidrs",
                "egress_cidrs"
            ]
        },
        "VcenterNamespaceManagementClustersNCPClusterNetworkInfo": {
            "type": "object",
            "properties": {
                "pod_cidrs": {
                    "description": "CIDR blocks from which Kubernetes allocates pod IP addresses.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "ingress_cidrs": {
                    "description": "CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "egress_cidrs": {
                    "description": "CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "cluster_distributed_switch": {
                    "description": "vSphere Distributed Switch used to connect this cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vSphereDistributedSwitch. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vSphereDistributedSwitch.",
                    "type": "string"
                },
                "nsx_edge_cluster": {
                    "description": "NSX Edge Cluster to be used for Kubernetes Services of type LoadBalancer, Kubernetes Ingresses, and NSX SNAT.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: NSXEdgeCluster. When operations return a value of this structure as a result, the field will be an identifier for the resource type: NSXEdgeCluster.",
                    "type": "string"
                },
                "default_ingress_tls_certificate": {
                    "description": "PEM-encoded x509 certificate used by NSX as a default fallback certificate for Kubernetes Ingress services.",
                    "type": "string"
                }
            },
            "required": [
                "pod_cidrs",
                "ingress_cidrs",
                "egress_cidrs",
                "cluster_distributed_switch",
                "nsx_edge_cluster",
                "default_ingress_tls_certificate"
            ]
        },
        "VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec": {
            "type": "object",
            "properties": {
                "pod_cidrs": {
                    "description": "CIDR blocks from which Kubernetes allocates pod IP addresses. This range should not overlap with those in vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkSetSpec.ingress-cidrs, Clusters.NCPClusterNetworkSetSpec.egress-cidrs, or other services running in the datacenter. A set operation only allows for addition of new CIDR blocks to the existing list. All Pod CIDR blocks must be of at least subnet size /23.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "ingress_cidrs": {
                    "description": "CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer. These ranges should not overlap with those in Clusters.NCPClusterNetworkSetSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkSetSpec.egress-cidrs, or other services running in the datacenter. A set operation only allows for addition of new CIDR blocks to the existing list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "egress_cidrs": {
                    "description": "CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs. These ranges should not overlap with those in Clusters.NCPClusterNetworkSetSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkSetSpec.ingress-cidrs, or other services running in the datacenter. A set operation only allows for addition of new CIDR blocks to the existing list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "default_ingress_tls_certificate": {
                    "description": "PEM-encoded x509 certificate used by NSX as a default fallback certificate for Kubernetes Ingress services.",
                    "type": "string"
                }
            },
            "required": [
                "pod_cidrs",
                "ingress_cidrs",
                "egress_cidrs",
                "default_ingress_tls_certificate"
            ]
        },
        "VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec": {
            "type": "object",
            "properties": {
                "pod_cidrs": {
                    "description": "CIDR blocks from which Kubernetes allocates pod IP addresses. This range should not overlap with those in vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkUpdateSpec.ingress-cidrs, Clusters.NCPClusterNetworkUpdateSpec.egress-cidrs, or other services running in the datacenter. An update operation only allows for addition of new CIDR blocks to the existing list. All Pod CIDR blocks must be of at least subnet size /23.\nIf unset, CIDRs from which Kubernetes allocates pod IP addresses will not be modified.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "ingress_cidrs": {
                    "description": "CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer. These ranges should not overlap with those in Clusters.NCPClusterNetworkUpdateSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkUpdateSpec.egress-cidrs, or other services running in the datacenter. An update operation only allows for addition of new CIDR blocks to the existing list.\nIf unset, CIDRs from which Kubernetes allocates ingress IP addresses will not be modified.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "egress_cidrs": {
                    "description": "CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs. These ranges should not overlap with those in Clusters.NCPClusterNetworkUpdateSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkUpdateSpec.ingress-cidrs, or other services running in the datacenter. An update operation only allows for addition of new CIDR blocks to the existing list.\nIf unset, CIDR from which Kubernetes allocates egress IP addresses will not be modified.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIpv4Cidr"
                    }
                },
                "default_ingress_tls_certificate": {
                    "description": "PEM-encoded x509 certificate used by NSX as a default fallback certificate for Kubernetes Ingress services.",
                    "type": "string"
                }
            }
        },
        "VcenterNamespaceManagementClustersNetworkProvider": {
            "type": "string",
            "description": "Identifies the network plugin that cluster networking functionalities for this vSphere Namespaces Cluster.",
            "enum": [
                "NSXT_CONTAINER_PLUGIN",
                "VSPHERE_NETWORK"
            ]
        },
        "VcenterNamespaceManagementClustersNetworkSpec": {
            "type": "object",
            "properties": {
                "floating_IP": {
                    "description": "Optionally specify the Floating IP used by the HA master cluster in the DHCP case.\nThis field is optional and it is only relevant when the value of Clusters.NetworkSpec.mode is DHCP.",
                    "type": "string"
                },
                "network": {
                    "description": "Identifier for the network.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network.",
                    "type": "string"
                },
                "mode": {
                    "description": "The address assignment mode.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkSpecIpv4Mode"
                },
                "address_range": {
                    "description": "Settings for the interfaces on the network.\nThis field is optional and it is only relevant when the value of Clusters.NetworkSpec.mode is STATICRANGE.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersIpv4Range"
                }
            },
            "required": [
                "network",
                "mode"
            ]
        },
        "VcenterNamespaceManagementClustersNetworkSpecIpv4Mode": {
            "type": "string",
            "description": "The Clusters.NetworkSpec.Ipv4Mode enumerated type defines various IPv4 address assignment modes.",
            "enum": [
                "DHCP",
                "STATICRANGE"
            ]
        },
        "VcenterNamespaceManagementClustersSet": {
            "$ref": "#/definitions/VcenterNamespaceManagementClustersSetSpec",
            "description": "New specification for the cluster."
        },
        "VcenterNamespaceManagementClustersSetSpec": {
            "type": "object",
            "properties": {
                "size_hint": {
                    "description": "This affects the size and resources allocated to the Kubernetes API server.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSizingHint"
                },
                "network_provider": {
                    "description": "The provider of cluster networking for this vSphere Namespaces cluster.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkProvider"
                },
                "ncp_cluster_network_spec": {
                    "description": "Specification for the NSX Container Plugin cluster network.\nThis field is optional and it is only relevant when the value of Clusters.SetSpec.network-provider is NSXT_CONTAINER_PLUGIN.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec"
                },
                "master_DNS": {
                    "description": "List of DNS server IP addresses to use on Kubernetes API server, specified in order of preference.\nIf unset, DNS servers set on Kubernetes API server will be cleared.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "worker_DNS": {
                    "description": "List of DNS server IP addresses to use on the worker nodes, specified in order of preference.\nIf unset, DNS servers set on worker nodes will be cleared.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_DNS_search_domains": {
                    "description": "List of domains (for example \"vmware.com\") to be searched when trying to lookup a host name on Kubernetes API server, specified in order of preference.\nIf unset, DNS search domains set on Kubernetes API server will be cleared.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_NTP_servers": {
                    "description": "List of NTP server DNS names or IP addresses to use on Kubernetes API server, specified in order of preference.\nIf unset, VMware Tools based time synchronization is enabled and any set NTP servers are cleared.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_storage_policy": {
                    "description": "Identifier of storage policy associated with Kubernetes API server.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                },
                "ephemeral_storage_policy": {
                    "description": "Identifier of storage policy associated with ephemeral disks of all the Kubernetes Pods in the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                },
                "login_banner": {
                    "description": "Disclaimer to be displayed prior to login via the Kubectl plugin.\nIf unset, disclaimer to be displayed prior to login via the Kubectl plugin will be cleared.",
                    "type": "string"
                },
                "image_storage": {
                    "description": "Specification for storage to be used for container images.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersImageStorageSpec"
                },
                "default_image_registry": {
                    "description": "Default image registry to use when Kubernetes Pod container specification does not specify it as part of the container image name.\nIf unset, default image registry will be set to Docker Hub.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersImageRegistry"
                },
                "default_image_repository": {
                    "description": "Default image repository to use when Kubernetes Pod container specification does not specify it as part of the container image name.\nIf unset, default image repository will be set to Docker Hub official repository in case of Docker Hub image registry, otherwise will be set to empty string.",
                    "type": "string"
                },
                "default_kubernetes_service_content_library": {
                    "description": "Identifier of the Content Library which holds the VM Images for vSphere Kubernetes Service. This Content Library should be subscribed to VMware's hosted vSphere Kubernetes Service Repository. Modifying or clearing the Content Library identifier will not affect existing vSphere Kubernetes Service clusters. However, upgrades or scale-out of existing clusters may be affected if the new Content Library doesn't have the necessary VM Images.\nIf unset, the Content Library identifier will be cleared.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.Library.",
                    "type": "string"
                },
                "workload_ntp_servers": {
                    "description": "List of NTP server DNS names or IP addresses to use for workloads such as Tanzu Kubernetes Grid VMs, specified in order of preference.\nIf unset, NTP for Kubernetes API servers will be used.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "size_hint",
                "network_provider",
                "master_storage_policy",
                "ephemeral_storage_policy",
                "image_storage"
            ]
        },
        "VcenterNamespaceManagementClustersStats": {
            "type": "object",
            "properties": {
                "cpu_used": {
                    "description": "Overall CPU usage of the cluster, in MHz. This is the sum of CPU usage across all worker nodes in the cluster.",
                    "type": "integer",
                    "format": "int64"
                },
                "cpu_capacity": {
                    "description": "Total CPU capacity in the cluster available for vSphere Namespaces, in MHz. This is the sum of CPU capacities from all worker nodes in the cluster.",
                    "type": "integer",
                    "format": "int64"
                },
                "memory_used": {
                    "description": "Overall memory usage of the cluster, in mebibytes. This is the sum of memory usage across all worker nodes in the cluster.",
                    "type": "integer",
                    "format": "int64"
                },
                "memory_capacity": {
                    "description": "Total memory capacity of the cluster available for vSphere Namespaces, in mebibytes. This is the sum of memory capacities from all worker nodesin the cluster.",
                    "type": "integer",
                    "format": "int64"
                },
                "storage_used": {
                    "description": "Overall storage used by the cluster, in mebibytes. This is the sum of storage used across all worker nodes in the cluster.",
                    "type": "integer",
                    "format": "int64"
                },
                "storage_capacity": {
                    "description": "Overall storage capacity of the cluster available for vSphere Namespaces, in mebibytes. This is the sum of total storage available from all worker nodes in the cluster.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "cpu_used",
                "cpu_capacity",
                "memory_used",
                "memory_capacity",
                "storage_used",
                "storage_capacity"
            ]
        },
        "VcenterNamespaceManagementClustersSummary": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier for the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "cluster_name": {
                    "description": "Name of the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.name.",
                    "type": "string"
                },
                "stats": {
                    "description": "Basic runtime statistics for the cluster.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersStats"
                },
                "config_status": {
                    "description": "Current setting for Clusters.ConfigStatus.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersConfigStatus"
                },
                "kubernetes_status": {
                    "description": "Current setting for Clusters.KubernetesStatus.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersKubernetesStatus"
                }
            },
            "required": [
                "cluster",
                "cluster_name",
                "stats",
                "config_status",
                "kubernetes_status"
            ]
        },
        "VcenterNamespaceManagementClustersUpdate": {
            "$ref": "#/definitions/VcenterNamespaceManagementClustersUpdateSpec",
            "description": "New specification for the cluster."
        },
        "VcenterNamespaceManagementClustersUpdateSpec": {
            "type": "object",
            "properties": {
                "size_hint": {
                    "description": "This affects the size and resources allocated to the Kubernetes API server.\nIf unset, size and resources allocated to Kubernetes API server will not be modified.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSizingHint"
                },
                "network_provider": {
                    "description": "The provider of cluster networking for this vSphere Namespaces cluster.\nIf unset, the existing effective cluster network specification will not be modified.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkProvider"
                },
                "ncp_cluster_network_spec": {
                    "description": "Updated specification for the cluster network configuration.\nIf unset, existing effective value will not be modified If unset, the existing effective cluster network specification will not be modified.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec"
                },
                "master_DNS": {
                    "description": "List of DNS server IP addresses to use on Kubernetes API server, specified in order of preference.\nIf set, DNS servers set on Kubernetes API server will be replaced. Otherwise, they will not be modified.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "worker_DNS": {
                    "description": "List of DNS server IP addresses to use on the worker nodes, specified in order of preference.\nIf set, DNS servers set on worker nodes will be replaced. Otherwise, they will not be modified.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_DNS_search_domains": {
                    "description": "List of domains (for example \"vmware.com\") to be searched when trying to lookup a host name on Kubernetes API server, specified in order of preference.\nIf set, DNS search domains on Kubernetes API server will be replaced. Otherwise, they will not be modified.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_NTP_servers": {
                    "description": "List of NTP server DNS names or IP addresses to use on Kubernetes API server, specified in order of preference.\nIf set, NTP servers on Kubernetes API server will be replaced. Otherwise, they will not be modified.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "master_storage_policy": {
                    "description": "Identifier of storage policy associated with Kubernetes API server.\nIf unset, storage policy associated with Kubernetes API server will not be modified.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                },
                "ephemeral_storage_policy": {
                    "description": "Identifier of storage policy associated with ephemeral disks of all the Kubernetes Pods in the cluster.\nIf unset, storage policy associated with ephemeral disks of all the Kubernetes Pods will not be modified.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                },
                "login_banner": {
                    "description": "Disclaimer to be displayed prior to login via the Kubectl plugin.\nIf unset, disclaimer to be displayed prior to login via the Kubectl plugin will not be modified.",
                    "type": "string"
                },
                "image_storage": {
                    "description": "Specification for storage to be used for container images.\nIf unset, configuration of storage used for container images is not modified.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersImageStorageSpec"
                },
                "default_image_registry": {
                    "description": "Default image registry to use when Kubernetes Pod container specification does not specify it as part of the container image name.\nIf unset, default image registry will not be modified.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersImageRegistry"
                },
                "default_image_repository": {
                    "description": "Default image repository to use when Kubernetes Pod container specification does not specify it as part of the container image name.\nIf unset, default image repository will not be modified.",
                    "type": "string"
                },
                "tls_endpoint_certificate": {
                    "description": "Certificate issued for Kubernetes API Server. Certificate used must be created by signing the Certificate Signing Request obtained from vcenter.namespace_management.certificates.Request.create Because a CertificateSigningRequest is created on an existing Namespaces-enabled Cluster, you must use the Clusters.UpdateSpec to specify this tlsEndpointCertificate on an existing Cluster rather than during initially enabling Namespaces on a Cluster.\nIf unset, Kubernetes API Server certificate will not be modified.",
                    "type": "string"
                },
                "default_kubernetes_service_content_library": {
                    "description": "Identifier of the Content Library which holds the VM Images for vSphere Kubernetes Service. This Content Library should be subscribed to VMware's hosted vSphere Kubernetes Service Repository. Modifying or clearing the Content Library identifier will not affect existing vSphere Kubernetes Service clusters. However, upgrades or scale-out of existing clusters may be affected if the new Content Library doesn't have the necessary VM Images.\nIf unset, the Content Library identifier will not be modified.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.Library.",
                    "type": "string"
                },
                "workload_ntp_servers": {
                    "description": "List of NTP server DNS names or IP addresses to use for workloads such as Tanzu Kubernetes Grid VMs, specified in order of preference.\nIf unset, NTP servers for workloads will be unmodified.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec": {
            "type": "object",
            "properties": {
                "supervisor_primary_workload_network": {
                    "description": "The CreateSpec of the vSphere Namespaces network that will be used by Kubernetes control plane VMs to expose Kubernetes API server to devops users and other workloads. It can also used as backing network for Tanzu Kubernetes Cluster VMs.",
                    "$ref": "#/definitions/VcenterNamespaceManagementNetworksCreateSpec"
                },
                "network_list": {
                    "description": "CreateSpecs structurees for additional list of vSphere Namespaces networks to be associated with this cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementNetworksCreateSpec"
                    }
                }
            },
            "required": [
                "supervisor_primary_workload_network"
            ]
        },
        "VcenterNamespaceManagementClustersWorkloadNetworksInfo": {
            "type": "object",
            "properties": {
                "supervisor_primary_workload_network": {
                    "description": "vSphere Namespaces network used by Kubernetes control plane VMs to access load-balanced services on the various workload networks.",
                    "$ref": "#/definitions/VcenterNamespaceManagementNetworksInfo"
                },
                "network_list": {
                    "description": "List of vSphere Namespaces networks associated with this cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementNetworksInfo"
                    }
                }
            },
            "required": [
                "supervisor_primary_workload_network"
            ]
        },
        "VcenterNamespaceManagementDistributedSwitchCompatibilityFilterSpec": {
            "type": "object",
            "properties": {
                "compatible": {
                    "description": "Compatibility criteria for matching the filter. If true, only Distributed Switches which are compatible with vSphere Namespaces match the filter. If false, only Distributed Switches which are incompatible with vSphere Namespaces match the filter.\nIf unset, both compatible and incompatible Distributed Switches match the filter.",
                    "type": "boolean"
                },
                "network_provider": {
                    "description": "The network provider whose networks will be considered. If unset, this will default to NSXT_CONTAINER_PLUGIN.\nThis field is optional because it was added in a newer version than its parent node.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkProvider"
                }
            }
        },
        "VcenterNamespaceManagementDistributedSwitchCompatibilitySummary": {
            "type": "object",
            "properties": {
                "distributed_switch": {
                    "description": "Identifier of the switch. If networkProvider is either unset or is set to NSXT_CONTAINER_PLUGIN, the value of this field will refer to the UUID of a vim.DistributedVirtualSwitch. Otherwise, the value of the field will refer to the ID of a vim.DistributedVirtualSwitch.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vSphereDistributedSwitch. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vSphereDistributedSwitch.",
                    "type": "string"
                },
                "compatible": {
                    "description": "Compatibility of this switch with vSphere Namespaces.",
                    "type": "boolean"
                },
                "incompatibility_reasons": {
                    "description": "List of reasons for incompatibility.\nIf unset, this Distributed Switch is compatible.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "network_provider": {
                    "description": "The network provider whose networks were considered.\nIf unset, clients clients should assume the value to be NSXT_CONTAINER_PLUGIN.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkProvider"
                },
                "compatible_networks": {
                    "description": "List of compatible (PortGroup) Networks under the distributed switch.\nThis field is optional because it was added in a newer version than its parent node.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Network. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Network.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "distributed_switch",
                "compatible"
            ]
        },
        "VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec": {
            "type": "object",
            "properties": {
                "compatible": {
                    "description": "Compatibility criteria for matching the filter. If true, only Edge Clusters which are compatible with vSphere Namespaces match the filter. If false, only Edge Clusters which are incompatible with vSphere Namespaces match the filter.\nIf unset, both compatible and incompatible Edge Clusters match the filter.",
                    "type": "boolean"
                }
            }
        },
        "VcenterNamespaceManagementEdgeClusterCompatibilitySummary": {
            "type": "object",
            "properties": {
                "edge_cluster": {
                    "description": "Identifier of the Edge Cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: NSXEdgeCluster. When operations return a value of this structure as a result, the field will be an identifier for the resource type: NSXEdgeCluster.",
                    "type": "string"
                },
                "display_name": {
                    "description": "Display name of the Edge Cluster.",
                    "type": "string"
                },
                "compatible": {
                    "description": "Compatibility of this Edge Cluster with Namespaces feature.",
                    "type": "boolean"
                },
                "incompatibility_reasons": {
                    "description": "List of reasons for incompatibility.\nIf unset, this Edge Cluster is compatible.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                }
            },
            "required": [
                "edge_cluster",
                "display_name",
                "compatible"
            ]
        },
        "VcenterNamespaceManagementHostsConfigInfo": {
            "type": "object",
            "properties": {
                "namespaces_supported": {
                    "description": "True if vSphere Namespace feature is supported in this VC.",
                    "type": "boolean"
                },
                "namespaces_licensed": {
                    "description": "True if vSphere Namespace feature is licensed on any hosts in this VC.",
                    "type": "boolean"
                }
            },
            "required": [
                "namespaces_supported",
                "namespaces_licensed"
            ]
        },
        "VcenterNamespaceManagementIPRange": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The starting address of the range.",
                    "type": "string"
                },
                "count": {
                    "description": "The number of IP addresses in the range.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address",
                "count"
            ]
        },
        "VcenterNamespaceManagementIpv4Cidr": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The IPv4 address.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address",
                "prefix"
            ]
        },
        "VcenterNamespaceManagementLoadBalancersAviConfigCreateSpec": {
            "type": "object",
            "properties": {
                "server": {
                    "description": "Server is the address for the Avi Controller, used to configure Virtual Servers.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersServer"
                },
                "username": {
                    "description": "An administrator user name for accessing the Avi Controller.",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the administrator user.",
                    "type": "string",
                    "format": "password"
                },
                "certificate_authority_chain": {
                    "description": "CertificateAuthorityChain contains PEM-encoded CA chain which is used to verify x509 certificates received from the server.",
                    "type": "string"
                }
            },
            "required": [
                "server",
                "username",
                "password",
                "certificate_authority_chain"
            ]
        },
        "VcenterNamespaceManagementLoadBalancersAviInfo": {
            "type": "object",
            "properties": {
                "server": {
                    "description": "Server is the address for the Avi Controller, used to configure Virtual Servers.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersServer"
                },
                "username": {
                    "description": "An administrator user name for accessing the Avi Controller.",
                    "type": "string"
                },
                "certificate_authority_chain": {
                    "description": "PEM-encoded CA certificate chain which is used to verify x509 certificates received from the server.",
                    "type": "string"
                }
            },
            "required": [
                "server",
                "username",
                "certificate_authority_chain"
            ]
        },
        "VcenterNamespaceManagementLoadBalancersConfigSpec": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "An identifier that identifies a load balancer and can be used to query or configure load balancer properties via these resources. The identifier has DNS_LABEL restrictions as specified in . This must be an alphanumeric (a-z and 0-9) string, with a maximum length of 63 characters and with the '-' character allowed anywhere except the first or last character. This name is unique across all Namespaces in this vCenter server.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig.",
                    "type": "string"
                },
                "address_ranges": {
                    "description": "List of address ranges that will be used to derive frontend IP addresses for L4 virtual servers. At least one range must be provided.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIPRange"
                    }
                },
                "provider": {
                    "description": "The {#member provider} selects a provider from the list of available providers to be used with vSphere Namespaces.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersProvider"
                },
                "ha_proxy_config_create_spec": {
                    "description": "The LoadBalancers.HAProxyConfigCreateSpec is a conditional configuration made available upon selecting the HA_PROXY load balancer provider. It is used to configure the load balancer at run time.\nThis field is optional and it is only relevant when the value of LoadBalancers.ConfigSpec.provider is HA_PROXY.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersHAProxyConfigCreateSpec"
                },
                "avi_config_create_spec": {
                    "description": "The LoadBalancers.AviConfigCreateSpec is a conditional configuration made available upon selecting the AVI load balancer provider. It is used to configure the load balancer at run time.\nThis field is optional and it is only relevant when the value of LoadBalancers.ConfigSpec.provider is AVI.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersAviConfigCreateSpec"
                }
            },
            "required": [
                "id",
                "address_ranges",
                "provider"
            ]
        },
        "VcenterNamespaceManagementLoadBalancersHAProxyConfigCreateSpec": {
            "type": "object",
            "properties": {
                "servers": {
                    "description": "Servers is a list of the addresses for the data plane API servers used to configure Virtual Servers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersServer"
                    }
                },
                "username": {
                    "description": "An administrator user name for accessing the HAProxy Data Plane API server.",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the administrator user.",
                    "type": "string",
                    "format": "password"
                },
                "certificate_authority_chain": {
                    "description": "CertificateAuthorityChain contains PEM-encoded CA chain which is used to verify x509 certificates received from the server.",
                    "type": "string"
                }
            },
            "required": [
                "servers",
                "username",
                "password",
                "certificate_authority_chain"
            ]
        },
        "VcenterNamespaceManagementLoadBalancersHAProxyInfo": {
            "type": "object",
            "properties": {
                "servers": {
                    "description": "A list of the addresses for the DataPlane API servers used to configure HAProxy.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersServer"
                    }
                },
                "username": {
                    "description": "An administrator user name for accessing the HAProxy Data Plane API server.",
                    "type": "string"
                },
                "certificate_authority_chain": {
                    "description": "PEM-encoded CA certificate chain which is used to verify x509 certificates received from the server.",
                    "type": "string"
                }
            },
            "required": [
                "servers",
                "username",
                "certificate_authority_chain"
            ]
        },
        "VcenterNamespaceManagementLoadBalancersInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "An DNS compliant identifier for a load balancer, which can be used to query or configure the load balancer properties.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig.",
                    "type": "string"
                },
                "address_ranges": {
                    "description": "IP address range from which virtual servers are assigned their IPs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIPRange"
                    }
                },
                "provider": {
                    "description": "Load balancer provider for the namespace.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersProvider"
                },
                "ha_proxy_info": {
                    "description": "The LoadBalancers.HAProxyInfo is a conditional configuration made available upon selecting the HA_PROXY load balancer provider. It is used to configure the load balancer at run time.\nThis field is optional and it is only relevant when the value of LoadBalancers.Info.provider is HA_PROXY.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersHAProxyInfo"
                },
                "avi_info": {
                    "description": "The LoadBalancers.AviInfo is a conditional configuration made available upon selecting the AVI load balancer provider. It is used to configure the load balancer at run time.\nThis field is optional and it is only relevant when the value of LoadBalancers.Info.provider is AVI.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersAviInfo"
                }
            },
            "required": [
                "id",
                "address_ranges",
                "provider"
            ]
        },
        "VcenterNamespaceManagementLoadBalancersProvider": {
            "type": "string",
            "description": "The LoadBalancers.Provider enumerates the kinds of load balancers supported by vSphere Namespaces.",
            "enum": [
                "HA_PROXY",
                "AVI"
            ]
        },
        "VcenterNamespaceManagementLoadBalancersServer": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Load balancer hostname or IPv4 address.",
                    "type": "string"
                },
                "port": {
                    "description": "Load balancer port.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "host",
                "port"
            ]
        },
        "VcenterNamespaceManagementLoadBalancersSummary": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "An DNS compliant identifier for a load balancer, which can be used to query or configure the load balancer properties.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig.",
                    "type": "string"
                },
                "provider": {
                    "description": "Load balancer provider for the namespace.",
                    "$ref": "#/definitions/VcenterNamespaceManagementLoadBalancersProvider"
                }
            },
            "required": [
                "id",
                "provider"
            ]
        },
        "VcenterNamespaceManagementNamespaceResourceOptionsInfo": {
            "type": "object",
            "properties": {
                "create_resource_quota_type": {
                    "description": "Identifier of the structure used to set resource quotas on the namespace. See vcenter.namespaces.Instances#create and vcenter.namespaces.Instances#set.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vapi.structure. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vapi.structure.",
                    "type": "string"
                },
                "update_resource_quota_type": {
                    "description": "Identifier of the structure used to update resource quotas on the namespace. See vcenter.namespaces.Instances#update.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vapi.structure. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vapi.structure.",
                    "type": "string"
                }
            },
            "required": [
                "create_resource_quota_type",
                "update_resource_quota_type"
            ]
        },
        "VcenterNamespaceManagementNetworksCreateSpec": {
            "type": "object",
            "properties": {
                "network": {
                    "description": "Identifier of the network. This has DNS_LABEL restrictions as specified in . This must be an alphanumeric (a-z and 0-9) string and with maximum length of 63 characters and with the '-' character allowed anywhere except the first or last character. This name must be unique within a cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.Network.",
                    "type": "string"
                },
                "network_provider": {
                    "description": "The network provider that will manage the vSphere Namespaces network object.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkProvider"
                },
                "vsphere_network": {
                    "description": "The create spec for a DVPG-backed Namespaces network object, supported by VSPHERE_NETWORK network provider.\nThis field is optional and it is only relevant when the value of Networks.CreateSpec.network-provider is VSPHERE_NETWORK.",
                    "$ref": "#/definitions/VcenterNamespaceManagementNetworksVsphereDVPGNetworkCreateSpec"
                }
            },
            "required": [
                "network",
                "network_provider"
            ]
        },
        "VcenterNamespaceManagementNetworksInfo": {
            "type": "object",
            "properties": {
                "network": {
                    "description": "Identifier of the network.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.Network.",
                    "type": "string"
                },
                "network_provider": {
                    "description": "The network provider that will manage the vSphere Namespaces network object.",
                    "$ref": "#/definitions/VcenterNamespaceManagementClustersNetworkProvider"
                },
                "vsphere_network": {
                    "description": "Updated configuration specification for a DVPG-backed Namespaces network object, supported by VSPHERE_NETWORK network provider.\nThis field is optional and it is only relevant when the value of Networks.Info.network-provider is VSPHERE_NETWORK.",
                    "$ref": "#/definitions/VcenterNamespaceManagementNetworksVsphereDVPGNetworkInfo"
                }
            },
            "required": [
                "network",
                "network_provider"
            ]
        },
        "VcenterNamespaceManagementNetworksVsphereDVPGNetworkCreateSpec": {
            "type": "object",
            "properties": {
                "portgroup": {
                    "description": "Identifier of the vSphere Distributed Portgroup backing the vSphere network object.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network.",
                    "type": "string"
                },
                "address_ranges": {
                    "description": "Usable IP pools on this network.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIPRange"
                    }
                },
                "gateway": {
                    "description": "Gateway for the network.",
                    "type": "string"
                },
                "subnet_mask": {
                    "description": "Subnet mask of the network.",
                    "type": "string"
                }
            },
            "required": [
                "portgroup",
                "address_ranges",
                "gateway",
                "subnet_mask"
            ]
        },
        "VcenterNamespaceManagementNetworksVsphereDVPGNetworkInfo": {
            "type": "object",
            "properties": {
                "portgroup": {
                    "description": "Identifier of the vSphere Distributed Portgroup backing the vSphere network object.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network.",
                    "type": "string"
                },
                "address_ranges": {
                    "description": "Usable IP pools on this network.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementIPRange"
                    }
                },
                "gateway": {
                    "description": "Gateway for the network.",
                    "type": "string"
                },
                "subnet_mask": {
                    "description": "Subnet mask of the network.",
                    "type": "string"
                }
            },
            "required": [
                "portgroup",
                "address_ranges",
                "gateway",
                "subnet_mask"
            ]
        },
        "VcenterNamespaceManagementSizingHint": {
            "type": "string",
            "description": "The SizingHint enumerated type determines the configuration of Kubernetes API server and the worker nodes. It also determines the default values associated with the maximum number of pods and services. Use ClusterSizeInfo.get to get information associated with a SizingHint.",
            "enum": [
                "TINY",
                "SMALL",
                "MEDIUM",
                "LARGE"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersInfo": {
            "type": "object",
            "properties": {
                "current_version": {
                    "description": "Current version of the cluster.",
                    "type": "string"
                },
                "available_versions": {
                    "description": "Set of available versions can be upgraded to.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "last_upgraded_date": {
                    "description": "Date of last successful upgrade.\nIf unset, the cluster has not yet been upgraded.",
                    "type": "string",
                    "format": "date-time"
                },
                "messages": {
                    "description": "Current set of messages associated with the cluster version.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersMessage"
                    }
                },
                "state": {
                    "description": "Current state of the upgrade.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersState"
                },
                "upgrade_status": {
                    "description": "Information about upgrade in progress.\nIf unset, the cluster upgrade is not in progress.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersUpgradeStatus"
                }
            },
            "required": [
                "current_version",
                "available_versions",
                "messages",
                "state"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersMessage": {
            "type": "object",
            "properties": {
                "severity": {
                    "description": "Type of the message.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersMessageSeverity"
                },
                "details": {
                    "description": "Details about the message.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "severity",
                "details"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersMessageSeverity": {
            "type": "string",
            "description": "The Clusters.Message.Severity enumerated type represents the severity of the message.",
            "enum": [
                "INFO",
                "WARNING",
                "ERROR"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersResult": {
            "type": "object",
            "properties": {
                "res": {
                    "description": "The result of batch upgrade method.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersResultRes"
                },
                "exception": {
                    "description": "Exception when cluster pre-check failed during upgrade invocation.\nThis field is optional and it is only relevant when the value of Clusters.Result.res is REJECTED.",
                    "type": "string"
                }
            },
            "required": [
                "res"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersResultRes": {
            "type": "string",
            "description": "The Clusters.Result.Res enumerated type represents the upgrade invocation result for each cluster.",
            "enum": [
                "STARTED",
                "REJECTED"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersState": {
            "type": "string",
            "description": "The Clusters.State enumerated type describes the state of the upgrade.",
            "enum": [
                "PENDING",
                "READY",
                "ERROR"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersSummary": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier for the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "cluster_name": {
                    "description": "Name of the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.name.",
                    "type": "string"
                },
                "current_version": {
                    "description": "Current version of the cluster.",
                    "type": "string"
                },
                "available_versions": {
                    "description": "Set of versions available for upgrade.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "last_upgraded_date": {
                    "description": "Date of last successful upgrade.\nIf unset, the cluster has not yet been upgraded.",
                    "type": "string",
                    "format": "date-time"
                },
                "desired_version": {
                    "description": "Desired version the cluster will be upgraded to.\nIf unset, the cluster upgrade is not in progress.",
                    "type": "string"
                },
                "state": {
                    "description": "Current state of the upgrade.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersState"
                }
            },
            "required": [
                "cluster",
                "cluster_name",
                "current_version",
                "available_versions",
                "state"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersUpgrade": {
            "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersUpgradeSpec",
            "description": "Specification for upgrading the cluster."
        },
        "VcenterNamespaceManagementSoftwareClustersUpgradeMultiple": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersUpgradeSpec"
            },
            "description": "Specifications for upgrading selected clusters.\nThe key in the parameter map must be an identifier for the resource type: ClusterComputeResource."
        },
        "VcenterNamespaceManagementSoftwareClustersUpgradeProgress": {
            "type": "object",
            "properties": {
                "total": {
                    "description": "Total amount of the work for the operation. The work here represents the number of master nodes in the cluster need to be upgraded.",
                    "type": "integer",
                    "format": "int64"
                },
                "completed": {
                    "description": "The amount of work completed for the operation. The value can only be incremented. The number or master nodes which upgrade completed.",
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "description": "Message about the work progress.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "total",
                "completed",
                "message"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersUpgradeSpec": {
            "type": "object",
            "properties": {
                "desired_version": {
                    "description": "Version number the cluster is going to be upgraded to.",
                    "type": "string"
                },
                "ignore_precheck_warnings": {
                    "description": "If true, the upgrade workflow will ignore any pre-check warnings and proceed with the upgrade.\nIf unset, the upgrade workflow will not ignore pre-check warnings and fail the upgrade. It is equivalent to setting the value to false. The workflow adopts a conservative approach of failing the upgrade if unset to solely let the user decide whether to force the upgrade despite the warnings.",
                    "type": "boolean"
                }
            },
            "required": [
                "desired_version"
            ]
        },
        "VcenterNamespaceManagementSoftwareClustersUpgradeStatus": {
            "type": "object",
            "properties": {
                "desired_version": {
                    "description": "Desired version the cluster will be upgraded to.\nIf unset, the cluster upgrade is not in progress.",
                    "type": "string"
                },
                "messages": {
                    "description": "Current set of messages associated with the upgrade state.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersMessage"
                    }
                },
                "progress": {
                    "description": "Information about upgrade progess.\nIf unset, the cluster upgrade is not in progress.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSoftwareClustersUpgradeProgress"
                }
            },
            "required": [
                "messages"
            ]
        },
        "VcenterNamespaceManagementStatsTimeSeriesPodIdentifier": {
            "type": "object",
            "properties": {
                "namespace": {
                    "description": "The namespace that the pod is running in.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.",
                    "type": "string"
                },
                "pod_name": {
                    "description": "The name of the pod itself.",
                    "type": "string"
                }
            },
            "required": [
                "namespace",
                "pod_name"
            ]
        },
        "VcenterNamespaceManagementStatsTimeSeriesSpec": {
            "type": "object",
            "properties": {
                "obj_type": {
                    "description": "Type of statistics object that the request is operating on.",
                    "$ref": "#/definitions/VcenterNamespaceManagementStatsTimeSeriesSpecObjType"
                },
                "pod": {
                    "description": "Pod Identifier for queries on an individual pod.\nThis field is optional and it is only relevant when the value of TimeSeries.Spec.obj-type is POD.",
                    "$ref": "#/definitions/VcenterNamespaceManagementStatsTimeSeriesPodIdentifier"
                },
                "namespace": {
                    "description": "Namespace name for queries for a namespace.\nThis field is optional and it is only relevant when the value of TimeSeries.Spec.obj-type is NAMESPACE.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster identifier for queries for a cluster.\nThis field is optional and it is only relevant when the value of TimeSeries.Spec.obj-type is CLUSTER.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "start": {
                    "description": "UNIX timestamp value indicating when the requested series of statistical samples should begin. https://en.wikipedia.org/wiki/Unix_time",
                    "type": "integer",
                    "format": "int64"
                },
                "end": {
                    "description": "UNIX timestamp value indicating when the requested series of statistical samples should end. https://en.wikipedia.org/wiki/Unix_time",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "obj_type",
                "start",
                "end"
            ]
        },
        "VcenterNamespaceManagementStatsTimeSeriesSpecObjType": {
            "type": "string",
            "description": "Type of statistics object that this request is operating on.",
            "enum": [
                "CLUSTER",
                "NAMESPACE",
                "POD"
            ]
        },
        "VcenterNamespaceManagementStatsTimeSeriesTimeSeries": {
            "type": "object",
            "properties": {
                "counter": {
                    "description": "Counter identifier.",
                    "type": "string"
                },
                "time_stamps": {
                    "description": "Sequence of UNIX timestamp values at which statistical values were sampled. https://en.wikipedia.org/wiki/Unix_time",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "values": {
                    "description": "Sequence of sampled values corresponding to the timestamps in tss.",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "required": [
                "counter",
                "time_stamps",
                "values"
            ]
        },
        "VcenterNamespaceManagementSupportBundleLocation": {
            "type": "object",
            "properties": {
                "url": {
                    "description": "Support Bundle Download URL.",
                    "type": "string"
                },
                "wcp_support_bundle_token": {
                    "description": "Information about the token required in the HTTP GET request to generate the support bundle.",
                    "$ref": "#/definitions/VcenterNamespaceManagementSupportBundleToken"
                }
            },
            "required": [
                "url",
                "wcp_support_bundle_token"
            ]
        },
        "VcenterNamespaceManagementSupportBundleToken": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "A one-time, short-lived token required in the HTTP header of the request to the url. This token needs to be passed in as a header with the name \"wcp-support-bundle-token\".",
                    "type": "string"
                },
                "expiry": {
                    "description": "Expiry time of the token",
                    "type": "string"
                }
            },
            "required": [
                "token",
                "expiry"
            ]
        },
        "VcenterNamespacesAccessCreate": {
            "$ref": "#/definitions/VcenterNamespacesAccessCreateSpec",
            "description": "Information about the access control to be created."
        },
        "VcenterNamespacesAccessCreateSpec": {
            "type": "object",
            "properties": {
                "role": {
                    "description": "Role to be assigned.",
                    "$ref": "#/definitions/VcenterNamespacesAccessRole"
                }
            },
            "required": [
                "role"
            ]
        },
        "VcenterNamespacesAccessInfo": {
            "type": "object",
            "properties": {
                "role": {
                    "description": "Role of the subject on the namespace.",
                    "$ref": "#/definitions/VcenterNamespacesAccessRole"
                }
            },
            "required": [
                "role"
            ]
        },
        "VcenterNamespacesAccessRole": {
            "type": "string",
            "description": "The Access.Role enumerated type lists the default roles which can be associated with a subject on a domain on the namespace.",
            "enum": [
                "EDIT",
                "VIEW"
            ]
        },
        "VcenterNamespacesAccessSet": {
            "$ref": "#/definitions/VcenterNamespacesAccessSetSpec",
            "description": "Information about the new access control to be assigned."
        },
        "VcenterNamespacesAccessSetSpec": {
            "type": "object",
            "properties": {
                "role": {
                    "description": "Role to be assigned.",
                    "$ref": "#/definitions/VcenterNamespacesAccessRole"
                }
            },
            "required": [
                "role"
            ]
        },
        "VcenterNamespacesAccessSubjectType": {
            "type": "string",
            "description": "The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace.",
            "enum": [
                "USER",
                "GROUP"
            ]
        },
        "VcenterNamespacesInstancesAccess": {
            "type": "object",
            "properties": {
                "subject_type": {
                    "description": "Type of the subject.",
                    "$ref": "#/definitions/VcenterNamespacesAccessSubjectType"
                },
                "subject": {
                    "description": "Name of the subject.",
                    "type": "string"
                },
                "domain": {
                    "description": "Domain of the subject.",
                    "type": "string"
                },
                "role": {
                    "description": "Role of the subject on the namespace instance.",
                    "$ref": "#/definitions/VcenterNamespacesAccessRole"
                }
            },
            "required": [
                "subject_type",
                "subject",
                "domain",
                "role"
            ]
        },
        "VcenterNamespacesInstancesConfigStatus": {
            "type": "string",
            "description": "The Instances.ConfigStatus enumerated type describes the status of reaching the desired state configuration for the namespace.",
            "enum": [
                "CONFIGURING",
                "REMOVING",
                "RUNNING",
                "ERROR"
            ]
        },
        "VcenterNamespacesInstancesCreate": {
            "$ref": "#/definitions/VcenterNamespacesInstancesCreateSpec",
            "description": "Specification for setting up the namespace."
        },
        "VcenterNamespacesInstancesCreateSpec": {
            "type": "object",
            "properties": {
                "namespace": {
                    "description": "Identifier of the namespace. This has DNS_LABEL restrictions as specified in . This must be an alphanumeric (a-z and 0-9) string and with maximum length of 63 characters and with the '-' character allowed anywhere except the first or last character. This name is unique across all Namespaces in this vCenter server. In this version, this maps to the name of a Kubernetes namespace.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Identifier of the cluster on which the namespace is being created.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "description": {
                    "description": "Description for the namespace.\nIf unset, no description is added to the namespace.",
                    "type": "string"
                },
                "resource_spec": {
                    "description": "Resource quota on the namespace. Refer to vcenter.namespace_management.NamespaceResourceOptions.Info#createResourceQuotaType and use vcenter.namespace_management.NamespaceResourceOptions#get for retrieving the type for the value for this field. For an example of this, see ResourceQuotaOptionsV1.\nIf unset, no resource limits will be set on the namespace.",
                    "type": "object"
                },
                "access_list": {
                    "description": "Access controls associated with the namespace.\nIf unset, only users with Administrator role can access the namespace.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespacesInstancesAccess"
                    }
                },
                "storage_specs": {
                    "description": "Storage associated with the namespace.\nIf unset, storage policies will not be associated with the namespace which will prevent users from being able to provision pods with persistent storage on the namespace. Users will be able to provision pods which use local storage.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespacesInstancesStorageSpec"
                    }
                },
                "networks": {
                    "description": "vSphere Namespaces network objects to be associated with the namespace. The values of this list need to reference names of pre-existing Networks.Info structures.\nThe field must be left unset if the cluster hosting the namespace uses NSXT_CONTAINER_PLUGIN as the network provider, since the network(s) for this namespace will be managed by NSX-T Container Plugin. If field is unset when the cluster hosting the namespace uses VSPHERE_NETWORK as its network provider, the namespace will automatically be associated with the cluster's Supervisor Primary Workload Network. The field currently accepts at most only 1 vSphere Namespaces network object reference.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.namespaces.Instance.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "namespace",
                "cluster"
            ]
        },
        "VcenterNamespacesInstancesInfo": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier for the cluster hosting the namespace.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "config_status": {
                    "description": "Current setting for Instances.ConfigStatus.",
                    "$ref": "#/definitions/VcenterNamespacesInstancesConfigStatus"
                },
                "messages": {
                    "description": "Current set of messages associated with the object.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespacesInstancesMessage"
                    }
                },
                "stats": {
                    "description": "Basic runtime statistics for the namespace.",
                    "$ref": "#/definitions/VcenterNamespacesInstancesStats"
                },
                "description": {
                    "description": "Description of the namespace.",
                    "type": "string"
                },
                "resource_spec": {
                    "description": "Quotas on the namespace resources. Refer to vcenter.namespace_management.NamespaceResourceOptions#get for the type of the value for this field.\nIf unset, no resource constraints are associated with the namespace.",
                    "type": "object"
                },
                "access_list": {
                    "description": "Access controls associated with the namespace.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespacesInstancesAccess"
                    }
                },
                "storage_specs": {
                    "description": "Storage associated with the namespace.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespacesInstancesStorageSpec"
                    }
                },
                "networks": {
                    "description": "vSphere Networks associated with the namespace.\nThis field is unset if the cluster hosting this namespace uses NSXT_CONTAINER_PLUGIN as its network provider.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.namespaces.Instance.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "cluster",
                "config_status",
                "messages",
                "stats",
                "description",
                "access_list",
                "storage_specs"
            ]
        },
        "VcenterNamespacesInstancesMessage": {
            "type": "object",
            "properties": {
                "severity": {
                    "description": "Type of the message.",
                    "$ref": "#/definitions/VcenterNamespacesInstancesMessageMessageSeverity"
                },
                "details": {
                    "description": "Details about the message.\nIf unset, message details are not required for taking actions.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "severity"
            ]
        },
        "VcenterNamespacesInstancesMessageMessageSeverity": {
            "type": "string",
            "description": "The Instances.Message.MessageSeverity enumerated type represents the severity of the message.",
            "enum": [
                "INFO",
                "WARNING",
                "ERROR"
            ]
        },
        "VcenterNamespacesInstancesSet": {
            "$ref": "#/definitions/VcenterNamespacesInstancesSetSpec",
            "description": "New specification for the namespace."
        },
        "VcenterNamespacesInstancesSetSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description for the namespace.\nIf unset, the description of the namespace will be cleared.",
                    "type": "string"
                },
                "resource_spec": {
                    "description": "Resource quota for the namespace. This will replace the existing resource constraints on the namespace in entirety. Refer to vcenter.namespace_management.NamespaceResourceOptions.Info#createResourceQuotaType and use vcenter.namespace_management.NamespaceResourceOptions#get for retrieving the type for the value for this field. For an example of this, see ResourceQuotaOptionsV1.\nIf unset, the resource constraints on the namespace will be cleared.",
                    "type": "object"
                },
                "access_list": {
                    "description": "Access control associated with the namespace.\nIf unset, the existing access controls on the namespace will be removed and users will not be able to access this namespace to create new pods. Existing pods from users will continue to run.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespacesInstancesAccess"
                    }
                },
                "storage_specs": {
                    "description": "Storage associated with the namespace.\nIf unset, the existing storage policies will be disassociated with the namespace and existing limits will be cleared. Pods which are already using persistent storage from the earlier version of storage policies will be able to access them till the datastores are attached to the worker nodes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespacesInstancesStorageSpec"
                    }
                }
            }
        },
        "VcenterNamespacesInstancesStats": {
            "type": "object",
            "properties": {
                "cpu_used": {
                    "description": "Overall CPU usage of the namespace, in MHz. This is the sum of CPU usage across all pods in the Kubernetes namespace.",
                    "type": "integer",
                    "format": "int64"
                },
                "memory_used": {
                    "description": "Overall memory usage of the namespace (in mebibytes). This is the sum of memory usage across all pods.",
                    "type": "integer",
                    "format": "int64"
                },
                "storage_used": {
                    "description": "Overall storage used by the namespace (in mebibytes). This is the sum of storage used by pods across all datastores in the cluster associated with storage policies configured for the namespace.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "cpu_used",
                "memory_used",
                "storage_used"
            ]
        },
        "VcenterNamespacesInstancesStorageSpec": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "ID of the storage policy. A Kubernetes storage class is created for this storage policy if it does not exist already.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.",
                    "type": "string"
                },
                "limit": {
                    "description": "The maximum amount of storage (in mebibytes) which can be utilized by the namespace for this specification.\nIf unset, no limits are placed.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "policy"
            ]
        },
        "VcenterNamespacesInstancesSummary": {
            "type": "object",
            "properties": {
                "namespace": {
                    "description": "Identifier of the namespace.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the namespace.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Identifier for the cluster hosting the namespace.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.",
                    "type": "string"
                },
                "config_status": {
                    "description": "Current setting for Instances.ConfigStatus.",
                    "$ref": "#/definitions/VcenterNamespacesInstancesConfigStatus"
                },
                "stats": {
                    "description": "Basic runtime statistics for the namespace.",
                    "$ref": "#/definitions/VcenterNamespacesInstancesStats"
                }
            },
            "required": [
                "namespace",
                "description",
                "cluster",
                "config_status",
                "stats"
            ]
        },
        "VcenterNamespacesInstancesUpdate": {
            "$ref": "#/definitions/VcenterNamespacesInstancesUpdateSpec",
            "description": "Specification for updating the namespace."
        },
        "VcenterNamespacesInstancesUpdateSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description for the namespace.\nIf unset, the description of the namespace will not be modified.",
                    "type": "string"
                },
                "resource_spec": {
                    "description": "Resource quota updates on the namespace. Refer to vcenter.namespace_management.NamespaceResourceOptions.Info#updateResourceQuotaType and use vcenter.namespace_management.NamespaceResourceOptions#get for retrieving the type for the value for this field. For an example of this, see ResourceQuotaOptionsV1Update.\nIf unset, the resource constraints on the namespace will not be modified.",
                    "type": "object"
                },
                "access_list": {
                    "description": "Access control associated with the namespace.\nIf unset, access controls on the namespace will not be modified. Existing pods from users will continue to run.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespacesInstancesAccess"
                    }
                },
                "storage_specs": {
                    "description": "Storage associated with the namespace.\nIf unset, storage policies and their limit will not be modified. Pods which are already using persistent storage from the earlier version of storage policies will be able to access them till the datastores are attached to the worker nodes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterNamespacesInstancesStorageSpec"
                    }
                }
            }
        },
        "VcenterNamespacesUserInstancesSummary": {
            "type": "object",
            "properties": {
                "namespace": {
                    "description": "Identifier of the namespace.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.",
                    "type": "string"
                },
                "master_host": {
                    "description": "IP address or FQDN of the API endpoint for the given namespace.",
                    "type": "string"
                }
            },
            "required": [
                "namespace",
                "master_host"
            ]
        },
        "VcenterNetworkFilterSpec": {
            "type": "object",
            "properties": {
                "networks": {
                    "description": "Identifiers of networks that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that networks must have to match the filter (see {@link Summary#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "types": {
                    "description": "Types that networks must have to match the filter (see {@link Summary#type}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterNetworkType"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the network for the network to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the network for the network to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterNetworkSummary": {
            "type": "object",
            "properties": {
                "network": {
                    "description": "Identifier of the network.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the network.",
                    "type": "string"
                },
                "type": {
                    "description": "Type ({@enum.values Type}) of the vCenter Server network.",
                    "$ref": "#/definitions/VcenterNetworkType"
                }
            },
            "required": [
                "network",
                "name",
                "type"
            ]
        },
        "VcenterNetworkType": {
            "type": "string",
            "enum": [
                "STANDARD_PORTGROUP",
                "DISTRIBUTED_PORTGROUP",
                "OPAQUE_NETWORK"
            ]
        },
        "VcenterOvfDiskProvisioningType": {
            "type": "string",
            "description": "The {@name DiskProvisioningType} {@term enumerated type} defines the virtual disk provisioning types that can be set for a disk on the target platform.",
            "enum": [
                "thin",
                "thick",
                "eagerZeroedThick"
            ]
        },
        "VcenterOvfExportFlagInfo": {
            "type": "object",
            "properties": {
                "option": {
                    "description": "The name of the export flag that is supported by the server.",
                    "type": "string"
                },
                "description": {
                    "description": "Localizable description of the export flag.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "option",
                "description"
            ]
        },
        "VcenterOvfImportFlagInfo": {
            "type": "object",
            "properties": {
                "option": {
                    "description": "The name of the import flag that is supported by the deployment platform.",
                    "type": "string"
                },
                "description": {
                    "description": "Localizable description of the import flag.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "option",
                "description"
            ]
        },
        "VcenterOvfLibraryItemCreate": {
            "type": "object",
            "properties": {
                "source": {
                    "$ref": "#/definitions/VcenterOvfLibraryItemDeployableIdentity",
                    "description": "Identifier of the virtual machine or virtual appliance to use as the source."
                },
                "target": {
                    "$ref": "#/definitions/VcenterOvfLibraryItemCreateTarget",
                    "description": "Specification of the target content library and library item."
                },
                "create_spec": {
                    "$ref": "#/definitions/VcenterOvfLibraryItemCreateSpec",
                    "description": "Information used to create the OVF package from the source virtual machine or virtual appliance."
                }
            },
            "required": [
                "source",
                "target",
                "create_spec"
            ]
        },
        "VcenterOvfLibraryItemCreateResult": {
            "type": "object",
            "properties": {
                "succeeded": {
                    "description": "Whether the {@name LibraryItem#create} {@term operation} completed successfully.",
                    "type": "boolean"
                },
                "ovf_library_item_id": {
                    "description": "Identifier of the created or updated library item.",
                    "type": "string"
                },
                "error": {
                    "description": "Errors, warnings, and informational messages produced by the {@name LibraryItem#create} {@term operation}.",
                    "$ref": "#/definitions/VcenterOvfLibraryItemResultInfo"
                }
            },
            "required": [
                "succeeded"
            ]
        },
        "VcenterOvfLibraryItemCreateSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name to use in the OVF descriptor stored in the library item.",
                    "type": "string"
                },
                "description": {
                    "description": "Description to use in the OVF descriptor stored in the library item.",
                    "type": "string"
                },
                "flags": {
                    "description": "Flags to use for OVF package creation. The supported flags can be obtained using {@link ExportFlag#list}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterOvfLibraryItemCreateTarget": {
            "type": "object",
            "properties": {
                "library_id": {
                    "description": "Identifier of the library in which a new library item should be created. This {@term field} is not used if the {@name #libraryItemId} {@term field} is specified.",
                    "type": "string"
                },
                "library_item_id": {
                    "description": "Identifier of the library item that should be should be updated.",
                    "type": "string"
                }
            }
        },
        "VcenterOvfLibraryItemDeploy": {
            "type": "object",
            "properties": {
                "target": {
                    "$ref": "#/definitions/VcenterOvfLibraryItemDeploymentTarget",
                    "description": "Specification of the deployment target."
                },
                "deployment_spec": {
                    "$ref": "#/definitions/VcenterOvfLibraryItemResourcePoolDeploymentSpec",
                    "description": "Specification of how the OVF package should be deployed to the target."
                }
            },
            "required": [
                "target",
                "deployment_spec"
            ]
        },
        "VcenterOvfLibraryItemDeployableIdentity": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of the deployable resource.",
                    "type": "string"
                },
                "id": {
                    "description": "Identifier of the deployable resource.",
                    "type": "string"
                }
            },
            "required": [
                "type",
                "id"
            ]
        },
        "VcenterOvfLibraryItemDeploymentResult": {
            "type": "object",
            "properties": {
                "succeeded": {
                    "description": "Whether the {@name LibraryItem#deploy} {@term operation} completed successfully.",
                    "type": "boolean"
                },
                "resource_id": {
                    "description": "Identifier of the deployed resource entity.",
                    "$ref": "#/definitions/VcenterOvfLibraryItemDeployableIdentity"
                },
                "error": {
                    "description": "Errors, warnings, and informational messages produced by the {@name LibraryItem#deploy} {@term operation}.",
                    "$ref": "#/definitions/VcenterOvfLibraryItemResultInfo"
                }
            },
            "required": [
                "succeeded"
            ]
        },
        "VcenterOvfLibraryItemDeploymentTarget": {
            "type": "object",
            "properties": {
                "resource_pool_id": {
                    "description": "Identifier of the resource pool to which the virtual machine or virtual appliance should be attached.",
                    "type": "string"
                },
                "host_id": {
                    "description": "Identifier of the target host on which the virtual machine or virtual appliance will run. The target host must be a member of the cluster that contains the resource pool identified by {@link #resourcePoolId}.",
                    "type": "string"
                },
                "folder_id": {
                    "description": "Identifier of the vCenter folder that should contain the virtual machine or virtual appliance. The folder must be virtual machine folder.",
                    "type": "string"
                }
            },
            "required": [
                "resource_pool_id"
            ]
        },
        "VcenterOvfLibraryItemFilter": {
            "type": "object",
            "properties": {
                "target": {
                    "$ref": "#/definitions/VcenterOvfLibraryItemDeploymentTarget",
                    "description": "Specification of the deployment target."
                }
            },
            "required": [
                "target"
            ]
        },
        "VcenterOvfLibraryItemOvfSummary": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Default name for the virtual machine or virtual appliance.",
                    "type": "string"
                },
                "annotation": {
                    "description": "Default annotation for the virtual machine or virtual appliance.",
                    "type": "string"
                },
                "EULAs": {
                    "description": "End User License Agreements specified in the OVF descriptor. All end user license agreements must be accepted in order for the {@name LibraryItem#deploy} {@term operation} to succeed. See {@link ResourcePoolDeploymentSpec#acceptAllEula}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networks": {
                    "description": "Section identifiers for sections of type ovf:NetworkSection in the OVF descriptor. These identifiers can be used as keys in {@link ResourcePoolDeploymentSpec#networkMappings}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "storage_groups": {
                    "description": "Section identifiers for sections of type vmw:StorageGroupSection in the OVF descriptor. These identifiers can be used as keys in {@link ResourcePoolDeploymentSpec#storageMappings}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "additional_params": {
                    "description": "Additional OVF parameters which can be specified for the deployment target. These OVF parameters can be inspected, optionally modified, and used as values in {@link ResourcePoolDeploymentSpec#additionalParameters} for the {@name LibraryItem#deploy} {@term operation}.",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            },
            "required": [
                "EULAs"
            ]
        },
        "VcenterOvfLibraryItemResourcePoolDeploymentSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name assigned to the deployed target virtual machine or virtual appliance.",
                    "type": "string"
                },
                "annotation": {
                    "description": "Annotation assigned to the deployed target virtual machine or virtual appliance.",
                    "type": "string"
                },
                "accept_all_EULA": {
                    "description": "Whether to accept all End User License Agreements. See {@link OvfSummary#eulas}.",
                    "type": "boolean"
                },
                "network_mappings": {
                    "description": "Specification of the target network to use for sections of type ovf:NetworkSection in the OVF descriptor. The key in the {@term map} is the section identifier of the ovf:NetworkSection section in the OVF descriptor and the value is the target network to be used for deployment.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "storage_mappings": {
                    "description": "Specification of the target storage to use for sections of type vmw:StorageGroupSection in the OVF descriptor. The key in the {@term map} is the section identifier of the ovf:StorageGroupSection section in the OVF descriptor and the value is the target storage specification to be used for deployment. See {@link StorageGroupMapping}.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterOvfLibraryItemStorageGroupMapping"
                    }
                },
                "storage_provisioning": {
                    "description": "Default storage provisioning type to use for all sections of type vmw:StorageSection in the OVF descriptor.",
                    "$ref": "#/definitions/VcenterOvfDiskProvisioningType"
                },
                "storage_profile_id": {
                    "description": "Default storage profile to use for all sections of type vmw:StorageSection in the OVF descriptor.",
                    "type": "string"
                },
                "locale": {
                    "description": "The locale to use for parsing the OVF descriptor.",
                    "type": "string"
                },
                "flags": {
                    "description": "Flags to be use for deployment. The supported flag values can be obtained using {@link ImportFlag#list}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "additional_parameters": {
                    "description": "Additional OVF parameters that may be needed for the deployment. Additional OVF parameters may be required by the OVF descriptor of the OVF package in the library item. Examples of OVF parameters that can be specified through this {@term field} include, but are not limited to: <ul> <li>{@link DeploymentOptionParams}</li> <li>{@link ExtraConfigParams}</li> <li>{@link IpAllocationParams}</li> <li>{@link PropertyParams}</li> <li>{@link ScaleOutParams}</li> <li>{@link VcenterExtensionParams}</li> </ul>",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "default_datastore_id": {
                    "description": "Default datastore to use for all sections of type vmw:StorageSection in the OVF descriptor.",
                    "type": "string"
                }
            },
            "required": [
                "accept_all_EULA"
            ]
        },
        "VcenterOvfLibraryItemResultInfo": {
            "type": "object",
            "properties": {
                "errors": {
                    "description": "Errors reported by the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation}. These errors would have prevented the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation} from completing successfully.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterOvfOvfError"
                    }
                },
                "warnings": {
                    "description": "Warnings reported by the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation}. These warnings would not have prevented the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation} from completing successfully, but there might be issues that warrant attention.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterOvfOvfWarning"
                    }
                },
                "information": {
                    "description": "Information messages reported by the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation}. For example, a non-required parameter was ignored.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterOvfOvfInfo"
                    }
                }
            },
            "required": [
                "errors",
                "warnings",
                "information"
            ]
        },
        "VcenterOvfLibraryItemStorageGroupMapping": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of storage deployment target to use for the vmw:StorageGroupSection section. The specified value must be {@link Type#DATASTORE} or {@link Type#STORAGE_PROFILE}.",
                    "$ref": "#/definitions/VcenterOvfLibraryItemStorageGroupMappingType"
                },
                "datastore_id": {
                    "description": "Target datastore to be used for the storage group.",
                    "type": "string"
                },
                "storage_profile_id": {
                    "description": "Target storage profile to be used for the storage group.",
                    "type": "string"
                },
                "provisioning": {
                    "description": "Target provisioning type to use for the storage group.",
                    "$ref": "#/definitions/VcenterOvfDiskProvisioningType"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterOvfLibraryItemStorageGroupMappingType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the supported types of storage targets for sections of type vmw:StorageGroupSection in the OVF descriptor.",
            "enum": [
                "DATASTORE",
                "STORAGE_PROFILE"
            ]
        },
        "VcenterOvfOvfError": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "The message category.",
                    "$ref": "#/definitions/VcenterOvfOvfMessageCategory"
                },
                "issues": {
                    "description": "{@term List} of parse issues (see {@link ParseIssue}).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterOvfParseIssue"
                    }
                },
                "name": {
                    "description": "The name of input parameter.",
                    "type": "string"
                },
                "value": {
                    "description": "The value of input parameter.",
                    "type": "string"
                },
                "message": {
                    "description": "A localizable message.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "error": {
                    "description": "Represents a server {@link Error}.",
                    "type": "object"
                }
            },
            "required": [
                "category"
            ]
        },
        "VcenterOvfOvfInfo": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "A {@term list} of localizable messages (see {@link LocalizableMessage}).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                }
            },
            "required": [
                "messages"
            ]
        },
        "VcenterOvfOvfMessageCategory": {
            "type": "string",
            "description": "The {@name Category} {@term enumerated type} defines the categories of messages (see {@link OvfMessage}).",
            "enum": [
                "VALIDATION",
                "INPUT",
                "SERVER"
            ]
        },
        "VcenterOvfOvfWarning": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "The message category.",
                    "$ref": "#/definitions/VcenterOvfOvfMessageCategory"
                },
                "issues": {
                    "description": "{@term List} of parse issues (see {@link ParseIssue}).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterOvfParseIssue"
                    }
                },
                "name": {
                    "description": "The name of input parameter.",
                    "type": "string"
                },
                "value": {
                    "description": "The value of input parameter.",
                    "type": "string"
                },
                "message": {
                    "description": "A localizable message.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "error": {
                    "description": "Represents a server {@link Error}.",
                    "type": "object"
                }
            },
            "required": [
                "category"
            ]
        },
        "VcenterOvfParseIssue": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "The category of the parse issue.",
                    "$ref": "#/definitions/VcenterOvfParseIssueCategory"
                },
                "file": {
                    "description": "The name of the file in which the parse issue was found.",
                    "type": "string"
                },
                "line_number": {
                    "description": "The line number of the line in the file (see {@link #file}) where the parse issue was found (or -1 if not applicable).",
                    "type": "integer",
                    "format": "int64"
                },
                "column_number": {
                    "description": "The position in the line (see {@link #lineNumber}) (or -1 if not applicable).",
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "description": "A localizable message describing the parse issue.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "category",
                "file",
                "line_number",
                "column_number",
                "message"
            ]
        },
        "VcenterOvfParseIssueCategory": {
            "type": "string",
            "description": "The {@name Category} {@term enumerated type} defines the categories of issues that can be found when parsing files inside an OVF package (see {@link ParseIssue}) including OVF descriptor (which is an XML document), manifest and certificate files, or exporting an OVF package.",
            "enum": [
                "VALUE_ILLEGAL",
                "ATTRIBUTE_REQUIRED",
                "ATTRIBUTE_ILLEGAL",
                "ELEMENT_REQUIRED",
                "ELEMENT_ILLEGAL",
                "ELEMENT_UNKNOWN",
                "SECTION_UNKNOWN",
                "SECTION_RESTRICTION",
                "PARSE_ERROR",
                "GENERATE_ERROR",
                "VALIDATION_ERROR",
                "EXPORT_ERROR",
                "INTERNAL_ERROR"
            ]
        },
        "VcenterResourcePoolCreate": {
            "$ref": "#/definitions/VcenterResourcePoolCreateSpec",
            "description": "Specification of the new resource pool to be created, see {@link CreateSpec}."
        },
        "VcenterResourcePoolCreateSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the resource pool.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the created resource pool.",
                    "type": "string"
                },
                "cpu_allocation": {
                    "description": "Resource allocation for CPU.",
                    "$ref": "#/definitions/VcenterResourcePoolResourceAllocationCreateSpec"
                },
                "memory_allocation": {
                    "description": "Resource allocation for memory.",
                    "$ref": "#/definitions/VcenterResourcePoolResourceAllocationCreateSpec"
                }
            },
            "required": [
                "name",
                "parent"
            ]
        },
        "VcenterResourcePoolFilterSpec": {
            "type": "object",
            "properties": {
                "resource_pools": {
                    "description": "Identifiers of resource pools that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that resource pools must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "parent_resource_pools": {
                    "description": "Resource pools that must contain the resource pool for the resource pool to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the resource pool for the resource pool to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "hosts": {
                    "description": "Hosts that must contain the resource pool for the resource pool to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "clusters": {
                    "description": "Clusters that must contain the resource pool for the resource pool to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterResourcePoolInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the vCenter Server resource pool.",
                    "type": "string"
                },
                "resource_pools": {
                    "description": "Identifiers of the child resource pools contained in this resource pool.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "cpu_allocation": {
                    "description": "Resource allocation information for CPU.",
                    "$ref": "#/definitions/VcenterResourcePoolResourceAllocationInfo"
                },
                "memory_allocation": {
                    "description": "Resource allocation information for memory.",
                    "$ref": "#/definitions/VcenterResourcePoolResourceAllocationInfo"
                }
            },
            "required": [
                "name",
                "resource_pools"
            ]
        },
        "VcenterResourcePoolResourceAllocationCreateSpec": {
            "type": "object",
            "properties": {
                "reservation": {
                    "description": "Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "expandable_reservation": {
                    "description": "In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "shares": {
                    "description": "Shares are used in case of resource contention.",
                    "$ref": "#/definitions/VcenterResourcePoolSharesInfo"
                }
            }
        },
        "VcenterResourcePoolResourceAllocationInfo": {
            "type": "object",
            "properties": {
                "reservation": {
                    "description": "Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "expandable_reservation": {
                    "description": "In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "shares": {
                    "description": "Shares are used in case of resource contention.",
                    "$ref": "#/definitions/VcenterResourcePoolSharesInfo"
                }
            },
            "required": [
                "reservation",
                "expandable_reservation",
                "limit",
                "shares"
            ]
        },
        "VcenterResourcePoolResourceAllocationUpdateSpec": {
            "type": "object",
            "properties": {
                "reservation": {
                    "description": "Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "expandable_reservation": {
                    "description": "In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "shares": {
                    "description": "Shares are used in case of resource contention.",
                    "$ref": "#/definitions/VcenterResourcePoolSharesInfo"
                }
            }
        },
        "VcenterResourcePoolSharesInfo": {
            "type": "object",
            "properties": {
                "level": {
                    "description": "The allocation level. It maps to a pre-determined set of numeric values for shares. If the shares value does not map to a predefined size, then the level is set as CUSTOM.",
                    "$ref": "#/definitions/VcenterResourcePoolSharesInfoLevel"
                },
                "shares": {
                    "description": "When {@link #level} is set to CUSTOM, it is the number of shares allocated. Otherwise, this value is ignored. <p> There is no unit for this value. It is a relative measure based on the settings for other resource pools.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "level"
            ]
        },
        "VcenterResourcePoolSharesInfoLevel": {
            "type": "string",
            "description": "The {@name Level} {@term enumerated type} defines the possible values for the allocation level.",
            "enum": [
                "LOW",
                "NORMAL",
                "HIGH",
                "CUSTOM"
            ]
        },
        "VcenterResourcePoolSummary": {
            "type": "object",
            "properties": {
                "resource_pool": {
                    "description": "Identifier of the resource pool.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the resource pool.",
                    "type": "string"
                }
            },
            "required": [
                "resource_pool",
                "name"
            ]
        },
        "VcenterResourcePoolUpdate": {
            "$ref": "#/definitions/VcenterResourcePoolUpdateSpec",
            "description": "Specification for updating the configuration of the resource pool."
        },
        "VcenterResourcePoolUpdateSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the resource pool.",
                    "type": "string"
                },
                "cpu_allocation": {
                    "description": "Resource allocation for CPU.",
                    "$ref": "#/definitions/VcenterResourcePoolResourceAllocationUpdateSpec"
                },
                "memory_allocation": {
                    "description": "Resource allocation for memory.",
                    "$ref": "#/definitions/VcenterResourcePoolResourceAllocationUpdateSpec"
                }
            }
        },
        "VcenterServicesServiceHealth": {
            "type": "string",
            "description": "The {@name Health} {@term enumerated type} defines the possible values for health of a service.",
            "enum": [
                "DEGRADED",
                "HEALTHY",
                "HEALTHY_WITH_WARNINGS"
            ]
        },
        "VcenterServicesServiceInfo": {
            "type": "object",
            "properties": {
                "name_key": {
                    "description": "Service name key. Can be used to lookup resource bundle",
                    "type": "string"
                },
                "description_key": {
                    "description": "Service description key. Can be used to lookup resource bundle",
                    "type": "string"
                },
                "startup_type": {
                    "description": "Startup Type.",
                    "$ref": "#/definitions/VcenterServicesServiceStartupType"
                },
                "state": {
                    "description": "Running State.",
                    "$ref": "#/definitions/VcenterServicesServiceState"
                },
                "health": {
                    "description": "Health of service.",
                    "$ref": "#/definitions/VcenterServicesServiceHealth"
                },
                "health_messages": {
                    "description": "Localizable messages associated with the health of the service",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                }
            },
            "required": [
                "name_key",
                "description_key",
                "startup_type",
                "state"
            ]
        },
        "VcenterServicesServiceStartupType": {
            "type": "string",
            "description": "The {@name StartupType} {@term enumerated type} defines valid Startup Type for vCenter Server services.",
            "enum": [
                "MANUAL",
                "AUTOMATIC",
                "DISABLED"
            ]
        },
        "VcenterServicesServiceState": {
            "type": "string",
            "description": "The {@name State} {@term enumerated type} defines valid Run State for services.",
            "enum": [
                "STARTING",
                "STOPPING",
                "STARTED",
                "STOPPED"
            ]
        },
        "VcenterServicesServiceUpdate": {
            "$ref": "#/definitions/VcenterServicesServiceUpdateSpec",
            "description": "Service Update specification."
        },
        "VcenterServicesServiceUpdateSpec": {
            "type": "object",
            "properties": {
                "startup_type": {
                    "description": "Startup Type",
                    "$ref": "#/definitions/VcenterServicesServiceStartupType"
                }
            }
        },
        "VcenterStoragePoliciesCheckCompatibility": {
            "type": "object",
            "properties": {
                "datastores": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "Datastores used to check compatibility against a storage policy. The number of datastores is limited to 1024."
                }
            },
            "required": [
                "datastores"
            ]
        },
        "VcenterStoragePoliciesCompatibilityInfo": {
            "type": "object",
            "properties": {
                "compatible_datastores": {
                    "description": "Info about a list of datastores compatible with a specific storage policy.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterStoragePoliciesCompatibleDatastoreInfo"
                    }
                }
            },
            "required": [
                "compatible_datastores"
            ]
        },
        "VcenterStoragePoliciesCompatibleDatastoreInfo": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore.",
                    "type": "string"
                }
            },
            "required": [
                "datastore"
            ]
        },
        "VcenterStoragePoliciesComplianceFilterSpec": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Compliance Status that a virtual machine must have to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterStoragePoliciesComplianceStatus"
                    }
                }
            },
            "required": [
                "status"
            ]
        },
        "VcenterStoragePoliciesComplianceStatus": {
            "type": "string",
            "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNKNOWN",
                "NOT_APPLICABLE",
                "OUT_OF_DATE"
            ]
        },
        "VcenterStoragePoliciesComplianceSummary": {
            "type": "object",
            "properties": {
                "vm": {
                    "description": "Identifier of virtual machine",
                    "type": "string"
                },
                "vm_home": {
                    "description": "Compliance status of the virtual machine home.",
                    "$ref": "#/definitions/VcenterStoragePoliciesComplianceStatus"
                },
                "disks": {
                    "description": "List of the virtual hard disk.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterStoragePoliciesComplianceStatus"
                    }
                }
            },
            "required": [
                "vm"
            ]
        },
        "VcenterStoragePoliciesComplianceVMFilterSpec": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Compliance Status that a virtual machine must have to match the filter. Atleast one status must be specified.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterStoragePoliciesComplianceVMStatus"
                    }
                },
                "vms": {
                    "description": "Identifiers of virtual machines that can match the filter",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "status"
            ]
        },
        "VcenterStoragePoliciesComplianceVMInfo": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Compliance status of the virtual machine home.",
                    "$ref": "#/definitions/VcenterStoragePoliciesComplianceVMStatus"
                },
                "disks": {
                    "description": "A Map of virtual disks and their compliance status If empty, the virtual machine does not have any disks or its disks are not associated with a storage policy.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterStoragePoliciesComplianceVMStatus"
                    }
                }
            },
            "required": [
                "disks"
            ]
        },
        "VcenterStoragePoliciesComplianceVMStatus": {
            "type": "string",
            "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNKNOWN_COMPLIANCE",
                "NOT_APPLICABLE",
                "OUT_OF_DATE"
            ]
        },
        "VcenterStoragePoliciesFilterSpec": {
            "type": "object",
            "properties": {
                "policies": {
                    "description": "Identifiers of storage policies that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterStoragePoliciesSummary": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the storage policy.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the storage policy.",
                    "type": "string"
                }
            },
            "required": [
                "policy",
                "name",
                "description"
            ]
        },
        "VcenterStoragePoliciesVMInfo": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Flag to indicate whether or not the virtual machine home is associated with the given storage policy.",
                    "type": "boolean"
                },
                "disks": {
                    "description": "List of the virtual disks that are associated with the given storage policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "vm_home",
                "disks"
            ]
        },
        "VcenterSystemConfigDeploymentTypeInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of the appliance.",
                    "$ref": "#/definitions/VcenterDeploymentApplianceType"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterSystemConfigDeploymentTypeReconfigure": {
            "$ref": "#/definitions/VcenterSystemConfigDeploymentTypeReconfigureSpec",
            "description": "ReconfigureSpec to set the appliance type."
        },
        "VcenterSystemConfigDeploymentTypeReconfigureSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of the appliance.",
                    "$ref": "#/definitions/VcenterDeploymentApplianceType"
                },
                "remote_psc": {
                    "description": "External PSC to register with when reconfiguring a VCSA_EMBEDDED appliance to a VCSA_EXTERNAL appliance.",
                    "$ref": "#/definitions/VcenterDeploymentRemotePscSpec"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterSystemConfigPscRegistrationInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The IP address or DNS resolvable name of the PSC this appliance is registered with.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPs port used by the external PSC.",
                    "type": "integer",
                    "format": "int64"
                },
                "sso_domain": {
                    "description": "The Single Sign-On domain name of the external PSC.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "https_port",
                "sso_domain"
            ]
        },
        "VcenterSystemConfigPscRegistrationRepoint": {
            "$ref": "#/definitions/VcenterDeploymentRemotePscSpec",
            "description": "RemotePscSpec structure containing information about the external PSC node to repoint this vCenter Server appliance to."
        },
        "VcenterTaggingAssociationsIterationSpec": {
            "type": "object",
            "properties": {
                "marker": {
                    "description": "Marker is an opaque token that allows the caller to request the next page of tag associations.",
                    "type": "string"
                }
            }
        },
        "VcenterTaggingAssociationsLastIterationStatus": {
            "type": "string",
            "description": "The last status for the iterator. A field of this type is returned as part of the result and indicates to the caller of the API whether it can continue to make requests for more data. <p> The last status only reports on the state of the iteration at the time data was last returned.  As a result, it not does guarantee if the next call will succeed in getting more data or not. <p> Failures to retrieve results will be returned as Error responses. These last statuses are only returned when the iterator is operating as expected.",
            "enum": [
                "READY",
                "END_OF_DATA"
            ]
        },
        "VcenterTaggingAssociationsListResult": {
            "type": "object",
            "properties": {
                "associations": {
                    "description": "List of tag associations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTaggingAssociationsSummary"
                    }
                },
                "marker": {
                    "description": "Marker is an opaque data structure that allows the caller to request the next page of tag associations.",
                    "type": "string"
                },
                "status": {
                    "description": "The last status for the iterator that indicates whether any more results can be expected if the caller continues to make requests for more data using the iterator.",
                    "$ref": "#/definitions/VcenterTaggingAssociationsLastIterationStatus"
                }
            },
            "required": [
                "associations",
                "status"
            ]
        },
        "VcenterTaggingAssociationsSummary": {
            "type": "object",
            "properties": {
                "tag": {
                    "description": "The identifier of a tag.",
                    "type": "string"
                },
                "object": {
                    "description": "The identifier of an associated object.",
                    "$ref": "#/definitions/VapiStdDynamicID"
                }
            },
            "required": [
                "tag",
                "object"
            ]
        },
        "VcenterTopologyNodesApplianceType": {
            "type": "string",
            "enum": [
                "VCSA_EMBEDDED",
                "VCSA_EXTERNAL",
                "PSC_EXTERNAL"
            ]
        },
        "VcenterTopologyNodesFilterSpec": {
            "type": "object",
            "properties": {
                "types": {
                    "description": "Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see {@link ApplianceType}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterTopologyNodesApplianceType"
                    }
                }
            }
        },
        "VcenterTopologyNodesInfo": {
            "type": "object",
            "properties": {
                "domain": {
                    "description": "Domain name of the node.",
                    "type": "string"
                },
                "type": {
                    "description": "Appliance type of the node.",
                    "$ref": "#/definitions/VcenterTopologyNodesApplianceType"
                },
                "replication_partners": {
                    "description": "List of replication partners' node identifiers. Identifiers can be either IP address or DNS resolvable name of the partner node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "client_affinity": {
                    "description": "Identifier of the affinitized Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the affinitized node.",
                    "type": "string"
                }
            },
            "required": [
                "domain",
                "type"
            ]
        },
        "VcenterTopologyNodesSummary": {
            "type": "object",
            "properties": {
                "node": {
                    "description": "Identifier for the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node.",
                    "type": "string"
                },
                "type": {
                    "description": "Appliance type of the node.",
                    "$ref": "#/definitions/VcenterTopologyNodesApplianceType"
                },
                "replication_partners": {
                    "description": "List of replication partners' node identifiers. Identifiers can be either IP address or DNS resolvable name of the partner node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "client_affinity": {
                    "description": "Identifier of the affinitized Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the affinitized node.",
                    "type": "string"
                }
            },
            "required": [
                "node",
                "type"
            ]
        },
        "VcenterTopologyReplicationStatusFilterSpec": {
            "type": "object",
            "properties": {
                "nodes": {
                    "description": "Identifier that a vCenter and Platform Services Controller node must have to match the filter. (see {@link Summary#node}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterTopologyReplicationStatusSummary": {
            "type": "object",
            "properties": {
                "node": {
                    "description": "Identifier for the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node.",
                    "type": "string"
                },
                "replication_partner": {
                    "description": "Identifier for the vCenter or Platform Services Controller replication partner. Identifier can be either IP address or DNS resolvable name of the replication partner.",
                    "type": "string"
                },
                "partner_available": {
                    "description": "Indicates if the VMware Directory Service on partner is reachable or not.",
                    "type": "boolean"
                },
                "status_available": {
                    "description": "Indicates if the replication status for the node with respect to replication partner can be retrieved or not.",
                    "type": "boolean"
                },
                "replicating": {
                    "description": "Indicates if node is processing replication changes from the replication partner.",
                    "type": "boolean"
                },
                "change_lag": {
                    "description": "Number of replication changes node is behind the replication partner.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "node",
                "replication_partner",
                "partner_available",
                "status_available"
            ]
        },
        "VcenterTrustedInfrastructureAttestationServicesCreate": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureAttestationServicesCreateSpec",
            "description": "The CreateSpec for the new service."
        },
        "VcenterTrustedInfrastructureAttestationServicesCreateSpec": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances that can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureAttestationServicesFilterSpec": {
            "type": "object",
            "properties": {
                "services": {
                    "description": "A set of IDs by which to filter the services.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "address": {
                    "description": "A set of address by which to filter.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                    }
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances that can accept reports issued by this Attestation Service instance.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureAttestationServicesInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances that can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureAttestationServicesList": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureAttestationServicesFilterSpec",
            "description": "Return only services matching the specified filters."
        },
        "VcenterTrustedInfrastructureAttestationServicesSummary": {
            "type": "object",
            "properties": {
                "service": {
                    "description": "The service's unique identifier.",
                    "type": "string"
                },
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances that can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service instance belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "service",
                "address",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureKmsServicesCreate": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureKmsServicesCreateSpec",
            "description": "The CreateSpec for the new service."
        },
        "VcenterTrustedInfrastructureKmsServicesCreateSpec": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider service can accept reports from.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureKmsServicesFilterSpec": {
            "type": "object",
            "properties": {
                "services": {
                    "description": "A set of IDs by which to filter the services.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "address": {
                    "description": "A set of address by which to filter.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                    }
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureKmsServicesInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureKmsServicesList": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureKmsServicesFilterSpec",
            "description": "Return only services matching the specified filters."
        },
        "VcenterTrustedInfrastructureKmsServicesSummary": {
            "type": "object",
            "properties": {
                "service": {
                    "description": "The service's unique identifier.",
                    "type": "string"
                },
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "service",
                "address",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureNetworkAddress": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the service.",
                    "type": "string"
                },
                "port": {
                    "description": "The port of the service.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "hostname"
            ]
        },
        "VcenterTrustedInfrastructurePrincipalInfo": {
            "type": "object",
            "properties": {
                "certificates": {
                    "description": "The certificates used by the STS to sign tokens for this vCenter.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                    }
                },
                "issuer": {
                    "description": "The service which created and signed the security token.",
                    "type": "string"
                },
                "principal": {
                    "description": "The principal used by this vCenter instance to retrieve tokens. Currently this is the vCenter solution user.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureStsPrincipal"
                },
                "name": {
                    "description": "The user-friednly name of the vCenter.",
                    "type": "string"
                }
            },
            "required": [
                "certificates",
                "issuer",
                "principal",
                "name"
            ]
        },
        "VcenterTrustedInfrastructureStsPrincipal": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The principal's ID.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureStsPrincipalId"
                },
                "type": {
                    "description": "The type of the principal (user or group).",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureStsPrincipalType"
                }
            },
            "required": [
                "id",
                "type"
            ]
        },
        "VcenterTrustedInfrastructureStsPrincipalId": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The principal's username.",
                    "type": "string"
                },
                "domain": {
                    "description": "The principal's domain.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "domain"
            ]
        },
        "VcenterTrustedInfrastructureStsPrincipalType": {
            "type": "string",
            "description": "The {@name StsPrincipalType} {@term enum} can be either users or groups.",
            "enum": [
                "STS_USER",
                "STS_GROUP"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesFilterSpec": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "Search criteria by ESX base image version numbers.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "display_name": {
                    "description": "Search criteria by ESX base image version version numbers.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "health": {
                    "description": "Search criteria by health indicator.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesHealth"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesHealth": {
            "type": "string",
            "enum": [
                "NONE",
                "OK",
                "WARNING",
                "ERROR"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesImportFromImgdbTask": {
            "type": "string",
            "format": "binary",
            "description": "ESX metadata on a cluster level."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2CaCertificatesCreateSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "A unique name for the TPM CA certificate.",
                    "type": "string"
                },
                "cert_chain": {
                    "description": "The CA certificate chain. <p> Certificates may either be added one at a time, or as a chain. Adding the certificates as a chain allows the group to be managed as a whole. For example, an entire chain can be deleted in one {@link CaCertificates#delete} operation. <p> When certificates are added one at a time, the order must be root first, followed by any intermediates. The intermediates certificates must also be ordered in the direction from root to leaf. <p> Similarly, when added as a chain the list must be ordered in the direction from root to leaf.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                }
            },
            "required": [
                "name"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2CaCertificatesCreateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2CaCertificatesCreateSpec",
            "description": "The new CA certificate details."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2EndorsementKeysCreateSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "A unique name for the TPM endorsement key. <p> The unique name should be something that an administrator can use to easily identify the remote system. For example, the hostname, or hardware UUID.",
                    "type": "string"
                },
                "public_key": {
                    "description": "TPM public endorsement key in PEM format.",
                    "type": "string"
                },
                "certificate": {
                    "description": "TPM endorsement key certificate in PEM format. <p> When a endorsement key certificate is provided, it will be verified against the CA certificate list. Endorsement key certificates that are not signed by one of the CA certificates will be rejected. <p> Using this format allows for failures to be caught during configuration rather than later during attestation.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2EndorsementKeysCreateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2EndorsementKeysCreateSpec",
            "description": "The configuration."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2SettingsUpdateSpec": {
            "type": "object",
            "properties": {
                "require_endorsement_keys": {
                    "description": "Require registered TPM endorsement keys.",
                    "type": "boolean"
                },
                "require_certificate_validation": {
                    "description": "Require TPM endorsement key certificate validation.",
                    "type": "boolean"
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2SettingsUpdateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersAttestationTpm2SettingsUpdateSpec",
            "description": "The settings."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsCreateSpec": {
            "type": "object",
            "properties": {
                "certificates": {
                    "description": "The certificates used by the vCenter STS to sign tokens.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                    }
                },
                "issuer_alias": {
                    "description": "A user-friendly alias of the service which created and signed the security token.",
                    "type": "string"
                },
                "issuer": {
                    "description": "The service which created and signed the security token.",
                    "type": "string"
                },
                "principal": {
                    "description": "The principal used by the vCenter to retrieve tokens.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureStsPrincipal"
                }
            },
            "required": [
                "certificates",
                "issuer_alias",
                "issuer",
                "principal"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsCreateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsCreateSpec",
            "description": "The CreateSpec specifying the connection information."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsFilterSpec": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unqiue identifier of a connection profile.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "principals": {
                    "description": "The principal used by the vCenter to retrieve tokens.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureStsPrincipal"
                    }
                },
                "issuer": {
                    "description": "The service which created and signed the security token.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsListTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsFilterSpec",
            "description": "A FilterSpec specifying the profiles to be listed."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifies the cluster.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "description": "The state of the {@link TrustAuthorityClusters}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersState"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersInfo": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifies the cluster.",
                    "type": "string"
                },
                "state": {
                    "description": "The state of the cluster.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersState"
                }
            },
            "required": [
                "cluster",
                "state"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateUpdateSpec": {
            "type": "object",
            "properties": {
                "certificate": {
                    "description": "Public certificate used by every host in the cluster.",
                    "type": "string"
                },
                "private_key": {
                    "description": "Private part of the certificate.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "certificate"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateUpdateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateUpdateSpec",
            "description": "The update spec."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersCreateSpec": {
            "type": "object",
            "properties": {
                "provider": {
                    "description": "Name of the provider. <p> A unique string chosen by the client.",
                    "type": "string"
                },
                "master_key_id": {
                    "description": "Master key ID created for the provider. <p> A unique Key ID.",
                    "type": "string"
                },
                "key_server": {
                    "description": "Key server associated with this Provider.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKeyServerCreateSpec"
                }
            },
            "required": [
                "provider",
                "master_key_id",
                "key_server"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersCreateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersCreateSpec",
            "description": "Provider information."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersCredentialSetTask": {
            "type": "string",
            "format": "password",
            "description": "KMIP KMS password or AWS access key."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersCurrentPeerCertificatesFilterSpec": {
            "type": "object",
            "properties": {
                "server_names": {
                    "description": "Names that key server must have to match the filter (see {@link Summary#serverName}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "trusted": {
                    "description": "Trust status that server certificates must have to match the filter (see {@link Summary#trusted}).",
                    "type": "boolean"
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKeyServerCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of the key server.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKeyServerCreateSpecType"
                },
                "description": {
                    "description": "Description of the key server.",
                    "type": "string"
                },
                "proxy_server": {
                    "description": "Proxy server configuration.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "connection_timeout": {
                    "description": "Connection timeout in seconds.",
                    "type": "integer",
                    "format": "int64"
                },
                "kmip_server": {
                    "description": "Configuration information for Key Management Interoperability Protocol (KMIP) based key server.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKmipServerCreateSpec"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKeyServerCreateSpecType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} lists the key server types.",
            "enum": [
                "KMIP"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKeyServerUpdateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of the key server. <p>",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKeyServerUpdateSpecType"
                },
                "description": {
                    "description": "Description of the key server. <p>",
                    "type": "string"
                },
                "proxy_server": {
                    "description": "Proxy server configuration. <p>",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "connection_timeout": {
                    "description": "Connection timeout in seconds. <p>",
                    "type": "integer",
                    "format": "int64"
                },
                "kmip_server": {
                    "description": "Configuration information for KMIP based key server. <p>",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKmipServerUpdateSpec"
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKeyServerUpdateSpecType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} list the key server types.",
            "enum": [
                "KMIP"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKmipServerCreateSpec": {
            "type": "object",
            "properties": {
                "servers": {
                    "description": "List of Key Management Interoperability Protocol (KMIP) compliant key servers. <p> Key servers must be configured for active-active replication. If the server port is {@term unset}, a default value for KMIP's port will be used.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersServer"
                    }
                },
                "username": {
                    "description": "Username for authentication.",
                    "type": "string"
                }
            },
            "required": [
                "servers"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKmipServerUpdateSpec": {
            "type": "object",
            "properties": {
                "servers": {
                    "description": "List of KMIP compliant key servers. <p> Key servers must be configured for active-active replication. If the server port is {@term unset}, a default value for KMIP's port will be used. <p>",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersServer"
                    }
                },
                "username": {
                    "description": "Username for authentication. <p>",
                    "type": "string"
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersServer": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the server. <p> A unique string chosen by the client.",
                    "type": "string"
                },
                "address": {
                    "description": "The server's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                }
            },
            "required": [
                "name",
                "address"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersTrustedPeerCertificatesUpdateSpec": {
            "type": "object",
            "properties": {
                "certificates": {
                    "description": "Public certificates of key server to trust.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersTrustedPeerCertificatesUpdateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersTrustedPeerCertificatesUpdateSpec",
            "description": "The update spec"
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersUpdateSpec": {
            "type": "object",
            "properties": {
                "master_key_id": {
                    "description": "Master key identifier created for the provider. <p> A unique Key identifier. <p>",
                    "type": "string"
                },
                "key_server": {
                    "description": "Key server associated with this provider. <p>",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersKeyServerUpdateSpec"
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersUpdateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersKmsProvidersUpdateSpec",
            "description": "Provider information."
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersState": {
            "type": "string",
            "enum": [
                "ENABLE",
                "DISABLE"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersSummary": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifies the cluster.",
                    "type": "string"
                },
                "state": {
                    "description": "The state of the {@link TrustAuthorityClusters}.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersState"
                }
            },
            "required": [
                "cluster",
                "state"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersUpdateSpec": {
            "type": "object",
            "properties": {
                "state": {
                    "description": "The state of the {@link TrustAuthorityClusters}.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersState"
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityClustersUpdateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityClustersUpdateSpec",
            "description": "The specification for update of a cluster."
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsAttestationFilterSpec": {
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "A set of host IDs by which to filter the services.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "clusters": {
                    "description": "A set of cluster IDs by which to filter the services.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "address": {
                    "description": "The service's address.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                    }
                },
                "groups": {
                    "description": "The group IDs determines which Attestation Service instances this Attestation Service can communicate with.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsAttestationInfo": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "The trusted ESX on which the service runs.",
                    "type": "string"
                },
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "group": {
                    "description": "The group ID determines which Attestation Service instances this Attestation Service can communicate with.",
                    "type": "string"
                },
                "cluster": {
                    "description": "The opaque string identifier of the cluster in which the Attestation Service is part of.",
                    "type": "string"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                }
            },
            "required": [
                "host",
                "address",
                "group",
                "cluster",
                "trusted_CA"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsAttestationList": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsAttestationFilterSpec",
            "description": "Return details about Attestation Services matching the filter."
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummary": {
            "type": "object",
            "properties": {
                "summary_type": {
                    "description": "Defines the verbosity of the summary.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType"
                },
                "host": {
                    "description": "The trusted ESX on which the service runs.",
                    "type": "string"
                },
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "group": {
                    "description": "The group ID determines which Attestation Service instances this Attestation Service can communicate with.",
                    "type": "string"
                },
                "cluster": {
                    "description": "The opaque string identifier of the cluster in which the Attestation Service is part of.",
                    "type": "string"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                }
            },
            "required": [
                "summary_type"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType": {
            "type": "string",
            "description": "The connection information could include the certificates or be a shorter summary.",
            "enum": [
                "FULL",
                "NORMAL",
                "BRIEF"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsKmsFilterSpec": {
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "A set of host IDs by which to filter the services.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "clusters": {
                    "description": "A set of cluster IDs by which to filter the services.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "address": {
                    "description": "The service's address.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                    }
                },
                "groups": {
                    "description": "The group determines reports issued by which Attestation Service instances this Key Provider Service can accept.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsKmsInfo": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "The trusted ESX on which the service runs.",
                    "type": "string"
                },
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "group": {
                    "description": "The group ID determines which Attestation Service instances this Key Provider Service can communicate with.",
                    "type": "string"
                },
                "cluster": {
                    "description": "The opaque string identifier of the cluster in which the Key Provider Service is part of.",
                    "type": "string"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                }
            },
            "required": [
                "host",
                "address",
                "group",
                "cluster",
                "trusted_CA"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsKmsList": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsKmsFilterSpec",
            "description": "Return details about Key Provider Services matching the filter."
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsKmsSummary": {
            "type": "object",
            "properties": {
                "summary_type": {
                    "description": "Defines the verbosity of the summary.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustAuthorityHostsKmsSummaryType"
                },
                "host": {
                    "description": "The trusted ESX on which the service runs.",
                    "type": "string"
                },
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "group": {
                    "description": "The group ID determines which Attestation Service instances this Key Provider Service can communicate with.",
                    "type": "string"
                },
                "cluster": {
                    "description": "The opaque string identifier of the cluster in which the Key Provider Service is part of.",
                    "type": "string"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                }
            },
            "required": [
                "summary_type"
            ]
        },
        "VcenterTrustedInfrastructureTrustAuthorityHostsKmsSummaryType": {
            "type": "string",
            "description": "The connection information could include the certificates or be a shorter summary.",
            "enum": [
                "FULL",
                "NORMAL",
                "BRIEF"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigFilterSpec": {
            "type": "object",
            "properties": {
                "health": {
                    "description": "The health of the applied Attestation Service configuration.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth"
                    }
                },
                "address": {
                    "description": "The network address of the Attestation Service configured for use in the Trusted Cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth": {
            "type": "string",
            "description": "The {@name Health} {@term enumerated type} is an indicator for the consistency of the applied Attestation Service configuration in a cluster with respect to the desired state.",
            "enum": [
                "NONE",
                "OK",
                "ERROR"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigListTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigFilterSpec",
            "description": "The specification for the subset of results desired to be returned."
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Source of truth for the configuration of the Attestation Service.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesCreateSpecSourceType"
                },
                "service": {
                    "description": "The service's unique ID.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The attestation cluster's unique ID.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesCreateSpecSourceType": {
            "type": "string",
            "description": "The {@name SourceType} {@term enumerated type} specifies the source of truth the Attestation Service will use for its configuration.",
            "enum": [
                "SERVICE",
                "CLUSTER"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesCreateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesCreateSpec",
            "description": "Describes the registered instance of the Attestation Service"
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesFilterSpec": {
            "type": "object",
            "properties": {
                "services": {
                    "description": "A set of IDs by which to filter the services.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "address": {
                    "description": "The service's address.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                    }
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances can accept reports issued by this Attestation Service instance.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service instance belongs to.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                },
                "group": {
                    "description": "The group determines the Key Provider Service instances can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesList": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersAttestationServicesFilterSpec",
            "description": "Only return services matching the filters."
        },
        "VcenterTrustedInfrastructureTrustedClustersAttestationServicesSummary": {
            "type": "object",
            "properties": {
                "service": {
                    "description": "The service's unique identifier.",
                    "type": "string"
                },
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "group": {
                    "description": "The group specifies the Key Provider Service instances can accept reports issued by this Attestation Service instance.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Attestation Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "service",
                "address",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigFilterSpec": {
            "type": "object",
            "properties": {
                "health": {
                    "description": "The health of the applied Key Provider Service configuration.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth"
                    }
                },
                "address": {
                    "description": "The network address of the Key Provider Service configured for use in the Trusted Cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth": {
            "type": "string",
            "description": "The {@name Health} {@term enumerated type} is an indicator for the consistency of the applied Key Provider Service configuration in a cluster with respect to the desired state.",
            "enum": [
                "NONE",
                "OK",
                "ERROR"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigListTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigFilterSpec",
            "description": "The specification for the subset of results desired to be returned."
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Source of truth for the configuration of the Key Provider Service.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesCreateSpecSourceType"
                },
                "service": {
                    "description": "The service's unique ID.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The attestation cluster's unique ID.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesCreateSpecSourceType": {
            "type": "string",
            "description": "The {@name SourceType} {@term enumerated type} specifies source of truth the Key Provider Service will use for its configuration.",
            "enum": [
                "SERVICE",
                "CLUSTER"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesCreateTask": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesCreateSpec",
            "description": "Describes the registered instance of the Key Provider Service"
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesFilterSpec": {
            "type": "object",
            "properties": {
                "services": {
                    "description": "A set of IDs by which to filter the services.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "address": {
                    "description": "The service's address.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                    }
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service instance belongs to.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "trusted_CA": {
                    "description": "The service's TLS certificate chain.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureX509CertChain"
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "trusted_CA",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesList": {
            "$ref": "#/definitions/VcenterTrustedInfrastructureTrustedClustersKmsServicesFilterSpec",
            "description": "Only return services matching the filters."
        },
        "VcenterTrustedInfrastructureTrustedClustersKmsServicesSummary": {
            "type": "object",
            "properties": {
                "service": {
                    "description": "The service's unique identifier.",
                    "type": "string"
                },
                "address": {
                    "description": "The service's address.",
                    "$ref": "#/definitions/VcenterTrustedInfrastructureNetworkAddress"
                },
                "group": {
                    "description": "The group determines the Attestation Service instances this Key Provider Service can accept reports from.",
                    "type": "string"
                },
                "trust_authority_cluster": {
                    "description": "The cluster specifies the Trust Authority Cluster this Key Provider Service belongs to.",
                    "type": "string"
                }
            },
            "required": [
                "service",
                "address",
                "group",
                "trust_authority_cluster"
            ]
        },
        "VcenterTrustedInfrastructureX509CertChain": {
            "type": "object",
            "properties": {
                "cert_chain": {
                    "description": "Certificate chain in base64 format",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "cert_chain"
            ]
        },
        "VcenterVMClone": {
            "$ref": "#/definitions/VcenterVMCloneSpec",
            "description": "Virtual machine clone specification."
        },
        "VcenterVMClonePlacementSpec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the cloned virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the cloned virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the cloned virtual machine should be placed. <p> If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. <p> If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster into which the cloned virtual machine should be placed. <p> If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. <p> If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the cloned virtual machine's configuration state should be stored.  This datastore will also be used for any virtual disks that are created as part of the virtual machine clone operation unless individually overridden.",
                    "type": "string"
                }
            }
        },
        "VcenterVMCloneSpec": {
            "type": "object",
            "properties": {
                "source": {
                    "description": "Virtual machine to clone from.",
                    "type": "string"
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/VcenterVMClonePlacementSpec"
                },
                "disks_to_remove": {
                    "description": "Set of Disks to Remove.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "disks_to_update": {
                    "description": "Map of Disks to Update.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVMDiskCloneSpec"
                    }
                },
                "power_on": {
                    "description": "Attempt to perform a {@link #powerOn} after clone.",
                    "type": "boolean"
                },
                "guest_customization_spec": {
                    "description": "Guest customization spec to apply to the virtual machine after the virtual machine is deployed.",
                    "$ref": "#/definitions/VcenterVMGuestCustomizationSpec"
                }
            },
            "required": [
                "source",
                "name"
            ]
        },
        "VcenterVMCloneTask": {
            "$ref": "#/definitions/VcenterVMCloneSpec",
            "description": "Virtual machine clone specification."
        },
        "VcenterVMCreate": {
            "$ref": "#/definitions/VcenterVMCreateSpec",
            "description": "Virtual machine specification."
        },
        "VcenterVMCreateSpec": {
            "type": "object",
            "properties": {
                "guest_OS": {
                    "description": "Guest OS.",
                    "$ref": "#/definitions/VcenterVmGuestOS"
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/VcenterVMPlacementSpec"
                },
                "hardware_version": {
                    "description": "Virtual hardware version.",
                    "$ref": "#/definitions/VcenterVmHardwareVersion"
                },
                "boot": {
                    "description": "Boot configuration.",
                    "$ref": "#/definitions/VcenterVmHardwareBootCreateSpec"
                },
                "boot_devices": {
                    "description": "Boot device configuration.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareBootDeviceEntryCreateSpec"
                    }
                },
                "cpu": {
                    "description": "CPU configuration.",
                    "$ref": "#/definitions/VcenterVmHardwareCpuUpdateSpec"
                },
                "memory": {
                    "description": "Memory configuration.",
                    "$ref": "#/definitions/VcenterVmHardwareMemoryUpdateSpec"
                },
                "disks": {
                    "description": "List of disks.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareDiskCreateSpec"
                    }
                },
                "nics": {
                    "description": "List of Ethernet adapters.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareEthernetCreateSpec"
                    }
                },
                "cdroms": {
                    "description": "List of CD-ROMs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareCdromCreateSpec"
                    }
                },
                "floppies": {
                    "description": "List of floppy drives.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareFloppyCreateSpec"
                    }
                },
                "parallel_ports": {
                    "description": "List of parallel ports.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareParallelCreateSpec"
                    }
                },
                "serial_ports": {
                    "description": "List of serial ports.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareSerialCreateSpec"
                    }
                },
                "sata_adapters": {
                    "description": "List of SATA adapters.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareAdapterSataCreateSpec"
                    }
                },
                "scsi_adapters": {
                    "description": "List of SCSI adapters.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareAdapterScsiCreateSpec"
                    }
                },
                "storage_policy": {
                    "description": "The {@name StoragePolicySpec} {@term structure} contains information about the storage policy that is to be associated with the virtual machine home (which contains the configuration and log files).",
                    "$ref": "#/definitions/VcenterVMStoragePolicySpec"
                }
            },
            "required": [
                "guest_OS"
            ]
        },
        "VcenterVMDiskCloneSpec": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Destination datastore to clone disk.",
                    "type": "string"
                }
            }
        },
        "VcenterVMDiskRelocateSpec": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Destination datastore to relocate disk.",
                    "type": "string"
                }
            }
        },
        "VcenterVMFilterSpec": {
            "type": "object",
            "properties": {
                "vms": {
                    "description": "Identifiers of virtual machines that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that virtual machines must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "hosts": {
                    "description": "Hosts that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "clusters": {
                    "description": "Clusters that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "resource_pools": {
                    "description": "Resource pools that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "power_states": {
                    "description": "Power states that a virtual machine must be in to match the filter (see {@link Power.Info#state}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/VcenterVmPowerState"
                    }
                }
            }
        },
        "VcenterVMGuestCustomizationSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the customization specification.",
                    "type": "string"
                }
            }
        },
        "VcenterVMInfo": {
            "type": "object",
            "properties": {
                "guest_OS": {
                    "description": "Guest OS.",
                    "$ref": "#/definitions/VcenterVmGuestOS"
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "identity": {
                    "description": "Identity of the virtual machine.",
                    "$ref": "#/definitions/VcenterVmIdentityInfo"
                },
                "power_state": {
                    "description": "Power state of the virtual machine.",
                    "$ref": "#/definitions/VcenterVmPowerState"
                },
                "instant_clone_frozen": {
                    "description": "Indicates whether the virtual machine is frozen for instant clone, or not.",
                    "type": "boolean"
                },
                "hardware": {
                    "description": "Virtual hardware version information.",
                    "$ref": "#/definitions/VcenterVmHardwareInfo"
                },
                "boot": {
                    "description": "Boot configuration.",
                    "$ref": "#/definitions/VcenterVmHardwareBootInfo"
                },
                "boot_devices": {
                    "description": "Boot device configuration.  If the {@term list} has no entries, a server-specific default boot sequence is used.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareBootDeviceEntry"
                    }
                },
                "cpu": {
                    "description": "CPU configuration.",
                    "$ref": "#/definitions/VcenterVmHardwareCpuInfo"
                },
                "memory": {
                    "description": "Memory configuration.",
                    "$ref": "#/definitions/VcenterVmHardwareMemoryInfo"
                },
                "disks": {
                    "description": "List of disks.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareDiskInfo"
                    }
                },
                "nics": {
                    "description": "List of Ethernet adapters.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareEthernetInfo"
                    }
                },
                "cdroms": {
                    "description": "List of CD-ROMs.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareCdromInfo"
                    }
                },
                "floppies": {
                    "description": "List of floppy drives.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareFloppyInfo"
                    }
                },
                "parallel_ports": {
                    "description": "List of parallel ports.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareParallelInfo"
                    }
                },
                "serial_ports": {
                    "description": "List of serial ports.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareSerialInfo"
                    }
                },
                "sata_adapters": {
                    "description": "List of SATA adapters.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareAdapterSataInfo"
                    }
                },
                "scsi_adapters": {
                    "description": "List of SCSI adapters.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareAdapterScsiInfo"
                    }
                }
            },
            "required": [
                "guest_OS",
                "name",
                "power_state",
                "hardware",
                "boot",
                "boot_devices",
                "cpu",
                "memory",
                "disks",
                "nics",
                "cdroms",
                "floppies",
                "parallel_ports",
                "serial_ports",
                "sata_adapters",
                "scsi_adapters"
            ]
        },
        "VcenterVMInstantClone": {
            "$ref": "#/definitions/VcenterVMInstantCloneSpec",
            "description": "Virtual machine InstantCloneSpec."
        },
        "VcenterVMInstantClonePlacementSpec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the InstantCloned virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the InstantCloned virtual machine should be placed.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the InstantCloned virtual machine's configuration state should be stored.  This datastore will also be used for any virtual disks that are created as part of the virtual machine InstantClone operation.",
                    "type": "string"
                }
            }
        },
        "VcenterVMInstantCloneSpec": {
            "type": "object",
            "properties": {
                "source": {
                    "description": "Virtual machine to InstantClone from.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the new virtual machine.",
                    "type": "string"
                },
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/VcenterVMInstantClonePlacementSpec"
                },
                "nics_to_update": {
                    "description": "Map of NICs to update.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareEthernetUpdateSpec"
                    }
                },
                "disconnect_all_nics": {
                    "description": "Indicates whether all NICs on the destination virtual machine should be disconnected from the newtwork",
                    "type": "boolean"
                },
                "parallel_ports_to_update": {
                    "description": "Map of parallel ports to Update.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareParallelUpdateSpec"
                    }
                },
                "serial_ports_to_update": {
                    "description": "Map of serial ports to Update.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmHardwareSerialUpdateSpec"
                    }
                },
                "bios_uuid": {
                    "description": "128-bit SMBIOS UUID of a virtual machine represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.",
                    "type": "string"
                }
            },
            "required": [
                "source",
                "name"
            ]
        },
        "VcenterVMPlacementSpec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. <p> If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. <p> If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster into which the virtual machine should be placed. <p> If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. <p> If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the virtual machine's configuration state should be stored.  This datastore will also be used for any virtual disks that are created as part of the virtual machine creation operation.",
                    "type": "string"
                }
            }
        },
        "VcenterVMRegister": {
            "$ref": "#/definitions/VcenterVMRegisterSpec",
            "description": "Specification of the location of the virtual machine files and the placement of the new virtual machine."
        },
        "VcenterVMRegisterPlacementSpec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. <p> If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. <p> If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster into which the virtual machine should be placed. <p> If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. <p> If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                }
            }
        },
        "VcenterVMRegisterSpec": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore on which the virtual machine's configuration state is stored.",
                    "type": "string"
                },
                "path": {
                    "description": "Path to the virtual machine's configuration file on the datastore corresponding to {@link #datastore).",
                    "type": "string"
                },
                "datastore_path": {
                    "description": "Datastore path for the virtual machine's configuration file in the format \"[datastore name] path\".  For example \"[storage1] Test-VM/Test-VM.vmx\".",
                    "type": "string"
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/VcenterVMRegisterPlacementSpec"
                }
            }
        },
        "VcenterVMRelocate": {
            "$ref": "#/definitions/VcenterVMRelocateSpec",
            "description": "Relocate specification."
        },
        "VcenterVMRelocatePlacementSpec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. <p> If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. <p> If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster into which the virtual machine should be placed. <p> If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. <p> If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the virtual machine's configuration state should be stored.  This datastore will also be used for any virtual disks that are associated with the virtual machine, unless individually overridden.",
                    "type": "string"
                }
            }
        },
        "VcenterVMRelocateSpec": {
            "type": "object",
            "properties": {
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/VcenterVMRelocatePlacementSpec"
                },
                "disks": {
                    "description": "Individual disk relocation map.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVMDiskRelocateSpec"
                    }
                }
            }
        },
        "VcenterVMRelocateTask": {
            "$ref": "#/definitions/VcenterVMRelocateSpec",
            "description": "Relocate specification."
        },
        "VcenterVMStoragePolicySpec": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy which should be associated with the virtual machine.",
                    "type": "string"
                }
            },
            "required": [
                "policy"
            ]
        },
        "VcenterVMSummary": {
            "type": "object",
            "properties": {
                "vm": {
                    "description": "Identifier of the virtual machine.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the Virtual machine.",
                    "type": "string"
                },
                "power_state": {
                    "description": "Power state of the virtual machine.",
                    "$ref": "#/definitions/VcenterVmPowerState"
                },
                "cpu_count": {
                    "description": "Number of CPU cores.",
                    "type": "integer",
                    "format": "int64"
                },
                "memory_size_MiB": {
                    "description": "Memory size in mebibytes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "vm",
                "name",
                "power_state"
            ]
        },
        "VcenterVchaClusterActiveGet": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "$ref": "#/definitions/VcenterVchaCredentialsSpec",
                    "description": "Contains active node's management vCenter server credentials."
                },
                "partial": {
                    "type": "boolean",
                    "description": "If true, then return only the information that does not require connecting to the Active vCenter Server. <br> If false or unset, then return all the information."
                }
            }
        },
        "VcenterVchaClusterActiveInfo": {
            "type": "object",
            "properties": {
                "management": {
                    "description": "IP specification for the Management network.",
                    "$ref": "#/definitions/VcenterVchaIpSpec"
                },
                "ha": {
                    "description": "IP specification for the HA network.",
                    "$ref": "#/definitions/VcenterVchaIpSpec"
                },
                "placement": {
                    "description": "Contains the placement information of the active node.",
                    "$ref": "#/definitions/VcenterVchaPlacementInfo"
                }
            },
            "required": [
                "management"
            ]
        },
        "VcenterVchaClusterActiveSpec": {
            "type": "object",
            "properties": {
                "ha_network_type": {
                    "description": "The type of the Network object used by the HA network.<br> If the {@link #haNetwork} {@term field} is set, then the {@link #haNetworkType} field must be set.<br> If the {@link #haNetwork} {@term field} is {@term unset}, then the {@link #haNetworkType} {@term field} is ignored.",
                    "$ref": "#/definitions/VcenterVchaNetworkType"
                },
                "ha_network": {
                    "description": "The identifier of the Network object used for the HA network.<br> If the {@link #haNetwork} {@term field} is set, then the {@link #haNetworkType} {@term field} must be set.<br> If the {@link #haNetwork} {@term field} is {@term unset}, then the {@link #haNetworkType} {@term field} is ignored.",
                    "type": "string"
                },
                "ha_ip": {
                    "description": "IP specification for the HA network.",
                    "$ref": "#/definitions/VcenterVchaIpSpec"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "VcenterVchaClusterClusterMode": {
            "type": "string",
            "description": "The {@name ClusterMode} {@term enumerated type} defines the possible modes for a VCHA Cluster.",
            "enum": [
                "ENABLED",
                "DISABLED",
                "MAINTENANCE"
            ]
        },
        "VcenterVchaClusterClusterState": {
            "type": "string",
            "description": "The {@name ClusterState} {@term enumerated type} defines the possible for a VCHA Cluster.",
            "enum": [
                "HEALTHY",
                "DEGRADED",
                "ISOLATED"
            ]
        },
        "VcenterVchaClusterConfigState": {
            "type": "string",
            "description": "The {@name ConfigState} {@term enumerated type} defines the VCHA configuration state.",
            "enum": [
                "CONFIGURED",
                "NOTCONFIGURED",
                "INVALID",
                "PREPARED"
            ]
        },
        "VcenterVchaClusterDeploySpec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/VcenterVchaCredentialsSpec"
                },
                "deployment": {
                    "description": "Contains the deployment type.",
                    "$ref": "#/definitions/VcenterVchaClusterType"
                },
                "active": {
                    "description": "Contains the active node's network configuration.",
                    "$ref": "#/definitions/VcenterVchaClusterActiveSpec"
                },
                "passive": {
                    "description": "Contains the passive node's placement configuration.",
                    "$ref": "#/definitions/VcenterVchaClusterPassiveSpec"
                },
                "witness": {
                    "description": "Contains the witness node's placement configuration.",
                    "$ref": "#/definitions/VcenterVchaClusterWitnessSpec"
                }
            },
            "required": [
                "deployment",
                "active",
                "passive",
                "witness"
            ]
        },
        "VcenterVchaClusterDeployTask": {
            "$ref": "#/definitions/VcenterVchaClusterDeploySpec",
            "description": "Contains the deploy specification for all three nodes of a VCHA cluster."
        },
        "VcenterVchaClusterDeploymentTypeInfo": {
            "type": "object",
            "properties": {
                "deployment_type": {
                    "description": "Identifies the deployment type of the VCHA cluster.",
                    "$ref": "#/definitions/VcenterVchaClusterDeploymentTypeType"
                }
            },
            "required": [
                "deployment_type"
            ]
        },
        "VcenterVchaClusterDeploymentTypeType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the possible deployment types for a VCHA Cluster.",
            "enum": [
                "NONE",
                "AUTO",
                "MANUAL"
            ]
        },
        "VcenterVchaClusterErrorCondition": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Contains an error condition.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "recommendation": {
                    "description": "Contains a recommendation on handling the error condition.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                }
            },
            "required": [
                "error"
            ]
        },
        "VcenterVchaClusterFailoverTask": {
            "type": "object",
            "properties": {
                "planned": {
                    "type": "boolean",
                    "description": "If false, a failover is initiated immediately and may result in data loss.<br> If true, a failover is initated after the Active node flushes its state to Passive and there is no data loss."
                }
            },
            "required": [
                "planned"
            ]
        },
        "VcenterVchaClusterGet": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "$ref": "#/definitions/VcenterVchaCredentialsSpec",
                    "description": "Contains active node's management vCenter server credentials."
                },
                "partial": {
                    "type": "boolean",
                    "description": "If true, then return only the information that does not require connecting to the Active vCenter Server.<br> If false or unset, then return all the information."
                }
            }
        },
        "VcenterVchaClusterInfo": {
            "type": "object",
            "properties": {
                "config_state": {
                    "description": "Configuration state of the VCHA cluster.<br> The active node's management vCenter server credentials are not required to populate this {@term field}.",
                    "$ref": "#/definitions/VcenterVchaClusterConfigState"
                },
                "node1": {
                    "description": "Node configuration information for the VCHA cluster.",
                    "$ref": "#/definitions/VcenterVchaClusterNodeInfo"
                },
                "node2": {
                    "description": "Node configuration information for the VCHA cluster.",
                    "$ref": "#/definitions/VcenterVchaClusterNodeInfo"
                },
                "witness": {
                    "description": "Node configuration information for the VCHA cluster.",
                    "$ref": "#/definitions/VcenterVchaClusterWitnessInfo"
                },
                "mode": {
                    "description": "Operational mode of the VCHA Cluster.",
                    "$ref": "#/definitions/VcenterVchaClusterClusterMode"
                },
                "health_state": {
                    "description": "Last known state of the VCHA Cluster.",
                    "$ref": "#/definitions/VcenterVchaClusterClusterState"
                },
                "health_exception": {
                    "description": "Health warning messages if the health information is unavailable.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "health_warnings": {
                    "description": "A collection of messages describing the reason for a non-healthy Cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVchaClusterErrorCondition"
                    }
                },
                "manual_failover_allowed": {
                    "description": "Specifies if manual failover is allowed.",
                    "type": "boolean"
                },
                "auto_failover_allowed": {
                    "description": "Specifies if automatic failover is allowed.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVchaClusterIpFamily": {
            "type": "string",
            "description": "The {@name IpFamily} {@term enumerated type} defines the IP address family.",
            "enum": [
                "IPV4",
                "IPV6"
            ]
        },
        "VcenterVchaClusterIpInfo": {
            "type": "object",
            "properties": {
                "ip_family": {
                    "description": "Family of the ip.",
                    "$ref": "#/definitions/VcenterVchaClusterIpFamily"
                },
                "ipv4": {
                    "description": "If the type of the ip family is IPV4, then this will point to IPv4 address specification.",
                    "$ref": "#/definitions/VcenterVchaClusterIpv4Info"
                },
                "ipv6": {
                    "description": "If the type of the ip family is IPV6, then this will point to IPv6 address specification.",
                    "$ref": "#/definitions/VcenterVchaClusterIpv6Info"
                },
                "gateway_ip": {
                    "description": "Gateway IP address.",
                    "type": "string"
                }
            },
            "required": [
                "ip_family"
            ]
        },
        "VcenterVchaClusterIpv4Info": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IP address of the configured network interface.",
                    "type": "string"
                },
                "subnet_mask": {
                    "description": "The subnet mask of the interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix of the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address",
                "subnet_mask"
            ]
        },
        "VcenterVchaClusterIpv6Info": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IP address of the configured network interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix of the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address",
                "prefix"
            ]
        },
        "VcenterVchaClusterModeClusterMode": {
            "type": "string",
            "description": "The {@name ClusterMode} {@term enumerated type} defines the possible modes for a VCHA Cluster.",
            "enum": [
                "ENABLED",
                "DISABLED",
                "MAINTENANCE"
            ]
        },
        "VcenterVchaClusterModeInfo": {
            "type": "object",
            "properties": {
                "mode": {
                    "description": "Identifies the mode of the VCHA cluster.",
                    "$ref": "#/definitions/VcenterVchaClusterModeClusterMode"
                }
            },
            "required": [
                "mode"
            ]
        },
        "VcenterVchaClusterModeSetTask": {
            "type": "object",
            "properties": {
                "mode": {
                    "$ref": "#/definitions/VcenterVchaClusterModeClusterMode",
                    "description": "Clustermode to change the VCHA cluster mode to."
                }
            },
            "required": [
                "mode"
            ]
        },
        "VcenterVchaClusterNodeInfo": {
            "type": "object",
            "properties": {
                "failover_ip": {
                    "description": "Failover IP address that this node will assume after the failover to serve client requests. Each failover node can have a different failover IP address.<br> The active node's management vCenter server credentials are not required to populate {@link #failoverIp}.",
                    "$ref": "#/definitions/VcenterVchaClusterIpInfo"
                },
                "ha_ip": {
                    "description": "VCHA Cluster network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.<br> The active node's management vCenter server credentials are not required to populate this {@link #haIp}.",
                    "$ref": "#/definitions/VcenterVchaClusterIpInfo"
                },
                "runtime": {
                    "description": "Runtime information for the node in the VCHA Cluster.<br> The active node's management vCenter server credentials are required to populate some {@term fields} of {@link #runtime}.",
                    "$ref": "#/definitions/VcenterVchaClusterNodeRuntimeInfo"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "VcenterVchaClusterNodeRole": {
            "type": "string",
            "description": "The {@name NodeRole} {@term enumerated type} defines the role node can be in a VCHA Cluster.",
            "enum": [
                "ACTIVE",
                "PASSIVE",
                "WITNESS"
            ]
        },
        "VcenterVchaClusterNodeRuntimeInfo": {
            "type": "object",
            "properties": {
                "state": {
                    "description": "Last known state of the node.<br> The active node's management vCenter server credentials are not required to populate {@link #state}.",
                    "$ref": "#/definitions/VcenterVchaClusterNodeState"
                },
                "role": {
                    "description": "Last known role of the node.<br> The active node's management vCenter server credentials are not required to populate {@link #role}.",
                    "$ref": "#/definitions/VcenterVchaClusterNodeRole"
                },
                "placement": {
                    "description": "Placement information of the node.<br> The active node's management vCenter server credentials are required to populate most {@term fields} of {@link #placement}.",
                    "$ref": "#/definitions/VcenterVchaPlacementInfo"
                }
            }
        },
        "VcenterVchaClusterNodeState": {
            "type": "string",
            "description": "The {@name NodeState} {@term enumerated type} defines possible state a node can be in a VCHA Cluster.",
            "enum": [
                "UP",
                "DOWN"
            ]
        },
        "VcenterVchaClusterNodeVmInfo": {
            "type": "object",
            "properties": {
                "vm": {
                    "description": "The identifier of the virtual machine of the VCHA node.",
                    "type": "string"
                },
                "bios_uuid": {
                    "description": "BIOS UUID for the node.",
                    "type": "string"
                }
            },
            "required": [
                "vm",
                "bios_uuid"
            ]
        },
        "VcenterVchaClusterPassiveCheck": {
            "$ref": "#/definitions/VcenterVchaClusterPassiveCheckSpec",
            "description": "Contains the passive node's placement specification."
        },
        "VcenterVchaClusterPassiveCheckResult": {
            "type": "object",
            "properties": {
                "warnings": {
                    "description": "A list of problems which may require attention, but which are not fatal.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "errors": {
                    "description": "A list of problems which are fatal to the operation and the operation will fail.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                }
            },
            "required": [
                "warnings",
                "errors"
            ]
        },
        "VcenterVchaClusterPassiveCheckSpec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/VcenterVchaCredentialsSpec"
                },
                "placement": {
                    "description": "Contains the node's placement information for validation.",
                    "$ref": "#/definitions/VcenterVchaPlacementSpec"
                }
            },
            "required": [
                "placement"
            ]
        },
        "VcenterVchaClusterPassiveRedeploySpec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/VcenterVchaCredentialsSpec"
                },
                "placement": {
                    "description": "Contains the node's placement information.",
                    "$ref": "#/definitions/VcenterVchaPlacementSpec"
                },
                "ha_ip": {
                    "description": "Contains the VCHA HA network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.",
                    "$ref": "#/definitions/VcenterVchaIpSpec"
                },
                "failover_ip": {
                    "description": "Failover IP address that this node must assume after the failover to serve client requests.",
                    "$ref": "#/definitions/VcenterVchaIpSpec"
                }
            },
            "required": [
                "placement"
            ]
        },
        "VcenterVchaClusterPassiveRedeployTask": {
            "$ref": "#/definitions/VcenterVchaClusterPassiveRedeploySpec",
            "description": "Contains the passive node's redeploy specification."
        },
        "VcenterVchaClusterPassiveSpec": {
            "type": "object",
            "properties": {
                "placement": {
                    "description": "Contains the placement configuration of the node.",
                    "$ref": "#/definitions/VcenterVchaPlacementSpec"
                },
                "ha_ip": {
                    "description": "IP specification for the HA network.",
                    "$ref": "#/definitions/VcenterVchaIpSpec"
                },
                "failover_ip": {
                    "description": "IP specification for the management network.",
                    "$ref": "#/definitions/VcenterVchaIpSpec"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "VcenterVchaClusterType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the possible deployment types for a VCHA Cluster.",
            "enum": [
                "AUTO",
                "MANUAL"
            ]
        },
        "VcenterVchaClusterUndeploySpec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/VcenterVchaCredentialsSpec"
                },
                "force_delete": {
                    "description": "Flag controlling in what circumstances the virtual machines will be deleted. For this flag to take effect, the VCHA cluster should have been successfully configured using automatic deployment. <ul> <li> If true, the {@link #vms} {@term field} will be ignored, the VCHA cluster specific information is removed, and the passive and witness virtual machines will be deleted.</li> <li> If false, the {@link #vms} {@term field} contains the information identifying the passive and witness virtual machines.</li> <ul> <li> If the {@link #vms} {@term field} is set, then it will be validated prior to deleting the passive and witness virtual machines and VCHA cluster specific information is removed.</li> <li> If the {@link #vms} {@term field} is {@term unset}, then the passive and witness virtual machines will not be deleted. The customer should delete them in order to cleanup completely. VCHA cluster specific information is removed.</li> </ul> </ul>",
                    "type": "boolean"
                },
                "vms": {
                    "description": "Contains virtual machine information for the passive and witness virtual machines. For this flag to take effect, the VCHA cluster should have been successfully configured using automatic deployment. <p> If set, the {@link #forceDelete} {@term field} controls whether this information is validated.</li> <ul> <li> If the {@link #forceDelete} {@term field} is true, then this information is ignored, VCHA cluster specific information is removed and the passive and witness virtual machines will be deleted.</li> <li> If the {@link #forceDelete} {@term field} is {@term unset} or false, then this information is validated prior to deleting the passive and witness virtual machines. VCHA cluster specific information is removed.</li> </ul>",
                    "$ref": "#/definitions/VcenterVchaClusterVmInfo"
                }
            }
        },
        "VcenterVchaClusterUndeployTask": {
            "$ref": "#/definitions/VcenterVchaClusterUndeploySpec",
            "description": "Contains the undeploy specification for a VCHA cluster."
        },
        "VcenterVchaClusterVmInfo": {
            "type": "object",
            "properties": {
                "passive": {
                    "description": "The virtual machine information of the passive node.",
                    "$ref": "#/definitions/VcenterVchaClusterNodeVmInfo"
                },
                "witness": {
                    "description": "The virtual machine information of the witness node.",
                    "$ref": "#/definitions/VcenterVchaClusterNodeVmInfo"
                }
            },
            "required": [
                "passive",
                "witness"
            ]
        },
        "VcenterVchaClusterWitnessCheck": {
            "$ref": "#/definitions/VcenterVchaClusterWitnessCheckSpec",
            "description": "Contains the witness node's placement specification."
        },
        "VcenterVchaClusterWitnessCheckResult": {
            "type": "object",
            "properties": {
                "warnings": {
                    "description": "A list of problems which may require attention, but which are not fatal.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                },
                "errors": {
                    "description": "A list of problems which are fatal to the operation and the operation will fail.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                }
            },
            "required": [
                "warnings",
                "errors"
            ]
        },
        "VcenterVchaClusterWitnessCheckSpec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/VcenterVchaCredentialsSpec"
                },
                "placement": {
                    "description": "Contains the node's placement information for validation.",
                    "$ref": "#/definitions/VcenterVchaPlacementSpec"
                }
            },
            "required": [
                "placement"
            ]
        },
        "VcenterVchaClusterWitnessInfo": {
            "type": "object",
            "properties": {
                "ha_ip": {
                    "description": "VCHA Cluster network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.<br> The active node's management vCenter server credentials are not required to populate {@link #haIp}.",
                    "$ref": "#/definitions/VcenterVchaClusterIpInfo"
                },
                "runtime": {
                    "description": "Runtime information for the node in the VCHA Cluster.<br> The active node's management vCenter server credentials are required to populate some {@term fields} of {@link #runtime}.",
                    "$ref": "#/definitions/VcenterVchaClusterNodeRuntimeInfo"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "VcenterVchaClusterWitnessRedeploySpec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/VcenterVchaCredentialsSpec"
                },
                "placement": {
                    "description": "Contains the node's placement information.",
                    "$ref": "#/definitions/VcenterVchaPlacementSpec"
                },
                "ha_ip": {
                    "description": "Contains the VCHA HA network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.",
                    "$ref": "#/definitions/VcenterVchaIpSpec"
                }
            },
            "required": [
                "placement"
            ]
        },
        "VcenterVchaClusterWitnessRedeployTask": {
            "$ref": "#/definitions/VcenterVchaClusterWitnessRedeploySpec",
            "description": "Contains the witness node's redeploy specification."
        },
        "VcenterVchaClusterWitnessSpec": {
            "type": "object",
            "properties": {
                "placement": {
                    "description": "Contains the placement configuration of the node.",
                    "$ref": "#/definitions/VcenterVchaPlacementSpec"
                },
                "ha_ip": {
                    "description": "IP specification for the HA network.",
                    "$ref": "#/definitions/VcenterVchaIpSpec"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "VcenterVchaConnectionSpec": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "IP Address or DNS of the vCenter.",
                    "type": "string"
                },
                "port": {
                    "description": "Port number.",
                    "type": "integer",
                    "format": "int64"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 hash of the server SSL certificate.",
                    "type": "string"
                },
                "username": {
                    "description": "Username to access the server.",
                    "type": "string"
                },
                "password": {
                    "description": "Password for the specified user.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "hostname"
            ]
        },
        "VcenterVchaCredentialsSpec": {
            "type": "object",
            "properties": {
                "active_location": {
                    "description": "Connection information for the management vCenter Server of the Active Node in a VCHA Cluster.",
                    "$ref": "#/definitions/VcenterVchaConnectionSpec"
                }
            },
            "required": [
                "active_location"
            ]
        },
        "VcenterVchaDiskInfo": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "The identifier of the datastore to put all the virtual disks on.",
                    "type": "string"
                },
                "datastore_name": {
                    "description": "The name of the datastore.",
                    "type": "string"
                }
            },
            "required": [
                "datastore",
                "datastore_name"
            ]
        },
        "VcenterVchaDiskSpec": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "The identifier of the datastore to put all the virtual disks on.",
                    "type": "string"
                }
            }
        },
        "VcenterVchaIpFamily": {
            "type": "string",
            "description": "The {@name IpFamily} {@term enumerated type} defines the Ip address family.",
            "enum": [
                "IPV4",
                "IPV6"
            ]
        },
        "VcenterVchaIpSpec": {
            "type": "object",
            "properties": {
                "ip_family": {
                    "description": "Family of the IP address to configure the interface.",
                    "$ref": "#/definitions/VcenterVchaIpFamily"
                },
                "ipv4": {
                    "description": "If the family of the ip is IPV4, then this will point to IPv4 address specification.",
                    "$ref": "#/definitions/VcenterVchaIpv4Spec"
                },
                "ipv6": {
                    "description": "If the family of the ip is IPV6, then this will point to IPv6 address specification.",
                    "$ref": "#/definitions/VcenterVchaIpv6Spec"
                },
                "default_gateway": {
                    "description": "The IP address of the Gateway for this interface.",
                    "type": "string"
                },
                "dns_servers": {
                    "description": "The list of IP addresses of the DNS servers for this interface. This list is a comma separated list.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "ip_family"
            ]
        },
        "VcenterVchaIpv4Spec": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IPV4 address to be used to configure the interface.",
                    "type": "string"
                },
                "subnet_mask": {
                    "description": "The subnet mask for the interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix for the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address"
            ]
        },
        "VcenterVchaIpv6Spec": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IPv6 address to be used to configure the interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix for the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address",
                "prefix"
            ]
        },
        "VcenterVchaNetworkType": {
            "type": "string",
            "description": "The {@name NetworkType} {@term enumerated type} defines the type of a vCenter Server network.",
            "enum": [
                "STANDARD_PORTGROUP",
                "DISTRIBUTED_PORTGROUP"
            ]
        },
        "VcenterVchaOperationsInfo": {
            "type": "object",
            "properties": {
                "disabled": {
                    "description": "Identifiers of the operations that are current disabled. These operation strings are one of {@link Operations#CLUSTER_DEPLOY_OP}, {@link Operations#CLUSTER_FAILOVER_OP}, {@link Operations#PASSIVE_REDEPLOY_OP}, {@link Operations#WITNESS_REDEPLOY_OP}, {@link Operations#MODE_SET_OP}, {@link Operations#CLUSTER_UNDEPLOY_OP} and {@link Operations#CLUSTER_GET_OP}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "active": {
                    "description": "Identifiers of the operations that are currently running. These operation strings are one of {@link Operations#CLUSTER_DEPLOY_OP}, {@link Operations#CLUSTER_FAILOVER_OP}, {@link Operations#PASSIVE_REDEPLOY_OP}, {@link Operations#WITNESS_REDEPLOY_OP}, {@link Operations#MODE_SET_OP}, and {@link Operations#CLUSTER_UNDEPLOY_OP}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "disabled",
                "active"
            ]
        },
        "VcenterVchaPlacementInfo": {
            "type": "object",
            "properties": {
                "management_vcenter_name": {
                    "description": "The hostname of the vCenter server that is managing the VCHA node.",
                    "type": "string"
                },
                "management_vcenter_server_guid": {
                    "description": "The unique identifier of the vCenter server that is managing the VCHA node.",
                    "type": "string"
                },
                "vm_name": {
                    "description": "The virtual machine name of the VCHA node.",
                    "type": "string"
                },
                "datacenter": {
                    "description": "The identifier of the datacenter of the VCHA node.",
                    "type": "string"
                },
                "datacenter_name": {
                    "description": "The name of the datacenter of the VCHA node.",
                    "type": "string"
                },
                "host": {
                    "description": "The identifier of the host of the VCHA node.",
                    "type": "string"
                },
                "host_name": {
                    "description": "The name of the host of the VCHA node.",
                    "type": "string"
                },
                "cluster": {
                    "description": "The identifier of the cluster of which {@name #host} is member.",
                    "type": "string"
                },
                "cluster_name": {
                    "description": "The name of the cluster of which {@name #host} is member.",
                    "type": "string"
                },
                "ha_network": {
                    "description": "The identifier of the Network object used for the HA network.",
                    "type": "string"
                },
                "ha_network_name": {
                    "description": "The name of the Network object used for the HA network.",
                    "type": "string"
                },
                "ha_network_type": {
                    "description": "The type of the Network object used for the HA network.",
                    "$ref": "#/definitions/VcenterVchaNetworkType"
                },
                "management_network": {
                    "description": "The identifier of the Network object used for the Management network.",
                    "type": "string"
                },
                "management_network_name": {
                    "description": "The name of the Network object used for the Management network.",
                    "type": "string"
                },
                "management_network_type": {
                    "description": "The type of the Network object used for the Management network.",
                    "$ref": "#/definitions/VcenterVchaNetworkType"
                },
                "storage": {
                    "description": "The storage information of the VCHA node.",
                    "$ref": "#/definitions/VcenterVchaDiskInfo"
                },
                "bios_uuid": {
                    "description": "BIOS UUID for the node.",
                    "type": "string"
                }
            },
            "required": [
                "management_vcenter_name",
                "vm_name",
                "datacenter",
                "datacenter_name",
                "host",
                "host_name",
                "management_network",
                "management_network_name",
                "management_network_type",
                "storage"
            ]
        },
        "VcenterVchaPlacementSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the VCHA node to be used for the virtual machine name.",
                    "type": "string"
                },
                "folder": {
                    "description": "The identifier of the folder to deploy the VCHA node to.",
                    "type": "string"
                },
                "host": {
                    "description": "The identifier of the host to deploy the VCHA node to.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "The identifier of the resource pool to deploy the VCHA node to.",
                    "type": "string"
                },
                "ha_network_type": {
                    "description": "The type of the Network object used by the HA network.<br> If the {@link #haNetwork} {@term field} is set, then the {@link #haNetworkType} field must be set.<br> If the {@link #haNetwork} {@term field} is {@term unset}, then the {@link #haNetworkType} {@term field} is ignored.",
                    "$ref": "#/definitions/VcenterVchaNetworkType"
                },
                "ha_network": {
                    "description": "The identifier of the Network object used for the HA network.<br> If the {@link #haNetwork} {@term field} is set, then the {#link #haNetworkType} {@term field} must be set.<br> If the {@link #haNetwork} {@term field} is {@term unset}, then the {@link #haNetworkType} {@term field} is ignored.",
                    "type": "string"
                },
                "management_network_type": {
                    "description": "The type of the Network object used by the Management network.<br> If the {@link #managementNetwork} {@term field} is set, then the {#link #managementNetworkType} field must be set.<br> If the {@link #managementNetwork} {@term field} is {@term unset}, then the {@link #managementNetworkType} {@term field} is ignored.",
                    "$ref": "#/definitions/VcenterVchaNetworkType"
                },
                "management_network": {
                    "description": "The identifier of the Network object used for the Management network. If the {@link #managementNetwork} {@term field} is set, then the {@link #managementNetworkType} {@term field} must be set.<br> If the {@link #managementNetwork} {@term field} is {@term unset}, then the {@link #managementNetworkType} {@term field} is ignored.",
                    "type": "string"
                },
                "storage": {
                    "description": "The storage specification to deploy the VCHA node to.",
                    "$ref": "#/definitions/VcenterVchaDiskSpec"
                }
            },
            "required": [
                "name",
                "folder"
            ]
        },
        "VcenterVmComputePoliciesInfo": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "The compliance status of the policy on a specified object.",
                    "$ref": "#/definitions/VcenterComputePoliciesObjectCompliance"
                }
            },
            "required": [
                "status"
            ]
        },
        "VcenterVmConsoleTicketsCreate": {
            "$ref": "#/definitions/VcenterVmConsoleTicketsCreateSpec",
            "description": "Specification for the console ticket to be created."
        },
        "VcenterVmConsoleTicketsCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of virtual machine console ticket",
                    "$ref": "#/definitions/VcenterVmConsoleTicketsType"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmConsoleTicketsSummary": {
            "type": "object",
            "properties": {
                "ticket": {
                    "description": "Console ticket URI",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "ticket"
            ]
        },
        "VcenterVmConsoleTicketsType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the types of console tickets.",
            "enum": [
                "VMRC",
                "WEBMKS"
            ]
        },
        "VcenterVmGuestCredentials": {
            "type": "object",
            "properties": {
                "interactive_session": {
                    "description": "If {@term set}, the {@term operation} will interact with the logged-in desktop session in the guest. This requires that the logged-on user matches the user specified by the {@link Credentials}. This is currently only supported for {@link Type#USERNAME_PASSWORD}.",
                    "type": "boolean"
                },
                "type": {
                    "description": "The guest credentials type",
                    "$ref": "#/definitions/VcenterVmGuestCredentialsType"
                },
                "user_name": {
                    "description": "For {@link Type#SAML_BEARER_TOKEN}, this is the guest user to be associated with the credentials. For {@link Type#USERNAME_PASSWORD} this is the guest username.",
                    "type": "string"
                },
                "password": {
                    "description": "password",
                    "type": "string",
                    "format": "password"
                },
                "saml_token": {
                    "description": "SAML Bearer Token",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "interactive_session",
                "type"
            ]
        },
        "VcenterVmGuestCredentialsType": {
            "type": "string",
            "description": "Types of guest credentials",
            "enum": [
                "USERNAME_PASSWORD",
                "SAML_BEARER_TOKEN"
            ]
        },
        "VcenterVmGuestCustomizationSet": {
            "$ref": "#/definitions/VcenterVmGuestCustomizationSetSpec",
            "description": "The customization settings to be applied to the guest operating system."
        },
        "VcenterVmGuestCustomizationSetSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the customization specification that has be retrieved from the virtual center inventory and applied for the virtual machine. Either one of {@name #name} or {@name #spec} or none of them should be specified.",
                    "type": "string"
                },
                "spec": {
                    "description": "The customization specification that has to be applied for the virtual machine. Either one of {@name #name} or {@name #spec} or none of them should be specified.",
                    "$ref": "#/definitions/VcenterGuestCustomizationSpec"
                }
            }
        },
        "VcenterVmGuestDhcpConfigInfo": {
            "type": "object",
            "properties": {
                "ipv4_enabled": {
                    "description": "True if IPv4 DHCP is enabled, false otherwise.",
                    "type": "boolean"
                },
                "ipv6_enabled": {
                    "description": "True if IPv6 DHCP is enabled, false otherwise.",
                    "type": "boolean"
                }
            },
            "required": [
                "ipv4_enabled",
                "ipv6_enabled"
            ]
        },
        "VcenterVmGuestDnsAssignedValues": {
            "type": "object",
            "properties": {
                "host_name": {
                    "description": "The host name portion of DNS name. For example, \"esx01\" part of esx01.example.com.",
                    "type": "string"
                },
                "domain_name": {
                    "description": "The domain name portion of the DNS name.  \"example.com\" part of esx01.example.com.",
                    "type": "string"
                }
            },
            "required": [
                "host_name",
                "domain_name"
            ]
        },
        "VcenterVmGuestDnsConfigInfo": {
            "type": "object",
            "properties": {
                "ip_addresses": {
                    "description": "The IP addresses of the DNS servers in order of use. IPv4 addresses are specified using dotted decimal notation.  For example, \"192.0.2.1\". IPv6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "search_domains": {
                    "description": "The domain in which to search for hosts, placed in order of preference. These are the domain name portion of the DNS names.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "ip_addresses",
                "search_domains"
            ]
        },
        "VcenterVmGuestEnvironmentGet": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data.  See {@link Credentials}."
                }
            },
            "required": [
                "credentials"
            ]
        },
        "VcenterVmGuestEnvironmentList": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data.  See {@link Credentials}."
                },
                "names": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the variables to be read. If the {@term set} is empty, then all the environment variables are returned."
                }
            },
            "required": [
                "credentials",
                "names"
            ]
        },
        "VcenterVmGuestFilesystemDirectoriesCreate": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                },
                "path": {
                    "type": "string",
                    "description": "The complete path to the directory to be created."
                },
                "create_parents": {
                    "type": "boolean",
                    "description": "Whether any parent directories should be created.  If any failure occurs, some parent directories could be left behind."
                }
            },
            "required": [
                "credentials",
                "path"
            ]
        },
        "VcenterVmGuestFilesystemDirectoriesCreateTemporary": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                },
                "prefix": {
                    "type": "string",
                    "description": "The prefix to be given to the new temporary directory."
                },
                "suffix": {
                    "type": "string",
                    "description": "The suffix to be given to the new temporary directory."
                },
                "parent_path": {
                    "type": "string",
                    "description": "The complete path to the directory in which to create the new directory."
                }
            },
            "required": [
                "credentials",
                "prefix",
                "suffix"
            ]
        },
        "VcenterVmGuestFilesystemDirectoriesDelete": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                },
                "path": {
                    "type": "string",
                    "description": "The complete path to the directory to be deleted."
                },
                "recursive": {
                    "type": "boolean",
                    "description": "If true, all files and subdirectories are also deleted. If false, the directory must be empty for the operation to succeed."
                }
            },
            "required": [
                "credentials",
                "path"
            ]
        },
        "VcenterVmGuestFilesystemDirectoriesMove": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                },
                "path": {
                    "type": "string",
                    "description": "The complete path to the directory to be moved."
                },
                "new_path": {
                    "type": "string",
                    "description": "The complete path to where the directory is moved or its new name. It cannot be a path to an existing directory or an existing file."
                }
            },
            "required": [
                "credentials",
                "path",
                "new_path"
            ]
        },
        "VcenterVmGuestFilesystemFilesCreateTemporary": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                },
                "prefix": {
                    "type": "string",
                    "description": "The prefix to be given to the new temporary file."
                },
                "suffix": {
                    "type": "string",
                    "description": "The suffix to be given to the new temporary file."
                },
                "parent_path": {
                    "type": "string",
                    "description": "The complete path to the directory in which to create the file."
                }
            },
            "required": [
                "credentials",
                "prefix",
                "suffix"
            ]
        },
        "VcenterVmGuestFilesystemFilesDelete": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                }
            },
            "required": [
                "credentials"
            ]
        },
        "VcenterVmGuestFilesystemFilesFileAttributesInfo": {
            "type": "object",
            "properties": {
                "last_modified": {
                    "description": "The date and time the file was last modified.",
                    "type": "string",
                    "format": "date-time"
                },
                "last_accessed": {
                    "description": "The date and time the file was last accessed.",
                    "type": "string",
                    "format": "date-time"
                },
                "symlink_target": {
                    "description": "The target for the file if it's a symbolic link. This is currently only set for Posix guest operating systems, but may be supported in the future on Windows guest operating systems that support symbolic links.",
                    "type": "string"
                },
                "filesystem_family": {
                    "description": "The type of guest filesystem.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesFilesystemFamily"
                },
                "win_attributes": {
                    "description": "Windows-specific file information.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesWindowsFileAttributesInfo"
                },
                "posix_attributes": {
                    "description": "Posix-specific file information.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesPosixFileAttributesInfo"
                }
            },
            "required": [
                "last_modified",
                "last_accessed",
                "filesystem_family"
            ]
        },
        "VcenterVmGuestFilesystemFilesFileAttributesUpdateSpec": {
            "type": "object",
            "properties": {
                "last_modified": {
                    "description": "The date and time the file was last modified.",
                    "type": "string",
                    "format": "date-time"
                },
                "last_accessed": {
                    "description": "The date and time the file was last accessed.",
                    "type": "string",
                    "format": "date-time"
                },
                "windows": {
                    "description": "Windows-specific file update information.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec"
                },
                "posix": {
                    "description": "Posix-specific file update information.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesPosixFileAttributesUpdateSpec"
                }
            }
        },
        "VcenterVmGuestFilesystemFilesFilesystemFamily": {
            "type": "string",
            "description": "The {@name FilesystemFamily} {@term enumerated type} defines the types of guest operating fllesystem.",
            "enum": [
                "WINDOWS",
                "POSIX"
            ]
        },
        "VcenterVmGuestFilesystemFilesFilterSpec": {
            "type": "object",
            "properties": {
                "match_pattern": {
                    "description": "The perl-compatible regular expression used to filter the returned files.",
                    "type": "string"
                }
            }
        },
        "VcenterVmGuestFilesystemFilesGet": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                }
            },
            "required": [
                "credentials"
            ]
        },
        "VcenterVmGuestFilesystemFilesInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of file.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesType"
                },
                "size": {
                    "description": "The file size in bytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "attributes": {
                    "description": "Attributes of a file.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesFileAttributesInfo"
                }
            },
            "required": [
                "type",
                "size",
                "attributes"
            ]
        },
        "VcenterVmGuestFilesystemFilesIterationSpec": {
            "type": "object",
            "properties": {
                "size": {
                    "description": "Specifies the maximum number of results to return.",
                    "type": "integer",
                    "format": "int64"
                },
                "index": {
                    "description": "Which result to start the list with. If this value exceeds the number of results, an empty list will be returned.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "VcenterVmGuestFilesystemFilesLastIterationStatus": {
            "type": "string",
            "description": "The last status for the iterator.  A field of this type is returned as part of the result and indicates to the caller of the API whether it can continue to make requests for more data. The last status only reports on the state of the iteration at the time data was last returned.  As a result, it not does guarantee if the next call will succeed in getting more data or not. Failures to retrieve results will be returned as Error responses.  These last statuses are only returned when the iterator is operating as expected.",
            "enum": [
                "READY",
                "END_OF_DATA"
            ]
        },
        "VcenterVmGuestFilesystemFilesList": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                },
                "path": {
                    "type": "string",
                    "description": "The complete path to the directory or file to query."
                },
                "iteration": {
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesIterationSpec",
                    "description": "The specification of a page of results to be retrieved."
                },
                "filter": {
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesFilterSpec",
                    "description": "Specification to match files for which information should be returned."
                }
            },
            "required": [
                "credentials",
                "path"
            ]
        },
        "VcenterVmGuestFilesystemFilesListResult": {
            "type": "object",
            "properties": {
                "files": {
                    "description": "A list of {@link Summary} {@term structures} containing information for all the matching files.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmGuestFilesystemFilesSummary"
                    }
                },
                "total": {
                    "description": "The total number of results from the {@link Files#list}. This is a hint to the user of the iterator regarding how many items are available to be retrieved.  The total could change if the inventory of items are being changed.",
                    "type": "integer",
                    "format": "int64"
                },
                "start_index": {
                    "description": "Positional index into the logical item list of the first item returned in the list of results.  The first item in the logical item list has an index of 0. This is a hint to the user of the iterator regarding the logical position in the iteration.  For example, this can be used to display to the user which page of the iteration is being shown. The total could change if the inventory of items are being changed.",
                    "type": "integer",
                    "format": "int64"
                },
                "end_index": {
                    "description": "Positional index into the logical item list of the last item returned in the list of results.  The first item in the logical item list has an index of 0. This is a hint to the user of the iterator regarding the logical position in the iteration.  For example, this can be used to display to the user which page of the iteration is being shown. The total could change if the inventory of items are being changed.",
                    "type": "integer",
                    "format": "int64"
                },
                "status": {
                    "description": "The last status for the iterator that indicates whether any more results can be expected if the caller continues to make requests for more data using the iterator.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesLastIterationStatus"
                }
            },
            "required": [
                "files",
                "total",
                "status"
            ]
        },
        "VcenterVmGuestFilesystemFilesMove": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                },
                "path": {
                    "type": "string",
                    "description": "The complete path to the original file or symbolic link to be moved."
                },
                "new_path": {
                    "type": "string",
                    "description": "The complete path to the new file. It cannot be a path to an existing directory."
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "If true, the destination file is overwritten."
                }
            },
            "required": [
                "credentials",
                "path",
                "new_path"
            ]
        },
        "VcenterVmGuestFilesystemFilesPosixFileAttributesInfo": {
            "type": "object",
            "properties": {
                "owner": {
                    "description": "The owner ID.",
                    "type": "integer",
                    "format": "int64"
                },
                "group": {
                    "description": "The group ID.",
                    "type": "integer",
                    "format": "int64"
                },
                "permissions": {
                    "description": "The file permissions in chmod(2) format. This {@term field} is presented as octal.",
                    "type": "string"
                }
            },
            "required": [
                "owner",
                "group",
                "permissions"
            ]
        },
        "VcenterVmGuestFilesystemFilesPosixFileAttributesUpdateSpec": {
            "type": "object",
            "properties": {
                "owner_id": {
                    "description": "The owner ID.",
                    "type": "integer",
                    "format": "int64"
                },
                "group_id": {
                    "description": "The group ID.",
                    "type": "integer",
                    "format": "int64"
                },
                "permissions": {
                    "description": "The file permissions in chmod(2) format. This {@term field} is interpreted as octal.",
                    "type": "string"
                }
            }
        },
        "VcenterVmGuestFilesystemFilesSummary": {
            "type": "object",
            "properties": {
                "filename": {
                    "description": "The name of the file.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of file.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesType"
                },
                "size": {
                    "description": "The file size in bytes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "filename",
                "type",
                "size"
            ]
        },
        "VcenterVmGuestFilesystemFilesType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the valid types of files.",
            "enum": [
                "FILE",
                "DIRECTORY",
                "SYMLINK"
            ]
        },
        "VcenterVmGuestFilesystemFilesUpdate": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data."
                },
                "path": {
                    "type": "string",
                    "description": "The complete path to the file or directory to be changed in the guest.  If the file points to an symbolic link, then the attributes of the target file are changed."
                },
                "file_attributes": {
                    "$ref": "#/definitions/VcenterVmGuestFilesystemFilesFileAttributesUpdateSpec",
                    "description": "Specifies the different file attributes of the guest file to be changed. See {@link FileAttributesUpdateSpec}."
                }
            },
            "required": [
                "credentials",
                "path",
                "file_attributes"
            ]
        },
        "VcenterVmGuestFilesystemFilesWindowsFileAttributesInfo": {
            "type": "object",
            "properties": {
                "hidden": {
                    "description": "The file is hidden.",
                    "type": "boolean"
                },
                "read_only": {
                    "description": "The file is read-only.",
                    "type": "boolean"
                },
                "created": {
                    "description": "The date and time the file was created.",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "hidden",
                "read_only",
                "created"
            ]
        },
        "VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec": {
            "type": "object",
            "properties": {
                "hidden": {
                    "description": "The file is hidden.",
                    "type": "boolean"
                },
                "read_only": {
                    "description": "The file is read-only.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmGuestFilesystemTransfersCreate": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication credentials."
                },
                "spec": {
                    "$ref": "#/definitions/VcenterVmGuestFilesystemTransfersCreateSpec",
                    "description": "A specification of the type of file transfer and any applicable attibutes."
                }
            },
            "required": [
                "credentials",
                "spec"
            ]
        },
        "VcenterVmGuestFilesystemTransfersCreateSpec": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "The complete destination path in the guest to transfer the file to or from the client.  It cannot be a path to a directory or a symbolic link.",
                    "type": "string"
                },
                "attributes": {
                    "description": "Details about the file to be transferred into the guest.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemTransfersFileCreationAttributes"
                }
            },
            "required": [
                "path"
            ]
        },
        "VcenterVmGuestFilesystemTransfersFileCreationAttributes": {
            "type": "object",
            "properties": {
                "size": {
                    "description": "The size in bytes of the file to be transferred into the guest.",
                    "type": "integer",
                    "format": "int64"
                },
                "overwrite": {
                    "description": "Whether an existing file should be overwritten.",
                    "type": "boolean"
                },
                "last_modified": {
                    "description": "The date and time the file was last modified.",
                    "type": "string",
                    "format": "date-time"
                },
                "last_accessed": {
                    "description": "The date and time the file was last accessed.",
                    "type": "string",
                    "format": "date-time"
                },
                "windows": {
                    "description": "Windows-specific file creation information.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemTransfersWindowsFileAttributesCreateSpec"
                },
                "posix": {
                    "description": "Posix-specific file creation information.",
                    "$ref": "#/definitions/VcenterVmGuestFilesystemTransfersPosixFileAttributesCreateSpec"
                }
            },
            "required": [
                "size"
            ]
        },
        "VcenterVmGuestFilesystemTransfersPosixFileAttributesCreateSpec": {
            "type": "object",
            "properties": {
                "owner_id": {
                    "description": "The owner ID. If this property is not specified when passing a {@link PosixFileAttributesCreateSpec} object to {@link Transfers#create}, the default value will be the owner Id of the user who invoked the file transfer operation.",
                    "type": "integer",
                    "format": "int64"
                },
                "group_id": {
                    "description": "The group ID. If this property is not specified when passing a {@link PosixFileAttributesCreateSpec} object to {@link Transfers#create}, the default value will be the group Id of the user who invoked the file transfer operation.",
                    "type": "integer",
                    "format": "int64"
                },
                "permissions": {
                    "description": "The file permissions in chmod(2) format. If this property is not specified when passing a {@link PosixFileAttributesCreateSpec} object to {@link Transfers#create}, the file will be created with 0644 permissions. This {@term field} is interpreted as octal.",
                    "type": "string"
                }
            }
        },
        "VcenterVmGuestFilesystemTransfersWindowsFileAttributesCreateSpec": {
            "type": "object",
            "properties": {
                "hidden": {
                    "description": "The file is hidden.",
                    "type": "boolean"
                },
                "read_only": {
                    "description": "The file is read-only.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmGuestIdentityInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Guest operating system identifier (short name).",
                    "$ref": "#/definitions/VcenterVmGuestOS"
                },
                "family": {
                    "description": "Guest operating system family.",
                    "$ref": "#/definitions/VcenterVmGuestOSFamily"
                },
                "full_name": {
                    "description": "Guest operating system full name.",
                    "$ref": "#/definitions/VapiStdLocalizableMessage"
                },
                "host_name": {
                    "description": "Hostname of the guest operating system.",
                    "type": "string"
                },
                "ip_address": {
                    "description": "IP address assigned by the guest operating system.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "family",
                "full_name",
                "host_name"
            ]
        },
        "VcenterVmGuestLocalFilesystemInfo": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Total capacity of the file system, in bytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "free_space": {
                    "description": "Free space on the file system, in bytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "filesystem": {
                    "description": "Filesystem type, if known.  For example, ext3 or NTFS.",
                    "type": "string"
                },
                "mappings": {
                    "description": "VirtualDisks backing the guest partition, if known.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmGuestLocalFilesystemVirtualDiskMapping"
                    }
                }
            },
            "required": [
                "capacity",
                "free_space"
            ]
        },
        "VcenterVmGuestLocalFilesystemVirtualDiskMapping": {
            "type": "object",
            "properties": {
                "disk": {
                    "description": "The virtual disk.",
                    "type": "string"
                }
            },
            "required": [
                "disk"
            ]
        },
        "VcenterVmGuestNetworkingInfo": {
            "type": "object",
            "properties": {
                "dns_values": {
                    "description": "Client DNS values. Data assigned by DNS.",
                    "$ref": "#/definitions/VcenterVmGuestDnsAssignedValues"
                },
                "dns": {
                    "description": "Client DNS configuration. How DNS queries are resolved.",
                    "$ref": "#/definitions/VcenterVmGuestDnsConfigInfo"
                }
            }
        },
        "VcenterVmGuestNetworkingInterfacesInfo": {
            "type": "object",
            "properties": {
                "dns_values": {
                    "description": "Client DNS values. Data assigned by DNS.",
                    "$ref": "#/definitions/VcenterVmGuestDnsAssignedValues"
                },
                "mac_address": {
                    "description": "MAC address of the adapter.",
                    "type": "string"
                },
                "dns": {
                    "description": "DNS configuration of the adapter. See {@link vcenter.vm.guest.Networking.Info#dns} for system wide settings.",
                    "$ref": "#/definitions/VcenterVmGuestDnsConfigInfo"
                },
                "ip": {
                    "description": "IP configuration settings of the adapter",
                    "$ref": "#/definitions/VcenterVmGuestNetworkingInterfacesIpConfigInfo"
                },
                "wins_servers": {
                    "description": "The IP addresses of any WINS name servers for the adapter.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "nic": {
                    "description": "Link to the corresponding virtual device.",
                    "type": "string"
                }
            }
        },
        "VcenterVmGuestNetworkingInterfacesIpAddressInfo": {
            "type": "object",
            "properties": {
                "ip_address": {
                    "description": "IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit addresses specified using eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "string"
                },
                "prefix_length": {
                    "description": "Denotes the length of a generic Internet network address prefix. Prefix length: the valid range of values is 0-32 for IPv4, and 0-128 for IPv6. A value of n corresponds to an IP address mask that has n contiguous 1-bits from the most significant bit (MSB), with all other bits set to 0. A value of zero is valid only if the calling context defines it.",
                    "type": "integer",
                    "format": "int64"
                },
                "origin": {
                    "description": "How this address was configured.",
                    "$ref": "#/definitions/VcenterVmGuestNetworkingInterfacesIpAddressOrigin"
                },
                "state": {
                    "description": "The state of this ipAddress.",
                    "$ref": "#/definitions/VcenterVmGuestNetworkingInterfacesIpAddressStatus"
                }
            },
            "required": [
                "ip_address",
                "prefix_length",
                "state"
            ]
        },
        "VcenterVmGuestNetworkingInterfacesIpAddressOrigin": {
            "type": "string",
            "description": "The {@name IpAddressOrigin} {@term enumerated type} specifies how an IP address was obtained for an interface. See RFC 4293 IpAddressOriginTC.",
            "enum": [
                "OTHER",
                "MANUAL",
                "DHCP",
                "LINKLAYER",
                "RANDOM"
            ]
        },
        "VcenterVmGuestNetworkingInterfacesIpAddressStatus": {
            "type": "string",
            "description": "The {@name IpAddressStatus} {@term enumerated type} defines the present status of an address on an interface. See RFC 4293 IpAddressStatusTC.",
            "enum": [
                "PREFERRED",
                "DEPRECATED",
                "INVALID",
                "INACCESSIBLE",
                "UNKNOWN",
                "TENTATIVE",
                "DUPLICATE"
            ]
        },
        "VcenterVmGuestNetworkingInterfacesIpConfigInfo": {
            "type": "object",
            "properties": {
                "ip_addresses": {
                    "description": "IP addresses configured on the interface.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmGuestNetworkingInterfacesIpAddressInfo"
                    }
                },
                "dhcp": {
                    "description": "Client side DHCP for an interface.",
                    "$ref": "#/definitions/VcenterVmGuestDhcpConfigInfo"
                }
            },
            "required": [
                "ip_addresses"
            ]
        },
        "VcenterVmGuestNetworkingRoutesInfo": {
            "type": "object",
            "properties": {
                "network": {
                    "description": "IP Address of the destination IP network. IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit specified using as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of  symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "string"
                },
                "prefix_length": {
                    "description": "The prefix length. For IPv4 the value range is 0-32. For IPv6 prefixLength is a decimal value range 0-128. The property represents the number of contiguous, higher-order bits of the address that make up the network portion of the IP address.",
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_address": {
                    "description": "Where to send the packets for this route. Unicast IP Address of the next hop router. IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit specified using as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of  symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "string"
                },
                "interface_index": {
                    "description": "The network interface associated with this route. This is an index into the result of {@link Interfaces#list} The index refers to the relative position of an element in a {@term list}.  For example, an index of 0 refers to the first element in the {@term list} while an index of 1 refers to the second element.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "network",
                "prefix_length"
            ]
        },
        "VcenterVmGuestOS": {
            "type": "string",
            "description": "The {@name GuestOS} {@term enumerated type} defines the valid guest operating system types used for configuring a virtual machine.",
            "enum": [
                "DOS",
                "WIN_31",
                "WIN_95",
                "WIN_98",
                "WIN_ME",
                "WIN_NT",
                "WIN_2000_PRO",
                "WIN_2000_SERV",
                "WIN_2000_ADV_SERV",
                "WIN_XP_HOME",
                "WIN_XP_PRO",
                "WIN_XP_PRO_64",
                "WIN_NET_WEB",
                "WIN_NET_STANDARD",
                "WIN_NET_ENTERPRISE",
                "WIN_NET_DATACENTER",
                "WIN_NET_BUSINESS",
                "WIN_NET_STANDARD_64",
                "WIN_NET_ENTERPRISE_64",
                "WIN_LONGHORN",
                "WIN_LONGHORN_64",
                "WIN_NET_DATACENTER_64",
                "WIN_VISTA",
                "WIN_VISTA_64",
                "WINDOWS_7",
                "WINDOWS_7_64",
                "WINDOWS_7_SERVER_64",
                "WINDOWS_8",
                "WINDOWS_8_64",
                "WINDOWS_8_SERVER_64",
                "WINDOWS_9",
                "WINDOWS_9_64",
                "WINDOWS_9_SERVER_64",
                "WINDOWS_HYPERV",
                "WINDOWS_SERVER_2019",
                "WINDOWS_SERVER_2021",
                "FREEBSD",
                "FREEBSD_64",
                "FREEBSD_11",
                "FREEBSD_12",
                "FREEBSD_13",
                "FREEBSD_11_64",
                "FREEBSD_12_64",
                "FREEBSD_13_64",
                "REDHAT",
                "RHEL_2",
                "RHEL_3",
                "RHEL_3_64",
                "RHEL_4",
                "RHEL_4_64",
                "RHEL_5",
                "RHEL_5_64",
                "RHEL_6",
                "RHEL_6_64",
                "RHEL_7",
                "RHEL_7_64",
                "RHEL_8_64",
                "RHEL_9_64",
                "CENTOS",
                "CENTOS_64",
                "CENTOS_6",
                "CENTOS_6_64",
                "CENTOS_7",
                "CENTOS_7_64",
                "CENTOS_8_64",
                "CENTOS_9_64",
                "ORACLE_LINUX",
                "ORACLE_LINUX_64",
                "ORACLE_LINUX_6",
                "ORACLE_LINUX_6_64",
                "ORACLE_LINUX_7",
                "ORACLE_LINUX_7_64",
                "ORACLE_LINUX_8_64",
                "ORACLE_LINUX_9_64",
                "SUSE",
                "SUSE_64",
                "SLES",
                "SLES_64",
                "SLES_10",
                "SLES_10_64",
                "SLES_11",
                "SLES_11_64",
                "SLES_12",
                "SLES_12_64",
                "SLES_15_64",
                "SLES_16_64",
                "NLD_9",
                "OES",
                "SJDS",
                "MANDRAKE",
                "MANDRIVA",
                "MANDRIVA_64",
                "TURBO_LINUX",
                "TURBO_LINUX_64",
                "UBUNTU",
                "UBUNTU_64",
                "DEBIAN_4",
                "DEBIAN_4_64",
                "DEBIAN_5",
                "DEBIAN_5_64",
                "DEBIAN_6",
                "DEBIAN_6_64",
                "DEBIAN_7",
                "DEBIAN_7_64",
                "DEBIAN_8",
                "DEBIAN_8_64",
                "DEBIAN_9",
                "DEBIAN_9_64",
                "DEBIAN_10",
                "DEBIAN_10_64",
                "DEBIAN_11",
                "DEBIAN_11_64",
                "ASIANUX_3",
                "ASIANUX_3_64",
                "ASIANUX_4",
                "ASIANUX_4_64",
                "ASIANUX_5_64",
                "ASIANUX_7_64",
                "ASIANUX_8_64",
                "ASIANUX_9_64",
                "OPENSUSE",
                "OPENSUSE_64",
                "FEDORA",
                "FEDORA_64",
                "COREOS_64",
                "VMWARE_PHOTON_64",
                "OTHER_24X_LINUX",
                "OTHER_24X_LINUX_64",
                "OTHER_26X_LINUX",
                "OTHER_26X_LINUX_64",
                "OTHER_3X_LINUX",
                "OTHER_3X_LINUX_64",
                "OTHER_4X_LINUX",
                "OTHER_4X_LINUX_64",
                "OTHER_5X_LINUX",
                "OTHER_5X_LINUX_64",
                "OTHER_LINUX",
                "GENERIC_LINUX",
                "OTHER_LINUX_64",
                "SOLARIS_6",
                "SOLARIS_7",
                "SOLARIS_8",
                "SOLARIS_9",
                "SOLARIS_10",
                "SOLARIS_10_64",
                "SOLARIS_11_64",
                "OS2",
                "ECOMSTATION",
                "ECOMSTATION_2",
                "NETWARE_4",
                "NETWARE_5",
                "NETWARE_6",
                "OPENSERVER_5",
                "OPENSERVER_6",
                "UNIXWARE_7",
                "DARWIN",
                "DARWIN_64",
                "DARWIN_10",
                "DARWIN_10_64",
                "DARWIN_11",
                "DARWIN_11_64",
                "DARWIN_12_64",
                "DARWIN_13_64",
                "DARWIN_14_64",
                "DARWIN_15_64",
                "DARWIN_16_64",
                "DARWIN_17_64",
                "DARWIN_18_64",
                "DARWIN_19_64",
                "DARWIN_20_64",
                "DARWIN_21_64",
                "VMKERNEL",
                "VMKERNEL_5",
                "VMKERNEL_6",
                "VMKERNEL_65",
                "VMKERNEL_7",
                "AMAZONLINUX2_64",
                "AMAZONLINUX3_64",
                "CRXPOD_1",
                "OTHER",
                "OTHER_64"
            ]
        },
        "VcenterVmGuestOSFamily": {
            "type": "string",
            "description": "The {@name GuestOSFamily} {@term enumerated type} defines the valid guest operating system family types reported by a virtual machine.",
            "enum": [
                "WINDOWS",
                "LINUX",
                "NETWARE",
                "SOLARIS",
                "DARWIN",
                "OTHER"
            ]
        },
        "VcenterVmGuestOperationsInfo": {
            "type": "object",
            "properties": {
                "guest_operations_ready": {
                    "description": "Guest operations availability. Whether or not the virtual machine is ready to process guest operations.",
                    "type": "boolean"
                },
                "interactive_guest_operations_ready": {
                    "description": "Interactive guest operations availability. Whether or not the virtual machine is ready to process interactive guest operations.",
                    "type": "boolean"
                }
            },
            "required": [
                "guest_operations_ready",
                "interactive_guest_operations_ready"
            ]
        },
        "VcenterVmGuestPowerInfo": {
            "type": "object",
            "properties": {
                "state": {
                    "description": "The power state of the guest operating system.",
                    "$ref": "#/definitions/VcenterVmGuestPowerState"
                },
                "operations_ready": {
                    "description": "Flag indicating if the virtual machine is ready to process soft power operations.",
                    "type": "boolean"
                }
            },
            "required": [
                "state",
                "operations_ready"
            ]
        },
        "VcenterVmGuestPowerState": {
            "type": "string",
            "description": "Possible guest power states.",
            "enum": [
                "RUNNING",
                "SHUTTING_DOWN",
                "RESETTING",
                "STANDBY",
                "NOT_RUNNING",
                "UNAVAILABLE"
            ]
        },
        "VcenterVmGuestProcessesCreate": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data.  See {@link Credentials}.  The program will be run as the user associated with this data."
                },
                "spec": {
                    "$ref": "#/definitions/VcenterVmGuestProcessesCreateSpec",
                    "description": "The arguments describing the program to be started."
                }
            },
            "required": [
                "credentials",
                "spec"
            ]
        },
        "VcenterVmGuestProcessesCreateSpec": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "The absolute path to the program to start. <p> For Linux guest operating systems, /bin/bash is used to start the program. <p> For Solaris guest operating systems, if /bin/bash exists, its used to start the program, otherwise /bin/sh is used. If /bin/sh is used, then the process ID returned by {@link Processes#create} will be that of the shell used to start the program, rather than the program itself, due to the differences in how /bin/sh and /bin/bash work.  This PID will still be usable for watching the process with {@link Processes#list} to find its exit code and elapsed time. <p> For Windows, no shell is used. Using a simple batch file instead by prepending <code>c:\\windows\\system32\\cmd.exe /c</code> will allow stdio redirection to work if passed in the {@name #arguments} parameter.",
                    "type": "string"
                },
                "arguments": {
                    "description": "The arguments to the program. <p> Characters which must be escaped to the shell should also be escaped in {@name #arguments}. <p> In Linux and Solaris guest operating systems, stdio redirection arguments may be used. <p> For Windows, stdio redirection can be added to the argments if {@name #path} is prefixed with <code>c:\\windows\\system32\\cmd.exe /c</code>.",
                    "type": "string"
                },
                "working_directory": {
                    "description": "The absolute path of the working directory for the program to be run.  VMware recommends explicitly setting the working directory for the program to be run.",
                    "type": "string"
                },
                "environment_variables": {
                    "description": "A map of environment variables, specified using the guest OS rules (for example <code>PATH, c:\\bin;c:\\windows\\system32</code> or <code>LD_LIBRARY_PATH,/usr/lib:/lib</code>), to be set for the program being run.  Note that these are not additions to the default environment variables; they define the complete set available to the program.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "start_minimized": {
                    "description": "Makes any program window start minimized in Windows operating systems. Returns an error if {@term set} for non-Windows guests.",
                    "type": "boolean"
                }
            },
            "required": [
                "path"
            ]
        },
        "VcenterVmGuestProcessesDelete": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data.  See {@link Credentials}."
                }
            },
            "required": [
                "credentials"
            ]
        },
        "VcenterVmGuestProcessesGet": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data.  See {@link Credentials}."
                }
            },
            "required": [
                "credentials"
            ]
        },
        "VcenterVmGuestProcessesInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The process name.",
                    "type": "string"
                },
                "owner": {
                    "description": "The process owner.",
                    "type": "string"
                },
                "command": {
                    "description": "The full command line of the process.",
                    "type": "string"
                },
                "started": {
                    "description": "The start time of the process.",
                    "type": "string",
                    "format": "date-time"
                },
                "finished": {
                    "description": "If the process was started using {@link Processes#create} then the process completion time will be available if queried within 5 minutes after it completes.",
                    "type": "string",
                    "format": "date-time"
                },
                "exit_code": {
                    "description": "If the process was started using {@link Processes#create} then the process exit code will be available if queried within 5 minutes after it completes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "name",
                "owner",
                "command",
                "started"
            ]
        },
        "VcenterVmGuestProcessesList": {
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/VcenterVmGuestCredentials",
                    "description": "The guest authentication data.  See {@link Credentials}."
                }
            },
            "required": [
                "credentials"
            ]
        },
        "VcenterVmGuestProcessesSummary": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The process name.",
                    "type": "string"
                },
                "pid": {
                    "description": "The process ID.",
                    "type": "integer",
                    "format": "int64"
                },
                "owner": {
                    "description": "The process owner.",
                    "type": "string"
                },
                "command": {
                    "description": "The full command line of the process.",
                    "type": "string"
                },
                "started": {
                    "description": "The start time of the process.",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "name",
                "pid",
                "owner",
                "command",
                "started"
            ]
        },
        "VcenterVmHardwareAdapterSataCreate": {
            "$ref": "#/definitions/VcenterVmHardwareAdapterSataCreateSpec",
            "description": "Specification for the new virtual SATA adapter."
        },
        "VcenterVmHardwareAdapterSataCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Adapter type.",
                    "$ref": "#/definitions/VcenterVmHardwareAdapterSataType"
                },
                "bus": {
                    "description": "SATA bus number.",
                    "type": "integer",
                    "format": "int64"
                },
                "pci_slot_number": {
                    "description": "Address of the SATA adapter on the PCI bus.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "VcenterVmHardwareAdapterSataInfo": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "type": {
                    "description": "Adapter type.",
                    "$ref": "#/definitions/VcenterVmHardwareAdapterSataType"
                },
                "bus": {
                    "description": "SATA bus number.",
                    "type": "integer",
                    "format": "int64"
                },
                "pci_slot_number": {
                    "description": "Address of the SATA adapter on the PCI bus.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "label",
                "type",
                "bus"
            ]
        },
        "VcenterVmHardwareAdapterSataSummary": {
            "type": "object",
            "properties": {
                "adapter": {
                    "description": "Identifier of the virtual SATA adapter.",
                    "type": "string"
                }
            },
            "required": [
                "adapter"
            ]
        },
        "VcenterVmHardwareAdapterSataType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the valid emulation types for a virtual SATA adapter.",
            "enum": [
                "AHCI"
            ]
        },
        "VcenterVmHardwareAdapterScsiCreate": {
            "$ref": "#/definitions/VcenterVmHardwareAdapterScsiCreateSpec",
            "description": "Specification for the new virtual SCSI adapter."
        },
        "VcenterVmHardwareAdapterScsiCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Adapter type.",
                    "$ref": "#/definitions/VcenterVmHardwareAdapterScsiType"
                },
                "bus": {
                    "description": "SCSI bus number.",
                    "type": "integer",
                    "format": "int64"
                },
                "pci_slot_number": {
                    "description": "Address of the SCSI adapter on the PCI bus.  If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.",
                    "type": "integer",
                    "format": "int64"
                },
                "sharing": {
                    "description": "Bus sharing mode.",
                    "$ref": "#/definitions/VcenterVmHardwareAdapterScsiSharing"
                }
            }
        },
        "VcenterVmHardwareAdapterScsiInfo": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "type": {
                    "description": "Adapter type.",
                    "$ref": "#/definitions/VcenterVmHardwareAdapterScsiType"
                },
                "scsi": {
                    "description": "Address of the SCSI adapter on the SCSI bus.",
                    "$ref": "#/definitions/VcenterVmHardwareScsiAddressInfo"
                },
                "pci_slot_number": {
                    "description": "Address of the SCSI adapter on the PCI bus.  If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.",
                    "type": "integer",
                    "format": "int64"
                },
                "sharing": {
                    "description": "Bus sharing mode.",
                    "$ref": "#/definitions/VcenterVmHardwareAdapterScsiSharing"
                }
            },
            "required": [
                "label",
                "type",
                "scsi",
                "sharing"
            ]
        },
        "VcenterVmHardwareAdapterScsiSharing": {
            "type": "string",
            "description": "The {@name Sharing} {@term enumerated type} defines the valid bus sharing modes for a virtual SCSI adapter.",
            "enum": [
                "NONE",
                "VIRTUAL",
                "PHYSICAL"
            ]
        },
        "VcenterVmHardwareAdapterScsiSummary": {
            "type": "object",
            "properties": {
                "adapter": {
                    "description": "Identifier of the virtual SCSI adapter.",
                    "type": "string"
                }
            },
            "required": [
                "adapter"
            ]
        },
        "VcenterVmHardwareAdapterScsiType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the valid emulation types for a virtual SCSI adapter.",
            "enum": [
                "BUSLOGIC",
                "LSILOGIC",
                "LSILOGICSAS",
                "PVSCSI"
            ]
        },
        "VcenterVmHardwareAdapterScsiUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareAdapterScsiUpdateSpec",
            "description": "Specification for updating the virtual SCSI adapter."
        },
        "VcenterVmHardwareAdapterScsiUpdateSpec": {
            "type": "object",
            "properties": {
                "sharing": {
                    "description": "Bus sharing mode. <p> This {@term field} may only be modified if the virtual machine is not powered on.",
                    "$ref": "#/definitions/VcenterVmHardwareAdapterScsiSharing"
                }
            }
        },
        "VcenterVmHardwareBootCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Firmware type to be used by the virtual machine.",
                    "$ref": "#/definitions/VcenterVmHardwareBootType"
                },
                "efi_legacy_boot": {
                    "description": "Flag indicating whether to use EFI legacy boot mode.",
                    "type": "boolean"
                },
                "network_protocol": {
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.",
                    "$ref": "#/definitions/VcenterVmHardwareBootNetworkProtocol"
                },
                "delay": {
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on.  This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.",
                    "type": "integer",
                    "format": "int64"
                },
                "retry": {
                    "description": "Flag indicating whether the virtual machine should automatically retry the boot process after a failure.",
                    "type": "boolean"
                },
                "retry_delay": {
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when {@link Info#retry} is true.",
                    "type": "integer",
                    "format": "int64"
                },
                "enter_setup_mode": {
                    "description": "Flag indicating whether the firmware boot process should automatically enter setup mode the next time the virtual machine boots.  Note that this flag will automatically be reset to false once the virtual machine enters setup mode.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareBootDeviceEntry": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Virtual device type.",
                    "$ref": "#/definitions/VcenterVmHardwareBootDeviceType"
                },
                "nic": {
                    "description": "Virtual Ethernet device. Ethernet device to use as boot device for this entry.",
                    "type": "string"
                },
                "disks": {
                    "description": "Virtual disk device. List of virtual disks in boot order.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareBootDeviceEntryCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Virtual Boot device type.",
                    "$ref": "#/definitions/VcenterVmHardwareBootDeviceType"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareBootDeviceSet": {
            "type": "object",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VcenterVmHardwareBootDeviceEntry"
                    },
                    "description": "Ordered list of boot devices."
                }
            },
            "required": [
                "devices"
            ]
        },
        "VcenterVmHardwareBootDeviceType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the valid device types that may be used as bootable devices.",
            "enum": [
                "CDROM",
                "DISK",
                "ETHERNET",
                "FLOPPY"
            ]
        },
        "VcenterVmHardwareBootInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Firmware type used by the virtual machine.",
                    "$ref": "#/definitions/VcenterVmHardwareBootType"
                },
                "efi_legacy_boot": {
                    "description": "Flag indicating whether to use EFI legacy boot mode.",
                    "type": "boolean"
                },
                "network_protocol": {
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.",
                    "$ref": "#/definitions/VcenterVmHardwareBootNetworkProtocol"
                },
                "delay": {
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on.  This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.",
                    "type": "integer",
                    "format": "int64"
                },
                "retry": {
                    "description": "Flag indicating whether the virtual machine will automatically retry the boot process after a failure.",
                    "type": "boolean"
                },
                "retry_delay": {
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when {@link #retry} is true.",
                    "type": "integer",
                    "format": "int64"
                },
                "enter_setup_mode": {
                    "description": "Flag indicating whether the firmware boot process will automatically enter setup mode the next time the virtual machine boots.  Note that this flag will automatically be reset to false once the virtual machine enters setup mode.",
                    "type": "boolean"
                }
            },
            "required": [
                "type",
                "delay",
                "retry",
                "retry_delay",
                "enter_setup_mode"
            ]
        },
        "VcenterVmHardwareBootNetworkProtocol": {
            "type": "string",
            "description": "The {@name NetworkProtocol} {@term enumerated type} defines the valid network boot protocols supported when booting a virtual machine with {@link Type#EFI} firmware over the network.",
            "enum": [
                "IPV4",
                "IPV6"
            ]
        },
        "VcenterVmHardwareBootType": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the valid firmware types for a virtual machine.",
            "enum": [
                "BIOS",
                "EFI"
            ]
        },
        "VcenterVmHardwareBootUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareBootUpdateSpec",
            "description": "Specification for updating the boot-related settings of the virtual machine."
        },
        "VcenterVmHardwareBootUpdateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Firmware type to be used by the virtual machine.",
                    "$ref": "#/definitions/VcenterVmHardwareBootType"
                },
                "efi_legacy_boot": {
                    "description": "Flag indicating whether to use EFI legacy boot mode.",
                    "type": "boolean"
                },
                "network_protocol": {
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.",
                    "$ref": "#/definitions/VcenterVmHardwareBootNetworkProtocol"
                },
                "delay": {
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on.  This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.",
                    "type": "integer",
                    "format": "int64"
                },
                "retry": {
                    "description": "Flag indicating whether the virtual machine should automatically retry the boot process after a failure.",
                    "type": "boolean"
                },
                "retry_delay": {
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when {@link Info#retry} is true.",
                    "type": "integer",
                    "format": "int64"
                },
                "enter_setup_mode": {
                    "description": "Flag indicating whether the firmware boot process should automatically enter setup mode the next time the virtual machine boots.  Note that this flag will automatically be reset to false once the virtual machine enters setup mode.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareCdromBackingInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual CD-ROM device.",
                    "$ref": "#/definitions/VcenterVmHardwareCdromBackingType"
                },
                "iso_file": {
                    "description": "Path of the image file backing the virtual CD-ROM device.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the host device backing the virtual CD-ROM device. <p>",
                    "type": "string"
                },
                "auto_detect": {
                    "description": "Flag indicating whether the virtual CD-ROM device is configured to automatically detect a suitable host device.",
                    "type": "boolean"
                },
                "device_access_type": {
                    "description": "Access type for the device backing.",
                    "$ref": "#/definitions/VcenterVmHardwareCdromDeviceAccessType"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareCdromBackingSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual CD-ROM device.",
                    "$ref": "#/definitions/VcenterVmHardwareCdromBackingType"
                },
                "iso_file": {
                    "description": "Path of the image file that should be used as the virtual CD-ROM device backing.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device that should be used as the virtual CD-ROM device backing.",
                    "type": "string"
                },
                "device_access_type": {
                    "description": "Access type for the device backing.",
                    "$ref": "#/definitions/VcenterVmHardwareCdromDeviceAccessType"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareCdromBackingType": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual CD-ROM device.",
            "enum": [
                "ISO_FILE",
                "HOST_DEVICE",
                "CLIENT_DEVICE"
            ]
        },
        "VcenterVmHardwareCdromCreate": {
            "$ref": "#/definitions/VcenterVmHardwareCdromCreateSpec",
            "description": "Specification for the new virtual CD-ROM device."
        },
        "VcenterVmHardwareCdromCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of host bus adapter to which the device should be attached.",
                    "$ref": "#/definitions/VcenterVmHardwareCdromHostBusAdapterType"
                },
                "ide": {
                    "description": "Address for attaching the device to a virtual IDE adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareIdeAddressSpec"
                },
                "sata": {
                    "description": "Address for attaching the device to a virtual SATA adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareSataAddressSpec"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual CD-ROM device.",
                    "$ref": "#/definitions/VcenterVmHardwareCdromBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareCdromDeviceAccessType": {
            "type": "string",
            "description": "The {@name DeviceAccessType} {@term enumerated type} defines the valid device access types for a physical device packing of a virtual CD-ROM device.",
            "enum": [
                "EMULATION",
                "PASSTHRU",
                "PASSTHRU_EXCLUSIVE"
            ]
        },
        "VcenterVmHardwareCdromHostBusAdapterType": {
            "type": "string",
            "description": "The {@name HostBusAdapterType} {@term enumerated type} defines the valid types of host bus adapters that may be used for attaching a Cdrom to a virtual machine.",
            "enum": [
                "IDE",
                "SATA"
            ]
        },
        "VcenterVmHardwareCdromInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of host bus adapter to which the device is attached.",
                    "$ref": "#/definitions/VcenterVmHardwareCdromHostBusAdapterType"
                },
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "ide": {
                    "description": "Address of device attached to a virtual IDE adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareIdeAddressInfo"
                },
                "sata": {
                    "description": "Address of device attached to a virtual SATA adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareSataAddressInfo"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual CD-ROM device.",
                    "$ref": "#/definitions/VcenterVmHardwareCdromBackingInfo"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/VcenterVmHardwareConnectionState"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "type",
                "label",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "VcenterVmHardwareCdromSummary": {
            "type": "object",
            "properties": {
                "cdrom": {
                    "description": "Identifier of the virtual CD-ROM device.",
                    "type": "string"
                }
            },
            "required": [
                "cdrom"
            ]
        },
        "VcenterVmHardwareCdromUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareCdromUpdateSpec",
            "description": "Specification for updating the virtual CD-ROM device."
        },
        "VcenterVmHardwareCdromUpdateSpec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual CD-ROM device. <p> This {@term field} may only be modified if the virtual machine is not powered on or the virtual CD-ROM device is not connected.",
                    "$ref": "#/definitions/VcenterVmHardwareCdromBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareConnectionState": {
            "type": "string",
            "description": "The {@name ConnectionState} {@term enumerated type} defines the valid states for a removable device that is configured to be connected.",
            "enum": [
                "CONNECTED",
                "RECOVERABLE_ERROR",
                "UNRECOVERABLE_ERROR",
                "NOT_CONNECTED",
                "UNKNOWN"
            ]
        },
        "VcenterVmHardwareCpuInfo": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of CPU cores.",
                    "type": "integer",
                    "format": "int64"
                },
                "cores_per_socket": {
                    "description": "Number of CPU cores per socket.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding CPUs while the virtual machine is running is enabled.",
                    "type": "boolean"
                },
                "hot_remove_enabled": {
                    "description": "Flag indicating whether removing CPUs while the virtual machine is running is enabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "count",
                "cores_per_socket",
                "hot_add_enabled",
                "hot_remove_enabled"
            ]
        },
        "VcenterVmHardwareCpuUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareCpuUpdateSpec",
            "description": "Specification for updating the CPU-related settings of the virtual machine."
        },
        "VcenterVmHardwareCpuUpdateSpec": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "New number of CPU cores.  The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket. <p> The supported range of CPU counts is constrained by the configured guest operating system and virtual hardware version of the virtual machine. <p> If the virtual machine is running, the number of CPU cores may only be increased if {@link Info#hotAddEnabled} is true, and may only be decreased if {@link Info#hotRemoveEnabled} is true.",
                    "type": "integer",
                    "format": "int64"
                },
                "cores_per_socket": {
                    "description": "New number of CPU cores per socket.  The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding CPUs while the virtual machine is running is enabled. <p> This {@term field} may only be modified if the virtual machine is powered off.",
                    "type": "boolean"
                },
                "hot_remove_enabled": {
                    "description": "Flag indicating whether removing CPUs while the virtual machine is running is enabled. <p> This {@term field} may only be modified if the virtual machine is powered off.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareDiskBackingInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual disk.",
                    "$ref": "#/definitions/VcenterVmHardwareDiskBackingType"
                },
                "vmdk_file": {
                    "description": "Path of the VMDK file backing the virtual disk.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareDiskBackingSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual disk.",
                    "$ref": "#/definitions/VcenterVmHardwareDiskBackingType"
                },
                "vmdk_file": {
                    "description": "Path of the VMDK file backing the virtual disk.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareDiskBackingType": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual disk.",
            "enum": [
                "VMDK_FILE"
            ]
        },
        "VcenterVmHardwareDiskCreate": {
            "$ref": "#/definitions/VcenterVmHardwareDiskCreateSpec",
            "description": "Specification for the new virtual disk."
        },
        "VcenterVmHardwareDiskCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of host bus adapter to which the device should be attached.",
                    "$ref": "#/definitions/VcenterVmHardwareDiskHostBusAdapterType"
                },
                "ide": {
                    "description": "Address for attaching the device to a virtual IDE adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareIdeAddressSpec"
                },
                "scsi": {
                    "description": "Address for attaching the device to a virtual SCSI adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareScsiAddressSpec"
                },
                "sata": {
                    "description": "Address for attaching the device to a virtual SATA adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareSataAddressSpec"
                },
                "backing": {
                    "description": "Existing physical resource backing for the virtual disk. Exactly one of {@name #backing} or {@name #newVmdk} must be specified.",
                    "$ref": "#/definitions/VcenterVmHardwareDiskBackingSpec"
                },
                "new_vmdk": {
                    "description": "Specification for creating a new VMDK backing for the virtual disk.  Exactly one of {@name #backing} or {@name #newVmdk} must be specified.",
                    "$ref": "#/definitions/VcenterVmHardwareDiskVmdkCreateSpec"
                }
            }
        },
        "VcenterVmHardwareDiskHostBusAdapterType": {
            "type": "string",
            "description": "The {@name HostBusAdapterType} {@term enumerated type} defines the valid types of host bus adapters that may be used for attaching a virtual storage device to a virtual machine.",
            "enum": [
                "IDE",
                "SCSI",
                "SATA"
            ]
        },
        "VcenterVmHardwareDiskInfo": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of host bus adapter to which the device is attached.",
                    "$ref": "#/definitions/VcenterVmHardwareDiskHostBusAdapterType"
                },
                "ide": {
                    "description": "Address of device attached to a virtual IDE adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareIdeAddressInfo"
                },
                "scsi": {
                    "description": "Address of device attached to a virtual SCSI adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareScsiAddressInfo"
                },
                "sata": {
                    "description": "Address of device attached to a virtual SATA adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareSataAddressInfo"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual disk.",
                    "$ref": "#/definitions/VcenterVmHardwareDiskBackingInfo"
                },
                "capacity": {
                    "description": "Capacity of the virtual disk in bytes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "label",
                "type",
                "backing"
            ]
        },
        "VcenterVmHardwareDiskStoragePolicySpec": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy which should be associated with the VMDK file.",
                    "type": "string"
                }
            },
            "required": [
                "policy"
            ]
        },
        "VcenterVmHardwareDiskSummary": {
            "type": "object",
            "properties": {
                "disk": {
                    "description": "Identifier of the virtual Disk.",
                    "type": "string"
                }
            },
            "required": [
                "disk"
            ]
        },
        "VcenterVmHardwareDiskUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareDiskUpdateSpec",
            "description": "Specification for updating the virtual disk."
        },
        "VcenterVmHardwareDiskUpdateSpec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual disk. <p> This {@term field} may only be modified if the virtual machine is not powered on.",
                    "$ref": "#/definitions/VcenterVmHardwareDiskBackingSpec"
                }
            }
        },
        "VcenterVmHardwareDiskVmdkCreateSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Base name of the VMDK file.  The name should not include the '.vmdk' file extension.",
                    "type": "string"
                },
                "capacity": {
                    "description": "Capacity of the virtual disk backing in bytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "storage_policy": {
                    "description": "The {@name StoragePolicySpec} {@term structure} contains information about the storage policy that is to be associated the with VMDK file.",
                    "$ref": "#/definitions/VcenterVmHardwareDiskStoragePolicySpec"
                }
            }
        },
        "VcenterVmHardwareEthernetBackingInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetBackingType"
                },
                "network": {
                    "description": "Identifier of the network backing the virtual Ethernet adapter.",
                    "type": "string"
                },
                "network_name": {
                    "description": "Name of the standard portgroup backing the virtual Ethernet adapter.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual Ethernet adapter.",
                    "type": "string"
                },
                "distributed_switch_uuid": {
                    "description": "UUID of the distributed virtual switch that backs the virtual Ethernet adapter.",
                    "type": "string"
                },
                "distributed_port": {
                    "description": "Key of the distributed virtual port that backs the virtual Ethernet adapter.",
                    "type": "string"
                },
                "connection_cookie": {
                    "description": "Server-generated cookie that identifies the connection to the port.  This ookie may be used to verify that the virtual machine is the rightful owner of the port.",
                    "type": "integer",
                    "format": "int64"
                },
                "opaque_network_type": {
                    "description": "Type of the opaque network that backs the virtual Ethernet adapter.",
                    "type": "string"
                },
                "opaque_network_id": {
                    "description": "Identifier of the opaque network that backs the virtual Ethernet adapter.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareEthernetBackingSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetBackingType"
                },
                "network": {
                    "description": "Identifier of the network that backs the virtual Ethernet adapter.",
                    "type": "string"
                },
                "distributed_port": {
                    "description": "Key of the distributed virtual port that backs the virtual Ethernet adapter.  Depending on the type of the Portgroup, the port may be specified using this field. If the portgroup type is early-binding (also known as static), a port is assigned when the Ethernet adapter is configured to use the port. The port may be either automatically or specifically assigned based on the value of this {@term field}. If the portgroup type is ephemeral, the port is created and assigned to a virtual machine when it is powered on and the Ethernet adapter is connected.  This {@term field} cannot be specified as no free ports exist before use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareEthernetBackingType": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual Ethernet adapter.",
            "enum": [
                "STANDARD_PORTGROUP",
                "HOST_DEVICE",
                "DISTRIBUTED_PORTGROUP",
                "OPAQUE_NETWORK"
            ]
        },
        "VcenterVmHardwareEthernetCreate": {
            "$ref": "#/definitions/VcenterVmHardwareEthernetCreateSpec",
            "description": "Specification for the new virtual Ethernet adapter."
        },
        "VcenterVmHardwareEthernetCreateSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Ethernet adapter emulation type.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetEmulationType"
                },
                "upt_compatibility_enabled": {
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility is enabled on this virtual Ethernet adapter.",
                    "type": "boolean"
                },
                "mac_type": {
                    "description": "MAC address type.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetMacAddressType"
                },
                "mac_address": {
                    "description": "MAC address.",
                    "type": "string"
                },
                "pci_slot_number": {
                    "description": "Address of the virtual Ethernet adapter on the PCI bus.  If the PCI address is invalid, the server will change when it the VM is started or as the device is hot added.",
                    "type": "integer",
                    "format": "int64"
                },
                "wake_on_lan_enabled": {
                    "description": "Flag indicating whether wake-on-LAN is enabled on this virtual Ethernet adapter.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareEthernetEmulationType": {
            "type": "string",
            "description": "The {@name EmulationType} {@term enumerated type} defines the valid emulation types for a virtual Ethernet adapter.",
            "enum": [
                "E1000",
                "E1000E",
                "PCNET32",
                "VMXNET",
                "VMXNET2",
                "VMXNET3"
            ]
        },
        "VcenterVmHardwareEthernetInfo": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "type": {
                    "description": "Ethernet adapter emulation type.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetEmulationType"
                },
                "upt_compatibility_enabled": {
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility is enabled on this virtual Ethernet adapter.",
                    "type": "boolean"
                },
                "mac_type": {
                    "description": "MAC address type.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetMacAddressType"
                },
                "mac_address": {
                    "description": "MAC address.",
                    "type": "string"
                },
                "pci_slot_number": {
                    "description": "Address of the virtual Ethernet adapter on the PCI bus.  If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.",
                    "type": "integer",
                    "format": "int64"
                },
                "wake_on_lan_enabled": {
                    "description": "Flag indicating whether wake-on-LAN is enabled on this virtual Ethernet adapter.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetBackingInfo"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/VcenterVmHardwareConnectionState"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "type",
                "mac_type",
                "wake_on_lan_enabled",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "VcenterVmHardwareEthernetMacAddressType": {
            "type": "string",
            "description": "The {@name MacAddressType} {@term enumerated type} defines the valid MAC address origins for a virtual Ethernet adapter.",
            "enum": [
                "MANUAL",
                "GENERATED",
                "ASSIGNED"
            ]
        },
        "VcenterVmHardwareEthernetSummary": {
            "type": "object",
            "properties": {
                "nic": {
                    "description": "Identifier of the virtual Ethernet adapter.",
                    "type": "string"
                }
            },
            "required": [
                "nic"
            ]
        },
        "VcenterVmHardwareEthernetUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareEthernetUpdateSpec",
            "description": "Specification for updating the virtual Ethernet adapter."
        },
        "VcenterVmHardwareEthernetUpdateSpec": {
            "type": "object",
            "properties": {
                "upt_compatibility_enabled": {
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility should be enabled on this virtual Ethernet adapter. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "type": "boolean"
                },
                "mac_type": {
                    "description": "MAC address type. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetMacAddressType"
                },
                "mac_address": {
                    "description": "MAC address. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "type": "string"
                },
                "wake_on_lan_enabled": {
                    "description": "Flag indicating whether wake-on-LAN shoud be enabled on this virtual Ethernet adapter. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual Ethernet adapter. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "$ref": "#/definitions/VcenterVmHardwareEthernetBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareFloppyBackingInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual floppy drive.",
                    "$ref": "#/definitions/VcenterVmHardwareFloppyBackingType"
                },
                "image_file": {
                    "description": "Path of the image file backing the virtual floppy drive.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the host device backing the virtual floppy drive. <p>",
                    "type": "string"
                },
                "auto_detect": {
                    "description": "Flag indicating whether the virtual floppy drive is configured to automatically detect a suitable host device.",
                    "type": "boolean"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareFloppyBackingSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual floppy drive.",
                    "$ref": "#/definitions/VcenterVmHardwareFloppyBackingType"
                },
                "image_file": {
                    "description": "Path of the image file that should be used as the virtual floppy drive backing.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device that should be used as the virtual floppy drive backing.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareFloppyBackingType": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual floppy drive.",
            "enum": [
                "IMAGE_FILE",
                "HOST_DEVICE",
                "CLIENT_DEVICE"
            ]
        },
        "VcenterVmHardwareFloppyCreate": {
            "$ref": "#/definitions/VcenterVmHardwareFloppyCreateSpec",
            "description": "Specification for the new virtual floppy drive."
        },
        "VcenterVmHardwareFloppyCreateSpec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual floppy drive.",
                    "$ref": "#/definitions/VcenterVmHardwareFloppyBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareFloppyInfo": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual floppy drive.",
                    "$ref": "#/definitions/VcenterVmHardwareFloppyBackingInfo"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/VcenterVmHardwareConnectionState"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "VcenterVmHardwareFloppySummary": {
            "type": "object",
            "properties": {
                "floppy": {
                    "description": "Identifier of the virtual floppy drive.",
                    "type": "string"
                }
            },
            "required": [
                "floppy"
            ]
        },
        "VcenterVmHardwareFloppyUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareFloppyUpdateSpec",
            "description": "Specification for updating the virtual floppy drive."
        },
        "VcenterVmHardwareFloppyUpdateSpec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual floppy drive. <p> This {@term field} may only be modified if the virtual machine is not powered on or the virtual floppy drive is not connected.",
                    "$ref": "#/definitions/VcenterVmHardwareFloppyBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareIdeAddressInfo": {
            "type": "object",
            "properties": {
                "primary": {
                    "description": "Flag specifying whether the device is attached to the primary or secondary IDE adapter of the virtual machine.",
                    "type": "boolean"
                },
                "master": {
                    "description": "Flag specifying whether the device is the master or slave device on the IDE adapter.",
                    "type": "boolean"
                }
            },
            "required": [
                "primary",
                "master"
            ]
        },
        "VcenterVmHardwareIdeAddressSpec": {
            "type": "object",
            "properties": {
                "primary": {
                    "description": "Flag specifying whether the device should be attached to the primary or secondary IDE adapter of the virtual machine.",
                    "type": "boolean"
                },
                "master": {
                    "description": "Flag specifying whether the device should be the master or slave device on the IDE adapter.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareInfo": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "Virtual hardware version.",
                    "$ref": "#/definitions/VcenterVmHardwareVersion"
                },
                "upgrade_policy": {
                    "description": "Scheduled upgrade policy.",
                    "$ref": "#/definitions/VcenterVmHardwareUpgradePolicy"
                },
                "upgrade_version": {
                    "description": "Target hardware version to be used on the next scheduled virtual hardware upgrade.",
                    "$ref": "#/definitions/VcenterVmHardwareVersion"
                },
                "upgrade_status": {
                    "description": "Scheduled upgrade status.",
                    "$ref": "#/definitions/VcenterVmHardwareUpgradeStatus"
                },
                "upgrade_error": {
                    "description": "Reason for the scheduled upgrade failure.",
                    "type": "string"
                }
            },
            "required": [
                "version",
                "upgrade_policy",
                "upgrade_status"
            ]
        },
        "VcenterVmHardwareMemoryInfo": {
            "type": "object",
            "properties": {
                "size_MiB": {
                    "description": "Memory size in mebibytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding memory while the virtual machine is running is enabled. <p> Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running.",
                    "type": "boolean"
                },
                "hot_add_increment_size_MiB": {
                    "description": "The granularity, in mebibytes, at which memory can be added to a running virtual machine. <p> When adding memory to a running virtual machine, the amount of memory added must be at least {@link #hotAddIncrementSizeMiB} and the total memory size of the virtual machine must be a multiple of {@link>hotAddIncrementSize}.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_limit_MiB": {
                    "description": "The maximum amount of memory, in mebibytes, that can be added to a running virtual machine.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "size_MiB",
                "hot_add_enabled"
            ]
        },
        "VcenterVmHardwareMemoryUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareMemoryUpdateSpec",
            "description": "Specification for updating the memory-related settings of the virtual machine."
        },
        "VcenterVmHardwareMemoryUpdateSpec": {
            "type": "object",
            "properties": {
                "size_MiB": {
                    "description": "New memory size in mebibytes. <p> The supported range of memory sizes is constrained by the configured guest operating system and virtual hardware version of the virtual machine. <p> If the virtual machine is running, this value may only be changed if {@link Info#hotAddEnabled} is true, and the new memory size must satisfy the constraints specified by {@link Info#hotAddIncrementSizeMiB} and {@link Info#hotAddLimitMiB}.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding memory while the virtual machine is running should be enabled. <p> Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running. <p> This {@term field} may only be modified if the virtual machine is not powered on.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareParallelBackingInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual parallel port.",
                    "$ref": "#/definitions/VcenterVmHardwareParallelBackingType"
                },
                "file": {
                    "description": "Path of the file backing the virtual parallel port.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual parallel port. <p>",
                    "type": "string"
                },
                "auto_detect": {
                    "description": "Flag indicating whether the virtual parallel port is configured to automatically detect a suitable host device.",
                    "type": "boolean"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareParallelBackingSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual parallel port.",
                    "$ref": "#/definitions/VcenterVmHardwareParallelBackingType"
                },
                "file": {
                    "description": "Path of the file that should be used as the virtual parallel port backing.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device that should be used as the virtual parallel port backing.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareParallelBackingType": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual parallel port.",
            "enum": [
                "FILE",
                "HOST_DEVICE"
            ]
        },
        "VcenterVmHardwareParallelCreate": {
            "$ref": "#/definitions/VcenterVmHardwareParallelCreateSpec",
            "description": "Specification for the new virtual parallel port."
        },
        "VcenterVmHardwareParallelCreateSpec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual parallel port.",
                    "$ref": "#/definitions/VcenterVmHardwareParallelBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareParallelInfo": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual parallel port.",
                    "$ref": "#/definitions/VcenterVmHardwareParallelBackingInfo"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/VcenterVmHardwareConnectionState"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "VcenterVmHardwareParallelSummary": {
            "type": "object",
            "properties": {
                "port": {
                    "description": "Identifier of the virtual parallel port.",
                    "type": "string"
                }
            },
            "required": [
                "port"
            ]
        },
        "VcenterVmHardwareParallelUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareParallelUpdateSpec",
            "description": "Specification for updating the virtual parallel port."
        },
        "VcenterVmHardwareParallelUpdateSpec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual parallel port. <p> This {@term field} may only be modified if the virtual machine is not powered on or the virtual parallel port is not connected.",
                    "$ref": "#/definitions/VcenterVmHardwareParallelBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareSataAddressInfo": {
            "type": "object",
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device is attached.",
                    "type": "integer",
                    "format": "int64"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "bus",
                "unit"
            ]
        },
        "VcenterVmHardwareSataAddressSpec": {
            "type": "object",
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device should be attached.",
                    "type": "integer",
                    "format": "int64"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "bus"
            ]
        },
        "VcenterVmHardwareScsiAddressInfo": {
            "type": "object",
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device is attached.",
                    "type": "integer",
                    "format": "int64"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "bus",
                "unit"
            ]
        },
        "VcenterVmHardwareScsiAddressSpec": {
            "type": "object",
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device should be attached.",
                    "type": "integer",
                    "format": "int64"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "bus"
            ]
        },
        "VcenterVmHardwareSerialBackingInfo": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual serial port.",
                    "$ref": "#/definitions/VcenterVmHardwareSerialBackingType"
                },
                "file": {
                    "description": "Path of the file backing the virtual serial port.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual serial port. <p>",
                    "type": "string"
                },
                "auto_detect": {
                    "description": "Flag indicating whether the virtual serial port is configured to automatically detect a suitable host device.",
                    "type": "boolean"
                },
                "pipe": {
                    "description": "Name of the pipe backing the virtual serial port.",
                    "type": "string"
                },
                "no_rx_loss": {
                    "description": "Flag that enables optimized data transfer over the pipe. When the value is true, the host buffers data to prevent data overrun.  This allows the virtual machine to read all of the data transferred over the pipe with no data loss.",
                    "type": "boolean"
                },
                "network_location": {
                    "description": "URI specifying the location of the network service backing the virtual serial port. <ul> <li>If {@link #type} is {@link BackingType#NETWORK_SERVER}, this {@term field} is the location used by clients to connect to this server.  The hostname part of the URI should either be empty or should specify the address of the host on which the virtual machine is running.</li> <li>If {@link #type} is {@link BackingType#NETWORK_CLIENT}, this {@term field} is the location used by the virtual machine to connect to the remote server.</li> </ul>",
                    "type": "string",
                    "format": "uri"
                },
                "proxy": {
                    "description": "Proxy service that provides network access to the network backing.  If set, the virtual machine initiates a connection with the proxy service and forwards the traffic to the proxy.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareSerialBackingSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual serial port.",
                    "$ref": "#/definitions/VcenterVmHardwareSerialBackingType"
                },
                "file": {
                    "description": "Path of the file backing the virtual serial port.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual serial port. <p>",
                    "type": "string"
                },
                "pipe": {
                    "description": "Name of the pipe backing the virtual serial port.",
                    "type": "string"
                },
                "no_rx_loss": {
                    "description": "Flag that enables optimized data transfer over the pipe. When the value is true, the host buffers data to prevent data overrun.  This allows the virtual machine to read all of the data transferred over the pipe with no data loss.",
                    "type": "boolean"
                },
                "network_location": {
                    "description": "URI specifying the location of the network service backing the virtual serial port. <ul> <li>If {@link #type} is {@link BackingType#NETWORK_SERVER}, this {@term field} is the location used by clients to connect to this server.  The hostname part of the URI should either be empty or should specify the address of the host on which the virtual machine is running.</li> <li>If {@link #type} is {@link BackingType#NETWORK_CLIENT}, this {@term field} is the location used by the virtual machine to connect to the remote server.</li> </ul>",
                    "type": "string",
                    "format": "uri"
                },
                "proxy": {
                    "description": "Proxy service that provides network access to the network backing.  If set, the virtual machine initiates a connection with the proxy service and forwards the traffic to the proxy.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmHardwareSerialBackingType": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual serial port.",
            "enum": [
                "FILE",
                "HOST_DEVICE",
                "PIPE_SERVER",
                "PIPE_CLIENT",
                "NETWORK_SERVER",
                "NETWORK_CLIENT"
            ]
        },
        "VcenterVmHardwareSerialCreate": {
            "$ref": "#/definitions/VcenterVmHardwareSerialCreateSpec",
            "description": "Specification for the new virtual serial port."
        },
        "VcenterVmHardwareSerialCreateSpec": {
            "type": "object",
            "properties": {
                "yield_on_poll": {
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual serial port.",
                    "$ref": "#/definitions/VcenterVmHardwareSerialBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareSerialInfo": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "yield_on_poll": {
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual serial port.",
                    "$ref": "#/definitions/VcenterVmHardwareSerialBackingInfo"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/VcenterVmHardwareConnectionState"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "yield_on_poll",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "VcenterVmHardwareSerialSummary": {
            "type": "object",
            "properties": {
                "port": {
                    "description": "Identifier of the virtual serial port.",
                    "type": "string"
                }
            },
            "required": [
                "port"
            ]
        },
        "VcenterVmHardwareSerialUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareSerialUpdateSpec",
            "description": "Specification for updating the virtual serial port."
        },
        "VcenterVmHardwareSerialUpdateSpec": {
            "type": "object",
            "properties": {
                "yield_on_poll": {
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host. <p> This {@term field} may be modified at any time, and changes applied to a connected virtual serial port take effect immediately.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual serial port. <p> This {@term field} may only be modified if the virtual machine is not powered on or the virtual serial port is not connected.",
                    "$ref": "#/definitions/VcenterVmHardwareSerialBackingSpec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmHardwareUpdate": {
            "$ref": "#/definitions/VcenterVmHardwareUpdateSpec",
            "description": "Specification for updating the virtual hardware settings of the virtual machine."
        },
        "VcenterVmHardwareUpdateSpec": {
            "type": "object",
            "properties": {
                "upgrade_policy": {
                    "description": "Scheduled upgrade policy. <p> If set to {@link UpgradePolicy#NEVER}, the {@link Info#upgradeVersion} {@term field} will be reset to {@term unset}.",
                    "$ref": "#/definitions/VcenterVmHardwareUpgradePolicy"
                },
                "upgrade_version": {
                    "description": "Target hardware version to be used on the next scheduled virtual hardware upgrade. <p> If specified, this {@term field} must represent a newer virtual hardware version than the current virtual hardware version reported in {@link Info#version}.",
                    "$ref": "#/definitions/VcenterVmHardwareVersion"
                }
            }
        },
        "VcenterVmHardwareUpgrade": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/VcenterVmHardwareVersion",
                    "description": "New virtual machine version."
                }
            }
        },
        "VcenterVmHardwareUpgradePolicy": {
            "type": "string",
            "description": "The {@name UpgradePolicy} {@term enumerated type} defines the valid virtual hardware upgrade policies for a virtual machine.",
            "enum": [
                "NEVER",
                "AFTER_CLEAN_SHUTDOWN",
                "ALWAYS"
            ]
        },
        "VcenterVmHardwareUpgradeStatus": {
            "type": "string",
            "description": "The {@name UpgradeStatus} {@term enumerated type} defines the valid virtual hardware upgrade statuses for a virtual machine.",
            "enum": [
                "NONE",
                "PENDING",
                "SUCCESS",
                "FAILED"
            ]
        },
        "VcenterVmHardwareVersion": {
            "type": "string",
            "description": "The {@name Version} {@term enumerated type} defines the valid virtual hardware versions for a virtual machine. See https://kb.vmware.com/s/article/1003746 (Virtual machine hardware versions (1003746)).",
            "enum": [
                "VMX_03",
                "VMX_04",
                "VMX_06",
                "VMX_07",
                "VMX_08",
                "VMX_09",
                "VMX_10",
                "VMX_11",
                "VMX_12",
                "VMX_13",
                "VMX_14",
                "VMX_15",
                "VMX_16",
                "VMX_17",
                "VMX_18",
                "VMX_19"
            ]
        },
        "VcenterVmIdentityInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "bios_uuid": {
                    "description": "128-bit SMBIOS UUID of a virtual machine represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.",
                    "type": "string"
                },
                "instance_uuid": {
                    "description": "VirtualCenter-specific 128-bit UUID of a virtual machine, represented as a hexademical string. This identifier is used by VirtualCenter to uniquely identify all virtual machine instances, including those that may share the same SMBIOS UUID.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "bios_uuid",
                "instance_uuid"
            ]
        },
        "VcenterVmLibraryItemCheckOutInfo": {
            "type": "object",
            "properties": {
                "library_item": {
                    "description": "Identifier of the library item that the virtual machine is checked out from.",
                    "type": "string"
                }
            },
            "required": [
                "library_item"
            ]
        },
        "VcenterVmLibraryItemInfo": {
            "type": "object",
            "properties": {
                "check_out": {
                    "description": "Information about the checked out virtual machine.",
                    "$ref": "#/definitions/VcenterVmLibraryItemCheckOutInfo"
                }
            }
        },
        "VcenterVmPowerInfo": {
            "type": "object",
            "properties": {
                "state": {
                    "description": "Power state of the virtual machine.",
                    "$ref": "#/definitions/VcenterVmPowerState"
                },
                "clean_power_off": {
                    "description": "Flag indicating whether the virtual machine was powered off cleanly.  This {@term field} may be used to detect that the virtual machine crashed unexpectedly and should be restarted.",
                    "type": "boolean"
                }
            },
            "required": [
                "state"
            ]
        },
        "VcenterVmPowerState": {
            "type": "string",
            "enum": [
                "POWERED_OFF",
                "POWERED_ON",
                "SUSPENDED"
            ]
        },
        "VcenterVmStoragePolicyComplianceCheck": {
            "$ref": "#/definitions/VcenterVmStoragePolicyComplianceCheckSpec",
            "description": "Parameter specifies the entities on which storage policy compliance check is to be invoked. The storage compliance Info {@link Info} is returned."
        },
        "VcenterVmStoragePolicyComplianceCheckSpec": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Invoke compliance check on the virtual machine home directory if set to true.",
                    "type": "boolean"
                },
                "disks": {
                    "description": "Identifiers of the virtual machine's virtual disks for which compliance should be checked.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "vm_home"
            ]
        },
        "VcenterVmStoragePolicyComplianceInfo": {
            "type": "object",
            "properties": {
                "overall_compliance": {
                    "description": "The overall compliance status of the virtual machine and all it's entities.",
                    "$ref": "#/definitions/VcenterVmStoragePolicyComplianceStatus"
                },
                "vm_home": {
                    "description": "The storage policy compliance information {@link VmComplianceInfo} for the virtual machine's home directory.",
                    "$ref": "#/definitions/VcenterVmStoragePolicyComplianceVmComplianceInfo"
                },
                "disks": {
                    "description": "The compliance information {@link VmComplianceInfo} for the virtual machine's virtual disks that are currently associated with a storage policy.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmStoragePolicyComplianceVmComplianceInfo"
                    }
                }
            },
            "required": [
                "overall_compliance",
                "disks"
            ]
        },
        "VcenterVmStoragePolicyComplianceStatus": {
            "type": "string",
            "description": "The {@name Status} {@term enumerated type} defines the storage compliance status of a virtual machine and its applicable entities.",
            "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNKNOWN_COMPLIANCE",
                "NOT_APPLICABLE",
                "OUT_OF_DATE"
            ]
        },
        "VcenterVmStoragePolicyComplianceVmComplianceInfo": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status of the compliance operation.",
                    "$ref": "#/definitions/VcenterVmStoragePolicyComplianceStatus"
                },
                "check_time": {
                    "description": "Date and time of the most recent compliance check.",
                    "type": "string",
                    "format": "date-time"
                },
                "policy": {
                    "description": "Identifier of the storage policy associated with the virtual machine.",
                    "type": "string"
                },
                "failure_cause": {
                    "description": "The exception that caused the compliance check to fail. There can be more than one cause, since a policy can contain capabilities from multiple providers. If empty, it implies no failures while retrieving compliance.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VapiStdLocalizableMessage"
                    }
                }
            },
            "required": [
                "status",
                "check_time",
                "failure_cause"
            ]
        },
        "VcenterVmStoragePolicyDiskPolicySpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used while performing update operation on the virtual disks.",
                    "$ref": "#/definitions/VcenterVmStoragePolicyDiskPolicySpecPolicyType"
                },
                "policy": {
                    "description": "Storage Policy identification.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmStoragePolicyDiskPolicySpecPolicyType": {
            "type": "string",
            "description": "The {@name DiskPolicySpec} {@term enumerated type} defines the choices for how to specify the policy to be associated with a virtual disk.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_DEFAULT_POLICY"
            ]
        },
        "VcenterVmStoragePolicyInfo": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Storage Policy associated with virtual machine home.",
                    "type": "string"
                },
                "disks": {
                    "description": "Storage policies associated with virtual disks. The values in this {@term map} are storage policy identifiers. They will be identifiers for the resource type:vcenter.StoragePolicy If the {@term map} is empty, the virtual machine does not have any disks or its disks are not associated with a storage policy.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "disks"
            ]
        },
        "VcenterVmStoragePolicyUpdate": {
            "$ref": "#/definitions/VcenterVmStoragePolicyUpdateSpec",
            "description": "Storage Policy Specification for updating the virtual machine and virtual disks."
        },
        "VcenterVmStoragePolicyUpdateSpec": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Storage policy to be used when reconfiguring the virtual machine home.",
                    "$ref": "#/definitions/VcenterVmStoragePolicyVmHomePolicySpec"
                },
                "disks": {
                    "description": "Storage policy or policies to be used when reconfiguring virtual machine diks.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmStoragePolicyDiskPolicySpec"
                    }
                }
            }
        },
        "VcenterVmStoragePolicyVmHomePolicySpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used while performing update operation on the virtual machine home's directory.",
                    "$ref": "#/definitions/VcenterVmStoragePolicyVmHomePolicySpecPolicyType"
                },
                "policy": {
                    "description": "Storage Policy identification.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmStoragePolicyVmHomePolicySpecPolicyType": {
            "type": "string",
            "description": "The {@name PolicyType} {@term enumerated type} defines the choices for how to specify the policy to be associated with the virtual machine home's directory.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_DEFAULT_POLICY"
            ]
        },
        "VcenterVmTemplateLibraryItemsCheckOutsCheckIn": {
            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCheckOutsCheckInSpec",
            "description": "Specification used to check in the virtual machine into the library item."
        },
        "VcenterVmTemplateLibraryItemsCheckOutsCheckInSpec": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message describing the changes made to the virtual machine.",
                    "type": "string"
                }
            },
            "required": [
                "message"
            ]
        },
        "VcenterVmTemplateLibraryItemsCheckOutsCheckOut": {
            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec",
            "description": "Specification used to check out the source virtual machine template as a virtual machine."
        },
        "VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the virtual machine to check out of the library item.",
                    "type": "string"
                },
                "placement": {
                    "description": "Information used to place the checked out virtual machine.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCheckOutsPlacementSpec"
                },
                "powered_on": {
                    "description": "Specifies whether the virtual machine should be powered on after check out.",
                    "type": "boolean"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsCheckOutsInfo": {
            "type": "object",
            "properties": {
                "time": {
                    "description": "Date and time when the virtual machine was checked out.",
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "description": "Name of the user who checked out the virtual machine.",
                    "type": "string"
                }
            },
            "required": [
                "time",
                "user"
            ]
        },
        "VcenterVmTemplateLibraryItemsCheckOutsPlacementSpec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster onto which the virtual machine should be placed. If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsCheckOutsSummary": {
            "type": "object",
            "properties": {
                "vm": {
                    "description": "Identifier of the checked out virtual machine.",
                    "type": "string"
                }
            },
            "required": [
                "vm"
            ]
        },
        "VcenterVmTemplateLibraryItemsCpuInfo": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of CPU cores.",
                    "type": "integer",
                    "format": "int64"
                },
                "cores_per_socket": {
                    "description": "Number of CPU cores per socket.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "count",
                "cores_per_socket"
            ]
        },
        "VcenterVmTemplateLibraryItemsCpuUpdateSpec": {
            "type": "object",
            "properties": {
                "num_cpus": {
                    "description": "Number of virtual processors in the deployed virtual machine.",
                    "type": "integer",
                    "format": "int64"
                },
                "num_cores_per_socket": {
                    "description": "Number of cores among which to distribute CPUs in the deployed virtual machine.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsCreate": {
            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreateSpec",
            "description": "information used to create the library item from the source virtual machine."
        },
        "VcenterVmTemplateLibraryItemsCreatePlacementSpec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine template should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine template should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine template should be placed. If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster onto which the virtual machine template should be placed. If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsCreateSpec": {
            "type": "object",
            "properties": {
                "source_vm": {
                    "description": "Identifier of the source virtual machine to create the library item from.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the library item.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the library item.",
                    "type": "string"
                },
                "library": {
                    "description": "Identifier of the library in which the new library item should be created.",
                    "type": "string"
                },
                "vm_home_storage": {
                    "description": "Storage location for the virtual machine template's configuration and log files.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreateSpecVmHomeStorage"
                },
                "disk_storage": {
                    "description": "Storage specification for the virtual machine template's disks.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreateSpecDiskStorage"
                },
                "disk_storage_overrides": {
                    "description": "Storage specification for individual disks in the virtual machine template. This is specified as a mapping between disk identifiers in the source virtual machine and their respective storage specifications.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreateSpecDiskStorage"
                    }
                },
                "placement": {
                    "description": "Information used to place the virtual machine template.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreatePlacementSpec"
                }
            },
            "required": [
                "source_vm",
                "name",
                "library"
            ]
        },
        "VcenterVmTemplateLibraryItemsCreateSpecDiskStorage": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier for the datastore associated with a virtual machine template's disk.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Storage policy for a virtual machine template's disk.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicy"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicy": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used when creating a virtual machine template's disk.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType"
                },
                "policy": {
                    "description": "Identifier for the storage policy to use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType": {
            "type": "string",
            "description": "Policy type for a virtual machine template's disk.",
            "enum": [
                "USE_SPECIFIED_POLICY"
            ]
        },
        "VcenterVmTemplateLibraryItemsCreateSpecVmHomeStorage": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore for the virtual machine template's configuration and log files.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Storage policy for the virtual machine template's configuration and log files.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreateSpecVmHomeStoragePolicy"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsCreateSpecVmHomeStoragePolicy": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used when creating the virtual machine template's configuration and log files.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCreateSpecVmHomeStoragePolicyType"
                },
                "policy": {
                    "description": "Identifier for the storage policy to use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmTemplateLibraryItemsCreateSpecVmHomeStoragePolicyType": {
            "type": "string",
            "description": "Policy type for the virtual machine template's configuration and log files.",
            "enum": [
                "USE_SPECIFIED_POLICY"
            ]
        },
        "VcenterVmTemplateLibraryItemsDeploy": {
            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeploySpec",
            "description": "specification of how the virtual machine should be deployed."
        },
        "VcenterVmTemplateLibraryItemsDeployPlacementSpec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the deployed virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the deployed virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster onto which the deployed virtual machine should be placed. If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsDeploySpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the deployed virtual machine.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the deployed virtual machine.",
                    "type": "string"
                },
                "vm_home_storage": {
                    "description": "Storage location for the deployed virtual machine's configuration and log files.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeploySpecVmHomeStorage"
                },
                "disk_storage": {
                    "description": "Storage specification for the deployed virtual machine's disks.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeploySpecDiskStorage"
                },
                "disk_storage_overrides": {
                    "description": "Storage specification for individual disks in the deployed virtual machine. This is specified as a mapping between disk identifiers in the source virtual machine template contained in the library item and their storage specifications.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeploySpecDiskStorage"
                    }
                },
                "placement": {
                    "description": "Information used to place the deployed virtual machine.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeployPlacementSpec"
                },
                "powered_on": {
                    "description": "Specifies whether the deployed virtual machine should be powered on after deployment.",
                    "type": "boolean"
                },
                "guest_customization": {
                    "description": "Guest customization spec to apply to the deployed virtual machine.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsGuestCustomizationSpec"
                },
                "hardware_customization": {
                    "description": "Hardware customization spec which specifies updates to the deployed virtual machine.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsHardwareCustomizationSpec"
                }
            },
            "required": [
                "name"
            ]
        },
        "VcenterVmTemplateLibraryItemsDeploySpecDiskStorage": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier for the datastore associated the deployed virtual machine's disk.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Storage policy for the deployed virtual machine's disk.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicy"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicy": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used when creating the deployed virtual machine's disk.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType"
                },
                "policy": {
                    "description": "Identifier of the storage policy to use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType": {
            "type": "string",
            "description": "Policy type for the deployed virtual machine's disk.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_SOURCE_POLICY"
            ]
        },
        "VcenterVmTemplateLibraryItemsDeploySpecVmHomeStorage": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore for the deployed virtual machine's configuration and log files.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Storage policy for the deployed virtual machine's configuration and log files.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeploySpecVmHomeStoragePolicy"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsDeploySpecVmHomeStoragePolicy": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used when creating the deployed virtual machine's configuration and log files.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDeploySpecVmHomeStoragePolicyType"
                },
                "policy": {
                    "description": "Identifier for the storage policy to use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "VcenterVmTemplateLibraryItemsDeploySpecVmHomeStoragePolicyType": {
            "type": "string",
            "description": "Policy type for the deployed virtual machine's configuration and log files.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_SOURCE_POLICY"
            ]
        },
        "VcenterVmTemplateLibraryItemsDiskInfo": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Capacity of the virtual disk in bytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "disk_storage": {
                    "description": "Disk storage related information.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDiskStorageInfo"
                }
            },
            "required": [
                "disk_storage"
            ]
        },
        "VcenterVmTemplateLibraryItemsDiskStorageInfo": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore where the disk is stored.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Identifier of the storage policy associated with the virtual disk.",
                    "type": "string"
                }
            },
            "required": [
                "datastore"
            ]
        },
        "VcenterVmTemplateLibraryItemsDiskUpdateSpec": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Updated capacity of the virtual disk backing in bytes. This value has to be larger than the original capacity of the disk.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "capacity"
            ]
        },
        "VcenterVmTemplateLibraryItemsEthernetInfo": {
            "type": "object",
            "properties": {
                "backing_type": {
                    "description": "Network backing type for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType"
                },
                "mac_type": {
                    "description": "MAC address type of the ethernet adapter.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType"
                },
                "network": {
                    "description": "Identifier of the network backing the virtual Ethernet adapter.",
                    "type": "string"
                }
            },
            "required": [
                "backing_type",
                "mac_type"
            ]
        },
        "VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType": {
            "type": "string",
            "description": "The {@name MacAddressType} {@term enumerated type} defines the valid MAC address origins for a virtual Ethernet adapter.",
            "enum": [
                "MANUAL",
                "GENERATED",
                "ASSIGNED"
            ]
        },
        "VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType": {
            "type": "string",
            "description": "The {@name NetworkBackingType} {@term enumerated type} defines valid network backing types for a virtual Ethernet adapter.",
            "enum": [
                "STANDARD_PORTGROUP",
                "HOST_DEVICE",
                "DISTRIBUTED_PORTGROUP",
                "OPAQUE_NETWORK"
            ]
        },
        "VcenterVmTemplateLibraryItemsEthernetUpdateSpec": {
            "type": "object",
            "properties": {
                "network": {
                    "description": "Identifier of the network backing the virtual Ethernet adapter.",
                    "type": "string"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsGuestCustomizationSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the customization specification.",
                    "type": "string"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsHardwareCustomizationSpec": {
            "type": "object",
            "properties": {
                "nics": {
                    "description": "Map of Ethernet network adapters to update.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmTemplateLibraryItemsEthernetUpdateSpec"
                    }
                },
                "disks_to_remove": {
                    "description": "Idenfiers of disks to remove from the deployed virtual machine.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "disks_to_update": {
                    "description": "Disk update specification for individual disks in the deployed virtual machine.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDiskUpdateSpec"
                    }
                },
                "cpu_update": {
                    "description": "CPU update specification for the deployed virtual machine.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCpuUpdateSpec"
                },
                "memory_update": {
                    "description": "Memory update specification for the deployed virtual machine.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsMemoryUpdateSpec"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsInfo": {
            "type": "object",
            "properties": {
                "guest_OS": {
                    "description": "Configured guest operating system of the virtual machine template.",
                    "$ref": "#/definitions/VcenterVmGuestOS"
                },
                "cpu": {
                    "description": "CPU configuration of the virtual machine template.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsCpuInfo"
                },
                "memory": {
                    "description": "Memory configuration of the virtual machine template.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsMemoryInfo"
                },
                "vm_home_storage": {
                    "description": "Storage information about the virtual machine template's configuration and log files.",
                    "$ref": "#/definitions/VcenterVmTemplateLibraryItemsVmHomeStorageInfo"
                },
                "disks": {
                    "description": "Storage information about the virtual machine template's virtual disks.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmTemplateLibraryItemsDiskInfo"
                    }
                },
                "nics": {
                    "description": "Information about the virtual machine template's virtual ethernet adapters.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/VcenterVmTemplateLibraryItemsEthernetInfo"
                    }
                },
                "vm_template": {
                    "description": "Identifier of the latest virtual machine template contained in the library item. This {@term field} is the managed object identifier used to identify the virtual machine template in the vSphere Management (SOAP) API.",
                    "type": "string"
                }
            },
            "required": [
                "guest_OS",
                "cpu",
                "memory",
                "vm_home_storage",
                "disks",
                "nics",
                "vm_template"
            ]
        },
        "VcenterVmTemplateLibraryItemsMemoryInfo": {
            "type": "object",
            "properties": {
                "size_MiB": {
                    "description": "Memory size in mebibytes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "size_MiB"
            ]
        },
        "VcenterVmTemplateLibraryItemsMemoryUpdateSpec": {
            "type": "object",
            "properties": {
                "memory": {
                    "description": "Size of a virtual machine's memory in MB.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "VcenterVmTemplateLibraryItemsVersionsInfo": {
            "type": "object",
            "properties": {
                "vm_template": {
                    "description": "Identifier of the virtual machine template associated with the library item version. This {@term field} is the managed object identifier used to identify the virtual machine template in the vSphere Management (SOAP) API.",
                    "type": "string"
                }
            },
            "required": [
                "vm_template"
            ]
        },
        "VcenterVmTemplateLibraryItemsVersionsRollback": {
            "$ref": "#/definitions/VcenterVmTemplateLibraryItemsVersionsRollbackSpec",
            "description": "Specification to rollback the library item."
        },
        "VcenterVmTemplateLibraryItemsVersionsRollbackSpec": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message describing the reason for the rollback.",
                    "type": "string"
                }
            },
            "required": [
                "message"
            ]
        },
        "VcenterVmTemplateLibraryItemsVersionsSummary": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "The version of the library item.",
                    "type": "string"
                },
                "vm_template": {
                    "description": "Identifier of the virtual machine template associated with the library item version. This {@term field} is the managed object identifier used to identify the virtual machine template in the vSphere Management (SOAP) API.",
                    "type": "string"
                }
            },
            "required": [
                "version",
                "vm_template"
            ]
        },
        "VcenterVmTemplateLibraryItemsVmHomeStorageInfo": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore where the virtual machine template's configuration and log files are stored.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Identifier of the storage policy associated with the virtual machine template's configuration and log files.",
                    "type": "string"
                }
            },
            "required": [
                "datastore"
            ]
        },
        "VcenterVmToolsInfo": {
            "type": "object",
            "properties": {
                "auto_update_supported": {
                    "description": "Set if the virtual machine supports auto-upgrading Tools via {@link UpgradePolicy}.",
                    "type": "boolean"
                },
                "install_attempt_count": {
                    "description": "Number of attempts that have been made to install or upgrade the version of Tools installed on this virtual machine.",
                    "type": "integer",
                    "format": "int64"
                },
                "error": {
                    "description": "Error that happened, if any, during last attempt to upgrade or install Tools.",
                    "type": "string"
                },
                "version_number": {
                    "description": "Version of VMware Tools installed on the guest operating system.",
                    "type": "integer",
                    "format": "int64"
                },
                "version": {
                    "description": "Version of VMware Tools installed on the guest operating system. This is a human-readable value that should not be parsed.",
                    "type": "string"
                },
                "upgrade_policy": {
                    "description": "Tools upgrade policy setting for the virtual machine. {@link UpgradePolicy}",
                    "$ref": "#/definitions/VcenterVmToolsUpgradePolicy"
                },
                "version_status": {
                    "description": "Current version status of VMware Tools in the guest operating system, if known.",
                    "$ref": "#/definitions/VcenterVmToolsVersionStatus"
                },
                "install_type": {
                    "description": "Current installation type of VMware Tools in the guest operating system.",
                    "$ref": "#/definitions/VcenterVmToolsToolsInstallType"
                },
                "run_state": {
                    "description": "Current run state of VMware Tools in the guest operating system.",
                    "$ref": "#/definitions/VcenterVmToolsRunState"
                }
            },
            "required": [
                "auto_update_supported",
                "upgrade_policy",
                "run_state"
            ]
        },
        "VcenterVmToolsInstallerInfo": {
            "type": "object",
            "properties": {
                "is_connected": {
                    "description": "Flag indicating whether the VMware Tools installer is mounted as a CD-ROM.",
                    "type": "boolean"
                }
            },
            "required": [
                "is_connected"
            ]
        },
        "VcenterVmToolsRunState": {
            "type": "string",
            "description": "Current run state of VMware Tools in the guest operating system.",
            "enum": [
                "NOT_RUNNING",
                "RUNNING",
                "EXECUTING_SCRIPTS"
            ]
        },
        "VcenterVmToolsToolsInstallType": {
            "type": "string",
            "description": "The {@name ToolsInstallType} {@term enumerated type} defines the installation type of the Tools in the guest operating system.",
            "enum": [
                "UNKNOWN",
                "MSI",
                "TAR",
                "OSP",
                "OPEN_VM_TOOLS"
            ]
        },
        "VcenterVmToolsUpdate": {
            "$ref": "#/definitions/VcenterVmToolsUpdateSpec",
            "description": "The new values."
        },
        "VcenterVmToolsUpdateSpec": {
            "type": "object",
            "properties": {
                "upgrade_policy": {
                    "description": "Tools upgrade policy setting for the virtual machine. {@link UpgradePolicy}",
                    "$ref": "#/definitions/VcenterVmToolsUpgradePolicy"
                }
            }
        },
        "VcenterVmToolsUpgrade": {
            "type": "object",
            "properties": {
                "command_line_options": {
                    "type": "string",
                    "description": "Command line options passed to the installer to modify the installation procedure for Tools."
                }
            }
        },
        "VcenterVmToolsUpgradePolicy": {
            "type": "string",
            "description": "The {@name UpgradePolicy} {@term enumerated type} defines when Tools are auto-upgraded for a virtual machine.",
            "enum": [
                "MANUAL",
                "UPGRADE_AT_POWER_CYCLE"
            ]
        },
        "VcenterVmToolsVersionStatus": {
            "type": "string",
            "description": "The {@name VersionStatus} {@term enumerated type} defines the version status types of VMware Tools installed in the guest operating system.",
            "enum": [
                "NOT_INSTALLED",
                "CURRENT",
                "UNMANAGED",
                "TOO_OLD_UNSUPPORTED",
                "SUPPORTED_OLD",
                "SUPPORTED_NEW",
                "TOO_NEW",
                "BLACKLISTED"
            ]
        },
        "cis.task.progress": {
            "type": "object",
            "properties": {
                "total": {
                    "description": "Total amount of the work for the operation.",
                    "type": "integer",
                    "format": "int64"
                },
                "completed": {
                    "description": "The amount of work completed for the operation. The value can only be incremented.",
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "description": "Message about the work progress.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "total",
                "completed",
                "message"
            ]
        },
        "cis.task.status": {
            "type": "string",
            "description": "The Status enumerated type defines the status values that can be reported for an operation.",
            "enum": [
                "PENDING",
                "RUNNING",
                "BLOCKED",
                "SUCCEEDED",
                "FAILED"
            ]
        },
        "vapi.std.dynamic_ID": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of resource being identified (for example {@code com.acme.Person}). <p> {@term Services} that contain {@term operations} for creating and deleting resources typically contain a {@term constant} specifying the resource type for the resources being created and deleted. The API metamodel metadata {@term services} include a {@term service} that allows retrieving all the known resource types.",
                    "type": "string"
                },
                "id": {
                    "description": "The identifier for a resource whose type is specified by {@link #type}.",
                    "type": "string"
                }
            },
            "required": [
                "type",
                "id"
            ]
        },
        "vapi.std.errors.already_exists": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.already_exists_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.already_exists"
                }
            }
        },
        "vapi.std.errors.already_in_desired_state": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.already_in_desired_state_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.already_in_desired_state"
                }
            }
        },
        "vapi.std.errors.error": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.error.type": {
            "type": "string",
            "description": "Enumeration of all standard errors. Used as discriminator in protocols that have no standard means for transporting the error type, e.g. REST.",
            "enum": [
                "ERROR",
                "ALREADY_EXISTS",
                "ALREADY_IN_DESIRED_STATE",
                "CANCELED",
                "CONCURRENT_CHANGE",
                "FEATURE_IN_USE",
                "INTERNAL_SERVER_ERROR",
                "INVALID_ARGUMENT",
                "INVALID_ELEMENT_CONFIGURATION",
                "INVALID_ELEMENT_TYPE",
                "INVALID_REQUEST",
                "NOT_ALLOWED_IN_CURRENT_STATE",
                "NOT_FOUND",
                "OPERATION_NOT_FOUND",
                "RESOURCE_BUSY",
                "RESOURCE_IN_USE",
                "RESOURCE_INACCESSIBLE",
                "SERVICE_UNAVAILABLE",
                "TIMED_OUT",
                "UNABLE_TO_ALLOCATE_RESOURCE",
                "UNAUTHENTICATED",
                "UNAUTHORIZED",
                "UNEXPECTED_INPUT",
                "UNSUPPORTED",
                "UNVERIFIED_PEER"
            ]
        },
        "vapi.std.errors.error_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.error"
                }
            }
        },
        "vapi.std.errors.internal_server_error": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.internal_server_error_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.internal_server_error"
                }
            }
        },
        "vapi.std.errors.invalid_argument": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.invalid_argument_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                }
            }
        },
        "vapi.std.errors.invalid_element_configuration": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.invalid_element_configuration_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_element_configuration"
                }
            }
        },
        "vapi.std.errors.invalid_element_type": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.invalid_element_type_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_element_type"
                }
            }
        },
        "vapi.std.errors.invalid_request": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.invalid_request_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_request"
                }
            }
        },
        "vapi.std.errors.not_allowed_in_current_state": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.not_allowed_in_current_state_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state"
                }
            }
        },
        "vapi.std.errors.not_found": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.not_found_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.not_found"
                }
            }
        },
        "vapi.std.errors.resource_busy": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.resource_busy_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.resource_busy"
                }
            }
        },
        "vapi.std.errors.resource_in_use": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.resource_in_use_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.resource_in_use"
                }
            }
        },
        "vapi.std.errors.resource_inaccessible": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.resource_inaccessible_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.resource_inaccessible"
                }
            }
        },
        "vapi.std.errors.service_unavailable": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.service_unavailable_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.service_unavailable"
                }
            }
        },
        "vapi.std.errors.timed_out": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.timed_out_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.timed_out"
                }
            }
        },
        "vapi.std.errors.unable_to_allocate_resource": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.unable_to_allocate_resource_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unable_to_allocate_resource"
                }
            }
        },
        "vapi.std.errors.unauthenticated": {
            "type": "object",
            "properties": {
                "challenge": {
                    "description": "Indicates the authentication challenges applicable to the target API provider. It can be used by a client to discover the correct authentication scheme to use. The exact syntax of the value is defined by the specific provider, the protocol and authentication schemes used. <p> For example, a provider using REST may adhere to the WWW-Authenticate HTTP header specification, RFC7235, section 4.1. In this case an example challenge value may be: SIGN realm=\"27da1358-2ba4-11e9-b210-d663bd873d93\",sts=\"http://vcenter/sso?vsphere.local\", Basic realm=\"vCenter\"",
                    "type": "string"
                },
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.unauthenticated_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unauthenticated"
                }
            }
        },
        "vapi.std.errors.unauthorized": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.unauthorized_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unauthorized"
                }
            }
        },
        "vapi.std.errors.unsupported": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.unsupported_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unsupported"
                }
            }
        },
        "vapi.std.errors.unverified_peer": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.unverified_peer_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unverified_peer"
                }
            }
        },
        "vapi.std.localizable_message": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier of the localizable string or message template. <p> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog.",
                    "type": "string"
                },
                "default_message": {
                    "description": "The value of this localizable string or message template in the {@code en_US} (English) locale.  If {@link #id} refers to a message template, the default message will contain the substituted arguments. This value can be used by clients that do not need to display strings and messages in the native language of the user.  It could also be used as a fallback if a client is unable to access the appropriate message catalog.",
                    "type": "string"
                },
                "args": {
                    "description": "Positional arguments to be substituted into the message template. This list will be empty if the message uses named arguments or has no arguments.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "params": {
                    "description": "Named arguments to be substituted into the message template.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vapi.std.localization_param"
                            }
                        }
                    }
                },
                "localized": {
                    "description": "Localized string value as per request requirements.",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "default_message",
                "args"
            ]
        },
        "vapi.std.localization_param": {
            "type": "object",
            "properties": {
                "s": {
                    "description": "{@term String} value associated with the parameter.",
                    "type": "string"
                },
                "dt": {
                    "description": "Date and time value associated with the parameter. Use the {@name #format} {@term field} to specify date and time display style.",
                    "type": "string",
                    "format": "date-time"
                },
                "i": {
                    "description": "{@term long} value associated with the parameter.",
                    "type": "integer",
                    "format": "int64"
                },
                "d": {
                    "description": "The {@term double} value associated with the parameter. The number of displayed fractional digits is changed via {@name #precision} {@term field}.",
                    "type": "number",
                    "format": "double"
                },
                "l": {
                    "description": "Nested localizable value associated with the parameter. This is useful construct to convert to human readable localized form {@term enumerated type} and {@term boolean} values. It can also be used for proper handling of pluralization and gender forms in localization. Recursive {@name NestedLocalizableMessage} instances can be used for localizing short lists of items.",
                    "$ref": "#/definitions/vapi.std.nested_localizable_message"
                },
                "format": {
                    "description": "Format associated with the date and time value in {@name #dt} {@term field}. The {@term enumeration value} {@code SHORT_DATETIME} will be used as default.",
                    "$ref": "#/definitions/vapi.std.localization_param.date_time_format"
                },
                "precision": {
                    "description": "Number of fractional digits to include in formatted {@term double} value.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "vapi.std.localization_param.date_time_format": {
            "type": "string",
            "description": "The {@name DateTimeFormat} {@term enumerated type} lists possible date and time formatting options. It combines the Unicode CLDR format types - full, long, medium and short with 3 different presentations - date only, time only and combined date and time presentation.",
            "enum": [
                "SHORT_DATE",
                "MED_DATE",
                "LONG_DATE",
                "FULL_DATE",
                "SHORT_TIME",
                "MED_TIME",
                "LONG_TIME",
                "FULL_TIME",
                "SHORT_DATE_TIME",
                "MED_DATE_TIME",
                "LONG_DATE_TIME",
                "FULL_DATE_TIME"
            ]
        },
        "vapi.std.nested_localizable_message": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier of the localizable string or message template. <p> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog.",
                    "type": "string"
                },
                "params": {
                    "description": "Named Arguments to be substituted into the message template.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vapi.std.localization_param"
                            }
                        }
                    }
                }
            },
            "required": [
                "id"
            ]
        },
        "vcenter.VM.clone_placement_spec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the cloned virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the cloned virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the cloned virtual machine should be placed. <p> If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. <p> If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster into which the cloned virtual machine should be placed. <p> If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. <p> If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the cloned virtual machine's configuration state should be stored.  This datastore will also be used for any virtual disks that are created as part of the virtual machine clone operation unless individually overridden.",
                    "type": "string"
                }
            }
        },
        "vcenter.VM.clone_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.VM.clone_spec": {
            "type": "object",
            "properties": {
                "source": {
                    "description": "Virtual machine to clone from.",
                    "type": "string"
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/vcenter.VM.clone_placement_spec"
                },
                "disks_to_remove": {
                    "description": "Set of Disks to Remove.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "disks_to_update": {
                    "description": "Map of Disks to Update.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.VM.disk_clone_spec"
                            }
                        }
                    }
                },
                "power_on": {
                    "description": "Attempt to perform a {@link #powerOn} after clone.",
                    "type": "boolean"
                },
                "guest_customization_spec": {
                    "description": "Guest customization spec to apply to the virtual machine after the virtual machine is deployed.",
                    "$ref": "#/definitions/vcenter.VM.guest_customization_spec"
                }
            },
            "required": [
                "source",
                "name"
            ]
        },
        "vcenter.VM.clone_task_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.VM.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.VM.create_spec": {
            "type": "object",
            "properties": {
                "guest_OS": {
                    "description": "Guest OS.",
                    "$ref": "#/definitions/vcenter.vm.guest_OS"
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/vcenter.VM.placement_spec"
                },
                "hardware_version": {
                    "description": "Virtual hardware version.",
                    "$ref": "#/definitions/vcenter.vm.hardware.version"
                },
                "boot": {
                    "description": "Boot configuration.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.create_spec"
                },
                "boot_devices": {
                    "description": "Boot device configuration.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.boot.device.entry_create_spec"
                    }
                },
                "cpu": {
                    "description": "CPU configuration.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cpu.update_spec"
                },
                "memory": {
                    "description": "Memory configuration.",
                    "$ref": "#/definitions/vcenter.vm.hardware.memory.update_spec"
                },
                "disks": {
                    "description": "List of disks.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.disk.create_spec"
                    }
                },
                "nics": {
                    "description": "List of Ethernet adapters.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.ethernet.create_spec"
                    }
                },
                "cdroms": {
                    "description": "List of CD-ROMs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.cdrom.create_spec"
                    }
                },
                "floppies": {
                    "description": "List of floppy drives.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.floppy.create_spec"
                    }
                },
                "parallel_ports": {
                    "description": "List of parallel ports.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.parallel.create_spec"
                    }
                },
                "serial_ports": {
                    "description": "List of serial ports.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.serial.create_spec"
                    }
                },
                "sata_adapters": {
                    "description": "List of SATA adapters.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.create_spec"
                    }
                },
                "scsi_adapters": {
                    "description": "List of SCSI adapters.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.create_spec"
                    }
                },
                "storage_policy": {
                    "description": "The {@name StoragePolicySpec} {@term structure} contains information about the storage policy that is to be associated with the virtual machine home (which contains the configuration and log files).",
                    "$ref": "#/definitions/vcenter.VM.storage_policy_spec"
                }
            },
            "required": [
                "guest_OS"
            ]
        },
        "vcenter.VM.disk_clone_spec": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Destination datastore to clone disk.",
                    "type": "string"
                }
            }
        },
        "vcenter.VM.disk_relocate_spec": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Destination datastore to relocate disk.",
                    "type": "string"
                }
            }
        },
        "vcenter.VM.filter_spec": {
            "type": "object",
            "properties": {
                "vms": {
                    "description": "Identifiers of virtual machines that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that virtual machines must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "hosts": {
                    "description": "Hosts that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "clusters": {
                    "description": "Clusters that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "resource_pools": {
                    "description": "Resource pools that must contain the virtual machine for the virtual machine to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "power_states": {
                    "description": "Power states that a virtual machine must be in to match the filter (see {@link Power.Info#state}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.power.state"
                    }
                }
            }
        },
        "vcenter.VM.guest_customization_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the customization specification.",
                    "type": "string"
                }
            }
        },
        "vcenter.VM.info": {
            "type": "object",
            "properties": {
                "guest_OS": {
                    "description": "Guest OS.",
                    "$ref": "#/definitions/vcenter.vm.guest_OS"
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "identity": {
                    "description": "Identity of the virtual machine.",
                    "$ref": "#/definitions/vcenter.vm.identity.info"
                },
                "power_state": {
                    "description": "Power state of the virtual machine.",
                    "$ref": "#/definitions/vcenter.vm.power.state"
                },
                "instant_clone_frozen": {
                    "description": "Indicates whether the virtual machine is frozen for instant clone, or not.",
                    "type": "boolean"
                },
                "hardware": {
                    "description": "Virtual hardware version information.",
                    "$ref": "#/definitions/vcenter.vm.hardware.info"
                },
                "boot": {
                    "description": "Boot configuration.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.info"
                },
                "boot_devices": {
                    "description": "Boot device configuration.  If the {@term list} has no entries, a server-specific default boot sequence is used.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.boot.device.entry"
                    }
                },
                "cpu": {
                    "description": "CPU configuration.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cpu.info"
                },
                "memory": {
                    "description": "Memory configuration.",
                    "$ref": "#/definitions/vcenter.vm.hardware.memory.info"
                },
                "disks": {
                    "description": "List of disks.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.disk.info"
                            }
                        }
                    }
                },
                "nics": {
                    "description": "List of Ethernet adapters.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.ethernet.info"
                            }
                        }
                    }
                },
                "cdroms": {
                    "description": "List of CD-ROMs.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.cdrom.info"
                            }
                        }
                    }
                },
                "floppies": {
                    "description": "List of floppy drives.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.floppy.info"
                            }
                        }
                    }
                },
                "parallel_ports": {
                    "description": "List of parallel ports.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.parallel.info"
                            }
                        }
                    }
                },
                "serial_ports": {
                    "description": "List of serial ports.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.serial.info"
                            }
                        }
                    }
                },
                "sata_adapters": {
                    "description": "List of SATA adapters.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.info"
                            }
                        }
                    }
                },
                "scsi_adapters": {
                    "description": "List of SCSI adapters.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.info"
                            }
                        }
                    }
                }
            },
            "required": [
                "guest_OS",
                "name",
                "power_state",
                "hardware",
                "boot",
                "boot_devices",
                "cpu",
                "memory",
                "disks",
                "nics",
                "cdroms",
                "floppies",
                "parallel_ports",
                "serial_ports",
                "sata_adapters",
                "scsi_adapters"
            ]
        },
        "vcenter.VM.instant_clone_placement_spec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the InstantCloned virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the InstantCloned virtual machine should be placed.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the InstantCloned virtual machine's configuration state should be stored.  This datastore will also be used for any virtual disks that are created as part of the virtual machine InstantClone operation.",
                    "type": "string"
                }
            }
        },
        "vcenter.VM.instant_clone_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.VM.instant_clone_spec": {
            "type": "object",
            "properties": {
                "source": {
                    "description": "Virtual machine to InstantClone from.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the new virtual machine.",
                    "type": "string"
                },
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/vcenter.VM.instant_clone_placement_spec"
                },
                "nics_to_update": {
                    "description": "Map of NICs to update.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.ethernet.update_spec"
                            }
                        }
                    }
                },
                "disconnect_all_nics": {
                    "description": "Indicates whether all NICs on the destination virtual machine should be disconnected from the newtwork",
                    "type": "boolean"
                },
                "parallel_ports_to_update": {
                    "description": "Map of parallel ports to Update.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.parallel.update_spec"
                            }
                        }
                    }
                },
                "serial_ports_to_update": {
                    "description": "Map of serial ports to Update.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.hardware.serial.update_spec"
                            }
                        }
                    }
                },
                "bios_uuid": {
                    "description": "128-bit SMBIOS UUID of a virtual machine represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.",
                    "type": "string"
                }
            },
            "required": [
                "source",
                "name"
            ]
        },
        "vcenter.VM.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.VM.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.VM.placement_spec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. <p> If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. <p> If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster into which the virtual machine should be placed. <p> If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. <p> If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the virtual machine's configuration state should be stored.  This datastore will also be used for any virtual disks that are created as part of the virtual machine creation operation.",
                    "type": "string"
                }
            }
        },
        "vcenter.VM.register_placement_spec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. <p> If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. <p> If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster into which the virtual machine should be placed. <p> If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. <p> If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                }
            }
        },
        "vcenter.VM.register_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.VM.register_spec": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore on which the virtual machine's configuration state is stored.",
                    "type": "string"
                },
                "path": {
                    "description": "Path to the virtual machine's configuration file on the datastore corresponding to {@link #datastore).",
                    "type": "string"
                },
                "datastore_path": {
                    "description": "Datastore path for the virtual machine's configuration file in the format \"[datastore name] path\".  For example \"[storage1] Test-VM/Test-VM.vmx\".",
                    "type": "string"
                },
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/vcenter.VM.register_placement_spec"
                }
            }
        },
        "vcenter.VM.relocate_placement_spec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. <p> If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. <p> If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster into which the virtual machine should be placed. <p> If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. <p> If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "datastore": {
                    "description": "Datastore on which the virtual machine's configuration state should be stored.  This datastore will also be used for any virtual disks that are associated with the virtual machine, unless individually overridden.",
                    "type": "string"
                }
            }
        },
        "vcenter.VM.relocate_spec": {
            "type": "object",
            "properties": {
                "placement": {
                    "description": "Virtual machine placement information.",
                    "$ref": "#/definitions/vcenter.VM.relocate_placement_spec"
                },
                "disks": {
                    "description": "Individual disk relocation map.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.VM.disk_relocate_spec"
                            }
                        }
                    }
                }
            }
        },
        "vcenter.VM.relocate_task_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.VM.storage_policy_spec": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy which should be associated with the virtual machine.",
                    "type": "string"
                }
            },
            "required": [
                "policy"
            ]
        },
        "vcenter.VM.summary": {
            "type": "object",
            "properties": {
                "vm": {
                    "description": "Identifier of the virtual machine.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the Virtual machine.",
                    "type": "string"
                },
                "power_state": {
                    "description": "Power state of the virtual machine.",
                    "$ref": "#/definitions/vcenter.vm.power.state"
                },
                "cpu_count": {
                    "description": "Number of CPU cores.",
                    "type": "integer",
                    "format": "int64"
                },
                "memory_size_MiB": {
                    "description": "Memory size in mebibytes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "vm",
                "name",
                "power_state"
            ]
        },
        "vcenter.VM_clone": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.clone_spec",
                    "description": "Virtual machine clone specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.VM_clone_task": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.clone_spec",
                    "description": "Virtual machine clone specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.VM_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.create_spec",
                    "description": "Virtual machine specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.VM_instant_clone": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.instant_clone_spec",
                    "description": "Virtual machine InstantCloneSpec."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.VM_register": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.register_spec",
                    "description": "Specification of the location of the virtual machine files and the placement of the new virtual machine."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.VM_relocate": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.relocate_spec",
                    "description": "Relocate specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.VM_relocate_task": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.VM.relocate_spec",
                    "description": "Relocate specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.VM_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.VM.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.certificate_management.vcenter.tls.info": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "Version (version number) value from the certificate.",
                    "type": "integer",
                    "format": "int64"
                },
                "serial_number": {
                    "description": "SerialNumber value from the certificate.",
                    "type": "string"
                },
                "signature_algorithm": {
                    "description": "Signature algorithm name from the certificate.",
                    "type": "string"
                },
                "issuer_dn": {
                    "description": "Issuer (issuer distinguished name) value from the certificate.",
                    "type": "string"
                },
                "valid_from": {
                    "description": "validFrom specify the start date of the certificate.",
                    "type": "string",
                    "format": "date-time"
                },
                "valid_to": {
                    "description": "validTo specify the end date of the certificate.",
                    "type": "string",
                    "format": "date-time"
                },
                "subject_dn": {
                    "description": "Subject (subject distinguished name) value from the certificate.",
                    "type": "string"
                },
                "thumbprint": {
                    "description": "Thumbprint value from the certificate.",
                    "type": "string"
                },
                "is_CA": {
                    "description": "Certificate constraints isCA from the critical BasicConstraints extension, (OID = 2.5.29.19).",
                    "type": "boolean"
                },
                "path_length_constraint": {
                    "description": "Certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19).",
                    "type": "integer",
                    "format": "int64"
                },
                "key_usage": {
                    "description": "Collection of keyusage contained in the certificate.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extended_key_usage": {
                    "description": "Collection of extended keyusage that contains details for which the certificate can be used for.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject_alternative_name": {
                    "description": "Collection of subject alternative names.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authority_information_access_uri": {
                    "description": "Collection of authority information access URI.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cert": {
                    "description": "TLS certificate in PEM format.",
                    "type": "string"
                }
            },
            "required": [
                "version",
                "serial_number",
                "signature_algorithm",
                "issuer_dn",
                "valid_from",
                "valid_to",
                "subject_dn",
                "thumbprint",
                "is_CA",
                "path_length_constraint",
                "key_usage",
                "extended_key_usage",
                "subject_alternative_name",
                "authority_information_access_uri",
                "cert"
            ]
        },
        "vcenter.certificate_management.vcenter.tls.replace_spec": {
            "type": "object",
            "properties": {
                "key_size": {
                    "description": "The size of the key  to be used for public and private key generation.",
                    "type": "integer",
                    "format": "int64"
                },
                "common_name": {
                    "description": "The common name of the host for which certificate is generated",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization field in certificate subject",
                    "type": "string"
                },
                "organization_unit": {
                    "description": "Organization unit field in certificate subject",
                    "type": "string"
                },
                "locality": {
                    "description": "Locality field in certificate subject",
                    "type": "string"
                },
                "state_or_province": {
                    "description": "State field in certificate subject",
                    "type": "string"
                },
                "country": {
                    "description": "Country field in certificate subject",
                    "type": "string"
                },
                "email_address": {
                    "description": "Email field in Certificate extensions",
                    "type": "string"
                },
                "subject_alt_name": {
                    "description": "SubjectAltName is list of Dns Names and Ip addresses",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "organization",
                "organization_unit",
                "locality",
                "state_or_province",
                "country",
                "email_address"
            ]
        },
        "vcenter.certificate_management.vcenter.tls.spec": {
            "type": "object",
            "properties": {
                "cert": {
                    "description": "Certificate string in PEM format.",
                    "type": "string"
                },
                "key": {
                    "description": "Private key string in PEM format.",
                    "type": "string",
                    "format": "password"
                },
                "root_cert": {
                    "description": "Third party Root CA certificate in PEM format.",
                    "type": "string"
                }
            },
            "required": [
                "cert"
            ]
        },
        "vcenter.certificate_management.vcenter.tls_csr.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_csr.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.certificate_management.vcenter.tls_csr.info": {
            "type": "object",
            "properties": {
                "csr": {
                    "description": "Certificate Signing Request in PEM format.",
                    "type": "string"
                }
            },
            "required": [
                "csr"
            ]
        },
        "vcenter.certificate_management.vcenter.tls_csr.spec": {
            "type": "object",
            "properties": {
                "key_size": {
                    "description": "",
                    "type": "integer",
                    "format": "int64"
                },
                "common_name": {
                    "description": "",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization field in certificate subject",
                    "type": "string"
                },
                "organization_unit": {
                    "description": "Organization unit field in certificate subject",
                    "type": "string"
                },
                "locality": {
                    "description": "Locality field in certificate subject",
                    "type": "string"
                },
                "state_or_province": {
                    "description": "State field in certificate subject",
                    "type": "string"
                },
                "country": {
                    "description": "Country field in certificate subject",
                    "type": "string"
                },
                "email_address": {
                    "description": "Email field in Certificate extensions",
                    "type": "string"
                },
                "subject_alt_name": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "organization",
                "organization_unit",
                "locality",
                "state_or_province",
                "country",
                "email_address"
            ]
        },
        "vcenter.certificate_management.vcenter.tls_csr_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls_csr.spec",
                    "description": "The information needed to create a CSR."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.certificate_management.vcenter.tls_renew": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The duration (in days) of the new TLS certificate. The duration should be less than or equal to 730 days."
                }
            }
        },
        "vcenter.certificate_management.vcenter.tls_replace_vmca_signed": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls.replace_spec",
                    "description": "The information needed to generate VMCA signed Machine SSL"
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.certificate_management.vcenter.tls_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.certificate_management.vcenter.tls_set": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.tls.spec",
                    "description": "The information needed to replace the TLS certificate."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.create_spec": {
            "type": "object",
            "properties": {
                "cert_chain": {
                    "description": "Certificate chain in base64 encoding",
                    "$ref": "#/definitions/vcenter.certificate_management.x509_cert_chain"
                },
                "chain": {
                    "description": "Unique identifier for this trusted root. Client can specify at creation as long as it is unique, otherwise one will be generated. An example of a client providing the identifier would be if this trusted root is associated with a VC trust. In this case the identifier would be the domain id.",
                    "type": "string"
                }
            },
            "required": [
                "cert_chain"
            ]
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.info": {
            "type": "object",
            "properties": {
                "cert_chain": {
                    "description": "A certificate chain in base64 encoding",
                    "$ref": "#/definitions/vcenter.certificate_management.x509_cert_chain"
                }
            },
            "required": [
                "cert_chain"
            ]
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains.summary": {
            "type": "object",
            "properties": {
                "chain": {
                    "description": "Unique identifier for chain.",
                    "type": "string"
                }
            },
            "required": [
                "chain"
            ]
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.create_spec",
                    "description": "The information needed to create a trusted root certificate chain."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.certificate_management.vcenter.trusted_root_chains_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.trusted_root_chains.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.certificate_management.vcenter.vmca_root.create_spec": {
            "type": "object",
            "properties": {
                "key_size": {
                    "description": "The size of the key to be used for public and private key generation.",
                    "type": "integer",
                    "format": "int64"
                },
                "common_name": {
                    "description": "The common name of the host for which certificate is generated.",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization field in certificate subject.",
                    "type": "string"
                },
                "organization_unit": {
                    "description": "Organization unit field in certificate subject.",
                    "type": "string"
                },
                "locality": {
                    "description": "Locality field in certificate subject.",
                    "type": "string"
                },
                "state_or_province": {
                    "description": "State field in certificate subject.",
                    "type": "string"
                },
                "country": {
                    "description": "Country field in certificate subject.",
                    "type": "string"
                },
                "email_address": {
                    "description": "Email field in Certificate extensions.",
                    "type": "string"
                },
                "subject_alt_name": {
                    "description": "SubjectAltName is list of Dns Names and Ip addresses.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.certificate_management.vcenter.vmca_root_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.certificate_management.vcenter.vmca_root.create_spec",
                    "description": "The information needed to generate VMCA signed Root Certificate."
                }
            }
        },
        "vcenter.certificate_management.x509_cert_chain": {
            "type": "object",
            "properties": {
                "cert_chain": {
                    "description": "Certificate chain in base64 format",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "cert_chain"
            ]
        },
        "vcenter.cluster.filter_spec": {
            "type": "object",
            "properties": {
                "clusters": {
                    "description": "Identifiers of clusters that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that clusters must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the cluster for the cluster to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the cluster for the cluster to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.cluster.info": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the cluster",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Identifier of the root resource pool of the cluster",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "resource_pool"
            ]
        },
        "vcenter.cluster.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.cluster.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.cluster.summary": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the cluster.",
                    "type": "string"
                },
                "ha_enabled": {
                    "description": "Flag indicating whether the vSphere HA feature is enabled for the cluster.",
                    "type": "boolean"
                },
                "drs_enabled": {
                    "description": "Flag indicating whether the vSphere DRS service is enabled for the cluster.",
                    "type": "boolean"
                }
            },
            "required": [
                "cluster",
                "name",
                "ha_enabled",
                "drs_enabled"
            ]
        },
        "vcenter.cluster_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.cluster.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.content.registries.day_of_week": {
            "type": "string",
            "description": "The {@name DayOfWeek} {@term enumerated type} describes the supported days of the week to run a specific operation for a container registry.",
            "enum": [
                "SUNDAY",
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY"
            ]
        },
        "vcenter.content.registries.harbor.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.content.registries.harbor.create_spec": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster hosting the registry.",
                    "type": "string"
                },
                "garbage_collection": {
                    "description": "Garbage collection configuration for the Harbor registry.",
                    "$ref": "#/definitions/vcenter.content.registries.harbor.garbage_collection"
                },
                "storage": {
                    "description": "Storage associated with the Harbor registry. The list contains only one storage backing in this version.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.content.registries.harbor.storage_spec"
                    }
                }
            },
            "required": [
                "storage"
            ]
        },
        "vcenter.content.registries.harbor.garbage_collection": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Frequency of garbage collection.",
                    "$ref": "#/definitions/vcenter.content.registries.recurrence"
                },
                "day_of_week": {
                    "description": "Day of the week when garbage collection should run.",
                    "$ref": "#/definitions/vcenter.content.registries.day_of_week"
                },
                "hour": {
                    "description": "Hour at which garbage collection should run.",
                    "type": "integer",
                    "format": "int64"
                },
                "minute": {
                    "description": "Minute at which garbage collection should run.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.content.registries.harbor.info": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Identifier of the Harbor namespace in case it is created in a Kubernetes environment.",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the registry.",
                    "type": "string"
                },
                "creation_time": {
                    "description": "The date and time when the harbor registry was created.",
                    "type": "string",
                    "format": "date-time"
                },
                "ui_access_url": {
                    "description": "URL to access the UI of the registry.",
                    "type": "string",
                    "format": "uri"
                },
                "cert_chain": {
                    "description": "Harbor certificate chain in base64 format.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "garbage_collection": {
                    "description": "Garbage collection information for the registry.",
                    "$ref": "#/definitions/vcenter.content.registries.harbor.garbage_collection"
                },
                "storage": {
                    "description": "Storage information associated with the registry.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.content.registries.harbor.storage_info"
                    }
                },
                "health": {
                    "description": "Health status of the container registry.",
                    "$ref": "#/definitions/vcenter.content.registries.health.info"
                }
            },
            "required": [
                "version",
                "creation_time",
                "ui_access_url",
                "cert_chain",
                "garbage_collection",
                "storage",
                "health"
            ]
        },
        "vcenter.content.registries.harbor.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.content.registries.harbor.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.content.registries.harbor.projects.config_status": {
            "type": "string",
            "description": "The {@name ConfigStatus} {@term enumerated type} describes the status of reaching the desired configuration state for the Harbor project.",
            "enum": [
                "PENDING",
                "REMOVING",
                "ERROR",
                "READY"
            ]
        },
        "vcenter.content.registries.harbor.projects.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.content.registries.harbor.projects.create_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the Harbor project. Should be between 1-63 characters long alphanumeric string and may contain the following characters: a-z,0-9, and '-'. Must be starting with characters or numbers, with the '-' character allowed anywhere except the first or last character.",
                    "type": "string"
                },
                "scope": {
                    "description": "Access type of a Harbor project.",
                    "$ref": "#/definitions/vcenter.content.registries.harbor.projects.scope"
                }
            },
            "required": [
                "name",
                "scope"
            ]
        },
        "vcenter.content.registries.harbor.projects.info": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the Harbor project. Should be between 1-63 characters long alphanumeric string and may contain the following characters: a-z,0-9, and '-'. Must be starting with characters or numbers, with the '-' character allowed anywhere except the first or last character.",
                    "type": "string"
                },
                "config_status": {
                    "description": "The status of the Harbor project.",
                    "$ref": "#/definitions/vcenter.content.registries.harbor.projects.config_status"
                },
                "scope": {
                    "description": "The access type of a Harbor project.",
                    "$ref": "#/definitions/vcenter.content.registries.harbor.projects.scope"
                },
                "creation_time": {
                    "description": "The date and time when the harbor project creation API was triggered and project identifier generated.",
                    "type": "string",
                    "format": "date-time"
                },
                "update_time": {
                    "description": "The date and time when the harbor project purge API was triggered. In case no purge was triggered, {@name #updateTime} is same as {@name #creationTime}.",
                    "type": "string",
                    "format": "date-time"
                },
                "access_url": {
                    "description": "URL to access the harbor project through docker client.",
                    "type": "string",
                    "format": "uri"
                },
                "message": {
                    "description": "Details about the ERROR project status.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "name",
                "config_status",
                "scope",
                "creation_time"
            ]
        },
        "vcenter.content.registries.harbor.projects.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.content.registries.harbor.projects.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.content.registries.harbor.projects.scope": {
            "type": "string",
            "description": "The {@name Scope} {@term enumerated type} in a project defines access levels of the project.",
            "enum": [
                "PUBLIC",
                "PRIVATE"
            ]
        },
        "vcenter.content.registries.harbor.projects.summary": {
            "type": "object",
            "properties": {
                "project": {
                    "description": "Identifier of the harbor project.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the Harbor project. Should be between 1-63 characters long alphanumeric string and may contain the following characters: a-z,0-9, and '-'. Must be starting with characters or numbers, with the '-' character allowed anywhere except the first or last character.",
                    "type": "string"
                },
                "scope": {
                    "description": "Access type of a Harbor project.",
                    "$ref": "#/definitions/vcenter.content.registries.harbor.projects.scope"
                }
            },
            "required": [
                "project",
                "name",
                "scope"
            ]
        },
        "vcenter.content.registries.harbor.projects_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.content.registries.harbor.projects.create_spec",
                    "description": "Information used to create the Harbor project."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.content.registries.harbor.projects_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.content.registries.harbor.projects.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.content.registries.harbor.storage_info": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy.",
                    "type": "string"
                },
                "capacity": {
                    "description": "Total capacity for the registry storage (in mebibytes). This is the storage limit set on the Harbor registry. If a storage limit was not set on the registry, the default registry capacity - 204800 mebibytes is used.",
                    "type": "integer",
                    "format": "int64"
                },
                "used": {
                    "description": "Overall storage used by the registry (in mebibytes). This is the sum of used storage associated with storage policies configured for the registry.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "policy",
                "capacity",
                "used"
            ]
        },
        "vcenter.content.registries.harbor.storage_spec": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy.",
                    "type": "string"
                },
                "limit": {
                    "description": "The maximum amount of storage (in mebibytes) which can be utilized by the registry for this specification.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "policy"
            ]
        },
        "vcenter.content.registries.harbor.summary": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Identifier of the cluster.",
                    "type": "string"
                },
                "registry": {
                    "description": "Identifier of the registry.",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the registry.",
                    "type": "string"
                },
                "ui_access_url": {
                    "description": "URL to access the UI of the registry.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "registry",
                "version",
                "ui_access_url"
            ]
        },
        "vcenter.content.registries.harbor_create": {
            "type": "object",
            "properties": {
                "client_token": {
                    "type": "string",
                    "description": "A unique token generated on the client for each creation request. The token should be a universally unique identifier (UUID), for example: {@code b8a2a2e3-2314-43cd-a871-6ede0f429751}. This token can be used to guarantee idempotent creation."
                },
                "spec": {
                    "$ref": "#/definitions/vcenter.content.registries.harbor.create_spec",
                    "description": "Specification for creating the Harbor registry."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.content.registries.harbor_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.content.registries.harbor.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.content.registries.health.info": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Container registry status.",
                    "$ref": "#/definitions/vcenter.content.registries.health.status"
                },
                "details": {
                    "description": "Details about the status.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "status"
            ]
        },
        "vcenter.content.registries.health.status": {
            "type": "string",
            "description": "The {@name Status} {@term enumerated type} describes the status of the container registry.",
            "enum": [
                "STARTING",
                "RUNNING",
                "WARNING",
                "ERROR",
                "DELETING"
            ]
        },
        "vcenter.content.registries.health_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.content.registries.health.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.content.registries.recurrence": {
            "type": "string",
            "description": "The {@name Recurrence} {@term enumerated type} defines the supported values for how often to run a specific operation for a container registry.",
            "enum": [
                "NONE",
                "DAILY",
                "WEEKLY"
            ]
        },
        "vcenter.datacenter.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.datacenter.create_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the datacenter to be created.",
                    "type": "string"
                },
                "folder": {
                    "description": "Datacenter folder in which the new datacenter should be created.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ]
        },
        "vcenter.datacenter.filter_spec": {
            "type": "object",
            "properties": {
                "datacenters": {
                    "description": "Identifiers of datacenters that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that datacenters must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the datacenters for the datacenter to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.datacenter.info": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the datacenter.",
                    "type": "string"
                },
                "datastore_folder": {
                    "description": "The root datastore folder associated with the datacenter.",
                    "type": "string"
                },
                "host_folder": {
                    "description": "The root host and cluster folder associated with the datacenter.",
                    "type": "string"
                },
                "network_folder": {
                    "description": "The root network folder associated with the datacenter.",
                    "type": "string"
                },
                "vm_folder": {
                    "description": "The root virtual machine folder associated with the datacenter.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "datastore_folder",
                "host_folder",
                "network_folder",
                "vm_folder"
            ]
        },
        "vcenter.datacenter.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.datacenter.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.datacenter.summary": {
            "type": "object",
            "properties": {
                "datacenter": {
                    "description": "Identifier of the datacenter.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the datacenter.",
                    "type": "string"
                }
            },
            "required": [
                "datacenter",
                "name"
            ]
        },
        "vcenter.datacenter_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.datacenter.create_spec",
                    "description": "Specification for the new datacenter to be created."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.datacenter_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.datacenter.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.datastore.default_policy_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.datastore.filter_spec": {
            "type": "object",
            "properties": {
                "datastores": {
                    "description": "Identifiers of datastores that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that datastores must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "types": {
                    "description": "Types that datastores must have to match the filter (see {@link Summary#type}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/vcenter.datastore.type"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the datastore for the datastore to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the datastore for the datastore to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.datastore.info": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the datastore.",
                    "type": "string"
                },
                "type": {
                    "description": "Type ({@enum.values Type}) of the datastore.",
                    "$ref": "#/definitions/vcenter.datastore.type"
                },
                "accessible": {
                    "description": "Whether or not this datastore is accessible.",
                    "type": "boolean"
                },
                "free_space": {
                    "description": "Available space of this datastore, in bytes. <p> The server periodically updates this value.",
                    "type": "integer",
                    "format": "int64"
                },
                "multiple_host_access": {
                    "description": "Whether or not more than one host in the datacenter has been configured with access to the datastore.",
                    "type": "boolean"
                },
                "thin_provisioning_supported": {
                    "description": "Whether or not the datastore supports thin provisioning on a per file basis. When thin provisioning is used, backing storage is lazily allocated.",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "type",
                "accessible",
                "multiple_host_access",
                "thin_provisioning_supported"
            ]
        },
        "vcenter.datastore.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.datastore.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.datastore.summary": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the datastore.",
                    "type": "string"
                },
                "type": {
                    "description": "Type ({@enum.values Type}) of the datatore.",
                    "$ref": "#/definitions/vcenter.datastore.type"
                },
                "free_space": {
                    "description": "Available space of this datastore, in bytes. <p> The server periodically updates this value.",
                    "type": "integer",
                    "format": "int64"
                },
                "capacity": {
                    "description": "Capacity of this datastore, in bytes. <p> The server periodically updates this value.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "datastore",
                "name",
                "type"
            ]
        },
        "vcenter.datastore.type": {
            "type": "string",
            "enum": [
                "VMFS",
                "NFS",
                "NFS41",
                "CIFS",
                "VSAN",
                "VFFS",
                "VVOL"
            ]
        },
        "vcenter.datastore_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.datastore.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.appliance_size": {
            "type": "string",
            "description": "The {@name ApplianceSize} {@term enumerated type} defines the vCenter Server Appliance sizes.",
            "enum": [
                "TINY",
                "SMALL",
                "MEDIUM",
                "LARGE",
                "XLARGE"
            ]
        },
        "vcenter.deployment.appliance_state": {
            "type": "string",
            "description": "The {@name ApplianceState} {@term enumerated type} defines the various states the vCenter Appliance can be in.",
            "enum": [
                "NOT_INITIALIZED",
                "INITIALIZED",
                "CONFIG_IN_PROGRESS",
                "QUESTION_RAISED",
                "FAILED",
                "CONFIGURED"
            ]
        },
        "vcenter.deployment.appliance_type": {
            "type": "string",
            "description": "The {@name ApplianceType} {@term enumerated type} defines the vCenter appliance types.",
            "enum": [
                "VCSA_EMBEDDED",
                "VCSA_EXTERNAL",
                "PSC_EXTERNAL"
            ]
        },
        "vcenter.deployment.check_info": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status of the check.",
                    "$ref": "#/definitions/vcenter.deployment.check_status"
                },
                "result": {
                    "description": "Result of the check.",
                    "$ref": "#/definitions/vcenter.deployment.notifications"
                },
                "source_info": {
                    "description": "Information collected from the source machine.",
                    "$ref": "#/definitions/vcenter.deployment.source_info"
                }
            },
            "required": [
                "status"
            ]
        },
        "vcenter.deployment.check_status": {
            "type": "string",
            "description": "The {@name CheckStatus} {@term enumerated type} defines the status of the checks.",
            "enum": [
                "SUCCESS",
                "FAILED"
            ]
        },
        "vcenter.deployment.data_migration_estimate": {
            "type": "object",
            "properties": {
                "estimated_export_time": {
                    "description": "The time estimated to export data from the source vCenter Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "estimated_import_time": {
                    "description": "The time estimated to import data to the upgraded vCenter Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "required_free_disk_space_on_source": {
                    "description": "The extra free space required on source vCenter Server.",
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "estimated_export_time",
                "estimated_import_time",
                "required_free_disk_space_on_source"
            ]
        },
        "vcenter.deployment.data_migration_info": {
            "type": "object",
            "properties": {
                "core": {
                    "description": "Migrate only core data and configuration from vCenter Server. Events, tasks, and stats will not be migrated.",
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate"
                },
                "core_events_tasks": {
                    "description": "Migrate core, events, and tasks from vCenter Server. Stats will not be migrated.",
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate"
                },
                "all": {
                    "description": "Migrate all data from vCenter Server.",
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate"
                },
                "core_events_tasks_with_deferred": {
                    "description": "Migrate core, events, and tasks from vCenter Server. Events and tasks will be migrated after the upgrade. Stats will not be migrated.",
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate"
                },
                "all_with_deferred": {
                    "description": "Migrate all data from vCenter Server. Events, tasks, and stats will be migrated after the upgrade.",
                    "$ref": "#/definitions/vcenter.deployment.data_migration_estimate"
                }
            },
            "required": [
                "core",
                "core_events_tasks",
                "all"
            ]
        },
        "vcenter.deployment.history_migration_option": {
            "type": "string",
            "description": "The {@name HistoryMigrationOption} {@term enumerated type} defines the vCenter history migration option choices.",
            "enum": [
                "EVENTS_TASKS",
                "ALL"
            ]
        },
        "vcenter.deployment.history_migration_spec": {
            "type": "object",
            "properties": {
                "data_set": {
                    "description": "Defines what part of vCenter historical data will be migrated along with core data.",
                    "$ref": "#/definitions/vcenter.deployment.history_migration_option"
                },
                "defer_import": {
                    "description": "Defines how vCenter history will be migrated. If set to true, vCenter history will be migrated separately after successful upgrade(supported scenarios are upgrade from 6.0 or 6.5 to 6.7) or migration, otherwise it will be migrated along with core data during the upgrade or migration process. vCSA upgrade with deferred import is no longer supported for target version 7.0 and later.",
                    "type": "boolean"
                }
            },
            "required": [
                "data_set"
            ]
        },
        "vcenter.deployment.import_history.create_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the vCenter history import task",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the vCenter history import task.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "description"
            ]
        },
        "vcenter.deployment.import_history.info": {
            "type": "object",
            "properties": {
                "progress": {
                    "description": "The progress info of this task.",
                    "$ref": "#/definitions/cis.task.progress"
                },
                "result": {
                    "description": "Result of the operation. If an operation reports partial results before it completes, this {@term field} could be {@term set} before the {@link cis.task.CommonInfo#status} has the value {@link cis.task.Status#SUCCEEDED}. The value could change as the operation progresses.",
                    "$ref": "#/definitions/vcenter.deployment.notifications"
                },
                "description": {
                    "description": "Description of the operation associated with the task.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                },
                "service": {
                    "description": "Identifier of the service containing the operation.",
                    "type": "string"
                },
                "operation": {
                    "description": "Identifier of the operation associated with the task.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the current task.",
                    "type": "string"
                },
                "target": {
                    "description": "Identifier of the target created by the operation or an existing one the operation performed on.",
                    "$ref": "#/definitions/vapi.std.dynamic_ID"
                },
                "status": {
                    "description": "Status of the operation associated with the task.",
                    "$ref": "#/definitions/cis.task.status"
                },
                "cancelable": {
                    "description": "Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.",
                    "type": "boolean"
                },
                "error": {
                    "description": "Description of the error if the operation status is \"FAILED\".",
                    "type": "string"
                },
                "start_time": {
                    "description": "Time when the operation is started.",
                    "type": "string",
                    "format": "date-time"
                },
                "end_time": {
                    "description": "Time when the operation is completed.",
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "description": "Name of the user who performed the operation.",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "service",
                "operation",
                "status",
                "cancelable"
            ]
        },
        "vcenter.deployment.import_history_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.import_history.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.import_history_start": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.import_history.create_spec",
                    "description": "An optional {@name CreateSpec} info that can be passed for creating a new historical data import task and starts it."
                }
            }
        },
        "vcenter.deployment.info": {
            "type": "object",
            "properties": {
                "state": {
                    "description": "State of the vCenter Server Appliance.",
                    "$ref": "#/definitions/vcenter.deployment.appliance_state"
                },
                "progress": {
                    "description": "The progress info of the current appliance status.",
                    "$ref": "#/definitions/cis.task.progress"
                },
                "subtask_order": {
                    "description": "The ordered list of subtasks for this deployment operation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subtasks": {
                    "description": "The map of the deployment subtasks and their status infomation.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.deployment.task"
                            }
                        }
                    }
                },
                "description": {
                    "description": "Description of the operation associated with the task.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                },
                "service": {
                    "description": "Identifier of the service containing the operation.",
                    "type": "string"
                },
                "operation": {
                    "description": "Identifier of the operation associated with the task.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the current task.",
                    "type": "string"
                },
                "target": {
                    "description": "Identifier of the target created by the operation or an existing one the operation performed on.",
                    "$ref": "#/definitions/vapi.std.dynamic_ID"
                },
                "status": {
                    "description": "Status of the operation associated with the task.",
                    "$ref": "#/definitions/cis.task.status"
                },
                "cancelable": {
                    "description": "Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.",
                    "type": "boolean"
                },
                "error": {
                    "description": "Description of the error if the operation status is \"FAILED\".",
                    "type": "string"
                },
                "start_time": {
                    "description": "Time when the operation is started.",
                    "type": "string",
                    "format": "date-time"
                },
                "end_time": {
                    "description": "Time when the operation is completed.",
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "description": "Name of the user who performed the operation.",
                    "type": "string"
                }
            },
            "required": [
                "state",
                "description",
                "service",
                "operation",
                "status",
                "cancelable"
            ]
        },
        "vcenter.deployment.install.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.install.initial_config.remote_psc.thumbprint.remote_spec": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The IP address or DNS resolvable name of the remote PSC.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the remote PSC.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address"
            ]
        },
        "vcenter.deployment.install.initial_config.remote_psc.thumbprint_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.install.install_spec": {
            "type": "object",
            "properties": {
                "vcsa_embedded": {
                    "description": "Spec used to configure an embedded vCenter Server. This field describes how the embedded vCenter Server appliance should be configured.",
                    "$ref": "#/definitions/vcenter.deployment.install.vcsa_embedded_spec"
                },
                "auto_answer": {
                    "description": "Use the default option for any questions that may come up during appliance configuration.",
                    "type": "boolean"
                }
            },
            "required": [
                "vcsa_embedded"
            ]
        },
        "vcenter.deployment.install.psc.replicated.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.install.psc.replicated_check": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.replicated_psc_spec",
                    "description": "Information to configure a replicated PSC."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.install.psc.standalone.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.install.psc.standalone_check": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.standalone_psc_spec",
                    "description": "Information to configure a non-replicated PSC."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.install.remote_psc.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.install.remote_psc_check": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.remote_psc_spec",
                    "description": "Information to connect to the remote PSC."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.install.vcsa_embedded_spec": {
            "type": "object",
            "properties": {
                "standalone": {
                    "description": "Spec used to configure a standalone embedded vCenter Server. This field describes how the standalone vCenter Server appliance should be configured.",
                    "$ref": "#/definitions/vcenter.deployment.standalone_spec"
                },
                "replicated": {
                    "description": "Spec used to configure a replicated embedded vCenter Server. This field describes how the replicated vCenter Server appliance should be configured.",
                    "$ref": "#/definitions/vcenter.deployment.replicated_spec"
                },
                "ceip_enabled": {
                    "description": "Whether CEIP should be enabled or disabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "vcenter.deployment.install_check": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.install.install_spec",
                    "description": "InstallSpec parameters to run sanity check with."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.install_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.install.install_spec"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.install_start": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.install.install_spec",
                    "description": "InstallSpec parameters to configure the appliance install."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.location_spec": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the container.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the container.",
                    "type": "integer",
                    "format": "int64"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled. If {@name #sslVerify} is true and and {@name #sslThumbprint} is {@term unset}, the CA certificate will be used for verification. If {@name #sslVerify} is true and {@name #sslThumbprint} is set then the thumbprint will be used for verification. No verification will be performed if {@name #sslVerify} value is set to false.",
                    "type": "boolean"
                },
                "username": {
                    "description": "The administrator account on the host.",
                    "type": "string"
                },
                "password": {
                    "description": "The administrator account password.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "hostname",
                "username",
                "password"
            ]
        },
        "vcenter.deployment.migrate.active_directory.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.migrate.active_directory.check_spec": {
            "type": "object",
            "properties": {
                "dns_servers": {
                    "description": "IP addresses of the DNS servers of the Active Directory server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "domain": {
                    "description": "The domain name of the Active Directory server to which the migrated vCenter Server appliance should be joined.",
                    "type": "string"
                },
                "username": {
                    "description": "Active Directory user that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                },
                "password": {
                    "description": "Active Directory user password that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                }
            },
            "required": [
                "dns_servers",
                "domain",
                "username",
                "password"
            ]
        },
        "vcenter.deployment.migrate.active_directory_check": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.active_directory.check_spec",
                    "description": "Information to connect to Active Directory."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.migrate.active_directory_spec": {
            "type": "object",
            "properties": {
                "domain": {
                    "description": "The domain name of the Active Directory server to which the migrated vCenter Server appliance should be joined.",
                    "type": "string"
                },
                "username": {
                    "description": "Active Directory user that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                },
                "password": {
                    "description": "Active Directory user password that has permission to join the Active Directory after the vCenter Server is migrated to appliance.",
                    "type": "string"
                }
            },
            "required": [
                "domain",
                "username",
                "password"
            ]
        },
        "vcenter.deployment.migrate.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.migrate.migrate_spec": {
            "type": "object",
            "properties": {
                "source_vc_windows": {
                    "description": "Information specific to the Windows vCenter Server.",
                    "$ref": "#/definitions/vcenter.deployment.migrate.source_vc_windows"
                },
                "existing_migration_assistant": {
                    "description": "Information specific to the Migration Assistant that is running on the Windows vCenter Server.",
                    "$ref": "#/definitions/vcenter.deployment.migrate.migration_assistant_spec"
                },
                "history": {
                    "description": "Determines how vCenter history will be migrated during the migration process. vCenter history consists of: <ul> <li>Statistics</li> <li>Events</li> <li>Tasks</li> </ul> By default only core data will be migrated. Use this spec to define which part of vCenter history data will be migrated and when.",
                    "$ref": "#/definitions/vcenter.deployment.history_migration_spec"
                },
                "vcsa_embedded": {
                    "description": "Information specific to an embedded vCenter Server.",
                    "$ref": "#/definitions/vcenter.deployment.migrate.vcsa_embedded_spec"
                },
                "psc": {
                    "description": "Information specific to a Platform Services Controller.",
                    "$ref": "#/definitions/vcenter.deployment.migrate.psc_spec"
                },
                "active_directory": {
                    "description": "Information specific to the Active Directory server to which the source windows vCenter Server is joined.",
                    "$ref": "#/definitions/vcenter.deployment.migrate.active_directory_spec"
                },
                "auto_answer": {
                    "description": "Use the default option for any questions that may come up during appliance configuration.",
                    "type": "boolean"
                }
            },
            "required": [
                "source_vc_windows",
                "existing_migration_assistant"
            ]
        },
        "vcenter.deployment.migrate.migration_assistant_spec": {
            "type": "object",
            "properties": {
                "https_port": {
                    "description": "The HTTPS port being used by Migration Assistant.",
                    "type": "integer",
                    "format": "int64"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the Migration Assistant SSL certificate that will be used for verification.",
                    "type": "string"
                }
            },
            "required": [
                "ssl_thumbprint"
            ]
        },
        "vcenter.deployment.migrate.psc_spec": {
            "type": "object",
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this Platform Services Controller migration.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "vcenter.deployment.migrate.source_vc_windows": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the source Windows machine.",
                    "type": "string"
                },
                "username": {
                    "description": "The SSO account with administrative privilege to perform the migration operation.",
                    "type": "string"
                },
                "password": {
                    "description": "The SSO administrator account password.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "hostname",
                "username",
                "password"
            ]
        },
        "vcenter.deployment.migrate.vcsa_embedded_spec": {
            "type": "object",
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this embedded vCenter Server migration.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "vcenter.deployment.migrate_check": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.migrate_spec",
                    "description": "MigrateSpec parameters to run sanity check on."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.migrate_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.migrate_spec"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.migrate_start": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.migrate.migrate_spec",
                    "description": "MigrateSpec parameters to configure the appliance migration."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.notification": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The notification id.",
                    "type": "string"
                },
                "time": {
                    "description": "The time the notification was raised/found.",
                    "type": "string",
                    "format": "date-time"
                },
                "message": {
                    "description": "The notification message.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                },
                "resolution": {
                    "description": "The resolution message, if any.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "id",
                "message"
            ]
        },
        "vcenter.deployment.notifications": {
            "type": "object",
            "properties": {
                "info": {
                    "description": "Info notification messages reported.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.deployment.notification"
                    }
                },
                "warnings": {
                    "description": "Warning notification messages reported.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.deployment.notification"
                    }
                },
                "errors": {
                    "description": "Error notification messages reported.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.deployment.notification"
                    }
                }
            }
        },
        "vcenter.deployment.question.answer_spec": {
            "type": "object",
            "properties": {
                "question_id": {
                    "description": "Id of the question being answered.",
                    "type": "string"
                },
                "answer_val": {
                    "description": "The answer value.",
                    "type": "string"
                }
            },
            "required": [
                "question_id",
                "answer_val"
            ]
        },
        "vcenter.deployment.question.info": {
            "type": "object",
            "properties": {
                "questions": {
                    "description": "One or more questions raised during the deployment.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.deployment.question.question"
                    }
                }
            },
            "required": [
                "questions"
            ]
        },
        "vcenter.deployment.question.question": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Id of the question raised.",
                    "type": "string"
                },
                "question": {
                    "description": "Message describing the question.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                },
                "type": {
                    "description": "Type of the question raised.",
                    "$ref": "#/definitions/vcenter.deployment.question.question_type"
                },
                "default_answer": {
                    "description": "Default answer value.",
                    "type": "string"
                },
                "possible_answers": {
                    "description": "Possible answers values.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "id",
                "question",
                "type",
                "default_answer",
                "possible_answers"
            ]
        },
        "vcenter.deployment.question.question_type": {
            "type": "string",
            "description": "The {@name QuestionType} {@term enumerated type} defines the type of the question raised.",
            "enum": [
                "YES_NO",
                "OK_CANCEL",
                "ABORT_RETRY_IGNORE"
            ]
        },
        "vcenter.deployment.question_answer": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.question.answer_spec",
                    "description": "AnswerSpec with the answer to the raised question."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.question_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.question.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.remote_psc_spec": {
            "type": "object",
            "properties": {
                "psc_hostname": {
                    "description": "The IP address or DNS resolvable name of the remote PSC to which this configuring vCenter Server will be registered to.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the external PSC appliance.",
                    "type": "integer",
                    "format": "int64"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification when ssl_verify field is set to true.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled. If {@name #sslVerify} is true and and {@name #sslThumbprint} is {@term unset}, the CA certificate will be used for verification. If {@name #sslVerify} is true and {@name #sslThumbprint} is set then the thumbprint will be used for verification. No verification will be performed if {@name #sslVerify} value is set to false.",
                    "type": "boolean"
                }
            },
            "required": [
                "psc_hostname",
                "sso_admin_password"
            ]
        },
        "vcenter.deployment.replicated_psc_spec": {
            "type": "object",
            "properties": {
                "sso_site_name": {
                    "description": "The SSO sitename that will be used in PSC replication.",
                    "type": "string"
                },
                "partner_hostname": {
                    "description": "The IP address or DNS resolvable name of the partner PSC appliance.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the external PSC appliance.",
                    "type": "integer",
                    "format": "int64"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "partner_hostname",
                "sso_admin_password"
            ]
        },
        "vcenter.deployment.replicated_spec": {
            "type": "object",
            "properties": {
                "partner_hostname": {
                    "description": "The IP address or DNS resolvable name of the partner PSC appliance.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the external PSC appliance.",
                    "type": "integer",
                    "format": "int64"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "partner_hostname",
                "sso_admin_password"
            ]
        },
        "vcenter.deployment.source_info": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the source vCenter Server.",
                    "type": "string"
                },
                "version": {
                    "description": "Source vCenter Server version.",
                    "type": "string"
                },
                "deployment_type": {
                    "description": "Deployment type of the source vCenter Server.",
                    "$ref": "#/definitions/vcenter.deployment.appliance_type"
                },
                "deployment_size": {
                    "description": "Deployment size of the source vCenter Server.",
                    "$ref": "#/definitions/vcenter.deployment.appliance_size"
                },
                "sso_domain_name": {
                    "description": "The SSO domain name of the source vCenter Server.",
                    "type": "string"
                },
                "active_directory_domain": {
                    "description": "The domain name of the Active Directory server to which the source vCenter Server is joined.",
                    "type": "string"
                },
                "dns_servers": {
                    "description": "IP addresses of the DNS servers of the Active Directory server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "data_migration_info": {
                    "description": "Contains all the available migrate options, estimated export and import time and the space required to migrate the data.",
                    "$ref": "#/definitions/vcenter.deployment.data_migration_info"
                }
            },
            "required": [
                "hostname",
                "version",
                "deployment_type",
                "deployment_size",
                "sso_domain_name",
                "active_directory_domain",
                "dns_servers"
            ]
        },
        "vcenter.deployment.standalone_psc_spec": {
            "type": "object",
            "properties": {
                "sso_site_name": {
                    "description": "The SSO site name used for this PSC.",
                    "type": "string"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "sso_domain_name": {
                    "description": "The SSO domain name to be used to configure this appliance.",
                    "type": "string"
                }
            },
            "required": [
                "sso_admin_password"
            ]
        },
        "vcenter.deployment.standalone_spec": {
            "type": "object",
            "properties": {
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string"
                },
                "sso_domain_name": {
                    "description": "The SSO domain name to be used to configure this appliance.",
                    "type": "string"
                }
            },
            "required": [
                "sso_admin_password"
            ]
        },
        "vcenter.deployment.task": {
            "type": "object",
            "properties": {
                "progress": {
                    "description": "The progress info of this deployment task.",
                    "$ref": "#/definitions/cis.task.progress"
                },
                "result": {
                    "description": "Result of the task.",
                    "$ref": "#/definitions/vcenter.deployment.notifications"
                },
                "description": {
                    "description": "Description of the operation associated with the task.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                },
                "service": {
                    "description": "Identifier of the service containing the operation.",
                    "type": "string"
                },
                "operation": {
                    "description": "Identifier of the operation associated with the task.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the current task.",
                    "type": "string"
                },
                "target": {
                    "description": "Identifier of the target created by the operation or an existing one the operation performed on.",
                    "$ref": "#/definitions/vapi.std.dynamic_ID"
                },
                "status": {
                    "description": "Status of the operation associated with the task.",
                    "$ref": "#/definitions/cis.task.status"
                },
                "cancelable": {
                    "description": "Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.",
                    "type": "boolean"
                },
                "error": {
                    "description": "Description of the error if the operation status is \"FAILED\".",
                    "type": "string"
                },
                "start_time": {
                    "description": "Time when the operation is started.",
                    "type": "string",
                    "format": "date-time"
                },
                "end_time": {
                    "description": "Time when the operation is completed.",
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "description": "Name of the user who performed the operation.",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "service",
                "operation",
                "status",
                "cancelable"
            ]
        },
        "vcenter.deployment.upgrade.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.check_info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.upgrade.psc_spec": {
            "type": "object",
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this Platform Services Controller upgrade.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "vcenter.deployment.upgrade.source_appliance_spec": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the source appliance.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPS port of the source appliance.",
                    "type": "integer",
                    "format": "int64"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 thumbprint of the server SSL certificate will be used for verification.",
                    "type": "string"
                },
                "ssl_verify": {
                    "description": "SSL verification should be enabled or disabled for the source appliance validations. By default it is enabled and will use SSL certificate for verification. If thumbprint is provided, will use thumbprint for the verification.",
                    "type": "boolean"
                },
                "sso_admin_username": {
                    "description": "The SSO administrator account on the source appliance.",
                    "type": "string"
                },
                "sso_admin_password": {
                    "description": "The SSO administrator account password.",
                    "type": "string",
                    "format": "password"
                },
                "root_password": {
                    "description": "The password of the root user on the source appliance.",
                    "type": "string",
                    "format": "password"
                },
                "ssh_verify": {
                    "description": "Appliance SSH verification should be enabled or disabled. By default it is disabled and will not use any verification. If thumbprint is provided, thumbprint verification will be performed.",
                    "type": "boolean"
                },
                "ssh_thumbprint": {
                    "description": "MD5 thumbprint of the server SSH key will be used for verification.",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "sso_admin_username",
                "sso_admin_password",
                "root_password"
            ]
        },
        "vcenter.deployment.upgrade.upgrade_spec": {
            "type": "object",
            "properties": {
                "source_appliance": {
                    "description": "Source appliance spec.",
                    "$ref": "#/definitions/vcenter.deployment.upgrade.source_appliance_spec"
                },
                "source_location": {
                    "description": "Source location spec.",
                    "$ref": "#/definitions/vcenter.deployment.location_spec"
                },
                "history": {
                    "description": "Determines how vCenter history will be migrated during the upgrade process. vCenter history consists of: <ul> <li>Statistics</li> <li>Events</li> <li>Tasks</li> </ul> By default only core data will be migrated. Use this spec to define which part of vCenter history data will be migrated and when.",
                    "$ref": "#/definitions/vcenter.deployment.history_migration_spec"
                },
                "vcsa_embedded": {
                    "description": "Information that are specific to this embedded vCenter Server.",
                    "$ref": "#/definitions/vcenter.deployment.upgrade.vcsa_embedded_spec"
                },
                "psc": {
                    "description": "Information that are specific to this Platform Services Controller.",
                    "$ref": "#/definitions/vcenter.deployment.upgrade.psc_spec"
                },
                "auto_answer": {
                    "description": "Use the default option for any questions that may come up during appliance configuration.",
                    "type": "boolean"
                }
            },
            "required": [
                "source_appliance",
                "source_location"
            ]
        },
        "vcenter.deployment.upgrade.vcsa_embedded_spec": {
            "type": "object",
            "properties": {
                "ceip_enabled": {
                    "description": "Customer experience improvement program should be enabled or disabled for this embedded vCenter Server upgrade.",
                    "type": "boolean"
                }
            },
            "required": [
                "ceip_enabled"
            ]
        },
        "vcenter.deployment.upgrade_check": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.upgrade.upgrade_spec",
                    "description": "UpgradeSpec parameters to run sanity check on."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment.upgrade_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.upgrade.upgrade_spec"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.deployment.upgrade_start": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.upgrade.upgrade_spec",
                    "description": "UpgradeSpec parameters to configure the appliance upgrade."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.deployment_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.deployment.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.folder.filter_spec": {
            "type": "object",
            "properties": {
                "folders": {
                    "description": "Identifiers of folders that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that folders must have to match the filter (see {@link Summary#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Type that folders must have to match the filter (see {@link Summary#type}).",
                    "$ref": "#/definitions/vcenter.folder.type"
                },
                "parent_folders": {
                    "description": "Folders that must contain the folder for the folder to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the folder for the folder to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.folder.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.folder.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.folder.summary": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Identifier of the folder.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the vCenter Server folder.",
                    "type": "string"
                },
                "type": {
                    "description": "Type ({@enum.values Type}) of the vCenter Server folder.",
                    "$ref": "#/definitions/vcenter.folder.type"
                }
            },
            "required": [
                "folder",
                "name",
                "type"
            ]
        },
        "vcenter.folder.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the type of a vCenter Server folder.  The type of a folder determines what what kinds of children can be contained in the folder.",
            "enum": [
                "DATACENTER",
                "DATASTORE",
                "HOST",
                "NETWORK",
                "VIRTUAL_MACHINE"
            ]
        },
        "vcenter.guest.IP_settings": {
            "type": "object",
            "properties": {
                "ipv4": {
                    "description": "Specification to configure IPv4 address, subnet mask and gateway info for this virtual network adapter.",
                    "$ref": "#/definitions/vcenter.guest.ipv4"
                },
                "ipv6": {
                    "description": "Specification to configure IPv6 address, subnet mask and gateway info for this virtual network adapter.",
                    "$ref": "#/definitions/vcenter.guest.ipv6"
                },
                "windows": {
                    "description": "Windows settings to be configured for this specific virtual Network adapter. This is valid only for Windows guest operating systems.",
                    "$ref": "#/definitions/vcenter.guest.windows_network_adapter_settings"
                }
            }
        },
        "vcenter.guest.adapter_mapping": {
            "type": "object",
            "properties": {
                "mac_address": {
                    "description": "The MAC address of a network adapter being customized.",
                    "type": "string"
                },
                "adapter": {
                    "description": "The IP settings for the associated virtual network adapter.",
                    "$ref": "#/definitions/vcenter.guest.IP_settings"
                }
            },
            "required": [
                "adapter"
            ]
        },
        "vcenter.guest.configuration_spec": {
            "type": "object",
            "properties": {
                "windows_config": {
                    "description": "Guest customization specification for a Windows guest operating system",
                    "$ref": "#/definitions/vcenter.guest.windows_configuration"
                },
                "linux_config": {
                    "description": "Guest customization specification for a linux guest operating system",
                    "$ref": "#/definitions/vcenter.guest.linux_configuration"
                }
            }
        },
        "vcenter.guest.customization_spec": {
            "type": "object",
            "properties": {
                "configuration_spec": {
                    "description": "Settings to be applied to the guest during the customization.",
                    "$ref": "#/definitions/vcenter.guest.configuration_spec"
                },
                "global_DNS_settings": {
                    "description": "Global DNS settings constitute the DNS settings that are not specific to a particular virtual network adapter.",
                    "$ref": "#/definitions/vcenter.guest.global_DNS_settings"
                },
                "interfaces": {
                    "description": "IP settings that are specific to a particular virtual network adapter. The {@link AdapterMapping} {@term structure} maps a network adapter's MAC address to its {@link IPSettings}. May be empty if there are no network adapters, else should match number of network adapters configured for the VM.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.guest.adapter_mapping"
                    }
                }
            },
            "required": [
                "configuration_spec",
                "global_DNS_settings",
                "interfaces"
            ]
        },
        "vcenter.guest.customization_specs.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.guest.customization_specs.create_spec": {
            "type": "object",
            "properties": {
                "spec": {
                    "description": "The specification object.",
                    "$ref": "#/definitions/vcenter.guest.customization_spec"
                },
                "description": {
                    "description": "Description of the specification.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the specification.",
                    "type": "string"
                }
            },
            "required": [
                "spec",
                "description",
                "name"
            ]
        },
        "vcenter.guest.customization_specs.export_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.guest.customization_specs.filter_spec": {
            "type": "object",
            "properties": {
                "names": {
                    "description": "Names that guest customization specifications must have to match the filter (see {@link Summary#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "OS_type": {
                    "description": "Guest operating system type that guest customization specifications must have to match the filter (see {@link Summary#osType}).",
                    "$ref": "#/definitions/vcenter.guest.customization_specs.os_type"
                }
            }
        },
        "vcenter.guest.customization_specs.format": {
            "type": "string",
            "description": "The {@name Format} {@term enumerated type} specifies the formats the customization specification can be exported to.",
            "enum": [
                "JSON",
                "XML"
            ]
        },
        "vcenter.guest.customization_specs.import_specification_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.create_spec"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.guest.customization_specs.info": {
            "type": "object",
            "properties": {
                "last_modified": {
                    "description": "Time when the specification was last modified.",
                    "type": "string",
                    "format": "date-time"
                },
                "spec": {
                    "description": "The Spec object including specification and metadata information.",
                    "$ref": "#/definitions/vcenter.guest.customization_specs.spec"
                }
            },
            "required": [
                "last_modified",
                "spec"
            ]
        },
        "vcenter.guest.customization_specs.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.guest.customization_specs.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.guest.customization_specs.os_type": {
            "type": "string",
            "description": "The {@name OsType} {@term enumerated type} defines the types of guest operating systems for which guest customization is supported.",
            "enum": [
                "WINDOWS",
                "LINUX"
            ]
        },
        "vcenter.guest.customization_specs.spec": {
            "type": "object",
            "properties": {
                "fingerprint": {
                    "description": "The fingerprint is a unique identifier for a given version of the configuration. Each change to the configuration will update this value. A client cannot change this value. If specified when updating a specification, the changes will only be applied if the current fingerprint matches the specified fingerprint. This field can be used to guard against updates that has happened between the specification content was read and until it is applied.",
                    "type": "string"
                },
                "spec": {
                    "description": "The specification object.",
                    "$ref": "#/definitions/vcenter.guest.customization_spec"
                },
                "description": {
                    "description": "Description of the specification.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the specification.",
                    "type": "string"
                }
            },
            "required": [
                "fingerprint",
                "spec",
                "description",
                "name"
            ]
        },
        "vcenter.guest.customization_specs.summary": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the guest customization specification.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the guest customization specification.",
                    "type": "string"
                },
                "OS_type": {
                    "description": "Guest operating system type for which that this guest customization specification applies.",
                    "$ref": "#/definitions/vcenter.guest.customization_specs.os_type"
                },
                "last_modified": {
                    "description": "Date and tme when this guest customization specification was last modified.",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "name",
                "description",
                "OS_type",
                "last_modified"
            ]
        },
        "vcenter.guest.customization_specs_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.create_spec",
                    "description": "The information i.e. name, description and the settings i.e hostname, ip address etc for the new customization specification that needs to be created."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.guest.customization_specs_export": {
            "type": "object",
            "properties": {
                "format": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.format",
                    "description": "The format in which the customization specification has to be returned."
                }
            },
            "required": [
                "format"
            ]
        },
        "vcenter.guest.customization_specs_import_specification": {
            "type": "object",
            "properties": {
                "customization_spec": {
                    "type": "string",
                    "description": "content to be converted to the spec."
                }
            },
            "required": [
                "customization_spec"
            ]
        },
        "vcenter.guest.customization_specs_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.guest.customization_specs_set": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.guest.customization_specs.spec",
                    "description": "The new specification that will overwrite the existing specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.guest.domain": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of network to join after the customization.",
                    "$ref": "#/definitions/vcenter.guest.domain.type"
                },
                "workgroup": {
                    "description": "The workgroup that the virtual machine should join.",
                    "type": "string"
                },
                "domain": {
                    "description": "The domain to which the virtual machine should be joined.",
                    "type": "string"
                },
                "domain_username": {
                    "description": "The domain user that has permission to join the domain after virtual machine is joined.",
                    "type": "string"
                },
                "domain_password": {
                    "description": "The domain user password that has permission to join the {@link Domain#domainUsername} after customization.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.guest.domain.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the types of network the virtual machine should join to after the customization is completed.",
            "enum": [
                "WORKGROUP",
                "DOMAIN"
            ]
        },
        "vcenter.guest.global_DNS_settings": {
            "type": "object",
            "properties": {
                "dns_suffix_list": {
                    "description": "List of name resolution suffixes for the virtual network adapter. This list applies to both Windows and Linux guest customization. For Linux, this setting is global, whereas in Windows, this setting is listed on a per-adapter basis.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dns_servers": {
                    "description": "List of DNS servers, for a virtual network adapter with a static IP address. If this list is empty, then the guest operating system is expected to use a DHCP server to get its DNS server settings. These settings configure the virtual machine to use the specified DNS servers. These DNS server settings are listed in the order of preference.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.guest.gui_unattended": {
            "type": "object",
            "properties": {
                "auto_logon": {
                    "description": "Flag to determine whether or not the machine automatically logs on as Administrator. See the {@link GuiUnattended#password} property. If {@link GuiUnattended#autoLogon} flag is set, then {@link GuiUnattended#password} must not be {@term unset} or the guest customization will fail.",
                    "type": "boolean"
                },
                "auto_logon_count": {
                    "description": "If the {@link GuiUnattended#autoLogon} flag is {@term set}, then this property specifies the number of times the machine should automatically log on as Administrator. Generally it should be 1, but if the setup requires a number of reboots, you may want to increase it. This number may be determined by the list of commands.",
                    "type": "integer",
                    "format": "int64"
                },
                "password": {
                    "description": "The new administrator password for the machine. To specify that the password should be set to blank (that is, no password), leave it unset.",
                    "type": "string",
                    "format": "password"
                },
                "time_zone": {
                    "description": "The time zone index for the virtual machine. Numbers correspond to time zones at https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "auto_logon",
                "auto_logon_count",
                "time_zone"
            ]
        },
        "vcenter.guest.hostname_generator": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of the Name Generator",
                    "$ref": "#/definitions/vcenter.guest.hostname_generator.type"
                },
                "fixed_name": {
                    "description": "The virtual machine name specified by the client.",
                    "type": "string"
                },
                "prefix": {
                    "description": "Base prefix, to which a unique number is appended.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.guest.hostname_generator.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} specifies different types of Name Generators.",
            "enum": [
                "FIXED",
                "PREFIX",
                "VIRTUAL_MACHINE",
                "USER_INPUT_REQUIRED"
            ]
        },
        "vcenter.guest.ipv4": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of the IPv4 configuration.",
                    "$ref": "#/definitions/vcenter.guest.ipv4.type"
                },
                "ip_address": {
                    "description": "The static IPv4 address",
                    "type": "string"
                },
                "prefix": {
                    "description": "The IPv4 CIDR prefix, for example, 24.  See http://www.oav.net/mirrors/cidr.html for netmask-to-prefix conversion.",
                    "type": "integer",
                    "format": "int64"
                },
                "gateways": {
                    "description": "Gateways for the IPv4 address.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.guest.ipv4.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} specifies different types of the IPv4 configuration.",
            "enum": [
                "DHCP",
                "STATIC",
                "USER_INPUT_REQUIRED"
            ]
        },
        "vcenter.guest.ipv6": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The IPv6 configuration type",
                    "$ref": "#/definitions/vcenter.guest.ipv6.type"
                },
                "ipv6": {
                    "description": "IPv6 address",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.guest.ipv6_address"
                    }
                },
                "gateways": {
                    "description": "gateways for the IPv6 address.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.guest.ipv6.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} specifies different types of the IPv6 configuration.",
            "enum": [
                "DHCP",
                "STATIC",
                "USER_INPUT_REQUIRED"
            ]
        },
        "vcenter.guest.ipv6_address": {
            "type": "object",
            "properties": {
                "ip_address": {
                    "description": "Static IPv6 Address.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix for the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "ip_address",
                "prefix"
            ]
        },
        "vcenter.guest.linux_configuration": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The network host name of the Linux virtual machine.",
                    "$ref": "#/definitions/vcenter.guest.hostname_generator"
                },
                "domain": {
                    "description": "The fully qualified domain name.",
                    "type": "string"
                },
                "time_zone": {
                    "description": "The case-sensitive time zone, such as Europe/Sofia. Valid time zone values are based on the tz (time zone) database used by Linux. The values are strings ({@term string}) in the form \"Area/Location,\" in which Area is a continent or ocean name, and Location is the city, island, or other regional designation. <p> See the https://kb.vmware.com/kb/2145518 for a list of supported time zones for different versions in Linux.",
                    "type": "string"
                },
                "script_text": {
                    "description": "The script to run before and after Linux guest customization.<br> The max size of the script is 1500 bytes. As long as the script (shell, perl, python...) has the right \"#!\" in the header, it is supported. The caller should not assume any environment variables when the script is run. <p> The script is invoked by the customization engine using the command line: 1) with argument \"precustomization\" before customization, 2) with argument \"postcustomization\" after customization. The script should parse this argument and implement pre-customization or post-customization task code details in the corresponding block. <p> A Linux shell script example: <p> <code> #!/bin/sh<br> if [ x$1 == x\"precustomization\" ]; then<br> echo \"Do Precustomization tasks\"<br> #code for pre-customization actions...<br> elif [ x$1 == x\"postcustomization\" ]; then<br> echo \"Do Postcustomization tasks\"<br> #code for post-customization actions...<br> fi<br> </code>",
                    "type": "string"
                }
            },
            "required": [
                "hostname",
                "domain"
            ]
        },
        "vcenter.guest.user_data": {
            "type": "object",
            "properties": {
                "computer_name": {
                    "description": "The computer name of the (Windows) virtual machine. A computer name may contain letters (A-Z), numbers(0-9) and hyphens (-) but no spaces or periods (.). The name may not consist entirely of digits. A computer name is restricted to 15 characters in length. If the computer name is longer than 15 characters, it will be truncated to 15 characters. Check {@link HostnameGenerator} for various options.",
                    "$ref": "#/definitions/vcenter.guest.hostname_generator"
                },
                "full_name": {
                    "description": "Full name of the end user. Note that this is not the username but full name specified in \"Firstname Lastname\" format.",
                    "type": "string"
                },
                "organization": {
                    "description": "Name of the organization that owns the computer.",
                    "type": "string"
                },
                "product_key": {
                    "description": "The product Key to use for activating Windows guest operating system.",
                    "type": "string"
                }
            },
            "required": [
                "computer_name",
                "full_name",
                "organization",
                "product_key"
            ]
        },
        "vcenter.guest.windows_configuration": {
            "type": "object",
            "properties": {
                "reboot": {
                    "description": "A value specifying the action that should be taken after customization.",
                    "$ref": "#/definitions/vcenter.guest.windows_configuration.reboot_option"
                },
                "sysprep": {
                    "description": "Customization settings like user details, administrator details, etc for the windows guest operating system. Exactly one of {@name #sysprep} or {@name #sysprepXml} must be specified.",
                    "$ref": "#/definitions/vcenter.guest.windows_sysprep"
                },
                "sysprep_xml": {
                    "description": "All settings specified in a XML format. This is the content of a typical answer.xml file that is used by System administrators during the Windows image customization. Check https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs Exactly one of {@name #sysprep} or {@name #sysprepXml} must be specified.",
                    "type": "string"
                }
            }
        },
        "vcenter.guest.windows_configuration.reboot_option": {
            "type": "string",
            "description": "The {@name RebootOption} {@term enumerated type} specifies what should be done to the guest after the customization.",
            "enum": [
                "REBOOT",
                "NO_REBOOT",
                "SHUTDOWN"
            ]
        },
        "vcenter.guest.windows_network_adapter_settings": {
            "type": "object",
            "properties": {
                "dns_servers": {
                    "description": "A list of server IP addresses to use for DNS lookup in a Windows guest operating system. <p> These servers should be specified in the order of preference. If this list is not empty, and if a DHCP IP address is used, then these settings override the DHCP settings.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dns_domain": {
                    "description": "A DNS domain suffix such as vmware.com.",
                    "type": "string"
                },
                "wins_servers": {
                    "description": "List of WINS Servers to set for the Windows guest operating system. A Maximum of two IP addresses can be specified in this list. The first IP address will be set as the primary WINS server. The second IP address will be set as the secondary WINS server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "net_BIOS_mode": {
                    "description": "NetBIOS setting for Windows.",
                    "$ref": "#/definitions/vcenter.guest.windows_network_adapter_settings.net_BIOS_mode"
                }
            }
        },
        "vcenter.guest.windows_network_adapter_settings.net_BIOS_mode": {
            "type": "string",
            "description": "The {@name NetBIOSMode} {@term enumerated type} specifies different NetBIOS settings for Windows guest operating systems.",
            "enum": [
                "USE_DHCP",
                "ENABLE",
                "DISABLE"
            ]
        },
        "vcenter.guest.windows_sysprep": {
            "type": "object",
            "properties": {
                "gui_run_once_commands": {
                    "description": "A list of commands to run at first user logon, after customizing the guest. These commands are directly mapped to the GuiRunOnce key in the sysprep.xml answer file. These commands are transferred into the sysprep.xml file that VirtualCenter stores on the target virtual disk. For more information about performing unattended installation, check https://technet.microsoft.com/en-us/library/cc771830(v=ws.10).aspx The commands listed here ar executed when a user logs on the first time after customization completes. The logon may be driven by {@link GuiUnattended#autoLogon} setting. These commands are directly mapped to the GuiRunOnce key in the",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_data": {
                    "description": "Personal data pertaining to the owner of the virtual machine.",
                    "$ref": "#/definitions/vcenter.guest.user_data"
                },
                "domain": {
                    "description": "Information needed to join a workgroup or domain.",
                    "$ref": "#/definitions/vcenter.guest.domain"
                },
                "gui_unattended": {
                    "description": "Information related to unattended installation.",
                    "$ref": "#/definitions/vcenter.guest.gui_unattended"
                }
            },
            "required": [
                "user_data",
                "gui_unattended"
            ]
        },
        "vcenter.host.connection_state": {
            "type": "string",
            "enum": [
                "CONNECTED",
                "DISCONNECTED",
                "NOT_RESPONDING"
            ]
        },
        "vcenter.host.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.host.create_spec": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "The IP address or DNS resolvable name of the host.",
                    "type": "string"
                },
                "port": {
                    "description": "The port of the host.",
                    "type": "integer",
                    "format": "int64"
                },
                "user_name": {
                    "description": "The administrator account on the host.",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the administrator account on the host.",
                    "type": "string",
                    "format": "password"
                },
                "folder": {
                    "description": "Host and cluster folder in which the new standalone host should be created.",
                    "type": "string"
                },
                "thumbprint_verification": {
                    "description": "Type of host's SSL certificate verification to be done.",
                    "$ref": "#/definitions/vcenter.host.create_spec.thumbprint_verification"
                },
                "thumbprint": {
                    "description": "The thumbprint of the SSL certificate, which the host is expected to have. The thumbprint is always computed using the SHA1 hash and is the string representation of that hash in the format: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx where, 'x' represents a hexadecimal digit.",
                    "type": "string"
                },
                "force_add": {
                    "description": "Whether host should be added to the vCenter Server even if it is being managed by another vCenter Server. The original vCenterServer loses connection to the host.",
                    "type": "boolean"
                }
            },
            "required": [
                "hostname",
                "user_name",
                "password",
                "thumbprint_verification"
            ]
        },
        "vcenter.host.create_spec.thumbprint_verification": {
            "type": "string",
            "description": "The {@name ThumbprintVerification} {@term enumerated type} defines the thumbprint verification schemes for a host's SSL certificate.",
            "enum": [
                "NONE",
                "THUMBPRINT"
            ]
        },
        "vcenter.host.filter_spec": {
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "Identifiers of hosts that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that hosts must have to match the filter (see {@link Summary#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the hosts for the hosts to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the hosts for the hosts to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "standalone": {
                    "description": "If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter.",
                    "type": "boolean"
                },
                "clusters": {
                    "description": "Clusters that must contain the hosts for the hosts to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "connection_states": {
                    "description": "Connection states that a host must be in to match the filter (see {@link Summary#connectionState}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/vcenter.host.connection_state"
                    }
                }
            }
        },
        "vcenter.host.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.host.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.host.power_state": {
            "type": "string",
            "description": "The {@name PowerState} {@term enumerated type} defines the power states of a host.",
            "enum": [
                "POWERED_ON",
                "POWERED_OFF",
                "STANDBY"
            ]
        },
        "vcenter.host.summary": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Identifier of the host.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the host.",
                    "type": "string"
                },
                "connection_state": {
                    "description": "Connection status of the host",
                    "$ref": "#/definitions/vcenter.host.connection_state"
                },
                "power_state": {
                    "description": "Power state of the host",
                    "$ref": "#/definitions/vcenter.host.power_state"
                }
            },
            "required": [
                "host",
                "name",
                "connection_state"
            ]
        },
        "vcenter.host_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.host.create_spec",
                    "description": "Specification for the new host to be created."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.hvc.links.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.hvc.links.create_spec": {
            "type": "object",
            "properties": {
                "psc_hostname": {
                    "description": "The PSC hostname for the domain to be linked. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "port": {
                    "description": "The HTTPS port of the PSC to be linked. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "domain_name": {
                    "description": "The domain to which the PSC belongs. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "username": {
                    "description": "The administrator username of the PSC. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "password": {
                    "description": "The administrator password of the PSC. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string",
                    "format": "password"
                },
                "ssl_thumbprint": {
                    "description": "The ssl thumbprint of the server. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "admin_groups": {
                    "description": "List of groups to be added to enable administrator access to. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "psc_hostname",
                "domain_name",
                "username",
                "password"
            ]
        },
        "vcenter.hvc.links.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.hvc.links.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.hvc.links.summary": {
            "type": "object",
            "properties": {
                "link": {
                    "description": "Unique identifier for the link. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                },
                "display_name": {
                    "description": "The display name is set to the domain name which was set during create. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                }
            },
            "required": [
                "link",
                "display_name"
            ]
        },
        "vcenter.hvc.links.sync.providers.info": {
            "type": "object",
            "properties": {
                "last_sync_time": {
                    "description": "Last sync time for the provider. This indicates the last time that either a background sync or a force sync was started for the provider *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "description": "Last Sync status for the provider. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "$ref": "#/definitions/vcenter.hvc.links.sync.providers.status"
                },
                "polling_interval_in_seconds": {
                    "description": "Sync Polling interval between local and remote replicas for the provider *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "integer",
                    "format": "int64"
                },
                "current_session_info": {
                    "description": "Returns information on the forced sync for the provider. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "$ref": "#/definitions/vcenter.hvc.links.sync.providers.session_info"
                },
                "status_message": {
                    "description": "Localizable messages associated with sync status *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "status",
                "polling_interval_in_seconds"
            ]
        },
        "vcenter.hvc.links.sync.providers.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.hvc.links.sync.providers.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.hvc.links.sync.providers.session_info": {
            "type": "object",
            "properties": {
                "stage": {
                    "description": "Sync stage for the session. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "$ref": "#/definitions/vcenter.hvc.links.sync.providers.session_info.stage"
                },
                "completed_work": {
                    "description": "Completed work for the session. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "integer",
                    "format": "int64"
                },
                "total_work": {
                    "description": "Total work for the session. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "integer",
                    "format": "int64"
                },
                "completion_time": {
                    "description": "Time at which forced sync session was completed. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "description": "Time at which force sync was initiated. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string",
                    "format": "date-time"
                },
                "exception": {
                    "description": "Exception  message if there is a sync failure on forced sync. *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "stage",
                "completed_work",
                "total_work",
                "start_time"
            ]
        },
        "vcenter.hvc.links.sync.providers.session_info.stage": {
            "type": "string",
            "description": "The {@name Stage} {@term structure} defines the different stages of Sync. *Warning:* This enumeration is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
            "enum": [
                "CHANGE_DETECTION",
                "CHANGE_ENUMERATION",
                "CHANGE_APPLICATION",
                "COMPLETED",
                "FAILED",
                "WAITING"
            ]
        },
        "vcenter.hvc.links.sync.providers.status": {
            "type": "string",
            "description": "The {@name Status} {@term enumerated type} defines valid sync status. *Warning:* This enumeration is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
            "enum": [
                "SUCCEEDED",
                "FAILED",
                "NO_SYNC_FOUND"
            ]
        },
        "vcenter.hvc.links.sync.providers.summary": {
            "type": "object",
            "properties": {
                "provider": {
                    "description": "Sync provider id *Warning:* This attribute is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.",
                    "type": "string"
                }
            },
            "required": [
                "provider"
            ]
        },
        "vcenter.hvc.links.sync.providers_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.hvc.links.sync.providers.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.hvc.links_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.hvc.links.create_spec",
                    "description": "Specification for the new link to be created."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.hvc.management.administrators_add": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string",
                    "description": "Name of the new group to be added. Ex - xyz@abc.com where xyz is the group name and abc.com is the domain name"
                }
            },
            "required": [
                "group_name"
            ]
        },
        "vcenter.hvc.management.administrators_remove": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string",
                    "description": "Name of the group to be removed. Ex - xyz@abc.com where xyz is the group name and abc.com is the domain name"
                }
            },
            "required": [
                "group_name"
            ]
        },
        "vcenter.hvc.management.administrators_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.hvc.management.administrators_set": {
            "type": "object",
            "properties": {
                "group_names": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "Names the groups to be in the CloudAdminGroup Ex - xyz@abc.com where xyz is the group name and abc.com is the domain name"
                }
            },
            "required": [
                "group_names"
            ]
        },
        "vcenter.identity.providers.active_directory_over_ldap": {
            "type": "object",
            "properties": {
                "user_name": {
                    "description": "User name to connect to the active directory server.",
                    "type": "string"
                },
                "password": {
                    "description": "Password to connect to the active directory server.",
                    "type": "string",
                    "format": "password"
                },
                "users_base_dn": {
                    "description": "Base distinguished name for users",
                    "type": "string"
                },
                "groups_base_dn": {
                    "description": "Base distinguished name for groups",
                    "type": "string"
                },
                "server_endpoints": {
                    "description": "Active directory server endpoints. At least one active directory server endpoint must be set.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "cert_chain": {
                    "description": "SSL certificate chain in base64 encoding.",
                    "$ref": "#/definitions/vcenter.certificate_management.x509_cert_chain"
                }
            },
            "required": [
                "user_name",
                "password",
                "users_base_dn",
                "groups_base_dn",
                "server_endpoints"
            ]
        },
        "vcenter.identity.providers.config_type": {
            "type": "string",
            "description": "The {@name ConfigType} {@term structure} contains the possible types of vCenter Server identity providers.",
            "enum": [
                "Oauth2",
                "Oidc"
            ]
        },
        "vcenter.identity.providers.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.identity.providers.create_spec": {
            "type": "object",
            "properties": {
                "config_tag": {
                    "description": "The config type of the identity provider",
                    "$ref": "#/definitions/vcenter.identity.providers.config_type"
                },
                "oauth2": {
                    "description": "OAuth2 CreateSpec",
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_create_spec"
                },
                "oidc": {
                    "description": "OIDC CreateSpec",
                    "$ref": "#/definitions/vcenter.identity.providers.oidc_create_spec"
                },
                "org_ids": {
                    "description": "The set of orgIds as part of SDDC creation which provides the basis for tenancy",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "is_default": {
                    "description": "Specifies whether the provider is the default provider. Setting {@name CreateSpec#isDefault} of current provider to True makes all other providers non-default. If no other providers created in this vCenter Server before, this parameter will be disregarded, and the provider will always be set to the default.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The user friendly name for the provider. This name can be used for human-readable identification purposes, but it does not have to be unique, as the system will use internal UUIDs to differentiate providers.",
                    "type": "string"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "idm_protocol": {
                    "description": "Communication protocol to the identity management endpoints.",
                    "$ref": "#/definitions/vcenter.identity.providers.idm_protocol"
                },
                "idm_endpoints": {
                    "description": "Identity management endpoints. When specified, at least one endpoint must be provided.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "active_directory_over_ldap": {
                    "description": "Identity management configuration. If the protocol is LDAP, the configuration must be set, else InvalidArgument is thrown.",
                    "$ref": "#/definitions/vcenter.identity.providers.active_directory_over_ldap"
                },
                "upn_claim": {
                    "description": "Specifies which claim provides the user principal name (UPN) for the user.",
                    "type": "string"
                },
                "groups_claim": {
                    "description": "Specifies which claim provides the group membership for the token subject. These groups will be used for mapping to local groups per the claim map.",
                    "type": "string"
                }
            },
            "required": [
                "config_tag"
            ]
        },
        "vcenter.identity.providers.idm_protocol": {
            "type": "string",
            "description": "The {@name IdmProtocol} {@term structure} contains the possible types of communication protocols to the identity management endpoints.",
            "enum": [
                "REST",
                "SCIM",
                "SCIM2_0",
                "LDAP"
            ]
        },
        "vcenter.identity.providers.info": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The user friendly name for the provider",
                    "type": "string"
                },
                "org_ids": {
                    "description": "The set of orgIds as part of SDDC creation which provides the basis for tenancy",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "config_tag": {
                    "description": "The config type of the identity provider",
                    "$ref": "#/definitions/vcenter.identity.providers.config_type"
                },
                "oauth2": {
                    "description": "OAuth2 Info",
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_info"
                },
                "oidc": {
                    "description": "OIDC Info",
                    "$ref": "#/definitions/vcenter.identity.providers.oidc_info"
                },
                "is_default": {
                    "description": "Specifies whether the provider is the default provider.",
                    "type": "boolean"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains. If domainNames is an empty set, domain validation behavior at login with this identity provider will be as follows: the user's domain will be parsed from the User Principal Name (UPN) value that is found in the tokens returned by the identity provider. This domain will then be implicitly trusted and used to filter any groups that are also provided in the tokens.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "idm_protocol": {
                    "description": "Communication protocol to the identity management endpoints.",
                    "$ref": "#/definitions/vcenter.identity.providers.idm_protocol"
                },
                "idm_endpoints": {
                    "description": "Identity management endpoints.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "active_directory_over_ldap": {
                    "description": "Identity management configuration.",
                    "$ref": "#/definitions/vcenter.identity.providers.active_directory_over_ldap"
                },
                "upn_claim": {
                    "description": "Specifies which claim provides the user principal name (UPN) for the user.",
                    "type": "string"
                },
                "groups_claim": {
                    "description": "Specifies which claim provides the group membership for the token subject. If empty, the default behavior for CSP is used. In this case, the groups for the subject will be comprised of the groups in 'group_names' and 'group_ids' claims.",
                    "type": "string"
                }
            },
            "required": [
                "org_ids",
                "config_tag",
                "is_default"
            ]
        },
        "vcenter.identity.providers.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.identity.providers.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.identity.providers.oauth2_authentication_method": {
            "type": "string",
            "description": "The {@name Oauth2AuthenticationMethod} {@term structure} contains the possible types of OAuth2 authentication methods.",
            "enum": [
                "CLIENT_SECRET_BASIC",
                "CLIENT_SECRET_POST",
                "CLIENT_SECRET_JWT",
                "PRIVATE_KEY_JWT"
            ]
        },
        "vcenter.identity.providers.oauth2_create_spec": {
            "type": "object",
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token.",
                    "type": "string"
                },
                "authentication_method": {
                    "description": "Authentication method used by the provider",
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_authentication_method"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "public_key_uri",
                "client_id",
                "client_secret",
                "claim_map",
                "issuer",
                "authentication_method"
            ]
        },
        "vcenter.identity.providers.oauth2_info": {
            "type": "object",
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                    "type": "string"
                },
                "authentication_method": {
                    "description": "Authentication method used by the provider",
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_authentication_method"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "public_key_uri",
                "client_id",
                "client_secret",
                "claim_map",
                "issuer",
                "authentication_method",
                "auth_query_params"
            ]
        },
        "vcenter.identity.providers.oauth2_summary": {
            "type": "object",
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "authentication_header": {
                    "description": "The authentication data used as part of request header to acquire or refresh an OAuth2 token. The data format depends on the authentication method used. Example of basic authentication format: Authorization: Basic [base64Encode(clientId + \":\" + secret)]",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "client_id",
                "authentication_header",
                "auth_query_params"
            ]
        },
        "vcenter.identity.providers.oauth2_update_spec": {
            "type": "object",
            "properties": {
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider.",
                    "type": "string",
                    "format": "uri"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "Shared secret between identity provider and client",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                    "type": "string"
                },
                "authentication_method": {
                    "description": "Authentication method used by the provider",
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_authentication_method"
                },
                "auth_query_params": {
                    "description": "key/value pairs that are to be appended to the authEndpoint request. How to append to authEndpoint request: If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details: If the value contains only one string, then the key is added with \"k=v\". If the value is an empty list, then the key is added without a \"=v\". If the value contains multiple strings, then the key is repeated in the query-string for each string in the value. If the map is empty, deletes all params.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "vcenter.identity.providers.oidc_create_spec": {
            "type": "object",
            "properties": {
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "required": [
                "discovery_endpoint",
                "client_id",
                "client_secret",
                "claim_map"
            ]
        },
        "vcenter.identity.providers.oidc_info": {
            "type": "object",
            "properties": {
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "type": "string",
                    "format": "uri"
                },
                "logout_endpoint": {
                    "description": "The endpoint to use for terminating the user's session at the identity provider. This value is automatically derived from the metadata information provided by the OIDC discovery endpoint.",
                    "type": "string",
                    "format": "uri"
                },
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "public_key_uri": {
                    "description": "Endpoint to retrieve the provider public key for validation",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "issuer": {
                    "description": "The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token",
                    "type": "string"
                },
                "authentication_method": {
                    "description": "Authentication method used by the provider",
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_authentication_method"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "required": [
                "discovery_endpoint",
                "auth_endpoint",
                "token_endpoint",
                "public_key_uri",
                "client_id",
                "client_secret",
                "claim_map",
                "issuer",
                "authentication_method",
                "auth_query_params"
            ]
        },
        "vcenter.identity.providers.oidc_summary": {
            "type": "object",
            "properties": {
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "type": "string",
                    "format": "uri"
                },
                "logout_endpoint": {
                    "description": "The endpoint to use for terminating the user's session at the identity provider. This value is automatically derived from the metadata information provided by the OIDC discovery endpoint.",
                    "type": "string",
                    "format": "uri"
                },
                "auth_endpoint": {
                    "description": "Authentication/authorization endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "token_endpoint": {
                    "description": "Token endpoint of the provider",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "authentication_header": {
                    "description": "The authentication data used as part of request header to acquire or refresh an OAuth2 token. The data format depends on the authentication method used. Example of basic authentication format: Authorization: Basic [base64Encode(clientId + \":\" + secret)]",
                    "type": "string"
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "required": [
                "auth_endpoint",
                "token_endpoint",
                "client_id",
                "authentication_header",
                "auth_query_params"
            ]
        },
        "vcenter.identity.providers.oidc_update_spec": {
            "type": "object",
            "properties": {
                "discovery_endpoint": {
                    "description": "Endpoint to retrieve the provider metadata",
                    "type": "string",
                    "format": "uri"
                },
                "client_id": {
                    "description": "Client identifier to connect to the provider",
                    "type": "string"
                },
                "client_secret": {
                    "description": "The secret shared between the client and the provider",
                    "type": "string"
                },
                "claim_map": {
                    "description": "The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "vcenter.identity.providers.summary": {
            "type": "object",
            "properties": {
                "provider": {
                    "description": "The identifier of the provider",
                    "type": "string"
                },
                "name": {
                    "description": "The user friendly name for the provider",
                    "type": "string"
                },
                "config_tag": {
                    "description": "The config type of the identity provider",
                    "$ref": "#/definitions/vcenter.identity.providers.config_type"
                },
                "oauth2": {
                    "description": "OAuth2 Summary",
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_summary"
                },
                "oidc": {
                    "description": "OIDC Summary",
                    "$ref": "#/definitions/vcenter.identity.providers.oidc_summary"
                },
                "is_default": {
                    "description": "Specifies whether the provider is the default provider.",
                    "type": "boolean"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains. If domainNames is an empty set, domain validation behavior at login with this identity provider will be as follows: the user's domain will be parsed from the User Principal Name (UPN) value that is found in the tokens returned by the identity provider. This domain will then be implicitly trusted and used to filter any groups that are also provided in the tokens.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "auth_query_params": {
                    "description": "<p>key/value pairs that are to be appended to the authEndpoint request.</p> <p>How to append to authEndpoint request:</p> If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details:<ul> <li>If the value contains only one string, then the key is added with \"k=v\".</li> <li>If the value is an empty list, then the key is added without a \"=v\".</li> <li>If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.</li></ul>",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "required": [
                "provider",
                "config_tag",
                "is_default"
            ]
        },
        "vcenter.identity.providers.update_spec": {
            "type": "object",
            "properties": {
                "config_tag": {
                    "description": "The config type of the identity provider",
                    "$ref": "#/definitions/vcenter.identity.providers.config_type"
                },
                "oauth2": {
                    "description": "OAuth2 UpdateSpec",
                    "$ref": "#/definitions/vcenter.identity.providers.oauth2_update_spec"
                },
                "oidc": {
                    "description": "OIDC UpdateSpec",
                    "$ref": "#/definitions/vcenter.identity.providers.oidc_update_spec"
                },
                "org_ids": {
                    "description": "The set orgIds as part of SDDC creation which provides the basis for tenancy",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "make_default": {
                    "description": "Specifies whether to make this the default provider. If {@name UpdateSpec#makeDefault} is set to true, this provider will be flagged as the default provider and any other providers that had previously been flagged as the default will be made non-default. If {@name UpdateSpec#makeDefault} is set to false, this provider's default flag will not be modified.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The user friendly name for the provider. This name can be used for human-readable identification purposes, but it does not have to be unique, as the system will use internal UUIDs to differentiate providers.",
                    "type": "string"
                },
                "domain_names": {
                    "description": "Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "auth_query_params": {
                    "description": "key/value pairs that are to be appended to the authEndpoint request. How to append to authEndpoint request: If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details: If the value contains only one string, then the key is added with \"k=v\". If the value is an empty list, then the key is added without a \"=v\". If the value contains multiple strings, then the key is repeated in the query-string for each string in the value. If the map is empty, deletes all params.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "idm_protocol": {
                    "description": "The protocol to communicate to the identity management endpoints",
                    "$ref": "#/definitions/vcenter.identity.providers.idm_protocol"
                },
                "idm_endpoints": {
                    "description": "Identity management endpoints. When specified, at least one endpoint must be provided.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "active_directory_over_ldap": {
                    "description": "Identity management configuration. If the protocol is LDAP, the configuration must be set, else InvalidArgument is thrown",
                    "$ref": "#/definitions/vcenter.identity.providers.active_directory_over_ldap"
                },
                "upn_claim": {
                    "description": "Specifies which claim provides the user principal name (UPN) for the subject of the token.",
                    "type": "string"
                },
                "reset_upn_claim": {
                    "description": "Flag indicating whether the user principal name (UPN) claim should be set back to its default value. If this field is set to {@code true}, the user principal name (UPN) claim will be set to 'acct', which is used for backwards compatibility with CSP. If this field is set to {@code false}, the existing user principal name (UPN) claim will be changed to the value specified in {@link #upnClaim}, if any.",
                    "type": "boolean"
                },
                "groups_claim": {
                    "description": "Specifies which claim provides the group membership for the token subject.",
                    "type": "string"
                },
                "reset_groups_claim": {
                    "description": "Flag indicating whether any existing groups claim value should be removed. If this field is set to {@code true}, the existing groups claim value is removed which defaults to backwards compatibility with CSP. In this case, the groups for the subject will be comprised of the groups in 'group_names' and 'group_ids' claims. If this field is set to {@code false}, the existing groups claim will be changed to the value specified in {@link #groupsClaim}, if any.",
                    "type": "boolean"
                }
            },
            "required": [
                "config_tag"
            ]
        },
        "vcenter.identity.providers_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.identity.providers.create_spec",
                    "description": "the CreateSpec contains the information used to create the provider"
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.identity.providers_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.identity.providers.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.identity.providers_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.identity.providers.update_spec",
                    "description": "the UpdateSpec contains the information used to update the provider"
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.inventory.datastore.find_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.inventory.datastore.info"
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.inventory.datastore.info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of the datastore.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.inventory.datastore_find": {
            "type": "object",
            "properties": {
                "datastores": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identifiers of the datastores for which information will be returned."
                }
            },
            "required": [
                "datastores"
            ]
        },
        "vcenter.inventory.network.find_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.inventory.network.info"
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.inventory.network.info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of the vCenter Server network.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.inventory.network_find": {
            "type": "object",
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identifiers of the vCenter Server networks for which information will be returned."
                }
            },
            "required": [
                "networks"
            ]
        },
        "vcenter.iso.image.mount_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.iso.image_mount": {
            "type": "object",
            "properties": {
                "vm": {
                    "type": "string",
                    "description": "The identifier of the virtual machine where the specified ISO image will be mounted."
                }
            },
            "required": [
                "vm"
            ]
        },
        "vcenter.iso.image_unmount": {
            "type": "object",
            "properties": {
                "cdrom": {
                    "type": "string",
                    "description": "The device identifier of the CD-ROM."
                }
            },
            "required": [
                "cdrom"
            ]
        },
        "vcenter.network.filter_spec": {
            "type": "object",
            "properties": {
                "networks": {
                    "description": "Identifiers of networks that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that networks must have to match the filter (see {@link Summary#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "types": {
                    "description": "Types that networks must have to match the filter (see {@link Summary#type}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/vcenter.network.type"
                    }
                },
                "folders": {
                    "description": "Folders that must contain the network for the network to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the network for the network to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.network.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.network.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.network.summary": {
            "type": "object",
            "properties": {
                "network": {
                    "description": "Identifier of the network.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the network.",
                    "type": "string"
                },
                "type": {
                    "description": "Type ({@enum.values Type}) of the vCenter Server network.",
                    "$ref": "#/definitions/vcenter.network.type"
                }
            },
            "required": [
                "network",
                "name",
                "type"
            ]
        },
        "vcenter.network.type": {
            "type": "string",
            "enum": [
                "STANDARD_PORTGROUP",
                "DISTRIBUTED_PORTGROUP",
                "OPAQUE_NETWORK"
            ]
        },
        "vcenter.ovf.disk_provisioning_type": {
            "type": "string",
            "description": "The {@name DiskProvisioningType} {@term enumerated type} defines the virtual disk provisioning types that can be set for a disk on the target platform.",
            "enum": [
                "thin",
                "thick",
                "eagerZeroedThick"
            ]
        },
        "vcenter.ovf.export_flag.info": {
            "type": "object",
            "properties": {
                "option": {
                    "description": "The name of the export flag that is supported by the server.",
                    "type": "string"
                },
                "description": {
                    "description": "Localizable description of the export flag.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "option",
                "description"
            ]
        },
        "vcenter.ovf.export_flag.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.ovf.export_flag.info"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.ovf.import_flag.info": {
            "type": "object",
            "properties": {
                "option": {
                    "description": "The name of the import flag that is supported by the deployment platform.",
                    "type": "string"
                },
                "description": {
                    "description": "Localizable description of the import flag.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "option",
                "description"
            ]
        },
        "vcenter.ovf.import_flag.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.ovf.import_flag.info"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.ovf.library_item.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.ovf.library_item.create_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.ovf.library_item.create_result": {
            "type": "object",
            "properties": {
                "succeeded": {
                    "description": "Whether the {@name LibraryItem#create} {@term operation} completed successfully.",
                    "type": "boolean"
                },
                "ovf_library_item_id": {
                    "description": "Identifier of the created or updated library item.",
                    "type": "string"
                },
                "error": {
                    "description": "Errors, warnings, and informational messages produced by the {@name LibraryItem#create} {@term operation}.",
                    "$ref": "#/definitions/vcenter.ovf.library_item.result_info"
                }
            },
            "required": [
                "succeeded"
            ]
        },
        "vcenter.ovf.library_item.create_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name to use in the OVF descriptor stored in the library item.",
                    "type": "string"
                },
                "description": {
                    "description": "Description to use in the OVF descriptor stored in the library item.",
                    "type": "string"
                },
                "flags": {
                    "description": "Flags to use for OVF package creation. The supported flags can be obtained using {@link ExportFlag#list}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.ovf.library_item.create_target": {
            "type": "object",
            "properties": {
                "library_id": {
                    "description": "Identifier of the library in which a new library item should be created. This {@term field} is not used if the {@name #libraryItemId} {@term field} is specified.",
                    "type": "string"
                },
                "library_item_id": {
                    "description": "Identifier of the library item that should be should be updated.",
                    "type": "string"
                }
            }
        },
        "vcenter.ovf.library_item.deploy_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.ovf.library_item.deployment_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.ovf.library_item.deployable_identity": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of the deployable resource.",
                    "type": "string"
                },
                "id": {
                    "description": "Identifier of the deployable resource.",
                    "type": "string"
                }
            },
            "required": [
                "type",
                "id"
            ]
        },
        "vcenter.ovf.library_item.deployment_result": {
            "type": "object",
            "properties": {
                "succeeded": {
                    "description": "Whether the {@name LibraryItem#deploy} {@term operation} completed successfully.",
                    "type": "boolean"
                },
                "resource_id": {
                    "description": "Identifier of the deployed resource entity.",
                    "$ref": "#/definitions/vcenter.ovf.library_item.deployable_identity"
                },
                "error": {
                    "description": "Errors, warnings, and informational messages produced by the {@name LibraryItem#deploy} {@term operation}.",
                    "$ref": "#/definitions/vcenter.ovf.library_item.result_info"
                }
            },
            "required": [
                "succeeded"
            ]
        },
        "vcenter.ovf.library_item.deployment_target": {
            "type": "object",
            "properties": {
                "resource_pool_id": {
                    "description": "Identifier of the resource pool to which the virtual machine or virtual appliance should be attached.",
                    "type": "string"
                },
                "host_id": {
                    "description": "Identifier of the target host on which the virtual machine or virtual appliance will run. The target host must be a member of the cluster that contains the resource pool identified by {@link #resourcePoolId}.",
                    "type": "string"
                },
                "folder_id": {
                    "description": "Identifier of the vCenter folder that should contain the virtual machine or virtual appliance. The folder must be virtual machine folder.",
                    "type": "string"
                }
            },
            "required": [
                "resource_pool_id"
            ]
        },
        "vcenter.ovf.library_item.filter_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.ovf.library_item.ovf_summary"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.ovf.library_item.ovf_summary": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Default name for the virtual machine or virtual appliance.",
                    "type": "string"
                },
                "annotation": {
                    "description": "Default annotation for the virtual machine or virtual appliance.",
                    "type": "string"
                },
                "EULAs": {
                    "description": "End User License Agreements specified in the OVF descriptor. All end user license agreements must be accepted in order for the {@name LibraryItem#deploy} {@term operation} to succeed. See {@link ResourcePoolDeploymentSpec#acceptAllEula}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networks": {
                    "description": "Section identifiers for sections of type ovf:NetworkSection in the OVF descriptor. These identifiers can be used as keys in {@link ResourcePoolDeploymentSpec#networkMappings}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "storage_groups": {
                    "description": "Section identifiers for sections of type vmw:StorageGroupSection in the OVF descriptor. These identifiers can be used as keys in {@link ResourcePoolDeploymentSpec#storageMappings}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "additional_params": {
                    "description": "Additional OVF parameters which can be specified for the deployment target. These OVF parameters can be inspected, optionally modified, and used as values in {@link ResourcePoolDeploymentSpec#additionalParameters} for the {@name LibraryItem#deploy} {@term operation}.",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            },
            "required": [
                "EULAs"
            ]
        },
        "vcenter.ovf.library_item.resource_pool_deployment_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name assigned to the deployed target virtual machine or virtual appliance.",
                    "type": "string"
                },
                "annotation": {
                    "description": "Annotation assigned to the deployed target virtual machine or virtual appliance.",
                    "type": "string"
                },
                "accept_all_EULA": {
                    "description": "Whether to accept all End User License Agreements. See {@link OvfSummary#eulas}.",
                    "type": "boolean"
                },
                "network_mappings": {
                    "description": "Specification of the target network to use for sections of type ovf:NetworkSection in the OVF descriptor. The key in the {@term map} is the section identifier of the ovf:NetworkSection section in the OVF descriptor and the value is the target network to be used for deployment.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                },
                "storage_mappings": {
                    "description": "Specification of the target storage to use for sections of type vmw:StorageGroupSection in the OVF descriptor. The key in the {@term map} is the section identifier of the ovf:StorageGroupSection section in the OVF descriptor and the value is the target storage specification to be used for deployment. See {@link StorageGroupMapping}.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.ovf.library_item.storage_group_mapping"
                            }
                        }
                    }
                },
                "storage_provisioning": {
                    "description": "Default storage provisioning type to use for all sections of type vmw:StorageSection in the OVF descriptor.",
                    "$ref": "#/definitions/vcenter.ovf.disk_provisioning_type"
                },
                "storage_profile_id": {
                    "description": "Default storage profile to use for all sections of type vmw:StorageSection in the OVF descriptor.",
                    "type": "string"
                },
                "locale": {
                    "description": "The locale to use for parsing the OVF descriptor.",
                    "type": "string"
                },
                "flags": {
                    "description": "Flags to be use for deployment. The supported flag values can be obtained using {@link ImportFlag#list}.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "additional_parameters": {
                    "description": "Additional OVF parameters that may be needed for the deployment. Additional OVF parameters may be required by the OVF descriptor of the OVF package in the library item. Examples of OVF parameters that can be specified through this {@term field} include, but are not limited to: <ul> <li>{@link DeploymentOptionParams}</li> <li>{@link ExtraConfigParams}</li> <li>{@link IpAllocationParams}</li> <li>{@link PropertyParams}</li> <li>{@link ScaleOutParams}</li> <li>{@link VcenterExtensionParams}</li> </ul>",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "default_datastore_id": {
                    "description": "Default datastore to use for all sections of type vmw:StorageSection in the OVF descriptor.",
                    "type": "string"
                }
            },
            "required": [
                "accept_all_EULA"
            ]
        },
        "vcenter.ovf.library_item.result_info": {
            "type": "object",
            "properties": {
                "errors": {
                    "description": "Errors reported by the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation}. These errors would have prevented the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation} from completing successfully.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.ovf.ovf_error"
                    }
                },
                "warnings": {
                    "description": "Warnings reported by the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation}. These warnings would not have prevented the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation} from completing successfully, but there might be issues that warrant attention.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.ovf.ovf_warning"
                    }
                },
                "information": {
                    "description": "Information messages reported by the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation}. For example, a non-required parameter was ignored.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.ovf.ovf_info"
                    }
                }
            },
            "required": [
                "errors",
                "warnings",
                "information"
            ]
        },
        "vcenter.ovf.library_item.storage_group_mapping": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of storage deployment target to use for the vmw:StorageGroupSection section. The specified value must be {@link Type#DATASTORE} or {@link Type#STORAGE_PROFILE}.",
                    "$ref": "#/definitions/vcenter.ovf.library_item.storage_group_mapping.type"
                },
                "datastore_id": {
                    "description": "Target datastore to be used for the storage group.",
                    "type": "string"
                },
                "storage_profile_id": {
                    "description": "Target storage profile to be used for the storage group.",
                    "type": "string"
                },
                "provisioning": {
                    "description": "Target provisioning type to use for the storage group.",
                    "$ref": "#/definitions/vcenter.ovf.disk_provisioning_type"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.ovf.library_item.storage_group_mapping.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the supported types of storage targets for sections of type vmw:StorageGroupSection in the OVF descriptor.",
            "enum": [
                "DATASTORE",
                "STORAGE_PROFILE"
            ]
        },
        "vcenter.ovf.library_item_create": {
            "type": "object",
            "properties": {
                "client_token": {
                    "type": "string",
                    "description": "Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried."
                },
                "source": {
                    "$ref": "#/definitions/vcenter.ovf.library_item.deployable_identity",
                    "description": "Identifier of the virtual machine or virtual appliance to use as the source."
                },
                "target": {
                    "$ref": "#/definitions/vcenter.ovf.library_item.create_target",
                    "description": "Specification of the target content library and library item."
                },
                "create_spec": {
                    "$ref": "#/definitions/vcenter.ovf.library_item.create_spec",
                    "description": "Information used to create the OVF package from the source virtual machine or virtual appliance."
                }
            },
            "required": [
                "source",
                "target",
                "create_spec"
            ]
        },
        "vcenter.ovf.library_item_deploy": {
            "type": "object",
            "properties": {
                "client_token": {
                    "type": "string",
                    "description": "Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried."
                },
                "target": {
                    "$ref": "#/definitions/vcenter.ovf.library_item.deployment_target",
                    "description": "Specification of the deployment target."
                },
                "deployment_spec": {
                    "$ref": "#/definitions/vcenter.ovf.library_item.resource_pool_deployment_spec",
                    "description": "Specification of how the OVF package should be deployed to the target."
                }
            },
            "required": [
                "target",
                "deployment_spec"
            ]
        },
        "vcenter.ovf.library_item_filter": {
            "type": "object",
            "properties": {
                "target": {
                    "$ref": "#/definitions/vcenter.ovf.library_item.deployment_target",
                    "description": "Specification of the deployment target."
                }
            },
            "required": [
                "target"
            ]
        },
        "vcenter.ovf.ovf_error": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "The message category.",
                    "$ref": "#/definitions/vcenter.ovf.ovf_message.category"
                },
                "issues": {
                    "description": "{@term List} of parse issues (see {@link ParseIssue}).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.ovf.parse_issue"
                    }
                },
                "name": {
                    "description": "The name of input parameter.",
                    "type": "string"
                },
                "value": {
                    "description": "The value of input parameter.",
                    "type": "string"
                },
                "message": {
                    "description": "A localizable message.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                },
                "error": {
                    "description": "Represents a server {@link Error}.",
                    "type": "object"
                }
            },
            "required": [
                "category"
            ]
        },
        "vcenter.ovf.ovf_info": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "A {@term list} of localizable messages (see {@link LocalizableMessage}).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                }
            },
            "required": [
                "messages"
            ]
        },
        "vcenter.ovf.ovf_message.category": {
            "type": "string",
            "description": "The {@name Category} {@term enumerated type} defines the categories of messages (see {@link OvfMessage}).",
            "enum": [
                "VALIDATION",
                "INPUT",
                "SERVER"
            ]
        },
        "vcenter.ovf.ovf_warning": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "The message category.",
                    "$ref": "#/definitions/vcenter.ovf.ovf_message.category"
                },
                "issues": {
                    "description": "{@term List} of parse issues (see {@link ParseIssue}).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.ovf.parse_issue"
                    }
                },
                "name": {
                    "description": "The name of input parameter.",
                    "type": "string"
                },
                "value": {
                    "description": "The value of input parameter.",
                    "type": "string"
                },
                "message": {
                    "description": "A localizable message.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                },
                "error": {
                    "description": "Represents a server {@link Error}.",
                    "type": "object"
                }
            },
            "required": [
                "category"
            ]
        },
        "vcenter.ovf.parse_issue": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "The category of the parse issue.",
                    "$ref": "#/definitions/vcenter.ovf.parse_issue.category"
                },
                "file": {
                    "description": "The name of the file in which the parse issue was found.",
                    "type": "string"
                },
                "line_number": {
                    "description": "The line number of the line in the file (see {@link #file}) where the parse issue was found (or -1 if not applicable).",
                    "type": "integer",
                    "format": "int64"
                },
                "column_number": {
                    "description": "The position in the line (see {@link #lineNumber}) (or -1 if not applicable).",
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "description": "A localizable message describing the parse issue.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "category",
                "file",
                "line_number",
                "column_number",
                "message"
            ]
        },
        "vcenter.ovf.parse_issue.category": {
            "type": "string",
            "description": "The {@name Category} {@term enumerated type} defines the categories of issues that can be found when parsing files inside an OVF package (see {@link ParseIssue}) including OVF descriptor (which is an XML document), manifest and certificate files, or exporting an OVF package.",
            "enum": [
                "VALUE_ILLEGAL",
                "ATTRIBUTE_REQUIRED",
                "ATTRIBUTE_ILLEGAL",
                "ELEMENT_REQUIRED",
                "ELEMENT_ILLEGAL",
                "ELEMENT_UNKNOWN",
                "SECTION_UNKNOWN",
                "SECTION_RESTRICTION",
                "PARSE_ERROR",
                "GENERATE_ERROR",
                "VALIDATION_ERROR",
                "EXPORT_ERROR",
                "INTERNAL_ERROR"
            ]
        },
        "vcenter.resource_pool.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.resource_pool.create_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the resource pool.",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent of the created resource pool.",
                    "type": "string"
                },
                "cpu_allocation": {
                    "description": "Resource allocation for CPU.",
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_create_spec"
                },
                "memory_allocation": {
                    "description": "Resource allocation for memory.",
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_create_spec"
                }
            },
            "required": [
                "name",
                "parent"
            ]
        },
        "vcenter.resource_pool.filter_spec": {
            "type": "object",
            "properties": {
                "resource_pools": {
                    "description": "Identifiers of resource pools that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names that resource pools must have to match the filter (see {@link Info#name}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "parent_resource_pools": {
                    "description": "Resource pools that must contain the resource pool for the resource pool to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "datacenters": {
                    "description": "Datacenters that must contain the resource pool for the resource pool to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "hosts": {
                    "description": "Hosts that must contain the resource pool for the resource pool to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "clusters": {
                    "description": "Clusters that must contain the resource pool for the resource pool to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.resource_pool.info": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the vCenter Server resource pool.",
                    "type": "string"
                },
                "resource_pools": {
                    "description": "Identifiers of the child resource pools contained in this resource pool.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "cpu_allocation": {
                    "description": "Resource allocation information for CPU.",
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_info"
                },
                "memory_allocation": {
                    "description": "Resource allocation information for memory.",
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_info"
                }
            },
            "required": [
                "name",
                "resource_pools"
            ]
        },
        "vcenter.resource_pool.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.resource_pool.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.resource_pool.resource_allocation_create_spec": {
            "type": "object",
            "properties": {
                "reservation": {
                    "description": "Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "expandable_reservation": {
                    "description": "In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "shares": {
                    "description": "Shares are used in case of resource contention.",
                    "$ref": "#/definitions/vcenter.resource_pool.shares_info"
                }
            }
        },
        "vcenter.resource_pool.resource_allocation_info": {
            "type": "object",
            "properties": {
                "reservation": {
                    "description": "Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "expandable_reservation": {
                    "description": "In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "shares": {
                    "description": "Shares are used in case of resource contention.",
                    "$ref": "#/definitions/vcenter.resource_pool.shares_info"
                }
            },
            "required": [
                "reservation",
                "expandable_reservation",
                "limit",
                "shares"
            ]
        },
        "vcenter.resource_pool.resource_allocation_update_spec": {
            "type": "object",
            "properties": {
                "reservation": {
                    "description": "Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "expandable_reservation": {
                    "description": "In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU.",
                    "type": "integer",
                    "format": "int64"
                },
                "shares": {
                    "description": "Shares are used in case of resource contention.",
                    "$ref": "#/definitions/vcenter.resource_pool.shares_info"
                }
            }
        },
        "vcenter.resource_pool.shares_info": {
            "type": "object",
            "properties": {
                "level": {
                    "description": "The allocation level. It maps to a pre-determined set of numeric values for shares. If the shares value does not map to a predefined size, then the level is set as CUSTOM.",
                    "$ref": "#/definitions/vcenter.resource_pool.shares_info.level"
                },
                "shares": {
                    "description": "When {@link #level} is set to CUSTOM, it is the number of shares allocated. Otherwise, this value is ignored. <p> There is no unit for this value. It is a relative measure based on the settings for other resource pools.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "level"
            ]
        },
        "vcenter.resource_pool.shares_info.level": {
            "type": "string",
            "description": "The {@name Level} {@term enumerated type} defines the possible values for the allocation level.",
            "enum": [
                "LOW",
                "NORMAL",
                "HIGH",
                "CUSTOM"
            ]
        },
        "vcenter.resource_pool.summary": {
            "type": "object",
            "properties": {
                "resource_pool": {
                    "description": "Identifier of the resource pool.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the resource pool.",
                    "type": "string"
                }
            },
            "required": [
                "resource_pool",
                "name"
            ]
        },
        "vcenter.resource_pool.update_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the resource pool.",
                    "type": "string"
                },
                "cpu_allocation": {
                    "description": "Resource allocation for CPU.",
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_update_spec"
                },
                "memory_allocation": {
                    "description": "Resource allocation for memory.",
                    "$ref": "#/definitions/vcenter.resource_pool.resource_allocation_update_spec"
                }
            }
        },
        "vcenter.resource_pool_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.resource_pool.create_spec",
                    "description": "Specification of the new resource pool to be created, see {@link CreateSpec}."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.resource_pool_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.resource_pool.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.resource_pool_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.resource_pool.update_spec",
                    "description": "Specification for updating the configuration of the resource pool."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.services.service.health": {
            "type": "string",
            "description": "The {@name Health} {@term enumerated type} defines the possible values for health of a service.",
            "enum": [
                "DEGRADED",
                "HEALTHY",
                "HEALTHY_WITH_WARNINGS"
            ]
        },
        "vcenter.services.service.info": {
            "type": "object",
            "properties": {
                "name_key": {
                    "description": "Service name key. Can be used to lookup resource bundle",
                    "type": "string"
                },
                "description_key": {
                    "description": "Service description key. Can be used to lookup resource bundle",
                    "type": "string"
                },
                "startup_type": {
                    "description": "Startup Type.",
                    "$ref": "#/definitions/vcenter.services.service.startup_type"
                },
                "state": {
                    "description": "Running State.",
                    "$ref": "#/definitions/vcenter.services.service.state"
                },
                "health": {
                    "description": "Health of service.",
                    "$ref": "#/definitions/vcenter.services.service.health"
                },
                "health_messages": {
                    "description": "Localizable messages associated with the health of the service",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                }
            },
            "required": [
                "name_key",
                "description_key",
                "startup_type",
                "state"
            ]
        },
        "vcenter.services.service.list_details_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.services.service.info"
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.services.service.startup_type": {
            "type": "string",
            "description": "The {@name StartupType} {@term enumerated type} defines valid Startup Type for vCenter Server services.",
            "enum": [
                "MANUAL",
                "AUTOMATIC",
                "DISABLED"
            ]
        },
        "vcenter.services.service.state": {
            "type": "string",
            "description": "The {@name State} {@term enumerated type} defines valid Run State for services.",
            "enum": [
                "STARTING",
                "STOPPING",
                "STARTED",
                "STOPPED"
            ]
        },
        "vcenter.services.service.update_spec": {
            "type": "object",
            "properties": {
                "startup_type": {
                    "description": "Startup Type",
                    "$ref": "#/definitions/vcenter.services.service.startup_type"
                }
            }
        },
        "vcenter.services.service_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.services.service.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.services.service_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.services.service.update_spec",
                    "description": "Service Update specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.storage.policies.VM.info": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Flag to indicate whether or not the virtual machine home is associated with the given storage policy.",
                    "type": "boolean"
                },
                "disks": {
                    "description": "List of the virtual disks that are associated with the given storage policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "vm_home",
                "disks"
            ]
        },
        "vcenter.storage.policies.VM.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.storage.policies.VM.info"
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.storage.policies.check_compatibility_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.storage.policies.compatibility_info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.storage.policies.compatibility_info": {
            "type": "object",
            "properties": {
                "compatible_datastores": {
                    "description": "Info about a list of datastores compatible with a specific storage policy.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.compatible_datastore_info"
                    }
                }
            },
            "required": [
                "compatible_datastores"
            ]
        },
        "vcenter.storage.policies.compatible_datastore_info": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore.",
                    "type": "string"
                }
            },
            "required": [
                "datastore"
            ]
        },
        "vcenter.storage.policies.compliance.VM.filter_spec": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Compliance Status that a virtual machine must have to match the filter. Atleast one status must be specified.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.status"
                    }
                },
                "vms": {
                    "description": "Identifiers of virtual machines that can match the filter",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "status"
            ]
        },
        "vcenter.storage.policies.compliance.VM.info": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Compliance status of the virtual machine home.",
                    "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.status"
                },
                "disks": {
                    "description": "A Map of virtual disks and their compliance status If empty, the virtual machine does not have any disks or its disks are not associated with a storage policy.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.status"
                            }
                        }
                    }
                }
            },
            "required": [
                "disks"
            ]
        },
        "vcenter.storage.policies.compliance.VM.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.storage.policies.compliance.VM.info"
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.storage.policies.compliance.VM.status": {
            "type": "string",
            "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNKNOWN_COMPLIANCE",
                "NOT_APPLICABLE",
                "OUT_OF_DATE"
            ]
        },
        "vcenter.storage.policies.compliance.filter_spec": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Compliance Status that a virtual machine must have to match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.compliance.status"
                    }
                }
            },
            "required": [
                "status"
            ]
        },
        "vcenter.storage.policies.compliance.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.compliance.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.storage.policies.compliance.status": {
            "type": "string",
            "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNKNOWN",
                "NOT_APPLICABLE",
                "OUT_OF_DATE"
            ]
        },
        "vcenter.storage.policies.compliance.summary": {
            "type": "object",
            "properties": {
                "vm": {
                    "description": "Identifier of virtual machine",
                    "type": "string"
                },
                "vm_home": {
                    "description": "Compliance status of the virtual machine home.",
                    "$ref": "#/definitions/vcenter.storage.policies.compliance.status"
                },
                "disks": {
                    "description": "List of the virtual hard disk.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.storage.policies.compliance.status"
                            }
                        }
                    }
                }
            },
            "required": [
                "vm"
            ]
        },
        "vcenter.storage.policies.filter_spec": {
            "type": "object",
            "properties": {
                "policies": {
                    "description": "Identifiers of storage policies that can match the filter.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.storage.policies.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.storage.policies.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.storage.policies.summary": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the storage policy.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the storage policy.",
                    "type": "string"
                }
            },
            "required": [
                "policy",
                "name",
                "description"
            ]
        },
        "vcenter.storage.policies_check_compatibility": {
            "type": "object",
            "properties": {
                "datastores": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "Datastores used to check compatibility against a storage policy. The number of datastores is limited to 1024."
                }
            },
            "required": [
                "datastores"
            ]
        },
        "vcenter.system_config.deployment_type.info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of the appliance.",
                    "$ref": "#/definitions/vcenter.deployment.appliance_type"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.system_config.deployment_type.reconfigure_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of the appliance.",
                    "$ref": "#/definitions/vcenter.deployment.appliance_type"
                },
                "remote_psc": {
                    "description": "External PSC to register with when reconfiguring a VCSA_EMBEDDED appliance to a VCSA_EXTERNAL appliance.",
                    "$ref": "#/definitions/vcenter.deployment.remote_psc_spec"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.system_config.deployment_type_reconfigure": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.system_config.deployment_type.reconfigure_spec",
                    "description": "ReconfigureSpec to set the appliance type."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.system_config.deployment_type_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.system_config.deployment_type.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.system_config.psc_registration.info": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The IP address or DNS resolvable name of the PSC this appliance is registered with.",
                    "type": "string"
                },
                "https_port": {
                    "description": "The HTTPs port used by the external PSC.",
                    "type": "integer",
                    "format": "int64"
                },
                "sso_domain": {
                    "description": "The Single Sign-On domain name of the external PSC.",
                    "type": "string"
                }
            },
            "required": [
                "address",
                "https_port",
                "sso_domain"
            ]
        },
        "vcenter.system_config.psc_registration_repoint": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.deployment.remote_psc_spec",
                    "description": "RemotePscSpec structure containing information about the external PSC node to repoint this vCenter Server appliance to."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.system_config.psc_registration_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.system_config.psc_registration.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.tokenservice.invalid_grant": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vcenter.tokenservice.invalid_grant_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vcenter.tokenservice.invalid_grant"
                }
            }
        },
        "vcenter.tokenservice.invalid_request": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vcenter.tokenservice.invalid_request_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vcenter.tokenservice.invalid_request"
                }
            }
        },
        "vcenter.tokenservice.invalid_scope": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vcenter.tokenservice.invalid_scope_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vcenter.tokenservice.invalid_scope"
                }
            }
        },
        "vcenter.tokenservice.token_exchange.exchange_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.tokenservice.token_exchange.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.tokenservice.token_exchange.exchange_spec": {
            "type": "object",
            "properties": {
                "grant_type": {
                    "description": "The value of {@link TokenExchange#TOKEN_EXCHANGE_GRANT} indicates that a token exchange is being performed.",
                    "type": "string"
                },
                "resource": {
                    "description": "Indicates the location of the target service or resource where the client intends to use the requested security token.",
                    "type": "string"
                },
                "audience": {
                    "description": "The logical name of the target service where the client intends to use the requested security token. This serves a purpose similar to the {@link ExchangeSpec#resource} parameter, but with the client providing a logical name rather than a location.",
                    "type": "string"
                },
                "scope": {
                    "description": "A list of space-delimited, case-sensitive strings, that allow the client to specify the desired scope of the requested security token in the context of the service or resource where the token will be used.",
                    "type": "string"
                },
                "requested_token_type": {
                    "description": "An identifier for the type of the requested security token. If the requested type is unspecified, the issued token type is at the discretion of the server and may be dictated by knowledge of the requirements of the service or resource indicated by the {@link ExchangeSpec#resource} or {@link ExchangeSpec#audience} parameter.",
                    "type": "string"
                },
                "subject_token": {
                    "description": "A security token that represents the identity of the party on behalf of whom exchange is being made. Typically, the subject of this token will be the subject of the security token issued. Token is base64-encoded.",
                    "type": "string"
                },
                "subject_token_type": {
                    "description": "An identifier, that indicates the type of the security token in the {@link ExchangeSpec#subject_token} parameter.",
                    "type": "string"
                },
                "actor_token": {
                    "description": "A security token that represents the identity of the acting party. Typically, this will be the party that is authorized to use the requested security token and act on behalf of the subject.",
                    "type": "string"
                },
                "actor_token_type": {
                    "description": "An identifier, that indicates the type of the security token in the {@link ExchangeSpec#actor_token} parameter.",
                    "type": "string"
                }
            },
            "required": [
                "grant_type",
                "subject_token",
                "subject_token_type"
            ]
        },
        "vcenter.tokenservice.token_exchange.info": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "The security token issued by the server in response to the token exchange request. Token is base64-encoded.",
                    "type": "string"
                },
                "issued_token_type": {
                    "description": "An identifier, that indicates the type of the security token in the {@link Info#access_token} parameter.",
                    "type": "string"
                },
                "token_type": {
                    "description": "A case-insensitive value specifying the method of using the access token issued.",
                    "type": "string"
                },
                "expires_in": {
                    "description": "The validity lifetime, in seconds, of the token issued by the server.",
                    "type": "integer",
                    "format": "int64"
                },
                "scope": {
                    "description": "Scope of the issued security token.",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "A refresh token can be issued in cases where the client of the token exchange needs the ability to access a resource even when the original credential is no longer valid.",
                    "type": "string"
                }
            },
            "required": [
                "access_token",
                "issued_token_type",
                "token_type"
            ]
        },
        "vcenter.tokenservice.token_exchange_exchange": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.tokenservice.token_exchange.exchange_spec",
                    "description": "{@name ExchangeSpec} {@term structure} contains arguments that define exchange process."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.topology.nodes.appliance_type": {
            "type": "string",
            "enum": [
                "VCSA_EMBEDDED",
                "VCSA_EXTERNAL",
                "PSC_EXTERNAL"
            ]
        },
        "vcenter.topology.nodes.filter_spec": {
            "type": "object",
            "properties": {
                "types": {
                    "description": "Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see {@link ApplianceType}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/vcenter.topology.nodes.appliance_type"
                    }
                }
            }
        },
        "vcenter.topology.nodes.info": {
            "type": "object",
            "properties": {
                "domain": {
                    "description": "Domain name of the node.",
                    "type": "string"
                },
                "type": {
                    "description": "Appliance type of the node.",
                    "$ref": "#/definitions/vcenter.topology.nodes.appliance_type"
                },
                "replication_partners": {
                    "description": "List of replication partners' node identifiers. Identifiers can be either IP address or DNS resolvable name of the partner node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "client_affinity": {
                    "description": "Identifier of the affinitized Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the affinitized node.",
                    "type": "string"
                }
            },
            "required": [
                "domain",
                "type"
            ]
        },
        "vcenter.topology.nodes.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.topology.nodes.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.topology.nodes.summary": {
            "type": "object",
            "properties": {
                "node": {
                    "description": "Identifier for the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node.",
                    "type": "string"
                },
                "type": {
                    "description": "Appliance type of the node.",
                    "$ref": "#/definitions/vcenter.topology.nodes.appliance_type"
                },
                "replication_partners": {
                    "description": "List of replication partners' node identifiers. Identifiers can be either IP address or DNS resolvable name of the partner node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "client_affinity": {
                    "description": "Identifier of the affinitized Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the affinitized node.",
                    "type": "string"
                }
            },
            "required": [
                "node",
                "type"
            ]
        },
        "vcenter.topology.nodes_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.topology.nodes.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.topology.replication_status.filter_spec": {
            "type": "object",
            "properties": {
                "nodes": {
                    "description": "Identifier that a vCenter and Platform Services Controller node must have to match the filter. (see {@link Summary#node}).",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "vcenter.topology.replication_status.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.topology.replication_status.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.topology.replication_status.summary": {
            "type": "object",
            "properties": {
                "node": {
                    "description": "Identifier for the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node.",
                    "type": "string"
                },
                "replication_partner": {
                    "description": "Identifier for the vCenter or Platform Services Controller replication partner. Identifier can be either IP address or DNS resolvable name of the replication partner.",
                    "type": "string"
                },
                "partner_available": {
                    "description": "Indicates if the VMware Directory Service on partner is reachable or not.",
                    "type": "boolean"
                },
                "status_available": {
                    "description": "Indicates if the replication status for the node with respect to replication partner can be retrieved or not.",
                    "type": "boolean"
                },
                "replicating": {
                    "description": "Indicates if node is processing replication changes from the replication partner.",
                    "type": "boolean"
                },
                "change_lag": {
                    "description": "Number of replication changes node is behind the replication partner.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "node",
                "replication_partner",
                "partner_available",
                "status_available"
            ]
        },
        "vcenter.vcha.cluster.active.info": {
            "type": "object",
            "properties": {
                "management": {
                    "description": "IP specification for the Management network.",
                    "$ref": "#/definitions/vcenter.vcha.ip_spec"
                },
                "ha": {
                    "description": "IP specification for the HA network.",
                    "$ref": "#/definitions/vcenter.vcha.ip_spec"
                },
                "placement": {
                    "description": "Contains the placement information of the active node.",
                    "$ref": "#/definitions/vcenter.vcha.placement_info"
                }
            },
            "required": [
                "management"
            ]
        },
        "vcenter.vcha.cluster.active_get": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains active node's management vCenter server credentials."
                },
                "partial": {
                    "type": "boolean",
                    "description": "If true, then return only the information that does not require connecting to the Active vCenter Server. <br> If false or unset, then return all the information."
                }
            }
        },
        "vcenter.vcha.cluster.active_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.active.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.active_spec": {
            "type": "object",
            "properties": {
                "ha_network_type": {
                    "description": "The type of the Network object used by the HA network.<br> If the {@link #haNetwork} {@term field} is set, then the {@link #haNetworkType} field must be set.<br> If the {@link #haNetwork} {@term field} is {@term unset}, then the {@link #haNetworkType} {@term field} is ignored.",
                    "$ref": "#/definitions/vcenter.vcha.network_type"
                },
                "ha_network": {
                    "description": "The identifier of the Network object used for the HA network.<br> If the {@link #haNetwork} {@term field} is set, then the {@link #haNetworkType} {@term field} must be set.<br> If the {@link #haNetwork} {@term field} is {@term unset}, then the {@link #haNetworkType} {@term field} is ignored.",
                    "type": "string"
                },
                "ha_ip": {
                    "description": "IP specification for the HA network.",
                    "$ref": "#/definitions/vcenter.vcha.ip_spec"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "vcenter.vcha.cluster.cluster_mode": {
            "type": "string",
            "description": "The {@name ClusterMode} {@term enumerated type} defines the possible modes for a VCHA Cluster.",
            "enum": [
                "ENABLED",
                "DISABLED",
                "MAINTENANCE"
            ]
        },
        "vcenter.vcha.cluster.cluster_state": {
            "type": "string",
            "description": "The {@name ClusterState} {@term enumerated type} defines the possible for a VCHA Cluster.",
            "enum": [
                "HEALTHY",
                "DEGRADED",
                "ISOLATED"
            ]
        },
        "vcenter.vcha.cluster.config_state": {
            "type": "string",
            "description": "The {@name ConfigState} {@term enumerated type} defines the VCHA configuration state.",
            "enum": [
                "CONFIGURED",
                "NOTCONFIGURED",
                "INVALID",
                "PREPARED"
            ]
        },
        "vcenter.vcha.cluster.deploy_spec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec"
                },
                "deployment": {
                    "description": "Contains the deployment type.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.type"
                },
                "active": {
                    "description": "Contains the active node's network configuration.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.active_spec"
                },
                "passive": {
                    "description": "Contains the passive node's placement configuration.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.passive_spec"
                },
                "witness": {
                    "description": "Contains the witness node's placement configuration.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness_spec"
                }
            },
            "required": [
                "deployment",
                "active",
                "passive",
                "witness"
            ]
        },
        "vcenter.vcha.cluster.deploy_task_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.deployment_type.info": {
            "type": "object",
            "properties": {
                "deployment_type": {
                    "description": "Identifies the deployment type of the VCHA cluster.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.deployment_type.type"
                }
            },
            "required": [
                "deployment_type"
            ]
        },
        "vcenter.vcha.cluster.deployment_type.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the possible deployment types for a VCHA Cluster.",
            "enum": [
                "NONE",
                "AUTO",
                "MANUAL"
            ]
        },
        "vcenter.vcha.cluster.deployment_type_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.deployment_type.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.error_condition": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Contains an error condition.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                },
                "recommendation": {
                    "description": "Contains a recommendation on handling the error condition.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                }
            },
            "required": [
                "error"
            ]
        },
        "vcenter.vcha.cluster.failover_task_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.info": {
            "type": "object",
            "properties": {
                "config_state": {
                    "description": "Configuration state of the VCHA cluster.<br> The active node's management vCenter server credentials are not required to populate this {@term field}.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.config_state"
                },
                "node1": {
                    "description": "Node configuration information for the VCHA cluster.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_info"
                },
                "node2": {
                    "description": "Node configuration information for the VCHA cluster.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_info"
                },
                "witness": {
                    "description": "Node configuration information for the VCHA cluster.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness_info"
                },
                "mode": {
                    "description": "Operational mode of the VCHA Cluster.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.cluster_mode"
                },
                "health_state": {
                    "description": "Last known state of the VCHA Cluster.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.cluster_state"
                },
                "health_exception": {
                    "description": "Health warning messages if the health information is unavailable.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "health_warnings": {
                    "description": "A collection of messages describing the reason for a non-healthy Cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vcha.cluster.error_condition"
                    }
                },
                "manual_failover_allowed": {
                    "description": "Specifies if manual failover is allowed.",
                    "type": "boolean"
                },
                "auto_failover_allowed": {
                    "description": "Specifies if automatic failover is allowed.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vcha.cluster.ip_family": {
            "type": "string",
            "description": "The {@name IpFamily} {@term enumerated type} defines the IP address family.",
            "enum": [
                "IPV4",
                "IPV6"
            ]
        },
        "vcenter.vcha.cluster.ip_info": {
            "type": "object",
            "properties": {
                "ip_family": {
                    "description": "Family of the ip.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.ip_family"
                },
                "ipv4": {
                    "description": "If the type of the ip family is IPV4, then this will point to IPv4 address specification.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.ipv4_info"
                },
                "ipv6": {
                    "description": "If the type of the ip family is IPV6, then this will point to IPv6 address specification.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.ipv6_info"
                },
                "gateway_ip": {
                    "description": "Gateway IP address.",
                    "type": "string"
                }
            },
            "required": [
                "ip_family"
            ]
        },
        "vcenter.vcha.cluster.ipv4_info": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IP address of the configured network interface.",
                    "type": "string"
                },
                "subnet_mask": {
                    "description": "The subnet mask of the interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix of the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address",
                "subnet_mask"
            ]
        },
        "vcenter.vcha.cluster.ipv6_info": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IP address of the configured network interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix of the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address",
                "prefix"
            ]
        },
        "vcenter.vcha.cluster.mode.cluster_mode": {
            "type": "string",
            "description": "The {@name ClusterMode} {@term enumerated type} defines the possible modes for a VCHA Cluster.",
            "enum": [
                "ENABLED",
                "DISABLED",
                "MAINTENANCE"
            ]
        },
        "vcenter.vcha.cluster.mode.info": {
            "type": "object",
            "properties": {
                "mode": {
                    "description": "Identifies the mode of the VCHA cluster.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.mode.cluster_mode"
                }
            },
            "required": [
                "mode"
            ]
        },
        "vcenter.vcha.cluster.mode.set_task_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.mode_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.mode.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.mode_set_task": {
            "type": "object",
            "properties": {
                "mode": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.mode.cluster_mode",
                    "description": "Clustermode to change the VCHA cluster mode to."
                }
            },
            "required": [
                "mode"
            ]
        },
        "vcenter.vcha.cluster.node_info": {
            "type": "object",
            "properties": {
                "failover_ip": {
                    "description": "Failover IP address that this node will assume after the failover to serve client requests. Each failover node can have a different failover IP address.<br> The active node's management vCenter server credentials are not required to populate {@link #failoverIp}.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.ip_info"
                },
                "ha_ip": {
                    "description": "VCHA Cluster network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.<br> The active node's management vCenter server credentials are not required to populate this {@link #haIp}.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.ip_info"
                },
                "runtime": {
                    "description": "Runtime information for the node in the VCHA Cluster.<br> The active node's management vCenter server credentials are required to populate some {@term fields} of {@link #runtime}.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_runtime_info"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "vcenter.vcha.cluster.node_role": {
            "type": "string",
            "description": "The {@name NodeRole} {@term enumerated type} defines the role node can be in a VCHA Cluster.",
            "enum": [
                "ACTIVE",
                "PASSIVE",
                "WITNESS"
            ]
        },
        "vcenter.vcha.cluster.node_runtime_info": {
            "type": "object",
            "properties": {
                "state": {
                    "description": "Last known state of the node.<br> The active node's management vCenter server credentials are not required to populate {@link #state}.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_state"
                },
                "role": {
                    "description": "Last known role of the node.<br> The active node's management vCenter server credentials are not required to populate {@link #role}.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_role"
                },
                "placement": {
                    "description": "Placement information of the node.<br> The active node's management vCenter server credentials are required to populate most {@term fields} of {@link #placement}.",
                    "$ref": "#/definitions/vcenter.vcha.placement_info"
                }
            }
        },
        "vcenter.vcha.cluster.node_state": {
            "type": "string",
            "description": "The {@name NodeState} {@term enumerated type} defines possible state a node can be in a VCHA Cluster.",
            "enum": [
                "UP",
                "DOWN"
            ]
        },
        "vcenter.vcha.cluster.node_vm_info": {
            "type": "object",
            "properties": {
                "vm": {
                    "description": "The identifier of the virtual machine of the VCHA node.",
                    "type": "string"
                },
                "bios_uuid": {
                    "description": "BIOS UUID for the node.",
                    "type": "string"
                }
            },
            "required": [
                "vm",
                "bios_uuid"
            ]
        },
        "vcenter.vcha.cluster.passive.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.passive.check_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.passive.check_result": {
            "type": "object",
            "properties": {
                "warnings": {
                    "description": "A list of problems which may require attention, but which are not fatal.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "errors": {
                    "description": "A list of problems which are fatal to the operation and the operation will fail.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                }
            },
            "required": [
                "warnings",
                "errors"
            ]
        },
        "vcenter.vcha.cluster.passive.check_spec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec"
                },
                "placement": {
                    "description": "Contains the node's placement information for validation.",
                    "$ref": "#/definitions/vcenter.vcha.placement_spec"
                }
            },
            "required": [
                "placement"
            ]
        },
        "vcenter.vcha.cluster.passive.redeploy_spec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec"
                },
                "placement": {
                    "description": "Contains the node's placement information.",
                    "$ref": "#/definitions/vcenter.vcha.placement_spec"
                },
                "ha_ip": {
                    "description": "Contains the VCHA HA network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.",
                    "$ref": "#/definitions/vcenter.vcha.ip_spec"
                },
                "failover_ip": {
                    "description": "Failover IP address that this node must assume after the failover to serve client requests.",
                    "$ref": "#/definitions/vcenter.vcha.ip_spec"
                }
            },
            "required": [
                "placement"
            ]
        },
        "vcenter.vcha.cluster.passive.redeploy_task_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.passive_check": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.passive.check_spec",
                    "description": "Contains the passive node's placement specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vcha.cluster.passive_redeploy_task": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.passive.redeploy_spec",
                    "description": "Contains the passive node's redeploy specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vcha.cluster.passive_spec": {
            "type": "object",
            "properties": {
                "placement": {
                    "description": "Contains the placement configuration of the node.",
                    "$ref": "#/definitions/vcenter.vcha.placement_spec"
                },
                "ha_ip": {
                    "description": "IP specification for the HA network.",
                    "$ref": "#/definitions/vcenter.vcha.ip_spec"
                },
                "failover_ip": {
                    "description": "IP specification for the management network.",
                    "$ref": "#/definitions/vcenter.vcha.ip_spec"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "vcenter.vcha.cluster.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the possible deployment types for a VCHA Cluster.",
            "enum": [
                "AUTO",
                "MANUAL"
            ]
        },
        "vcenter.vcha.cluster.undeploy_spec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec"
                },
                "force_delete": {
                    "description": "Flag controlling in what circumstances the virtual machines will be deleted. For this flag to take effect, the VCHA cluster should have been successfully configured using automatic deployment. <ul> <li> If true, the {@link #vms} {@term field} will be ignored, the VCHA cluster specific information is removed, and the passive and witness virtual machines will be deleted.</li> <li> If false, the {@link #vms} {@term field} contains the information identifying the passive and witness virtual machines.</li> <ul> <li> If the {@link #vms} {@term field} is set, then it will be validated prior to deleting the passive and witness virtual machines and VCHA cluster specific information is removed.</li> <li> If the {@link #vms} {@term field} is {@term unset}, then the passive and witness virtual machines will not be deleted. The customer should delete them in order to cleanup completely. VCHA cluster specific information is removed.</li> </ul> </ul>",
                    "type": "boolean"
                },
                "vms": {
                    "description": "Contains virtual machine information for the passive and witness virtual machines. For this flag to take effect, the VCHA cluster should have been successfully configured using automatic deployment. <p> If set, the {@link #forceDelete} {@term field} controls whether this information is validated.</li> <ul> <li> If the {@link #forceDelete} {@term field} is true, then this information is ignored, VCHA cluster specific information is removed and the passive and witness virtual machines will be deleted.</li> <li> If the {@link #forceDelete} {@term field} is {@term unset} or false, then this information is validated prior to deleting the passive and witness virtual machines. VCHA cluster specific information is removed.</li> </ul>",
                    "$ref": "#/definitions/vcenter.vcha.cluster.vm_info"
                }
            }
        },
        "vcenter.vcha.cluster.undeploy_task_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.vm_info": {
            "type": "object",
            "properties": {
                "passive": {
                    "description": "The virtual machine information of the passive node.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_vm_info"
                },
                "witness": {
                    "description": "The virtual machine information of the witness node.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_vm_info"
                }
            },
            "required": [
                "passive",
                "witness"
            ]
        },
        "vcenter.vcha.cluster.witness.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness.check_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.witness.check_result": {
            "type": "object",
            "properties": {
                "warnings": {
                    "description": "A list of problems which may require attention, but which are not fatal.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "errors": {
                    "description": "A list of problems which are fatal to the operation and the operation will fail.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                }
            },
            "required": [
                "warnings",
                "errors"
            ]
        },
        "vcenter.vcha.cluster.witness.check_spec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec"
                },
                "placement": {
                    "description": "Contains the node's placement information for validation.",
                    "$ref": "#/definitions/vcenter.vcha.placement_spec"
                }
            },
            "required": [
                "placement"
            ]
        },
        "vcenter.vcha.cluster.witness.redeploy_spec": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "description": "Contains the active node's management vCenter server credentials.",
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec"
                },
                "placement": {
                    "description": "Contains the node's placement information.",
                    "$ref": "#/definitions/vcenter.vcha.placement_spec"
                },
                "ha_ip": {
                    "description": "Contains the VCHA HA network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.",
                    "$ref": "#/definitions/vcenter.vcha.ip_spec"
                }
            },
            "required": [
                "placement"
            ]
        },
        "vcenter.vcha.cluster.witness.redeploy_task_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster.witness_check": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness.check_spec",
                    "description": "Contains the witness node's placement specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vcha.cluster.witness_info": {
            "type": "object",
            "properties": {
                "ha_ip": {
                    "description": "VCHA Cluster network configuration of the node. All cluster communication (state replication, heartbeat, cluster messages) happens over this network.<br> The active node's management vCenter server credentials are not required to populate {@link #haIp}.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.ip_info"
                },
                "runtime": {
                    "description": "Runtime information for the node in the VCHA Cluster.<br> The active node's management vCenter server credentials are required to populate some {@term fields} of {@link #runtime}.",
                    "$ref": "#/definitions/vcenter.vcha.cluster.node_runtime_info"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "vcenter.vcha.cluster.witness_redeploy_task": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.witness.redeploy_spec",
                    "description": "Contains the witness node's redeploy specification."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vcha.cluster.witness_spec": {
            "type": "object",
            "properties": {
                "placement": {
                    "description": "Contains the placement configuration of the node.",
                    "$ref": "#/definitions/vcenter.vcha.placement_spec"
                },
                "ha_ip": {
                    "description": "IP specification for the HA network.",
                    "$ref": "#/definitions/vcenter.vcha.ip_spec"
                }
            },
            "required": [
                "ha_ip"
            ]
        },
        "vcenter.vcha.cluster_deploy_task": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.deploy_spec",
                    "description": "Contains the deploy specification for all three nodes of a VCHA cluster."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vcha.cluster_failover_task": {
            "type": "object",
            "properties": {
                "planned": {
                    "type": "boolean",
                    "description": "If false, a failover is initiated immediately and may result in data loss.<br> If true, a failover is initated after the Active node flushes its state to Passive and there is no data loss."
                }
            },
            "required": [
                "planned"
            ]
        },
        "vcenter.vcha.cluster_get": {
            "type": "object",
            "properties": {
                "vc_spec": {
                    "$ref": "#/definitions/vcenter.vcha.credentials_spec",
                    "description": "Contains active node's management vCenter server credentials."
                },
                "partial": {
                    "type": "boolean",
                    "description": "If true, then return only the information that does not require connecting to the Active vCenter Server.<br> If false or unset, then return all the information."
                }
            }
        },
        "vcenter.vcha.cluster_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.cluster_undeploy_task": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vcha.cluster.undeploy_spec",
                    "description": "Contains the undeploy specification for a VCHA cluster."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vcha.connection_spec": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "IP Address or DNS of the vCenter.",
                    "type": "string"
                },
                "port": {
                    "description": "Port number.",
                    "type": "integer",
                    "format": "int64"
                },
                "ssl_thumbprint": {
                    "description": "SHA1 hash of the server SSL certificate.",
                    "type": "string"
                },
                "username": {
                    "description": "Username to access the server.",
                    "type": "string"
                },
                "password": {
                    "description": "Password for the specified user.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "hostname"
            ]
        },
        "vcenter.vcha.credentials_spec": {
            "type": "object",
            "properties": {
                "active_location": {
                    "description": "Connection information for the management vCenter Server of the Active Node in a VCHA Cluster.",
                    "$ref": "#/definitions/vcenter.vcha.connection_spec"
                }
            },
            "required": [
                "active_location"
            ]
        },
        "vcenter.vcha.disk_info": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "The identifier of the datastore to put all the virtual disks on.",
                    "type": "string"
                },
                "datastore_name": {
                    "description": "The name of the datastore.",
                    "type": "string"
                }
            },
            "required": [
                "datastore",
                "datastore_name"
            ]
        },
        "vcenter.vcha.disk_spec": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "The identifier of the datastore to put all the virtual disks on.",
                    "type": "string"
                }
            }
        },
        "vcenter.vcha.ip_family": {
            "type": "string",
            "description": "The {@name IpFamily} {@term enumerated type} defines the Ip address family.",
            "enum": [
                "IPV4",
                "IPV6"
            ]
        },
        "vcenter.vcha.ip_spec": {
            "type": "object",
            "properties": {
                "ip_family": {
                    "description": "Family of the IP address to configure the interface.",
                    "$ref": "#/definitions/vcenter.vcha.ip_family"
                },
                "ipv4": {
                    "description": "If the family of the ip is IPV4, then this will point to IPv4 address specification.",
                    "$ref": "#/definitions/vcenter.vcha.ipv4_spec"
                },
                "ipv6": {
                    "description": "If the family of the ip is IPV6, then this will point to IPv6 address specification.",
                    "$ref": "#/definitions/vcenter.vcha.ipv6_spec"
                },
                "default_gateway": {
                    "description": "The IP address of the Gateway for this interface.",
                    "type": "string"
                },
                "dns_servers": {
                    "description": "The list of IP addresses of the DNS servers for this interface. This list is a comma separated list.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "ip_family"
            ]
        },
        "vcenter.vcha.ipv4_spec": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IPV4 address to be used to configure the interface.",
                    "type": "string"
                },
                "subnet_mask": {
                    "description": "The subnet mask for the interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix for the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address"
            ]
        },
        "vcenter.vcha.ipv6_spec": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IPv6 address to be used to configure the interface.",
                    "type": "string"
                },
                "prefix": {
                    "description": "The CIDR prefix for the interface.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "address",
                "prefix"
            ]
        },
        "vcenter.vcha.network_type": {
            "type": "string",
            "description": "The {@name NetworkType} {@term enumerated type} defines the type of a vCenter Server network.",
            "enum": [
                "STANDARD_PORTGROUP",
                "DISTRIBUTED_PORTGROUP"
            ]
        },
        "vcenter.vcha.operations.info": {
            "type": "object",
            "properties": {
                "disabled": {
                    "description": "Identifiers of the operations that are current disabled. These operation strings are one of {@link Operations#CLUSTER_DEPLOY_OP}, {@link Operations#CLUSTER_FAILOVER_OP}, {@link Operations#PASSIVE_REDEPLOY_OP}, {@link Operations#WITNESS_REDEPLOY_OP}, {@link Operations#MODE_SET_OP}, {@link Operations#CLUSTER_UNDEPLOY_OP} and {@link Operations#CLUSTER_GET_OP}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "active": {
                    "description": "Identifiers of the operations that are currently running. These operation strings are one of {@link Operations#CLUSTER_DEPLOY_OP}, {@link Operations#CLUSTER_FAILOVER_OP}, {@link Operations#PASSIVE_REDEPLOY_OP}, {@link Operations#WITNESS_REDEPLOY_OP}, {@link Operations#MODE_SET_OP}, and {@link Operations#CLUSTER_UNDEPLOY_OP}.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "disabled",
                "active"
            ]
        },
        "vcenter.vcha.operations_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vcha.operations.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vcha.placement_info": {
            "type": "object",
            "properties": {
                "management_vcenter_name": {
                    "description": "The hostname of the vCenter server that is managing the VCHA node.",
                    "type": "string"
                },
                "management_vcenter_server_guid": {
                    "description": "The unique identifier of the vCenter server that is managing the VCHA node.",
                    "type": "string"
                },
                "vm_name": {
                    "description": "The virtual machine name of the VCHA node.",
                    "type": "string"
                },
                "datacenter": {
                    "description": "The identifier of the datacenter of the VCHA node.",
                    "type": "string"
                },
                "datacenter_name": {
                    "description": "The name of the datacenter of the VCHA node.",
                    "type": "string"
                },
                "host": {
                    "description": "The identifier of the host of the VCHA node.",
                    "type": "string"
                },
                "host_name": {
                    "description": "The name of the host of the VCHA node.",
                    "type": "string"
                },
                "cluster": {
                    "description": "The identifier of the cluster of which {@name #host} is member.",
                    "type": "string"
                },
                "cluster_name": {
                    "description": "The name of the cluster of which {@name #host} is member.",
                    "type": "string"
                },
                "ha_network": {
                    "description": "The identifier of the Network object used for the HA network.",
                    "type": "string"
                },
                "ha_network_name": {
                    "description": "The name of the Network object used for the HA network.",
                    "type": "string"
                },
                "ha_network_type": {
                    "description": "The type of the Network object used for the HA network.",
                    "$ref": "#/definitions/vcenter.vcha.network_type"
                },
                "management_network": {
                    "description": "The identifier of the Network object used for the Management network.",
                    "type": "string"
                },
                "management_network_name": {
                    "description": "The name of the Network object used for the Management network.",
                    "type": "string"
                },
                "management_network_type": {
                    "description": "The type of the Network object used for the Management network.",
                    "$ref": "#/definitions/vcenter.vcha.network_type"
                },
                "storage": {
                    "description": "The storage information of the VCHA node.",
                    "$ref": "#/definitions/vcenter.vcha.disk_info"
                },
                "bios_uuid": {
                    "description": "BIOS UUID for the node.",
                    "type": "string"
                }
            },
            "required": [
                "management_vcenter_name",
                "vm_name",
                "datacenter",
                "datacenter_name",
                "host",
                "host_name",
                "management_network",
                "management_network_name",
                "management_network_type",
                "storage"
            ]
        },
        "vcenter.vcha.placement_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the VCHA node to be used for the virtual machine name.",
                    "type": "string"
                },
                "folder": {
                    "description": "The identifier of the folder to deploy the VCHA node to.",
                    "type": "string"
                },
                "host": {
                    "description": "The identifier of the host to deploy the VCHA node to.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "The identifier of the resource pool to deploy the VCHA node to.",
                    "type": "string"
                },
                "ha_network_type": {
                    "description": "The type of the Network object used by the HA network.<br> If the {@link #haNetwork} {@term field} is set, then the {@link #haNetworkType} field must be set.<br> If the {@link #haNetwork} {@term field} is {@term unset}, then the {@link #haNetworkType} {@term field} is ignored.",
                    "$ref": "#/definitions/vcenter.vcha.network_type"
                },
                "ha_network": {
                    "description": "The identifier of the Network object used for the HA network.<br> If the {@link #haNetwork} {@term field} is set, then the {#link #haNetworkType} {@term field} must be set.<br> If the {@link #haNetwork} {@term field} is {@term unset}, then the {@link #haNetworkType} {@term field} is ignored.",
                    "type": "string"
                },
                "management_network_type": {
                    "description": "The type of the Network object used by the Management network.<br> If the {@link #managementNetwork} {@term field} is set, then the {#link #managementNetworkType} field must be set.<br> If the {@link #managementNetwork} {@term field} is {@term unset}, then the {@link #managementNetworkType} {@term field} is ignored.",
                    "$ref": "#/definitions/vcenter.vcha.network_type"
                },
                "management_network": {
                    "description": "The identifier of the Network object used for the Management network. If the {@link #managementNetwork} {@term field} is set, then the {@link #managementNetworkType} {@term field} must be set.<br> If the {@link #managementNetwork} {@term field} is {@term unset}, then the {@link #managementNetworkType} {@term field} is ignored.",
                    "type": "string"
                },
                "storage": {
                    "description": "The storage specification to deploy the VCHA node to.",
                    "$ref": "#/definitions/vcenter.vcha.disk_spec"
                }
            },
            "required": [
                "name",
                "folder"
            ]
        },
        "vcenter.vm.console.tickets.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.console.tickets.summary"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.console.tickets.create_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of virtual machine console ticket",
                    "$ref": "#/definitions/vcenter.vm.console.tickets.type"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.console.tickets.summary": {
            "type": "object",
            "properties": {
                "ticket": {
                    "description": "Console ticket URI",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "ticket"
            ]
        },
        "vcenter.vm.console.tickets.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the types of console tickets.",
            "enum": [
                "VMRC",
                "WEBMKS"
            ]
        },
        "vcenter.vm.console.tickets_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.console.tickets.create_spec",
                    "description": "Specification for the console ticket to be created."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.guest.customization.set_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the customization specification that has be retrieved from the virtual center inventory and applied for the virtual machine. Either one of {@name #name} or {@name #spec} or none of them should be specified.",
                    "type": "string"
                },
                "spec": {
                    "description": "The customization specification that has to be applied for the virtual machine. Either one of {@name #name} or {@name #spec} or none of them should be specified.",
                    "$ref": "#/definitions/vcenter.guest.customization_spec"
                }
            }
        },
        "vcenter.vm.guest.customization_set": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.guest.customization.set_spec",
                    "description": "The customization settings to be applied to the guest operating system."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.guest.dhcp_config_info": {
            "type": "object",
            "properties": {
                "ipv4_enabled": {
                    "description": "True if IPv4 DHCP is enabled, false otherwise.",
                    "type": "boolean"
                },
                "ipv6_enabled": {
                    "description": "True if IPv6 DHCP is enabled, false otherwise.",
                    "type": "boolean"
                }
            },
            "required": [
                "ipv4_enabled",
                "ipv6_enabled"
            ]
        },
        "vcenter.vm.guest.dns_assigned_values": {
            "type": "object",
            "properties": {
                "host_name": {
                    "description": "The host name portion of DNS name. For example, \"esx01\" part of esx01.example.com.",
                    "type": "string"
                },
                "domain_name": {
                    "description": "The domain name portion of the DNS name.  \"example.com\" part of esx01.example.com.",
                    "type": "string"
                }
            },
            "required": [
                "host_name",
                "domain_name"
            ]
        },
        "vcenter.vm.guest.dns_config_info": {
            "type": "object",
            "properties": {
                "ip_addresses": {
                    "description": "The IP addresses of the DNS servers in order of use. IPv4 addresses are specified using dotted decimal notation.  For example, \"192.0.2.1\". IPv6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "search_domains": {
                    "description": "The domain in which to search for hosts, placed in order of preference. These are the domain name portion of the DNS names.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "ip_addresses",
                "search_domains"
            ]
        },
        "vcenter.vm.guest.identity.info": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Guest operating system identifier (short name).",
                    "$ref": "#/definitions/vcenter.vm.guest_OS"
                },
                "family": {
                    "description": "Guest operating system family.",
                    "$ref": "#/definitions/vcenter.vm.guest_OS_family"
                },
                "full_name": {
                    "description": "Guest operating system full name.",
                    "$ref": "#/definitions/vapi.std.localizable_message"
                },
                "host_name": {
                    "description": "Hostname of the guest operating system.",
                    "type": "string"
                },
                "ip_address": {
                    "description": "IP address assigned by the guest operating system.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "family",
                "full_name",
                "host_name"
            ]
        },
        "vcenter.vm.guest.identity_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.guest.identity.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.guest.local_filesystem.info": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Total capacity of the file system, in bytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "free_space": {
                    "description": "Free space on the file system, in bytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "filesystem": {
                    "description": "Filesystem type, if known.  For example, ext3 or NTFS.",
                    "type": "string"
                },
                "mappings": {
                    "description": "VirtualDisks backing the guest partition, if known.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.guest.local_filesystem.virtual_disk_mapping"
                    }
                }
            },
            "required": [
                "capacity",
                "free_space"
            ]
        },
        "vcenter.vm.guest.local_filesystem.virtual_disk_mapping": {
            "type": "object",
            "properties": {
                "disk": {
                    "description": "The virtual disk.",
                    "type": "string"
                }
            },
            "required": [
                "disk"
            ]
        },
        "vcenter.vm.guest.local_filesystem_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.guest.local_filesystem.info"
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.guest.networking.info": {
            "type": "object",
            "properties": {
                "dns_values": {
                    "description": "Client DNS values. Data assigned by DNS.",
                    "$ref": "#/definitions/vcenter.vm.guest.dns_assigned_values"
                },
                "dns": {
                    "description": "Client DNS configuration. How DNS queries are resolved.",
                    "$ref": "#/definitions/vcenter.vm.guest.dns_config_info"
                }
            }
        },
        "vcenter.vm.guest.networking.interfaces.info": {
            "type": "object",
            "properties": {
                "dns_values": {
                    "description": "Client DNS values. Data assigned by DNS.",
                    "$ref": "#/definitions/vcenter.vm.guest.dns_assigned_values"
                },
                "mac_address": {
                    "description": "MAC address of the adapter.",
                    "type": "string"
                },
                "dns": {
                    "description": "DNS configuration of the adapter. See {@link vcenter.vm.guest.Networking.Info#dns} for system wide settings.",
                    "$ref": "#/definitions/vcenter.vm.guest.dns_config_info"
                },
                "ip": {
                    "description": "IP configuration settings of the adapter",
                    "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.ip_config_info"
                },
                "wins_servers": {
                    "description": "The IP addresses of any WINS name servers for the adapter.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "nic": {
                    "description": "Link to the corresponding virtual device.",
                    "type": "string"
                }
            }
        },
        "vcenter.vm.guest.networking.interfaces.ip_address_info": {
            "type": "object",
            "properties": {
                "ip_address": {
                    "description": "IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit addresses specified using eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "string"
                },
                "prefix_length": {
                    "description": "Denotes the length of a generic Internet network address prefix. Prefix length: the valid range of values is 0-32 for IPv4, and 0-128 for IPv6. A value of n corresponds to an IP address mask that has n contiguous 1-bits from the most significant bit (MSB), with all other bits set to 0. A value of zero is valid only if the calling context defines it.",
                    "type": "integer",
                    "format": "int64"
                },
                "origin": {
                    "description": "How this address was configured.",
                    "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.ip_address_origin"
                },
                "state": {
                    "description": "The state of this ipAddress.",
                    "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.ip_address_status"
                }
            },
            "required": [
                "ip_address",
                "prefix_length",
                "state"
            ]
        },
        "vcenter.vm.guest.networking.interfaces.ip_address_origin": {
            "type": "string",
            "description": "The {@name IpAddressOrigin} {@term enumerated type} specifies how an IP address was obtained for an interface. See RFC 4293 IpAddressOriginTC.",
            "enum": [
                "OTHER",
                "MANUAL",
                "DHCP",
                "LINKLAYER",
                "RANDOM"
            ]
        },
        "vcenter.vm.guest.networking.interfaces.ip_address_status": {
            "type": "string",
            "description": "The {@name IpAddressStatus} {@term enumerated type} defines the present status of an address on an interface. See RFC 4293 IpAddressStatusTC.",
            "enum": [
                "PREFERRED",
                "DEPRECATED",
                "INVALID",
                "INACCESSIBLE",
                "UNKNOWN",
                "TENTATIVE",
                "DUPLICATE"
            ]
        },
        "vcenter.vm.guest.networking.interfaces.ip_config_info": {
            "type": "object",
            "properties": {
                "ip_addresses": {
                    "description": "IP addresses configured on the interface.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.ip_address_info"
                    }
                },
                "dhcp": {
                    "description": "Client side DHCP for an interface.",
                    "$ref": "#/definitions/vcenter.vm.guest.dhcp_config_info"
                }
            },
            "required": [
                "ip_addresses"
            ]
        },
        "vcenter.vm.guest.networking.interfaces.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.guest.networking.interfaces.info"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.guest.networking.routes.info": {
            "type": "object",
            "properties": {
                "network": {
                    "description": "IP Address of the destination IP network. IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit specified using as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of  symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "string"
                },
                "prefix_length": {
                    "description": "The prefix length. For IPv4 the value range is 0-32. For IPv6 prefixLength is a decimal value range 0-128. The property represents the number of contiguous, higher-order bits of the address that make up the network portion of the IP address.",
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_address": {
                    "description": "Where to send the packets for this route. Unicast IP Address of the next hop router. IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit specified using as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of  symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.",
                    "type": "string"
                },
                "interface_index": {
                    "description": "The network interface associated with this route. This is an index into the result of {@link Interfaces#list} The index refers to the relative position of an element in a {@term list}.  For example, an index of 0 refers to the first element in the {@term list} while an index of 1 refers to the second element.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "network",
                "prefix_length"
            ]
        },
        "vcenter.vm.guest.networking.routes.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.guest.networking.routes.info"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.guest.networking_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.guest.networking.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.guest.power.info": {
            "type": "object",
            "properties": {
                "state": {
                    "description": "The power state of the guest operating system.",
                    "$ref": "#/definitions/vcenter.vm.guest.power.state"
                },
                "operations_ready": {
                    "description": "Flag indicating if the virtual machine is ready to process soft power operations.",
                    "type": "boolean"
                }
            },
            "required": [
                "state",
                "operations_ready"
            ]
        },
        "vcenter.vm.guest.power.state": {
            "type": "string",
            "description": "Possible guest power states.",
            "enum": [
                "RUNNING",
                "SHUTTING_DOWN",
                "RESETTING",
                "STANDBY",
                "NOT_RUNNING",
                "UNAVAILABLE"
            ]
        },
        "vcenter.vm.guest.power_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.guest.power.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.guest_OS": {
            "type": "string",
            "description": "The {@name GuestOS} {@term enumerated type} defines the valid guest operating system types used for configuring a virtual machine.",
            "enum": [
                "DOS",
                "WIN_31",
                "WIN_95",
                "WIN_98",
                "WIN_ME",
                "WIN_NT",
                "WIN_2000_PRO",
                "WIN_2000_SERV",
                "WIN_2000_ADV_SERV",
                "WIN_XP_HOME",
                "WIN_XP_PRO",
                "WIN_XP_PRO_64",
                "WIN_NET_WEB",
                "WIN_NET_STANDARD",
                "WIN_NET_ENTERPRISE",
                "WIN_NET_DATACENTER",
                "WIN_NET_BUSINESS",
                "WIN_NET_STANDARD_64",
                "WIN_NET_ENTERPRISE_64",
                "WIN_LONGHORN",
                "WIN_LONGHORN_64",
                "WIN_NET_DATACENTER_64",
                "WIN_VISTA",
                "WIN_VISTA_64",
                "WINDOWS_7",
                "WINDOWS_7_64",
                "WINDOWS_7_SERVER_64",
                "WINDOWS_8",
                "WINDOWS_8_64",
                "WINDOWS_8_SERVER_64",
                "WINDOWS_9",
                "WINDOWS_9_64",
                "WINDOWS_9_SERVER_64",
                "WINDOWS_HYPERV",
                "WINDOWS_SERVER_2019",
                "WINDOWS_SERVER_2021",
                "FREEBSD",
                "FREEBSD_64",
                "FREEBSD_11",
                "FREEBSD_12",
                "FREEBSD_13",
                "FREEBSD_11_64",
                "FREEBSD_12_64",
                "FREEBSD_13_64",
                "REDHAT",
                "RHEL_2",
                "RHEL_3",
                "RHEL_3_64",
                "RHEL_4",
                "RHEL_4_64",
                "RHEL_5",
                "RHEL_5_64",
                "RHEL_6",
                "RHEL_6_64",
                "RHEL_7",
                "RHEL_7_64",
                "RHEL_8_64",
                "RHEL_9_64",
                "CENTOS",
                "CENTOS_64",
                "CENTOS_6",
                "CENTOS_6_64",
                "CENTOS_7",
                "CENTOS_7_64",
                "CENTOS_8_64",
                "CENTOS_9_64",
                "ORACLE_LINUX",
                "ORACLE_LINUX_64",
                "ORACLE_LINUX_6",
                "ORACLE_LINUX_6_64",
                "ORACLE_LINUX_7",
                "ORACLE_LINUX_7_64",
                "ORACLE_LINUX_8_64",
                "ORACLE_LINUX_9_64",
                "SUSE",
                "SUSE_64",
                "SLES",
                "SLES_64",
                "SLES_10",
                "SLES_10_64",
                "SLES_11",
                "SLES_11_64",
                "SLES_12",
                "SLES_12_64",
                "SLES_15_64",
                "SLES_16_64",
                "NLD_9",
                "OES",
                "SJDS",
                "MANDRAKE",
                "MANDRIVA",
                "MANDRIVA_64",
                "TURBO_LINUX",
                "TURBO_LINUX_64",
                "UBUNTU",
                "UBUNTU_64",
                "DEBIAN_4",
                "DEBIAN_4_64",
                "DEBIAN_5",
                "DEBIAN_5_64",
                "DEBIAN_6",
                "DEBIAN_6_64",
                "DEBIAN_7",
                "DEBIAN_7_64",
                "DEBIAN_8",
                "DEBIAN_8_64",
                "DEBIAN_9",
                "DEBIAN_9_64",
                "DEBIAN_10",
                "DEBIAN_10_64",
                "DEBIAN_11",
                "DEBIAN_11_64",
                "ASIANUX_3",
                "ASIANUX_3_64",
                "ASIANUX_4",
                "ASIANUX_4_64",
                "ASIANUX_5_64",
                "ASIANUX_7_64",
                "ASIANUX_8_64",
                "ASIANUX_9_64",
                "OPENSUSE",
                "OPENSUSE_64",
                "FEDORA",
                "FEDORA_64",
                "COREOS_64",
                "VMWARE_PHOTON_64",
                "OTHER_24X_LINUX",
                "OTHER_24X_LINUX_64",
                "OTHER_26X_LINUX",
                "OTHER_26X_LINUX_64",
                "OTHER_3X_LINUX",
                "OTHER_3X_LINUX_64",
                "OTHER_4X_LINUX",
                "OTHER_4X_LINUX_64",
                "OTHER_5X_LINUX",
                "OTHER_5X_LINUX_64",
                "OTHER_LINUX",
                "GENERIC_LINUX",
                "OTHER_LINUX_64",
                "SOLARIS_6",
                "SOLARIS_7",
                "SOLARIS_8",
                "SOLARIS_9",
                "SOLARIS_10",
                "SOLARIS_10_64",
                "SOLARIS_11_64",
                "OS2",
                "ECOMSTATION",
                "ECOMSTATION_2",
                "NETWARE_4",
                "NETWARE_5",
                "NETWARE_6",
                "OPENSERVER_5",
                "OPENSERVER_6",
                "UNIXWARE_7",
                "DARWIN",
                "DARWIN_64",
                "DARWIN_10",
                "DARWIN_10_64",
                "DARWIN_11",
                "DARWIN_11_64",
                "DARWIN_12_64",
                "DARWIN_13_64",
                "DARWIN_14_64",
                "DARWIN_15_64",
                "DARWIN_16_64",
                "DARWIN_17_64",
                "DARWIN_18_64",
                "DARWIN_19_64",
                "DARWIN_20_64",
                "DARWIN_21_64",
                "VMKERNEL",
                "VMKERNEL_5",
                "VMKERNEL_6",
                "VMKERNEL_65",
                "VMKERNEL_7",
                "AMAZONLINUX2_64",
                "AMAZONLINUX3_64",
                "CRXPOD_1",
                "OTHER",
                "OTHER_64"
            ]
        },
        "vcenter.vm.guest_OS_family": {
            "type": "string",
            "description": "The {@name GuestOSFamily} {@term enumerated type} defines the valid guest operating system family types reported by a virtual machine.",
            "enum": [
                "WINDOWS",
                "LINUX",
                "NETWARE",
                "SOLARIS",
                "DARWIN",
                "OTHER"
            ]
        },
        "vcenter.vm.hardware.adapter.sata.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.adapter.sata.create_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Adapter type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.type"
                },
                "bus": {
                    "description": "SATA bus number.",
                    "type": "integer",
                    "format": "int64"
                },
                "pci_slot_number": {
                    "description": "Address of the SATA adapter on the PCI bus.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "vcenter.vm.hardware.adapter.sata.info": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "type": {
                    "description": "Adapter type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.type"
                },
                "bus": {
                    "description": "SATA bus number.",
                    "type": "integer",
                    "format": "int64"
                },
                "pci_slot_number": {
                    "description": "Address of the SATA adapter on the PCI bus.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "label",
                "type",
                "bus"
            ]
        },
        "vcenter.vm.hardware.adapter.sata.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.adapter.sata.summary": {
            "type": "object",
            "properties": {
                "adapter": {
                    "description": "Identifier of the virtual SATA adapter.",
                    "type": "string"
                }
            },
            "required": [
                "adapter"
            ]
        },
        "vcenter.vm.hardware.adapter.sata.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the valid emulation types for a virtual SATA adapter.",
            "enum": [
                "AHCI"
            ]
        },
        "vcenter.vm.hardware.adapter.sata_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.create_spec",
                    "description": "Specification for the new virtual SATA adapter."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.adapter.sata_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.sata.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.adapter.scsi.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.adapter.scsi.create_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Adapter type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.type"
                },
                "bus": {
                    "description": "SCSI bus number.",
                    "type": "integer",
                    "format": "int64"
                },
                "pci_slot_number": {
                    "description": "Address of the SCSI adapter on the PCI bus.  If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.",
                    "type": "integer",
                    "format": "int64"
                },
                "sharing": {
                    "description": "Bus sharing mode.",
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.sharing"
                }
            }
        },
        "vcenter.vm.hardware.adapter.scsi.info": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "type": {
                    "description": "Adapter type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.type"
                },
                "scsi": {
                    "description": "Address of the SCSI adapter on the SCSI bus.",
                    "$ref": "#/definitions/vcenter.vm.hardware.scsi_address_info"
                },
                "pci_slot_number": {
                    "description": "Address of the SCSI adapter on the PCI bus.  If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.",
                    "type": "integer",
                    "format": "int64"
                },
                "sharing": {
                    "description": "Bus sharing mode.",
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.sharing"
                }
            },
            "required": [
                "label",
                "type",
                "scsi",
                "sharing"
            ]
        },
        "vcenter.vm.hardware.adapter.scsi.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.adapter.scsi.sharing": {
            "type": "string",
            "description": "The {@name Sharing} {@term enumerated type} defines the valid bus sharing modes for a virtual SCSI adapter.",
            "enum": [
                "NONE",
                "VIRTUAL",
                "PHYSICAL"
            ]
        },
        "vcenter.vm.hardware.adapter.scsi.summary": {
            "type": "object",
            "properties": {
                "adapter": {
                    "description": "Identifier of the virtual SCSI adapter.",
                    "type": "string"
                }
            },
            "required": [
                "adapter"
            ]
        },
        "vcenter.vm.hardware.adapter.scsi.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the valid emulation types for a virtual SCSI adapter.",
            "enum": [
                "BUSLOGIC",
                "LSILOGIC",
                "LSILOGICSAS",
                "PVSCSI"
            ]
        },
        "vcenter.vm.hardware.adapter.scsi.update_spec": {
            "type": "object",
            "properties": {
                "sharing": {
                    "description": "Bus sharing mode. <p> This {@term field} may only be modified if the virtual machine is not powered on.",
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.sharing"
                }
            }
        },
        "vcenter.vm.hardware.adapter.scsi_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.create_spec",
                    "description": "Specification for the new virtual SCSI adapter."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.adapter.scsi_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.adapter.scsi_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.adapter.scsi.update_spec",
                    "description": "Specification for updating the virtual SCSI adapter."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.boot.create_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Firmware type to be used by the virtual machine.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.type"
                },
                "efi_legacy_boot": {
                    "description": "Flag indicating whether to use EFI legacy boot mode.",
                    "type": "boolean"
                },
                "network_protocol": {
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.network_protocol"
                },
                "delay": {
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on.  This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.",
                    "type": "integer",
                    "format": "int64"
                },
                "retry": {
                    "description": "Flag indicating whether the virtual machine should automatically retry the boot process after a failure.",
                    "type": "boolean"
                },
                "retry_delay": {
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when {@link Info#retry} is true.",
                    "type": "integer",
                    "format": "int64"
                },
                "enter_setup_mode": {
                    "description": "Flag indicating whether the firmware boot process should automatically enter setup mode the next time the virtual machine boots.  Note that this flag will automatically be reset to false once the virtual machine enters setup mode.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.boot.device.entry": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Virtual device type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.device.type"
                },
                "nic": {
                    "description": "Virtual Ethernet device. Ethernet device to use as boot device for this entry.",
                    "type": "string"
                },
                "disks": {
                    "description": "Virtual disk device. List of virtual disks in boot order.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.boot.device.entry_create_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Virtual Boot device type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.device.type"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.boot.device.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the valid device types that may be used as bootable devices.",
            "enum": [
                "CDROM",
                "DISK",
                "ETHERNET",
                "FLOPPY"
            ]
        },
        "vcenter.vm.hardware.boot.device_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.boot.device.entry"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.boot.device_set": {
            "type": "object",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.boot.device.entry"
                    },
                    "description": "Ordered list of boot devices."
                }
            },
            "required": [
                "devices"
            ]
        },
        "vcenter.vm.hardware.boot.info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Firmware type used by the virtual machine.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.type"
                },
                "efi_legacy_boot": {
                    "description": "Flag indicating whether to use EFI legacy boot mode.",
                    "type": "boolean"
                },
                "network_protocol": {
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.network_protocol"
                },
                "delay": {
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on.  This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.",
                    "type": "integer",
                    "format": "int64"
                },
                "retry": {
                    "description": "Flag indicating whether the virtual machine will automatically retry the boot process after a failure.",
                    "type": "boolean"
                },
                "retry_delay": {
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when {@link #retry} is true.",
                    "type": "integer",
                    "format": "int64"
                },
                "enter_setup_mode": {
                    "description": "Flag indicating whether the firmware boot process will automatically enter setup mode the next time the virtual machine boots.  Note that this flag will automatically be reset to false once the virtual machine enters setup mode.",
                    "type": "boolean"
                }
            },
            "required": [
                "type",
                "delay",
                "retry",
                "retry_delay",
                "enter_setup_mode"
            ]
        },
        "vcenter.vm.hardware.boot.network_protocol": {
            "type": "string",
            "description": "The {@name NetworkProtocol} {@term enumerated type} defines the valid network boot protocols supported when booting a virtual machine with {@link Type#EFI} firmware over the network.",
            "enum": [
                "IPV4",
                "IPV6"
            ]
        },
        "vcenter.vm.hardware.boot.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} defines the valid firmware types for a virtual machine.",
            "enum": [
                "BIOS",
                "EFI"
            ]
        },
        "vcenter.vm.hardware.boot.update_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Firmware type to be used by the virtual machine.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.type"
                },
                "efi_legacy_boot": {
                    "description": "Flag indicating whether to use EFI legacy boot mode.",
                    "type": "boolean"
                },
                "network_protocol": {
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.",
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.network_protocol"
                },
                "delay": {
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on.  This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.",
                    "type": "integer",
                    "format": "int64"
                },
                "retry": {
                    "description": "Flag indicating whether the virtual machine should automatically retry the boot process after a failure.",
                    "type": "boolean"
                },
                "retry_delay": {
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when {@link Info#retry} is true.",
                    "type": "integer",
                    "format": "int64"
                },
                "enter_setup_mode": {
                    "description": "Flag indicating whether the firmware boot process should automatically enter setup mode the next time the virtual machine boots.  Note that this flag will automatically be reset to false once the virtual machine enters setup mode.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.boot_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.boot_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.boot.update_spec",
                    "description": "Specification for updating the boot-related settings of the virtual machine."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.cdrom.backing_info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual CD-ROM device.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_type"
                },
                "iso_file": {
                    "description": "Path of the image file backing the virtual CD-ROM device.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the host device backing the virtual CD-ROM device. <p>",
                    "type": "string"
                },
                "auto_detect": {
                    "description": "Flag indicating whether the virtual CD-ROM device is configured to automatically detect a suitable host device.",
                    "type": "boolean"
                },
                "device_access_type": {
                    "description": "Access type for the device backing.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.device_access_type"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.cdrom.backing_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual CD-ROM device.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_type"
                },
                "iso_file": {
                    "description": "Path of the image file that should be used as the virtual CD-ROM device backing.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device that should be used as the virtual CD-ROM device backing.",
                    "type": "string"
                },
                "device_access_type": {
                    "description": "Access type for the device backing.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.device_access_type"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.cdrom.backing_type": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual CD-ROM device.",
            "enum": [
                "ISO_FILE",
                "HOST_DEVICE",
                "CLIENT_DEVICE"
            ]
        },
        "vcenter.vm.hardware.cdrom.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.cdrom.create_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of host bus adapter to which the device should be attached.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.host_bus_adapter_type"
                },
                "ide": {
                    "description": "Address for attaching the device to a virtual IDE adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ide_address_spec"
                },
                "sata": {
                    "description": "Address for attaching the device to a virtual SATA adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.sata_address_spec"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual CD-ROM device.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.cdrom.device_access_type": {
            "type": "string",
            "description": "The {@name DeviceAccessType} {@term enumerated type} defines the valid device access types for a physical device packing of a virtual CD-ROM device.",
            "enum": [
                "EMULATION",
                "PASSTHRU",
                "PASSTHRU_EXCLUSIVE"
            ]
        },
        "vcenter.vm.hardware.cdrom.host_bus_adapter_type": {
            "type": "string",
            "description": "The {@name HostBusAdapterType} {@term enumerated type} defines the valid types of host bus adapters that may be used for attaching a Cdrom to a virtual machine.",
            "enum": [
                "IDE",
                "SATA"
            ]
        },
        "vcenter.vm.hardware.cdrom.info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of host bus adapter to which the device is attached.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.host_bus_adapter_type"
                },
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "ide": {
                    "description": "Address of device attached to a virtual IDE adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ide_address_info"
                },
                "sata": {
                    "description": "Address of device attached to a virtual SATA adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.sata_address_info"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual CD-ROM device.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_info"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "type",
                "label",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "vcenter.vm.hardware.cdrom.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.cdrom.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.cdrom.summary": {
            "type": "object",
            "properties": {
                "cdrom": {
                    "description": "Identifier of the virtual CD-ROM device.",
                    "type": "string"
                }
            },
            "required": [
                "cdrom"
            ]
        },
        "vcenter.vm.hardware.cdrom.update_spec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual CD-ROM device. <p> This {@term field} may only be modified if the virtual machine is not powered on or the virtual CD-ROM device is not connected.",
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.cdrom_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.create_spec",
                    "description": "Specification for the new virtual CD-ROM device."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.cdrom_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.cdrom_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cdrom.update_spec",
                    "description": "Specification for updating the virtual CD-ROM device."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.connection_state": {
            "type": "string",
            "description": "The {@name ConnectionState} {@term enumerated type} defines the valid states for a removable device that is configured to be connected.",
            "enum": [
                "CONNECTED",
                "RECOVERABLE_ERROR",
                "UNRECOVERABLE_ERROR",
                "NOT_CONNECTED",
                "UNKNOWN"
            ]
        },
        "vcenter.vm.hardware.cpu.info": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of CPU cores.",
                    "type": "integer",
                    "format": "int64"
                },
                "cores_per_socket": {
                    "description": "Number of CPU cores per socket.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding CPUs while the virtual machine is running is enabled.",
                    "type": "boolean"
                },
                "hot_remove_enabled": {
                    "description": "Flag indicating whether removing CPUs while the virtual machine is running is enabled.",
                    "type": "boolean"
                }
            },
            "required": [
                "count",
                "cores_per_socket",
                "hot_add_enabled",
                "hot_remove_enabled"
            ]
        },
        "vcenter.vm.hardware.cpu.update_spec": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "New number of CPU cores.  The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket. <p> The supported range of CPU counts is constrained by the configured guest operating system and virtual hardware version of the virtual machine. <p> If the virtual machine is running, the number of CPU cores may only be increased if {@link Info#hotAddEnabled} is true, and may only be decreased if {@link Info#hotRemoveEnabled} is true.",
                    "type": "integer",
                    "format": "int64"
                },
                "cores_per_socket": {
                    "description": "New number of CPU cores per socket.  The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding CPUs while the virtual machine is running is enabled. <p> This {@term field} may only be modified if the virtual machine is powered off.",
                    "type": "boolean"
                },
                "hot_remove_enabled": {
                    "description": "Flag indicating whether removing CPUs while the virtual machine is running is enabled. <p> This {@term field} may only be modified if the virtual machine is powered off.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.cpu_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cpu.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.cpu_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.cpu.update_spec",
                    "description": "Specification for updating the CPU-related settings of the virtual machine."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.disk.backing_info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual disk.",
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_type"
                },
                "vmdk_file": {
                    "description": "Path of the VMDK file backing the virtual disk.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.disk.backing_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual disk.",
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_type"
                },
                "vmdk_file": {
                    "description": "Path of the VMDK file backing the virtual disk.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.disk.backing_type": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual disk.",
            "enum": [
                "VMDK_FILE"
            ]
        },
        "vcenter.vm.hardware.disk.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.disk.create_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of host bus adapter to which the device should be attached.",
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.host_bus_adapter_type"
                },
                "ide": {
                    "description": "Address for attaching the device to a virtual IDE adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ide_address_spec"
                },
                "scsi": {
                    "description": "Address for attaching the device to a virtual SCSI adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.scsi_address_spec"
                },
                "sata": {
                    "description": "Address for attaching the device to a virtual SATA adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.sata_address_spec"
                },
                "backing": {
                    "description": "Existing physical resource backing for the virtual disk. Exactly one of {@name #backing} or {@name #newVmdk} must be specified.",
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_spec"
                },
                "new_vmdk": {
                    "description": "Specification for creating a new VMDK backing for the virtual disk.  Exactly one of {@name #backing} or {@name #newVmdk} must be specified.",
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.vmdk_create_spec"
                }
            }
        },
        "vcenter.vm.hardware.disk.host_bus_adapter_type": {
            "type": "string",
            "description": "The {@name HostBusAdapterType} {@term enumerated type} defines the valid types of host bus adapters that may be used for attaching a virtual storage device to a virtual machine.",
            "enum": [
                "IDE",
                "SCSI",
                "SATA"
            ]
        },
        "vcenter.vm.hardware.disk.info": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of host bus adapter to which the device is attached.",
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.host_bus_adapter_type"
                },
                "ide": {
                    "description": "Address of device attached to a virtual IDE adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ide_address_info"
                },
                "scsi": {
                    "description": "Address of device attached to a virtual SCSI adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.scsi_address_info"
                },
                "sata": {
                    "description": "Address of device attached to a virtual SATA adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.sata_address_info"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual disk.",
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_info"
                },
                "capacity": {
                    "description": "Capacity of the virtual disk in bytes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "label",
                "type",
                "backing"
            ]
        },
        "vcenter.vm.hardware.disk.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.disk.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.disk.storage_policy_spec": {
            "type": "object",
            "properties": {
                "policy": {
                    "description": "Identifier of the storage policy which should be associated with the VMDK file.",
                    "type": "string"
                }
            },
            "required": [
                "policy"
            ]
        },
        "vcenter.vm.hardware.disk.summary": {
            "type": "object",
            "properties": {
                "disk": {
                    "description": "Identifier of the virtual Disk.",
                    "type": "string"
                }
            },
            "required": [
                "disk"
            ]
        },
        "vcenter.vm.hardware.disk.update_spec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual disk. <p> This {@term field} may only be modified if the virtual machine is not powered on.",
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.backing_spec"
                }
            }
        },
        "vcenter.vm.hardware.disk.vmdk_create_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Base name of the VMDK file.  The name should not include the '.vmdk' file extension.",
                    "type": "string"
                },
                "capacity": {
                    "description": "Capacity of the virtual disk backing in bytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "storage_policy": {
                    "description": "The {@name StoragePolicySpec} {@term structure} contains information about the storage policy that is to be associated the with VMDK file.",
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.storage_policy_spec"
                }
            }
        },
        "vcenter.vm.hardware.disk_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.create_spec",
                    "description": "Specification for the new virtual disk."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.disk_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.disk_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.disk.update_spec",
                    "description": "Specification for updating the virtual disk."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.ethernet.backing_info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_type"
                },
                "network": {
                    "description": "Identifier of the network backing the virtual Ethernet adapter.",
                    "type": "string"
                },
                "network_name": {
                    "description": "Name of the standard portgroup backing the virtual Ethernet adapter.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual Ethernet adapter.",
                    "type": "string"
                },
                "distributed_switch_uuid": {
                    "description": "UUID of the distributed virtual switch that backs the virtual Ethernet adapter.",
                    "type": "string"
                },
                "distributed_port": {
                    "description": "Key of the distributed virtual port that backs the virtual Ethernet adapter.",
                    "type": "string"
                },
                "connection_cookie": {
                    "description": "Server-generated cookie that identifies the connection to the port.  This ookie may be used to verify that the virtual machine is the rightful owner of the port.",
                    "type": "integer",
                    "format": "int64"
                },
                "opaque_network_type": {
                    "description": "Type of the opaque network that backs the virtual Ethernet adapter.",
                    "type": "string"
                },
                "opaque_network_id": {
                    "description": "Identifier of the opaque network that backs the virtual Ethernet adapter.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.ethernet.backing_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_type"
                },
                "network": {
                    "description": "Identifier of the network that backs the virtual Ethernet adapter.",
                    "type": "string"
                },
                "distributed_port": {
                    "description": "Key of the distributed virtual port that backs the virtual Ethernet adapter.  Depending on the type of the Portgroup, the port may be specified using this field. If the portgroup type is early-binding (also known as static), a port is assigned when the Ethernet adapter is configured to use the port. The port may be either automatically or specifically assigned based on the value of this {@term field}. If the portgroup type is ephemeral, the port is created and assigned to a virtual machine when it is powered on and the Ethernet adapter is connected.  This {@term field} cannot be specified as no free ports exist before use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.ethernet.backing_type": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual Ethernet adapter.",
            "enum": [
                "STANDARD_PORTGROUP",
                "HOST_DEVICE",
                "DISTRIBUTED_PORTGROUP",
                "OPAQUE_NETWORK"
            ]
        },
        "vcenter.vm.hardware.ethernet.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.ethernet.create_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Ethernet adapter emulation type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.emulation_type"
                },
                "upt_compatibility_enabled": {
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility is enabled on this virtual Ethernet adapter.",
                    "type": "boolean"
                },
                "mac_type": {
                    "description": "MAC address type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.mac_address_type"
                },
                "mac_address": {
                    "description": "MAC address.",
                    "type": "string"
                },
                "pci_slot_number": {
                    "description": "Address of the virtual Ethernet adapter on the PCI bus.  If the PCI address is invalid, the server will change when it the VM is started or as the device is hot added.",
                    "type": "integer",
                    "format": "int64"
                },
                "wake_on_lan_enabled": {
                    "description": "Flag indicating whether wake-on-LAN is enabled on this virtual Ethernet adapter.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.ethernet.emulation_type": {
            "type": "string",
            "description": "The {@name EmulationType} {@term enumerated type} defines the valid emulation types for a virtual Ethernet adapter.",
            "enum": [
                "E1000",
                "E1000E",
                "PCNET32",
                "VMXNET",
                "VMXNET2",
                "VMXNET3"
            ]
        },
        "vcenter.vm.hardware.ethernet.info": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "type": {
                    "description": "Ethernet adapter emulation type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.emulation_type"
                },
                "upt_compatibility_enabled": {
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility is enabled on this virtual Ethernet adapter.",
                    "type": "boolean"
                },
                "mac_type": {
                    "description": "MAC address type.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.mac_address_type"
                },
                "mac_address": {
                    "description": "MAC address.",
                    "type": "string"
                },
                "pci_slot_number": {
                    "description": "Address of the virtual Ethernet adapter on the PCI bus.  If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.",
                    "type": "integer",
                    "format": "int64"
                },
                "wake_on_lan_enabled": {
                    "description": "Flag indicating whether wake-on-LAN is enabled on this virtual Ethernet adapter.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_info"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "type",
                "mac_type",
                "wake_on_lan_enabled",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "vcenter.vm.hardware.ethernet.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.ethernet.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.ethernet.mac_address_type": {
            "type": "string",
            "description": "The {@name MacAddressType} {@term enumerated type} defines the valid MAC address origins for a virtual Ethernet adapter.",
            "enum": [
                "MANUAL",
                "GENERATED",
                "ASSIGNED"
            ]
        },
        "vcenter.vm.hardware.ethernet.summary": {
            "type": "object",
            "properties": {
                "nic": {
                    "description": "Identifier of the virtual Ethernet adapter.",
                    "type": "string"
                }
            },
            "required": [
                "nic"
            ]
        },
        "vcenter.vm.hardware.ethernet.update_spec": {
            "type": "object",
            "properties": {
                "upt_compatibility_enabled": {
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility should be enabled on this virtual Ethernet adapter. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "type": "boolean"
                },
                "mac_type": {
                    "description": "MAC address type. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.mac_address_type"
                },
                "mac_address": {
                    "description": "MAC address. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "type": "string"
                },
                "wake_on_lan_enabled": {
                    "description": "Flag indicating whether wake-on-LAN shoud be enabled on this virtual Ethernet adapter. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual Ethernet adapter. <p> This {@term field} may be modified at any time, and changes will be applied the next time the virtual machine is powered on.",
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.ethernet_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.create_spec",
                    "description": "Specification for the new virtual Ethernet adapter."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.ethernet_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.ethernet_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.ethernet.update_spec",
                    "description": "Specification for updating the virtual Ethernet adapter."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.floppy.backing_info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual floppy drive.",
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_type"
                },
                "image_file": {
                    "description": "Path of the image file backing the virtual floppy drive.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the host device backing the virtual floppy drive. <p>",
                    "type": "string"
                },
                "auto_detect": {
                    "description": "Flag indicating whether the virtual floppy drive is configured to automatically detect a suitable host device.",
                    "type": "boolean"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.floppy.backing_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual floppy drive.",
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_type"
                },
                "image_file": {
                    "description": "Path of the image file that should be used as the virtual floppy drive backing.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device that should be used as the virtual floppy drive backing.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.floppy.backing_type": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual floppy drive.",
            "enum": [
                "IMAGE_FILE",
                "HOST_DEVICE",
                "CLIENT_DEVICE"
            ]
        },
        "vcenter.vm.hardware.floppy.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.floppy.create_spec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual floppy drive.",
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.floppy.info": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual floppy drive.",
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_info"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "vcenter.vm.hardware.floppy.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.floppy.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.floppy.summary": {
            "type": "object",
            "properties": {
                "floppy": {
                    "description": "Identifier of the virtual floppy drive.",
                    "type": "string"
                }
            },
            "required": [
                "floppy"
            ]
        },
        "vcenter.vm.hardware.floppy.update_spec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual floppy drive. <p> This {@term field} may only be modified if the virtual machine is not powered on or the virtual floppy drive is not connected.",
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.floppy_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.create_spec",
                    "description": "Specification for the new virtual floppy drive."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.floppy_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.floppy_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.floppy.update_spec",
                    "description": "Specification for updating the virtual floppy drive."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.ide_address_info": {
            "type": "object",
            "properties": {
                "primary": {
                    "description": "Flag specifying whether the device is attached to the primary or secondary IDE adapter of the virtual machine.",
                    "type": "boolean"
                },
                "master": {
                    "description": "Flag specifying whether the device is the master or slave device on the IDE adapter.",
                    "type": "boolean"
                }
            },
            "required": [
                "primary",
                "master"
            ]
        },
        "vcenter.vm.hardware.ide_address_spec": {
            "type": "object",
            "properties": {
                "primary": {
                    "description": "Flag specifying whether the device should be attached to the primary or secondary IDE adapter of the virtual machine.",
                    "type": "boolean"
                },
                "master": {
                    "description": "Flag specifying whether the device should be the master or slave device on the IDE adapter.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.info": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "Virtual hardware version.",
                    "$ref": "#/definitions/vcenter.vm.hardware.version"
                },
                "upgrade_policy": {
                    "description": "Scheduled upgrade policy.",
                    "$ref": "#/definitions/vcenter.vm.hardware.upgrade_policy"
                },
                "upgrade_version": {
                    "description": "Target hardware version to be used on the next scheduled virtual hardware upgrade.",
                    "$ref": "#/definitions/vcenter.vm.hardware.version"
                },
                "upgrade_status": {
                    "description": "Scheduled upgrade status.",
                    "$ref": "#/definitions/vcenter.vm.hardware.upgrade_status"
                },
                "upgrade_error": {
                    "description": "Reason for the scheduled upgrade failure.",
                    "type": "string"
                }
            },
            "required": [
                "version",
                "upgrade_policy",
                "upgrade_status"
            ]
        },
        "vcenter.vm.hardware.memory.info": {
            "type": "object",
            "properties": {
                "size_MiB": {
                    "description": "Memory size in mebibytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding memory while the virtual machine is running is enabled. <p> Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running.",
                    "type": "boolean"
                },
                "hot_add_increment_size_MiB": {
                    "description": "The granularity, in mebibytes, at which memory can be added to a running virtual machine. <p> When adding memory to a running virtual machine, the amount of memory added must be at least {@link #hotAddIncrementSizeMiB} and the total memory size of the virtual machine must be a multiple of {@link>hotAddIncrementSize}.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_limit_MiB": {
                    "description": "The maximum amount of memory, in mebibytes, that can be added to a running virtual machine.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "size_MiB",
                "hot_add_enabled"
            ]
        },
        "vcenter.vm.hardware.memory.update_spec": {
            "type": "object",
            "properties": {
                "size_MiB": {
                    "description": "New memory size in mebibytes. <p> The supported range of memory sizes is constrained by the configured guest operating system and virtual hardware version of the virtual machine. <p> If the virtual machine is running, this value may only be changed if {@link Info#hotAddEnabled} is true, and the new memory size must satisfy the constraints specified by {@link Info#hotAddIncrementSizeMiB} and {@link Info#hotAddLimitMiB}.",
                    "type": "integer",
                    "format": "int64"
                },
                "hot_add_enabled": {
                    "description": "Flag indicating whether adding memory while the virtual machine is running should be enabled. <p> Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running. <p> This {@term field} may only be modified if the virtual machine is not powered on.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.memory_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.memory.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.memory_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.memory.update_spec",
                    "description": "Specification for updating the memory-related settings of the virtual machine."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.parallel.backing_info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual parallel port.",
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_type"
                },
                "file": {
                    "description": "Path of the file backing the virtual parallel port.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual parallel port. <p>",
                    "type": "string"
                },
                "auto_detect": {
                    "description": "Flag indicating whether the virtual parallel port is configured to automatically detect a suitable host device.",
                    "type": "boolean"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.parallel.backing_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual parallel port.",
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_type"
                },
                "file": {
                    "description": "Path of the file that should be used as the virtual parallel port backing.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device that should be used as the virtual parallel port backing.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.parallel.backing_type": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual parallel port.",
            "enum": [
                "FILE",
                "HOST_DEVICE"
            ]
        },
        "vcenter.vm.hardware.parallel.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.parallel.create_spec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual parallel port.",
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.parallel.info": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual parallel port.",
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_info"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "vcenter.vm.hardware.parallel.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.parallel.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.parallel.summary": {
            "type": "object",
            "properties": {
                "port": {
                    "description": "Identifier of the virtual parallel port.",
                    "type": "string"
                }
            },
            "required": [
                "port"
            ]
        },
        "vcenter.vm.hardware.parallel.update_spec": {
            "type": "object",
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual parallel port. <p> This {@term field} may only be modified if the virtual machine is not powered on or the virtual parallel port is not connected.",
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.parallel_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.create_spec",
                    "description": "Specification for the new virtual parallel port."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.parallel_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.parallel_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.parallel.update_spec",
                    "description": "Specification for updating the virtual parallel port."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.sata_address_info": {
            "type": "object",
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device is attached.",
                    "type": "integer",
                    "format": "int64"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "bus",
                "unit"
            ]
        },
        "vcenter.vm.hardware.sata_address_spec": {
            "type": "object",
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device should be attached.",
                    "type": "integer",
                    "format": "int64"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "bus"
            ]
        },
        "vcenter.vm.hardware.scsi_address_info": {
            "type": "object",
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device is attached.",
                    "type": "integer",
                    "format": "int64"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "bus",
                "unit"
            ]
        },
        "vcenter.vm.hardware.scsi_address_spec": {
            "type": "object",
            "properties": {
                "bus": {
                    "description": "Bus number of the adapter to which the device should be attached.",
                    "type": "integer",
                    "format": "int64"
                },
                "unit": {
                    "description": "Unit number of the device.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "bus"
            ]
        },
        "vcenter.vm.hardware.serial.backing_info": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual serial port.",
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_type"
                },
                "file": {
                    "description": "Path of the file backing the virtual serial port.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual serial port. <p>",
                    "type": "string"
                },
                "auto_detect": {
                    "description": "Flag indicating whether the virtual serial port is configured to automatically detect a suitable host device.",
                    "type": "boolean"
                },
                "pipe": {
                    "description": "Name of the pipe backing the virtual serial port.",
                    "type": "string"
                },
                "no_rx_loss": {
                    "description": "Flag that enables optimized data transfer over the pipe. When the value is true, the host buffers data to prevent data overrun.  This allows the virtual machine to read all of the data transferred over the pipe with no data loss.",
                    "type": "boolean"
                },
                "network_location": {
                    "description": "URI specifying the location of the network service backing the virtual serial port. <ul> <li>If {@link #type} is {@link BackingType#NETWORK_SERVER}, this {@term field} is the location used by clients to connect to this server.  The hostname part of the URI should either be empty or should specify the address of the host on which the virtual machine is running.</li> <li>If {@link #type} is {@link BackingType#NETWORK_CLIENT}, this {@term field} is the location used by the virtual machine to connect to the remote server.</li> </ul>",
                    "type": "string",
                    "format": "uri"
                },
                "proxy": {
                    "description": "Proxy service that provides network access to the network backing.  If set, the virtual machine initiates a connection with the proxy service and forwards the traffic to the proxy.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.serial.backing_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Backing type for the virtual serial port.",
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_type"
                },
                "file": {
                    "description": "Path of the file backing the virtual serial port.",
                    "type": "string"
                },
                "host_device": {
                    "description": "Name of the device backing the virtual serial port. <p>",
                    "type": "string"
                },
                "pipe": {
                    "description": "Name of the pipe backing the virtual serial port.",
                    "type": "string"
                },
                "no_rx_loss": {
                    "description": "Flag that enables optimized data transfer over the pipe. When the value is true, the host buffers data to prevent data overrun.  This allows the virtual machine to read all of the data transferred over the pipe with no data loss.",
                    "type": "boolean"
                },
                "network_location": {
                    "description": "URI specifying the location of the network service backing the virtual serial port. <ul> <li>If {@link #type} is {@link BackingType#NETWORK_SERVER}, this {@term field} is the location used by clients to connect to this server.  The hostname part of the URI should either be empty or should specify the address of the host on which the virtual machine is running.</li> <li>If {@link #type} is {@link BackingType#NETWORK_CLIENT}, this {@term field} is the location used by the virtual machine to connect to the remote server.</li> </ul>",
                    "type": "string",
                    "format": "uri"
                },
                "proxy": {
                    "description": "Proxy service that provides network access to the network backing.  If set, the virtual machine initiates a connection with the proxy service and forwards the traffic to the proxy.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.hardware.serial.backing_type": {
            "type": "string",
            "description": "The {@name BackingType} {@term enumerated type} defines the valid backing types for a virtual serial port.",
            "enum": [
                "FILE",
                "HOST_DEVICE",
                "PIPE_SERVER",
                "PIPE_CLIENT",
                "NETWORK_SERVER",
                "NETWORK_CLIENT"
            ]
        },
        "vcenter.vm.hardware.serial.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.serial.create_spec": {
            "type": "object",
            "properties": {
                "yield_on_poll": {
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual serial port.",
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.serial.info": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Device label.",
                    "type": "string"
                },
                "yield_on_poll": {
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual serial port.",
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_info"
                },
                "state": {
                    "description": "Connection status of the virtual device.",
                    "$ref": "#/definitions/vcenter.vm.hardware.connection_state"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            },
            "required": [
                "label",
                "yield_on_poll",
                "backing",
                "state",
                "start_connected",
                "allow_guest_control"
            ]
        },
        "vcenter.vm.hardware.serial.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm.hardware.serial.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.serial.summary": {
            "type": "object",
            "properties": {
                "port": {
                    "description": "Identifier of the virtual serial port.",
                    "type": "string"
                }
            },
            "required": [
                "port"
            ]
        },
        "vcenter.vm.hardware.serial.update_spec": {
            "type": "object",
            "properties": {
                "yield_on_poll": {
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host. <p> This {@term field} may be modified at any time, and changes applied to a connected virtual serial port take effect immediately.",
                    "type": "boolean"
                },
                "backing": {
                    "description": "Physical resource backing for the virtual serial port. <p> This {@term field} may only be modified if the virtual machine is not powered on or the virtual serial port is not connected.",
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.backing_spec"
                },
                "start_connected": {
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.",
                    "type": "boolean"
                },
                "allow_guest_control": {
                    "description": "Flag indicating whether the guest can connect and disconnect the device.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm.hardware.serial_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.create_spec",
                    "description": "Specification for the new virtual serial port."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.serial_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware.serial_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.serial.update_spec",
                    "description": "Specification for updating the virtual serial port."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware.update_spec": {
            "type": "object",
            "properties": {
                "upgrade_policy": {
                    "description": "Scheduled upgrade policy. <p> If set to {@link UpgradePolicy#NEVER}, the {@link Info#upgradeVersion} {@term field} will be reset to {@term unset}.",
                    "$ref": "#/definitions/vcenter.vm.hardware.upgrade_policy"
                },
                "upgrade_version": {
                    "description": "Target hardware version to be used on the next scheduled virtual hardware upgrade. <p> If specified, this {@term field} must represent a newer virtual hardware version than the current virtual hardware version reported in {@link Info#version}.",
                    "$ref": "#/definitions/vcenter.vm.hardware.version"
                }
            }
        },
        "vcenter.vm.hardware.upgrade_policy": {
            "type": "string",
            "description": "The {@name UpgradePolicy} {@term enumerated type} defines the valid virtual hardware upgrade policies for a virtual machine.",
            "enum": [
                "NEVER",
                "AFTER_CLEAN_SHUTDOWN",
                "ALWAYS"
            ]
        },
        "vcenter.vm.hardware.upgrade_status": {
            "type": "string",
            "description": "The {@name UpgradeStatus} {@term enumerated type} defines the valid virtual hardware upgrade statuses for a virtual machine.",
            "enum": [
                "NONE",
                "PENDING",
                "SUCCESS",
                "FAILED"
            ]
        },
        "vcenter.vm.hardware.version": {
            "type": "string",
            "description": "The {@name Version} {@term enumerated type} defines the valid virtual hardware versions for a virtual machine. See https://kb.vmware.com/s/article/1003746 (Virtual machine hardware versions (1003746)).",
            "enum": [
                "VMX_03",
                "VMX_04",
                "VMX_06",
                "VMX_07",
                "VMX_08",
                "VMX_09",
                "VMX_10",
                "VMX_11",
                "VMX_12",
                "VMX_13",
                "VMX_14",
                "VMX_15",
                "VMX_16",
                "VMX_17",
                "VMX_18",
                "VMX_19"
            ]
        },
        "vcenter.vm.hardware_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.hardware.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.hardware_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.hardware.update_spec",
                    "description": "Specification for updating the virtual hardware settings of the virtual machine."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.hardware_upgrade": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/vcenter.vm.hardware.version",
                    "description": "New virtual machine version."
                }
            }
        },
        "vcenter.vm.identity.info": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Virtual machine name.",
                    "type": "string"
                },
                "bios_uuid": {
                    "description": "128-bit SMBIOS UUID of a virtual machine represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.",
                    "type": "string"
                },
                "instance_uuid": {
                    "description": "VirtualCenter-specific 128-bit UUID of a virtual machine, represented as a hexademical string. This identifier is used by VirtualCenter to uniquely identify all virtual machine instances, including those that may share the same SMBIOS UUID.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "bios_uuid",
                "instance_uuid"
            ]
        },
        "vcenter.vm.library_item.check_out_info": {
            "type": "object",
            "properties": {
                "library_item": {
                    "description": "Identifier of the library item that the virtual machine is checked out from.",
                    "type": "string"
                }
            },
            "required": [
                "library_item"
            ]
        },
        "vcenter.vm.library_item.info": {
            "type": "object",
            "properties": {
                "check_out": {
                    "description": "Information about the checked out virtual machine.",
                    "$ref": "#/definitions/vcenter.vm.library_item.check_out_info"
                }
            }
        },
        "vcenter.vm.library_item_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.library_item.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.power.info": {
            "type": "object",
            "properties": {
                "state": {
                    "description": "Power state of the virtual machine.",
                    "$ref": "#/definitions/vcenter.vm.power.state"
                },
                "clean_power_off": {
                    "description": "Flag indicating whether the virtual machine was powered off cleanly.  This {@term field} may be used to detect that the virtual machine crashed unexpectedly and should be restarted.",
                    "type": "boolean"
                }
            },
            "required": [
                "state"
            ]
        },
        "vcenter.vm.power.state": {
            "type": "string",
            "enum": [
                "POWERED_OFF",
                "POWERED_ON",
                "SUSPENDED"
            ]
        },
        "vcenter.vm.power_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.power.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.storage.policy.compliance.check_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.storage.policy.compliance.check_spec": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Invoke compliance check on the virtual machine home directory if set to true.",
                    "type": "boolean"
                },
                "disks": {
                    "description": "Identifiers of the virtual machine's virtual disks for which compliance should be checked.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "vm_home"
            ]
        },
        "vcenter.vm.storage.policy.compliance.info": {
            "type": "object",
            "properties": {
                "overall_compliance": {
                    "description": "The overall compliance status of the virtual machine and all it's entities.",
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.status"
                },
                "vm_home": {
                    "description": "The storage policy compliance information {@link VmComplianceInfo} for the virtual machine's home directory.",
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.vm_compliance_info"
                },
                "disks": {
                    "description": "The compliance information {@link VmComplianceInfo} for the virtual machine's virtual disks that are currently associated with a storage policy.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.vm_compliance_info"
                            }
                        }
                    }
                }
            },
            "required": [
                "overall_compliance",
                "disks"
            ]
        },
        "vcenter.vm.storage.policy.compliance.status": {
            "type": "string",
            "description": "The {@name Status} {@term enumerated type} defines the storage compliance status of a virtual machine and its applicable entities.",
            "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNKNOWN_COMPLIANCE",
                "NOT_APPLICABLE",
                "OUT_OF_DATE"
            ]
        },
        "vcenter.vm.storage.policy.compliance.vm_compliance_info": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status of the compliance operation.",
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.status"
                },
                "check_time": {
                    "description": "Date and time of the most recent compliance check.",
                    "type": "string",
                    "format": "date-time"
                },
                "policy": {
                    "description": "Identifier of the storage policy associated with the virtual machine.",
                    "type": "string"
                },
                "failure_cause": {
                    "description": "The exception that caused the compliance check to fail. There can be more than one cause, since a policy can contain capabilities from multiple providers. If empty, it implies no failures while retrieving compliance.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                }
            },
            "required": [
                "status",
                "check_time",
                "failure_cause"
            ]
        },
        "vcenter.vm.storage.policy.compliance_check": {
            "type": "object",
            "properties": {
                "check_spec": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.check_spec",
                    "description": "Parameter specifies the entities on which storage policy compliance check is to be invoked. The storage compliance Info {@link Info} is returned."
                }
            }
        },
        "vcenter.vm.storage.policy.compliance_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.compliance.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.storage.policy.disk_policy_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used while performing update operation on the virtual disks.",
                    "$ref": "#/definitions/vcenter.vm.storage.policy.disk_policy_spec.policy_type"
                },
                "policy": {
                    "description": "Storage Policy identification.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.storage.policy.disk_policy_spec.policy_type": {
            "type": "string",
            "description": "The {@name DiskPolicySpec} {@term enumerated type} defines the choices for how to specify the policy to be associated with a virtual disk.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_DEFAULT_POLICY"
            ]
        },
        "vcenter.vm.storage.policy.info": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Storage Policy associated with virtual machine home.",
                    "type": "string"
                },
                "disks": {
                    "description": "Storage policies associated with virtual disks. The values in this {@term map} are storage policy identifiers. They will be identifiers for the resource type:vcenter.StoragePolicy If the {@term map} is empty, the virtual machine does not have any disks or its disks are not associated with a storage policy.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "required": [
                "disks"
            ]
        },
        "vcenter.vm.storage.policy.update_spec": {
            "type": "object",
            "properties": {
                "vm_home": {
                    "description": "Storage policy to be used when reconfiguring the virtual machine home.",
                    "$ref": "#/definitions/vcenter.vm.storage.policy.vm_home_policy_spec"
                },
                "disks": {
                    "description": "Storage policy or policies to be used when reconfiguring virtual machine diks.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm.storage.policy.disk_policy_spec"
                            }
                        }
                    }
                }
            }
        },
        "vcenter.vm.storage.policy.vm_home_policy_spec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used while performing update operation on the virtual machine home's directory.",
                    "$ref": "#/definitions/vcenter.vm.storage.policy.vm_home_policy_spec.policy_type"
                },
                "policy": {
                    "description": "Storage Policy identification.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm.storage.policy.vm_home_policy_spec.policy_type": {
            "type": "string",
            "description": "The {@name PolicyType} {@term enumerated type} defines the choices for how to specify the policy to be associated with the virtual machine home's directory.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_DEFAULT_POLICY"
            ]
        },
        "vcenter.vm.storage.policy_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.storage.policy_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.storage.policy.update_spec",
                    "description": "Storage Policy Specification for updating the virtual machine and virtual disks."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.tools.info": {
            "type": "object",
            "properties": {
                "auto_update_supported": {
                    "description": "Set if the virtual machine supports auto-upgrading Tools via {@link UpgradePolicy}.",
                    "type": "boolean"
                },
                "install_attempt_count": {
                    "description": "Number of attempts that have been made to install or upgrade the version of Tools installed on this virtual machine.",
                    "type": "integer",
                    "format": "int64"
                },
                "error": {
                    "description": "Error that happened, if any, during last attempt to upgrade or install Tools.",
                    "type": "string"
                },
                "version_number": {
                    "description": "Version of VMware Tools installed on the guest operating system.",
                    "type": "integer",
                    "format": "int64"
                },
                "version": {
                    "description": "Version of VMware Tools installed on the guest operating system. This is a human-readable value that should not be parsed.",
                    "type": "string"
                },
                "upgrade_policy": {
                    "description": "Tools upgrade policy setting for the virtual machine. {@link UpgradePolicy}",
                    "$ref": "#/definitions/vcenter.vm.tools.upgrade_policy"
                },
                "version_status": {
                    "description": "Current version status of VMware Tools in the guest operating system, if known.",
                    "$ref": "#/definitions/vcenter.vm.tools.version_status"
                },
                "install_type": {
                    "description": "Current installation type of VMware Tools in the guest operating system.",
                    "$ref": "#/definitions/vcenter.vm.tools.tools_install_type"
                },
                "run_state": {
                    "description": "Current run state of VMware Tools in the guest operating system.",
                    "$ref": "#/definitions/vcenter.vm.tools.run_state"
                }
            },
            "required": [
                "auto_update_supported",
                "upgrade_policy",
                "run_state"
            ]
        },
        "vcenter.vm.tools.installer.info": {
            "type": "object",
            "properties": {
                "is_connected": {
                    "description": "Flag indicating whether the VMware Tools installer is mounted as a CD-ROM.",
                    "type": "boolean"
                }
            },
            "required": [
                "is_connected"
            ]
        },
        "vcenter.vm.tools.installer_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.tools.installer.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.tools.run_state": {
            "type": "string",
            "description": "Current run state of VMware Tools in the guest operating system.",
            "enum": [
                "NOT_RUNNING",
                "RUNNING",
                "EXECUTING_SCRIPTS"
            ]
        },
        "vcenter.vm.tools.tools_install_type": {
            "type": "string",
            "description": "The {@name ToolsInstallType} {@term enumerated type} defines the installation type of the Tools in the guest operating system.",
            "enum": [
                "UNKNOWN",
                "MSI",
                "TAR",
                "OSP",
                "OPEN_VM_TOOLS"
            ]
        },
        "vcenter.vm.tools.update_spec": {
            "type": "object",
            "properties": {
                "upgrade_policy": {
                    "description": "Tools upgrade policy setting for the virtual machine. {@link UpgradePolicy}",
                    "$ref": "#/definitions/vcenter.vm.tools.upgrade_policy"
                }
            }
        },
        "vcenter.vm.tools.upgrade_policy": {
            "type": "string",
            "description": "The {@name UpgradePolicy} {@term enumerated type} defines when Tools are auto-upgraded for a virtual machine.",
            "enum": [
                "MANUAL",
                "UPGRADE_AT_POWER_CYCLE"
            ]
        },
        "vcenter.vm.tools.version_status": {
            "type": "string",
            "description": "The {@name VersionStatus} {@term enumerated type} defines the version status types of VMware Tools installed in the guest operating system.",
            "enum": [
                "NOT_INSTALLED",
                "CURRENT",
                "UNMANAGED",
                "TOO_OLD_UNSUPPORTED",
                "SUPPORTED_OLD",
                "SUPPORTED_NEW",
                "TOO_NEW",
                "BLACKLISTED"
            ]
        },
        "vcenter.vm.tools_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm.tools.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm.tools_update": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm.tools.update_spec",
                    "description": "The new values."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm.tools_upgrade": {
            "type": "object",
            "properties": {
                "command_line_options": {
                    "type": "string",
                    "description": "Command line options passed to the installer to modify the installation procedure for Tools."
                }
            }
        },
        "vcenter.vm_template.library_items.check_outs.check_in_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm_template.library_items.check_outs.check_in_spec": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message describing the changes made to the virtual machine.",
                    "type": "string"
                }
            },
            "required": [
                "message"
            ]
        },
        "vcenter.vm_template.library_items.check_outs.check_out_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm_template.library_items.check_outs.check_out_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the virtual machine to check out of the library item.",
                    "type": "string"
                },
                "placement": {
                    "description": "Information used to place the checked out virtual machine.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs.placement_spec"
                },
                "powered_on": {
                    "description": "Specifies whether the virtual machine should be powered on after check out.",
                    "type": "boolean"
                }
            }
        },
        "vcenter.vm_template.library_items.check_outs.info": {
            "type": "object",
            "properties": {
                "time": {
                    "description": "Date and time when the virtual machine was checked out.",
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "description": "Name of the user who checked out the virtual machine.",
                    "type": "string"
                }
            },
            "required": [
                "time",
                "user"
            ]
        },
        "vcenter.vm_template.library_items.check_outs.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm_template.library_items.check_outs.placement_spec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster onto which the virtual machine should be placed. If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                }
            }
        },
        "vcenter.vm_template.library_items.check_outs.summary": {
            "type": "object",
            "properties": {
                "vm": {
                    "description": "Identifier of the checked out virtual machine.",
                    "type": "string"
                }
            },
            "required": [
                "vm"
            ]
        },
        "vcenter.vm_template.library_items.check_outs_check_in": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs.check_in_spec",
                    "description": "Specification used to check in the virtual machine into the library item."
                }
            }
        },
        "vcenter.vm_template.library_items.check_outs_check_out": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs.check_out_spec",
                    "description": "Specification used to check out the source virtual machine template as a virtual machine."
                }
            }
        },
        "vcenter.vm_template.library_items.check_outs_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm_template.library_items.check_outs.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm_template.library_items.cpu_info": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of CPU cores.",
                    "type": "integer",
                    "format": "int64"
                },
                "cores_per_socket": {
                    "description": "Number of CPU cores per socket.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "count",
                "cores_per_socket"
            ]
        },
        "vcenter.vm_template.library_items.cpu_update_spec": {
            "type": "object",
            "properties": {
                "num_cpus": {
                    "description": "Number of virtual processors in the deployed virtual machine.",
                    "type": "integer",
                    "format": "int64"
                },
                "num_cores_per_socket": {
                    "description": "Number of cores among which to distribute CPUs in the deployed virtual machine.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "vcenter.vm_template.library_items.create_placement_spec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the virtual machine template should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the virtual machine template should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine template should be placed. If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster onto which the virtual machine template should be placed. If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                }
            }
        },
        "vcenter.vm_template.library_items.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm_template.library_items.create_spec": {
            "type": "object",
            "properties": {
                "source_vm": {
                    "description": "Identifier of the source virtual machine to create the library item from.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the library item.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the library item.",
                    "type": "string"
                },
                "library": {
                    "description": "Identifier of the library in which the new library item should be created.",
                    "type": "string"
                },
                "vm_home_storage": {
                    "description": "Storage location for the virtual machine template's configuration and log files.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.create_spec_vm_home_storage"
                },
                "disk_storage": {
                    "description": "Storage specification for the virtual machine template's disks.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.create_spec_disk_storage"
                },
                "disk_storage_overrides": {
                    "description": "Storage specification for individual disks in the virtual machine template. This is specified as a mapping between disk identifiers in the source virtual machine and their respective storage specifications.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm_template.library_items.create_spec_disk_storage"
                            }
                        }
                    }
                },
                "placement": {
                    "description": "Information used to place the virtual machine template.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.create_placement_spec"
                }
            },
            "required": [
                "source_vm",
                "name",
                "library"
            ]
        },
        "vcenter.vm_template.library_items.create_spec_disk_storage": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier for the datastore associated with a virtual machine template's disk.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Storage policy for a virtual machine template's disk.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.create_spec_disk_storage_policy"
                }
            }
        },
        "vcenter.vm_template.library_items.create_spec_disk_storage_policy": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used when creating a virtual machine template's disk.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.create_spec_disk_storage_policy.type"
                },
                "policy": {
                    "description": "Identifier for the storage policy to use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm_template.library_items.create_spec_disk_storage_policy.type": {
            "type": "string",
            "description": "Policy type for a virtual machine template's disk.",
            "enum": [
                "USE_SPECIFIED_POLICY"
            ]
        },
        "vcenter.vm_template.library_items.create_spec_vm_home_storage": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore for the virtual machine template's configuration and log files.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Storage policy for the virtual machine template's configuration and log files.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.create_spec_vm_home_storage_policy"
                }
            }
        },
        "vcenter.vm_template.library_items.create_spec_vm_home_storage_policy": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used when creating the virtual machine template's configuration and log files.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.create_spec_vm_home_storage_policy.type"
                },
                "policy": {
                    "description": "Identifier for the storage policy to use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm_template.library_items.create_spec_vm_home_storage_policy.type": {
            "type": "string",
            "description": "Policy type for the virtual machine template's configuration and log files.",
            "enum": [
                "USE_SPECIFIED_POLICY"
            ]
        },
        "vcenter.vm_template.library_items.deploy_placement_spec": {
            "type": "object",
            "properties": {
                "folder": {
                    "description": "Virtual machine folder into which the deployed virtual machine should be placed.",
                    "type": "string"
                },
                "resource_pool": {
                    "description": "Resource pool into which the deployed virtual machine should be placed.",
                    "type": "string"
                },
                "host": {
                    "description": "Host onto which the virtual machine should be placed. If {@name #host} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #host}. If {@name #host} and {@name #cluster} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                },
                "cluster": {
                    "description": "Cluster onto which the deployed virtual machine should be placed. If {@name #cluster} and {@name #resourcePool} are both specified, {@name #resourcePool} must belong to {@name #cluster}. If {@name #cluster} and {@name #host} are both specified, {@name #host} must be a member of {@name #cluster}.",
                    "type": "string"
                }
            }
        },
        "vcenter.vm_template.library_items.deploy_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm_template.library_items.deploy_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the deployed virtual machine.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the deployed virtual machine.",
                    "type": "string"
                },
                "vm_home_storage": {
                    "description": "Storage location for the deployed virtual machine's configuration and log files.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_spec_vm_home_storage"
                },
                "disk_storage": {
                    "description": "Storage specification for the deployed virtual machine's disks.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_spec_disk_storage"
                },
                "disk_storage_overrides": {
                    "description": "Storage specification for individual disks in the deployed virtual machine. This is specified as a mapping between disk identifiers in the source virtual machine template contained in the library item and their storage specifications.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_spec_disk_storage"
                            }
                        }
                    }
                },
                "placement": {
                    "description": "Information used to place the deployed virtual machine.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_placement_spec"
                },
                "powered_on": {
                    "description": "Specifies whether the deployed virtual machine should be powered on after deployment.",
                    "type": "boolean"
                },
                "guest_customization": {
                    "description": "Guest customization spec to apply to the deployed virtual machine.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.guest_customization_spec"
                },
                "hardware_customization": {
                    "description": "Hardware customization spec which specifies updates to the deployed virtual machine.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.hardware_customization_spec"
                }
            },
            "required": [
                "name"
            ]
        },
        "vcenter.vm_template.library_items.deploy_spec_disk_storage": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier for the datastore associated the deployed virtual machine's disk.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Storage policy for the deployed virtual machine's disk.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_spec_disk_storage_policy"
                }
            }
        },
        "vcenter.vm_template.library_items.deploy_spec_disk_storage_policy": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used when creating the deployed virtual machine's disk.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_spec_disk_storage_policy.type"
                },
                "policy": {
                    "description": "Identifier of the storage policy to use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm_template.library_items.deploy_spec_disk_storage_policy.type": {
            "type": "string",
            "description": "Policy type for the deployed virtual machine's disk.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_SOURCE_POLICY"
            ]
        },
        "vcenter.vm_template.library_items.deploy_spec_vm_home_storage": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore for the deployed virtual machine's configuration and log files.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Storage policy for the deployed virtual machine's configuration and log files.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_spec_vm_home_storage_policy"
                }
            }
        },
        "vcenter.vm_template.library_items.deploy_spec_vm_home_storage_policy": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Policy type to be used when creating the deployed virtual machine's configuration and log files.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_spec_vm_home_storage_policy.type"
                },
                "policy": {
                    "description": "Identifier for the storage policy to use.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "vcenter.vm_template.library_items.deploy_spec_vm_home_storage_policy.type": {
            "type": "string",
            "description": "Policy type for the deployed virtual machine's configuration and log files.",
            "enum": [
                "USE_SPECIFIED_POLICY",
                "USE_SOURCE_POLICY"
            ]
        },
        "vcenter.vm_template.library_items.disk_info": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Capacity of the virtual disk in bytes.",
                    "type": "integer",
                    "format": "int64"
                },
                "disk_storage": {
                    "description": "Disk storage related information.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.disk_storage_info"
                }
            },
            "required": [
                "disk_storage"
            ]
        },
        "vcenter.vm_template.library_items.disk_storage_info": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore where the disk is stored.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Identifier of the storage policy associated with the virtual disk.",
                    "type": "string"
                }
            },
            "required": [
                "datastore"
            ]
        },
        "vcenter.vm_template.library_items.disk_update_spec": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Updated capacity of the virtual disk backing in bytes. This value has to be larger than the original capacity of the disk.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "capacity"
            ]
        },
        "vcenter.vm_template.library_items.ethernet_info": {
            "type": "object",
            "properties": {
                "backing_type": {
                    "description": "Network backing type for the virtual Ethernet adapter.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.ethernet_info.network_backing_type"
                },
                "mac_type": {
                    "description": "MAC address type of the ethernet adapter.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.ethernet_info.mac_address_type"
                },
                "network": {
                    "description": "Identifier of the network backing the virtual Ethernet adapter.",
                    "type": "string"
                }
            },
            "required": [
                "backing_type",
                "mac_type"
            ]
        },
        "vcenter.vm_template.library_items.ethernet_info.mac_address_type": {
            "type": "string",
            "description": "The {@name MacAddressType} {@term enumerated type} defines the valid MAC address origins for a virtual Ethernet adapter.",
            "enum": [
                "MANUAL",
                "GENERATED",
                "ASSIGNED"
            ]
        },
        "vcenter.vm_template.library_items.ethernet_info.network_backing_type": {
            "type": "string",
            "description": "The {@name NetworkBackingType} {@term enumerated type} defines valid network backing types for a virtual Ethernet adapter.",
            "enum": [
                "STANDARD_PORTGROUP",
                "HOST_DEVICE",
                "DISTRIBUTED_PORTGROUP",
                "OPAQUE_NETWORK"
            ]
        },
        "vcenter.vm_template.library_items.ethernet_update_spec": {
            "type": "object",
            "properties": {
                "network": {
                    "description": "Identifier of the network backing the virtual Ethernet adapter.",
                    "type": "string"
                }
            }
        },
        "vcenter.vm_template.library_items.guest_customization_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the customization specification.",
                    "type": "string"
                }
            }
        },
        "vcenter.vm_template.library_items.hardware_customization_spec": {
            "type": "object",
            "properties": {
                "nics": {
                    "description": "Map of Ethernet network adapters to update.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm_template.library_items.ethernet_update_spec"
                            }
                        }
                    }
                },
                "disks_to_remove": {
                    "description": "Idenfiers of disks to remove from the deployed virtual machine.",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "disks_to_update": {
                    "description": "Disk update specification for individual disks in the deployed virtual machine.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm_template.library_items.disk_update_spec"
                            }
                        }
                    }
                },
                "cpu_update": {
                    "description": "CPU update specification for the deployed virtual machine.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.cpu_update_spec"
                },
                "memory_update": {
                    "description": "Memory update specification for the deployed virtual machine.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.memory_update_spec"
                }
            }
        },
        "vcenter.vm_template.library_items.info": {
            "type": "object",
            "properties": {
                "guest_OS": {
                    "description": "Configured guest operating system of the virtual machine template.",
                    "$ref": "#/definitions/vcenter.vm.guest_OS"
                },
                "cpu": {
                    "description": "CPU configuration of the virtual machine template.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.cpu_info"
                },
                "memory": {
                    "description": "Memory configuration of the virtual machine template.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.memory_info"
                },
                "vm_home_storage": {
                    "description": "Storage information about the virtual machine template's configuration and log files.",
                    "$ref": "#/definitions/vcenter.vm_template.library_items.vm_home_storage_info"
                },
                "disks": {
                    "description": "Storage information about the virtual machine template's virtual disks.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm_template.library_items.disk_info"
                            }
                        }
                    }
                },
                "nics": {
                    "description": "Information about the virtual machine template's virtual ethernet adapters.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vcenter.vm_template.library_items.ethernet_info"
                            }
                        }
                    }
                },
                "vm_template": {
                    "description": "Identifier of the latest virtual machine template contained in the library item. This {@term field} is the managed object identifier used to identify the virtual machine template in the vSphere Management (SOAP) API.",
                    "type": "string"
                }
            },
            "required": [
                "guest_OS",
                "cpu",
                "memory",
                "vm_home_storage",
                "disks",
                "nics",
                "vm_template"
            ]
        },
        "vcenter.vm_template.library_items.memory_info": {
            "type": "object",
            "properties": {
                "size_MiB": {
                    "description": "Memory size in mebibytes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "size_MiB"
            ]
        },
        "vcenter.vm_template.library_items.memory_update_spec": {
            "type": "object",
            "properties": {
                "memory": {
                    "description": "Size of a virtual machine's memory in MB.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "vcenter.vm_template.library_items.versions.info": {
            "type": "object",
            "properties": {
                "vm_template": {
                    "description": "Identifier of the virtual machine template associated with the library item version. This {@term field} is the managed object identifier used to identify the virtual machine template in the vSphere Management (SOAP) API.",
                    "type": "string"
                }
            },
            "required": [
                "vm_template"
            ]
        },
        "vcenter.vm_template.library_items.versions.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vcenter.vm_template.library_items.versions.summary"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm_template.library_items.versions.rollback_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm_template.library_items.versions.rollback_spec": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message describing the reason for the rollback.",
                    "type": "string"
                }
            },
            "required": [
                "message"
            ]
        },
        "vcenter.vm_template.library_items.versions.summary": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "The version of the library item.",
                    "type": "string"
                },
                "vm_template": {
                    "description": "Identifier of the virtual machine template associated with the library item version. This {@term field} is the managed object identifier used to identify the virtual machine template in the vSphere Management (SOAP) API.",
                    "type": "string"
                }
            },
            "required": [
                "version",
                "vm_template"
            ]
        },
        "vcenter.vm_template.library_items.versions_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm_template.library_items.versions.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vcenter.vm_template.library_items.versions_rollback": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm_template.library_items.versions.rollback_spec",
                    "description": "Specification to rollback the library item."
                }
            }
        },
        "vcenter.vm_template.library_items.vm_home_storage_info": {
            "type": "object",
            "properties": {
                "datastore": {
                    "description": "Identifier of the datastore where the virtual machine template's configuration and log files are stored.",
                    "type": "string"
                },
                "storage_policy": {
                    "description": "Identifier of the storage policy associated with the virtual machine template's configuration and log files.",
                    "type": "string"
                }
            },
            "required": [
                "datastore"
            ]
        },
        "vcenter.vm_template.library_items_create": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm_template.library_items.create_spec",
                    "description": "information used to create the library item from the source virtual machine."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm_template.library_items_deploy": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vcenter.vm_template.library_items.deploy_spec",
                    "description": "specification of how the virtual machine should be deployed."
                }
            },
            "required": [
                "spec"
            ]
        },
        "vcenter.vm_template.library_items_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.vm_template.library_items.info"
                }
            },
            "required": [
                "value"
            ]
        }
    }
}