{
    "swagger": "2.0",
    "info": {
        "description": "",
        "title": "contentinternal",
        "version": "2.0.0"
    },
    "host": "<vcenter>",
    "securityDefinitions": {
        "session_id": {
            "in": "header",
            "name": "vmware-api-session-id",
            "type": "apiKey"
        },
        "basic_auth": {
            "type": "basic"
        }
    },
    "basePath": "",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "tags": [],
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/rest/com/vmware/contentinternal/admin/vcloudair/vcenter": {
            "get": {
                "tags": [
                    "admin/vcloudair/vcenter"
                ],
                "summary": "Returns identifiers of all vCenter Servers in the Content Library.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The {@term set} of identifiers of all vCenter Servers in the Content Library.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.admin.vcloudair.vcenter.list_resp"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/admin/vcloudair/vcenter/id:{vcenter_id}": {
            "patch": {
                "tags": [
                    "admin/vcloudair/vcenter"
                ],
                "summary": "Update a vCenter Server. <p> This is an incremental update to the vCenter Server. {@term fields} that are {@term unset} in the update specification will be left unchanged.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vcenter_id",
                        "description": ""
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.admin.vcloudair.vcenter_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the specified vCenter Server specified by {@name vcenterId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the provided vCenter Server is inaccessible.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "admin/vcloudair/vcenter"
                ],
                "summary": "Retrieves the specified vCenter Server information.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vcenter_id",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link Info} instance representing the specified vCenter ID.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.admin.vcloudair.vcenter_resp"
                        }
                    },
                    "404": {
                        "description": "if the vCenter Server associated with {@param.name vcenterId} does not exist in the Content Library Service.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/admin/vcloudair/vcenter/id:{vcenter_id}?~action=remove": {
            "post": {
                "tags": [
                    "admin/vcloudair/vcenter"
                ],
                "summary": "Remove the specified vCenter Server from the Content Library Service.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "vcenter_id",
                        "description": "Identifier of the vCenter Server to be removed."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the vCenter Server associated with {@param.name vcenterId} does not exist in the Content Library Service.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "remove",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/admin/vcloudair/vcenter?~action=add": {
            "post": {
                "tags": [
                    "admin/vcloudair/vcenter"
                ],
                "summary": "Add a vCenter Server. <p> The add operation is idempotent, it always returns the same ID given the same addSpec.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.admin.vcloudair.vcenter_add"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the added vCenter Server.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.admin.vcloudair.vcenter.add_resp"
                        }
                    },
                    "400": {
                        "description": "if the provided vCenter server already exists.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.already_exists_error"
                        }
                    }
                },
                "operationId": "add",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/cls-activation-service?~action=cancel": {
            "post": {
                "tags": [
                    "cls_activation_service"
                ],
                "summary": "Cancels an invocation.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_activation_service_cancel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "cancel",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/cls-configuration-service": {
            "put": {
                "tags": [
                    "cls_configuration_service"
                ],
                "summary": "Sets the configuration value with the given configuration name.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_configuration_service_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the configuration cannot be found by the given name",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the given configuration value is invalid",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "cls_configuration_service"
                ],
                "summary": "Lists all configurations for content library service",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of all content library configurations in (name, value) pair",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_configuration_service.list_resp"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/cls-configuration-service?~action=get": {
            "post": {
                "tags": [
                    "cls_configuration_service"
                ],
                "summary": "Returns a configuration value with the given configuration name.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_configuration_service_get"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "configuration value in String",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_configuration_service_resp"
                        }
                    },
                    "404": {
                        "description": "if the configuration cannot be found by the given name",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/cls-stress-service": {
            "put": {
                "tags": [
                    "cls_stress_service"
                ],
                "summary": "Sets a key-value pair. Will override any predefined value.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_stress_service_set"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "set",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/cls-stress-service/all": {
            "put": {
                "tags": [
                    "cls_stress_service"
                ],
                "summary": "Sets a key-value pairs. Will override any predefined values.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_stress_service_set_all"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "set_all",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/cls-stress-service?~action=get": {
            "post": {
                "tags": [
                    "cls_stress_service"
                ],
                "summary": "Returns the value corresponding to the input key if it exists. Otherwise, null.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_stress_service_get"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_stress_service_resp"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/cls-stress-service?~action=get-all": {
            "post": {
                "tags": [
                    "cls_stress_service"
                ],
                "summary": "Returns all the defined key-value pairs.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.cls_stress_service.get_all_resp"
                        }
                    }
                },
                "operationId": "get_all",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/cls-stress-service?~action=reset": {
            "post": {
                "tags": [
                    "cls_stress_service"
                ],
                "summary": "Reset all settings to their default values.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "reset",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service": {
            "get": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Get all the diagnostic counters for ClService.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Map of diagnostic counters keyed by counter/component name.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.list_resp"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=clear": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Clears diagnostics for given opId.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service_clear"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "clear",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=clear-all": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Clears diagnostics for all opId.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "clear_all",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=garbage-collect": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Force a garbage collect. This can make the memory usage statistics returned by getDiagnosticValues more stable but has durn CPU cycles.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "garbage_collect",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=get": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Get diagnostics for a given opId.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service_get"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ApiCallDiagnostics for given opId.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service_resp"
                        }
                    },
                    "404": {
                        "description": "if there are no diagnostics available for given OpId",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=get-diagnostics-values": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Get all diagnostic values. <p>",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "json representation of a map keyed by provider name to values. The values can be arbitrarily an arbitrarily nested datastructure.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.get_diagnostics_values_resp"
                        }
                    }
                },
                "operationId": "get_diagnostics_values",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=test-activity-framework": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Run basic tests for AF for ClService.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "TestResult describing the result.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_activity_framework_resp"
                        }
                    }
                },
                "operationId": "test_activity_framework",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=test-component-manager-connectivity": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Run test to check Component Manager connectivity from ClService",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "TestResult describing the result.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_component_manager_connectivity_resp"
                        }
                    }
                },
                "operationId": "test_component_manager_connectivity",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=test-database-connectivity": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Run database connectivity test for the ClService.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "TestResult describing the result.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_database_connectivity_resp"
                        }
                    }
                },
                "operationId": "test_database_connectivity",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=test-echo": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Run echo test against the ClService.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service_test_echo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TestResult describing the result.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_echo_resp"
                        }
                    }
                },
                "operationId": "test_echo",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=test-inventory-service-connectivity": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Run test to check Inventory Service connectivity from ClService.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "TestResult describing the result.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_inventory_service_connectivity_resp"
                        }
                    }
                },
                "operationId": "test_inventory_service_connectivity",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/diagnostics/cls-diagnostic-service?~action=test-virtual-center-connectivity": {
            "post": {
                "tags": [
                    "diagnostics/cls_diagnostic_service"
                ],
                "summary": "Run test to check VC connectivity from ClService.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "TestResult desribing the result.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_virtual_center_connectivity_resp"
                        }
                    }
                },
                "operationId": "test_virtual_center_connectivity",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/inv-query-service?~action=query": {
            "post": {
                "tags": [
                    "inv_query_service"
                ],
                "summary": "Query the inventory service for all documents associated with the given ID.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.inv_query_service_query"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the model object associated with the given ID.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.inv_query_service.query_resp"
                        }
                    },
                    "404": {
                        "description": "if the document cannot be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the specified binding class has not been registered with the publishing framework",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "query",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/inv-query-service?~action=query-xml": {
            "post": {
                "tags": [
                    "inv_query_service"
                ],
                "summary": "Query the inventory service for all XML documents associated with the given ID.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.inv_query_service_query_xml"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the XML document associated with the given ID.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.inv_query_service.query_xml_resp"
                        }
                    },
                    "404": {
                        "description": "if the document cannot be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the specified binding class has not been registered with the publishing framework",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "query_xml",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/inv-query-service?~action=synchronized-query": {
            "post": {
                "tags": [
                    "inv_query_service"
                ],
                "summary": "Query the inventory service for all documents associated with the given ID. This query waits until the item has been published with the given change type.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.inv_query_service_synchronized_query"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the XML document associated with the given ID.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.inv_query_service.synchronized_query_resp"
                        }
                    },
                    "404": {
                        "description": "if the document cannot be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the specified binding class has not been registered with the publishing framework",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "synchronized_query",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/inv-query-service?~action=synchronized-query-xml": {
            "post": {
                "tags": [
                    "inv_query_service"
                ],
                "summary": "Query the inventory service for all XML documents associated with the given ID. This query waits until the item has been published with the given change type.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.inv_query_service_synchronized_query_xml"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the XML document associated with the given ID.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.inv_query_service.synchronized_query_xml_resp"
                        }
                    },
                    "404": {
                        "description": "if the document cannot be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the specified binding class has not been registered with the publishing framework",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "synchronized_query_xml",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/library/metadata": {
            "get": {
                "tags": [
                    "library/metadata"
                ],
                "summary": "Lists all metadata associated with the library. If no metadata is found, the method will return an empty list.",
                "parameters": [
                    {
                        "type": "string",
                        "in": "query",
                        "name": "library_id",
                        "description": "the ID of the library",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the list of metadata info associated with the library",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.library.metadata.list_resp"
                        }
                    },
                    "404": {
                        "description": "if the library cannot be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the metadata service is disabled.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/library/metadata/id:{library_id}": {
            "post": {
                "tags": [
                    "library/metadata"
                ],
                "summary": "Adds the list of metadata key/value pairs to a library. If the key on this library already exists, this {@term operation} will override the old value with the new one. Existing metadata of other keys on the library will remain unchanged.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_id",
                        "description": "the ID of the library"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.library.metadata_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the library cannot be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the metadata service is disabled.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "library/metadata"
                ],
                "summary": "Removes metadata from the library. If the library doesn't have such a key from the list, this call will be a no-op. If specific keys are not provided, all metadata for the library is removed.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_id",
                        "description": "the ID of the library"
                    },
                    {
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "keys",
                        "description": "the keys to remove"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the library cannot be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the metadata service is disabled.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/library/metadata/id:{library_id}?~action=get": {
            "post": {
                "tags": [
                    "library/metadata"
                ],
                "summary": "Gets the metadata info associated with this key on the library. If no key is defined this {@term operation} will return null.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_id",
                        "description": "the ID of the library"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.library.metadata_get"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the metadata info associated with this key",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.library.metadata_resp"
                        }
                    },
                    "404": {
                        "description": "if the library cannot be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the metadata service is disabled.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.error_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/local/library": {
            "post": {
                "tags": [
                    "local/library"
                ],
                "summary": "Creates a new local library.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the newly created {@link Library}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library.create_resp"
                        }
                    },
                    "400": {
                        "description": "if using multiple storage backings.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "local/library"
                ],
                "summary": "Returns the identifiers of all local libraries in the Content Library.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The {@term list} of identifiers of all local libraries in the Content Library.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library.list_resp"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/local/library/id:{library_id}": {
            "patch": {
                "tags": [
                    "local/library"
                ],
                "summary": "Updates the properties of a local library. <p> This is an incremental update to the local library. {@term Fields} that are {@term unset} in the update specification will be left unchanged.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_id",
                        "description": "Identifier of the local library to update."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the library specified by {@param.name libraryId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@param.name updateSpec} is not valid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "local/library"
                ],
                "summary": "Returns a given local library.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_id",
                        "description": "Identifier of the local library to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link Library} instance associated with {@param.name libraryId}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library_resp"
                        }
                    },
                    "404": {
                        "description": "if the library specified by {@param.name libraryId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the library specified by {@param.name libraryId} is not a local library.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_element_type_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "local/library"
                ],
                "summary": "Deletes the specified local library. <p> Deleting a local library will remove the entry immediately and begin an asynchronous task to remove all cached content for the library. If the asynchronous task fails, file content may remain on the storage backing. This content will require manual removal.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_id",
                        "description": "Identifier of the local library to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the library specified by {@param.name libraryId} is not a local library.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_element_type_error"
                        }
                    },
                    "404": {
                        "description": "if the library specified by {@param.name libraryId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/local/library/item": {
            "post": {
                "tags": [
                    "local/library/item"
                ],
                "summary": "Creates a new library item in a local library. <p> A new library item is created without any content. After creation, content can be added through the {@link UpdateSession} and {@link File} {@term services}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library.item_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the new library item.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library.item.create_resp"
                        }
                    },
                    "404": {
                        "description": "if the {@link CreateSpec#libraryId} property of {@param.name createSpec} refers to a library that does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@link CreateSpec#libraryId} property of {@param.name createSpec} is not a local library.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_element_type_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "local/library/item"
                ],
                "summary": "Returns the identifiers of all items in the given library.",
                "parameters": [
                    {
                        "type": "string",
                        "in": "query",
                        "name": "library_id",
                        "description": "Identifier of the library whose items should be returned.",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@term list} of identifiers of the items in the library specified by {@param.name libraryId}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library.item.list_resp"
                        }
                    },
                    "404": {
                        "description": "if the library associated with {@param.name libraryId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/local/library/item/id:{library_item_id}": {
            "patch": {
                "tags": [
                    "local/library/item"
                ],
                "summary": "Updates the properties of a library item.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_item_id",
                        "description": "Identifier of the library item to update."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library.item_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the item associated with {@param.name libraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "local/library/item"
                ],
                "summary": "Returns the library item with the given identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_item_id",
                        "description": "Identifier of the library item to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link Info} instance that corresponds to the {@param.name libraryItemId}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.local.library.item_resp"
                        }
                    },
                    "404": {
                        "description": "if the item associated with {@param.name libraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@param.name libraryItemId} is not an item in a local library.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_element_type_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "local/library/item"
                ],
                "summary": "Deletes the specified library item.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_item_id",
                        "description": "Identifier of the library item to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the {@param.name libraryItemId} is not an item in a local library.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_element_type_error"
                        }
                    },
                    "404": {
                        "description": "if the item associated with {@param.name libraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group": {
            "post": {
                "tags": [
                    "replication/group"
                ],
                "summary": "Creates a replication group with the specified {@param.name createSpec}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier for the replication group.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the {@link CreateSpec#localLibrary} propery of {@param.name createSpec} does not refer to a local library.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_element_type_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "replication/group"
                ],
                "summary": "Returns the identifiers of all replication groups in the Content Library.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The {@term list} of identifiers of all replication groups in the Content Library.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.list_resp"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/id:{replication_group_id}": {
            "get": {
                "tags": [
                    "replication/group"
                ],
                "summary": "Returns the information associated with the replication group and all its members.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "replication_group_id",
                        "description": "Identifier of the replication group"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link Info} instance that corresponds to {@param.name replicationGroupId}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group_resp"
                        }
                    },
                    "404": {
                        "description": "if the replication group with the specified {@param.name replicationGroupId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "replication/group"
                ],
                "summary": "Updates the properties of the replication group.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "replication_group_id",
                        "description": "Identifier of the replication group to update."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the replication group identified by {@param.name replicationGroupId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@param.name updateSpec} is not valid.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "replication/group"
                ],
                "summary": "Deletes a replication group. Members in the group have to be deleted before the group can be deleted.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "replication_group_id",
                        "description": "Identifier of the replication group to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the replication group with the specified {@param.name replicationGroupId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the replication group is not empty and contains group members.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/library/id:{library_id}": {
            "get": {
                "tags": [
                    "replication/group/library"
                ],
                "summary": "Returns the library with the given identifier on the specific node.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_id",
                        "description": "Identifier of the replicated library to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link Info} instance that corresponds to {@param.name libraryId}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library_resp"
                        }
                    },
                    "404": {
                        "description": "if the library associated with {@param.name libraryId} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@param.name libraryId} is not a replicated library.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_element_type_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "replication/group/library"
                ],
                "summary": "Updates the properties of a master library. This operation triggers replication if {@link Service.Info#autoReplicate} is set. <p> This is an incremental update to the replicated library. {@term Fields} that are {@term unset} in the update specification will be left unchanged.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_id",
                        "description": "Identifier of the master replicated library to update."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the library specified by {@param.name libraryId} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@param.name libraryId} is not specified.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/library/item": {
            "get": {
                "tags": [
                    "replication/group/library/item"
                ],
                "summary": "Returns the identifiers of all items in the given library.",
                "parameters": [
                    {
                        "type": "string",
                        "in": "query",
                        "name": "library_id",
                        "description": "Identifier of the library whose items should be returned.",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@term list} of identifiers of the items in the library specified by {@param.name libraryId}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library.item.list_resp"
                        }
                    },
                    "404": {
                        "description": "if the library associated with {@param.name libraryId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@param.name libraryId} is not a replicated library.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_element_type_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "replication/group/library/item"
                ],
                "summary": "Creates a new library item in a master library of a replication group. <p> A new library item is created without any content. After creation, content can be added through the {@link UpdateSession} and {@link File} {@term services}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library.item_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the new library item.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library.item.create_resp"
                        }
                    },
                    "404": {
                        "description": "if the {@link CreateSpec#libraryId} property of {@param.name createSpec} refers to a library that does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@link CreateSpec#libraryId} property of {@param.name createSpec} is not a master library instance in a replicated library group. TODO: introduce an atomic create and udpate API",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_element_type_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/library/item/id:{library_item_id}": {
            "delete": {
                "tags": [
                    "replication/group/library/item"
                ],
                "summary": "Deletes the specified library item. This item will be removed from all replica instances in the next replication cycle.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_item_id",
                        "description": "Identifier of the library item to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "if the {@param.name libraryId} is not specified.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    },
                    "404": {
                        "description": "if the item associated with {@param.name libraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "replication/group/library/item"
                ],
                "summary": "Returns the library item with the given identifier.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_item_id",
                        "description": "Identifier of the library item to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@link Info} instance that corresponds to the {@param.name libraryItemId}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library.item_resp"
                        }
                    },
                    "404": {
                        "description": "if the item associated with {@param.name libraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@param.name libraryId} is not specified.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "replication/group/library/item"
                ],
                "summary": "Updates the properties of a library item.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "library_item_id",
                        "description": "Identifier of the library item to update."
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library.item_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the item associated with {@param.name libraryItemId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the {@param.name libraryId} is not specified.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "update",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/library/item/status/id:{replication_group_id}": {
            "get": {
                "tags": [
                    "replication/group/library/item/status"
                ],
                "summary": "Gets the replication status of library items in the given replication group.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "replication_group_id",
                        "description": "Identifier of the replication group."
                    },
                    {
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "item_ids",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Replication status for items in the library.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library.item.status_resp"
                        }
                    },
                    "404": {
                        "description": "if the replication group specified by {@param.name replicationGroupId} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/library/status": {
            "get": {
                "tags": [
                    "replication/group/library/status"
                ],
                "summary": "Lists status of all libraries in the replication group. Cached status information for other members in the replication group is provided when availble.",
                "parameters": [
                    {
                        "type": "string",
                        "in": "query",
                        "name": "replication_group_id",
                        "description": "Identifier of the replication group",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status information for libraries in replication group",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library.status.list_resp"
                        }
                    },
                    "404": {
                        "description": "if the replication group specified by {@param.name replicationGroupId} cannot not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/library/status/id:{replication_group_member_id}": {
            "get": {
                "tags": [
                    "replication/group/library/status"
                ],
                "summary": "Gets the Status information of the library associated with the specified replication group member.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "replication_group_member_id",
                        "description": "Member ID whose status to return"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status information for the given member library",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.library.status_resp"
                        }
                    },
                    "404": {
                        "description": "if the replication group member specified by {@param.name replicationGroupMemberId} cannot be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/member": {
            "get": {
                "tags": [
                    "replication/group/member"
                ],
                "summary": "Returns the identifiers of all members in the given replication group.",
                "parameters": [
                    {
                        "type": "string",
                        "in": "query",
                        "name": "replication_group_id",
                        "description": "Identifier of the replication group whose members should be returned.",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@term list} of identifiers of the members in the replication group specified by {@param.name replicationGroupId}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.member.list_resp"
                        }
                    },
                    "404": {
                        "description": "if the replication group associated with {@param.name replicationGroupId} could not be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "replication/group/member"
                ],
                "summary": "Creates a master or replica member in the replication group. A replica library is asynchronously created at the specified {@param.name createSpec#replicaCreateSpec#clsEndpoint} location.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.member_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the newly created replication group member.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.member.create_resp"
                        }
                    },
                    "404": {
                        "description": "if the {@param.name replicationGroupId} is not found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the CLS endpoint specified in {@param.name createSpec} is not accessible.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/member/id:{member_id}": {
            "delete": {
                "tags": [
                    "replication/group/member"
                ],
                "summary": "Deletes the given member and the associated library from the replication group. The master replication group member can only be deleted after all replica group members are deleted.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "member_id",
                        "description": "Replication group member to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "on attempting to delete the master member in a group with replica members.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state_error"
                        }
                    },
                    "404": {
                        "description": "if the replication group member identified by {@param.name memberId} cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "delete",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            },
            "get": {
                "tags": [
                    "replication/group/member"
                ],
                "summary": "Gets information about the given replication group member.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "member_id",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the replication group member.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.member_resp"
                        }
                    },
                    "404": {
                        "description": "if the replication group member with the given identifier could not be found",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/member?~action=find": {
            "post": {
                "tags": [
                    "replication/group/member"
                ],
                "summary": "Returns a list of replication group members matching the requested {@link Library.FindSpec}.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.member_find"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The {@term list} of information of all the replication group members matching the given {@param.name spec}.",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.member.find_resp"
                        }
                    },
                    "400": {
                        "description": "temporary exception until the API is implemented.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.unsupported_error"
                        }
                    }
                },
                "operationId": "find",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/group/member?~action=replicate": {
            "post": {
                "tags": [
                    "replication/group/member"
                ],
                "summary": "Replicates content to the specified replica member.This {@term operation} does not do anything when invoked on a master member.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.group.member_replicate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "if the member specified by {@param.name memberId} does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    },
                    "400": {
                        "description": "if the replica library associated with {@param.name memberId} is not accessible.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    }
                },
                "operationId": "replicate",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/replication/replica-library/id:{replication_group_id}": {
            "post": {
                "tags": [
                    "replication/replica_library"
                ],
                "summary": "Creates a subscribed library with the given spec and marks it as belonging to the specified replication group.",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "replication_group_id",
                        "description": "Replication group that the library belongs to"
                    },
                    {
                        "in": "body",
                        "name": "request_body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.replica_library_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier of the newly created library",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.replication.replica_library.create_resp"
                        }
                    },
                    "400": {
                        "description": "if the master library cannot be accessed.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.resource_inaccessible_error"
                        }
                    }
                },
                "operationId": "create",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/restore?~action=restore": {
            "post": {
                "tags": [
                    "restore"
                ],
                "summary": "Triggers workflow to reconcile the Content Library database with the storage backing.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "restore",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/task": {
            "get": {
                "tags": [
                    "task"
                ],
                "summary": "Return tasks according to query specification",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.task.list_resp"
                        }
                    },
                    "400": {
                        "description": "if the query spec was invalid",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.invalid_argument_error"
                        }
                    }
                },
                "operationId": "list",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/task/id:{id}?~action=cancel": {
            "post": {
                "tags": [
                    "task"
                ],
                "summary": "Cancel a task",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "id",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "cancel",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        },
        "/rest/com/vmware/contentinternal/task/id:{task_id}": {
            "get": {
                "tags": [
                    "task"
                ],
                "summary": "Get detailed information of a given task",
                "parameters": [
                    {
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "name": "task_id",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contentinternal.task_resp"
                        }
                    },
                    "404": {
                        "description": "if the specified library does not exist.",
                        "schema": {
                            "$ref": "#/definitions/vapi.std.errors.not_found_error"
                        }
                    }
                },
                "operationId": "get",
                "security": [
                    {
                        "session_id": []
                    }
                ]
            }
        }
    },
    "definitions": {
        "content.library.optimization_info": {
            "type": "object",
            "properties": {
                "optimize_remote_publishing": {
                    "description": "If set to {@code true} then library would be optimized for remote publishing. <p> Turn it on if remote publishing is dominant use case for this library. Remote publishing means here that publisher and subscribers are not the part of the same {@name Vcenter} SSO domain. <p> Any optimizations could be done as result of turning on this optimization during library creation. For example, library content could be stored in different format but optimizations are not limited to just storage format. <p> Note, that value of this toggle could be set only during creation of the library and you would need to migrate your library in case you need to change this value (optimize the library for different use case).",
                    "type": "boolean"
                }
            }
        },
        "content.library.publish_info": {
            "type": "object",
            "properties": {
                "authentication_method": {
                    "description": "Indicates how a subscribed library should authenticate ({@enum.values AuthenticationMethod}) to the published library endpoint.",
                    "$ref": "#/definitions/content.library.publish_info.authentication_method"
                },
                "published": {
                    "description": "Whether the local library is published.",
                    "type": "boolean"
                },
                "publish_url": {
                    "description": "The URL to which the library metadata is published by the Content Library Service. <p> This value can be used to set the {@link SubscriptionInfo#subscriptionUrl} property when creating a subscribed library.",
                    "type": "string",
                    "format": "uri"
                },
                "user_name": {
                    "description": "The username to require for authentication.",
                    "type": "string"
                },
                "password": {
                    "description": "The new password to require for authentication.",
                    "type": "string",
                    "format": "password"
                },
                "current_password": {
                    "description": "The current password to verify. This {@term field} is available starting in vSphere 6.7.",
                    "type": "string",
                    "format": "password"
                },
                "persist_json_enabled": {
                    "description": "Whether library and library item metadata are persisted in the storage backing as JSON files. This flag only applies if the local library is published. <p> Enabling JSON persistence allows you to synchronize a subscribed library manually instead of over HTTP. You copy the local library content and metadata to another storage backing manually and then create a subscribed library referencing the location of the library JSON file in the {@link SubscriptionInfo#subscriptionUrl}. When the subscribed library's storage backing matches the subscription URL, files do not need to be copied to the subscribed library. <p> For a library backed by a datastore, the library JSON file will be stored at the path contentlib-{library_id}/lib.json on the datastore. <p> For a library backed by a remote file system, the library JSON file will be stored at {library_id}/lib.json in the remote file system path.",
                    "type": "boolean"
                }
            }
        },
        "content.library.publish_info.authentication_method": {
            "type": "string",
            "description": "The {@name AuthenticationMethod} {@term enumerated type} indicates how a subscribed library should authenticate to the published library endpoint.",
            "enum": [
                "BASIC",
                "NONE"
            ]
        },
        "content.library.source_info": {
            "type": "object",
            "properties": {
                "source_library": {
                    "description": "Identifier of the published library.",
                    "type": "string"
                },
                "subscription": {
                    "description": "Identifier of the subscription associated with the subscribed library.",
                    "type": "string"
                }
            }
        },
        "content.library.storage_backing": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type ({@enum.values Type}) of {@link StorageBacking}.",
                    "$ref": "#/definitions/content.library.storage_backing.type"
                },
                "datastore_id": {
                    "description": "Identifier of the datastore used to store the content in the library.",
                    "type": "string"
                },
                "storage_uri": {
                    "description": "URI identifying the location used to store the content in the library. <p> The following URI formats are supported: <p> vSphere 6.5 <ul> <li>nfs://server/path?version=4 (for vCenter Server Appliance only) - Specifies an NFS Version 4 server.</li> <li>nfs://server/path (for vCenter Server Appliance only) - Specifies an NFS Version 3 server. The nfs://server:/path format is also supported.</li> <li>smb://server/path - Specifies an SMB server or Windows share.</li> </ul> <p> vSphere 6.0 Update 1 <ul> <li>nfs://server:/path (for vCenter Server Appliance only)</li> <li>file://unc-server/path (for vCenter Server for Windows only)</li> <li>file:///mount/point (for vCenter Server Appliance only) - Local file URIs are supported only when the path is a local mount point for an NFS file system. Use of file URIs is strongly discouraged. Instead, use an NFS URI to specify the remote file system.</li> </ul> <p> vSphere 6.0 <ul> <li>nfs://server:/path (for vCenter Server Appliance only)</li> <li>file://unc-server/path (for vCenter Server for Windows only)</li> <li>file:///path - Local file URIs are supported but strongly discouraged because it may interfere with the performance of vCenter Server.</li> </ul>",
                    "type": "string",
                    "format": "uri"
                }
            }
        },
        "content.library.storage_backing.type": {
            "type": "string",
            "description": "The {@name Type} {@term enumerated type} specifies the type of the {@link StorageBacking}.",
            "enum": [
                "DATASTORE",
                "OTHER"
            ]
        },
        "content.library.subscription_info": {
            "type": "object",
            "properties": {
                "authentication_method": {
                    "description": "Indicate how the subscribed library should authenticate ({@enum.values AuthenticationMethod}) with the published library endpoint.",
                    "$ref": "#/definitions/content.library.subscription_info.authentication_method"
                },
                "automatic_sync_enabled": {
                    "description": "Whether the library should participate in automatic library synchronization. In order for automatic synchronization to happen, the global {@link ConfigurationModel#automaticSyncEnabled} option must also be true. The subscription is still active even when automatic synchronization is turned off, but synchronization is only activated with an explicit call to {@link SubscribedLibrary#sync} or {@link SubscribedItem#sync}. In other words, manual synchronization is still available even when automatic synchronization is disabled.",
                    "type": "boolean"
                },
                "on_demand": {
                    "description": "Indicates whether a library item's content will be synchronized only on demand. <p> If this is set to {@code true}, then the library item's metadata will be synchronized but the item's content (its files) will not be synchronized. The Content Library Service will synchronize the content upon request only. This can cause the first use of the content to have a noticeable delay. <p> Items without synchronized content can be forcefully synchronized in advance using the {@link SubscribedItem#sync} call with {@param.name forceSyncContent} set to true. Once content has been synchronized, the content can removed with the {@link SubscribedItem#evict} call. <p> If this value is set to {@code false}, all content will be synchronized in advance.",
                    "type": "boolean"
                },
                "password": {
                    "description": "The password to use when authenticating. <p> The password must be set when using a password-based authentication method; empty strings are not allowed.",
                    "type": "string",
                    "format": "password"
                },
                "ssl_thumbprint": {
                    "description": "An optional SHA-1 hash of the SSL certificate for the remote endpoint. <p> If this value is defined the SSL certificate will be verified by comparing it to the SSL thumbprint. The SSL certificate must verify against the thumbprint. When specified, the standard certificate chain validation behavior is not used. The certificate chain is validated normally if this value is {@term unset}.",
                    "type": "string"
                },
                "subscription_url": {
                    "description": "The URL of the endpoint where the metadata for the remotely published library is being served. <p> This URL can be the {@link PublishInfo#publishUrl} of the published library (for example, https://server/path/lib.json). <p> If the source content comes from a published library with {@link PublishInfo#persistJsonEnabled}, the subscription URL can be a URL pointing to the library JSON file on a datastore or remote file system. The supported formats are: <p> vSphere 6.5 <ul> <li>ds:///vmfs/volumes/{uuid}/mylibrary/lib.json (for datastore)</li> <li>nfs://server/path/mylibrary/lib.json (for NFSv3 server on vCenter Server Appliance)</li> <li>nfs://server/path/mylibrary/lib.json?version=4 (for NFSv4 server on vCenter Server Appliance) </li> <li>smb://server/path/mylibrary/lib.json (for SMB server)</li> </ul> <p> vSphere 6.0 <ul> <li>file://server/mylibrary/lib.json (for UNC server on vCenter Server for Windows)</li> <li>file:///path/mylibrary/lib.json (for local file system)</li> </ul> <p> When you specify a DS subscription URL, the datastore must be on the same vCenter Server as the subscribed library. When you specify an NFS or SMB subscription URL, the {@link StorageBacking#storageUri} of the subscribed library must be on the same remote file server and should share a common parent path with the subscription URL.",
                    "type": "string",
                    "format": "uri"
                },
                "user_name": {
                    "description": "The username to use when authenticating. <p> The username must be set when using a password-based authentication method. Empty strings are allowed for usernames.",
                    "type": "string"
                },
                "source_info": {
                    "description": "Information about the source published library. This {@term field} will be set for a subscribed library which is associated with a subscription of the published library.",
                    "$ref": "#/definitions/content.library.source_info"
                }
            }
        },
        "content.library.subscription_info.authentication_method": {
            "type": "string",
            "description": "Indicate how the subscribed library should authenticate with the published library endpoint.",
            "enum": [
                "BASIC",
                "NONE"
            ]
        },
        "content.library_model": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "An identifier which uniquely identifies this {@name LibraryModel}.",
                    "type": "string"
                },
                "creation_time": {
                    "description": "The date and time when this library was created.",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "A human-readable description for this library.",
                    "type": "string"
                },
                "last_modified_time": {
                    "description": "The date and time when this library was last updated. <p> This {@term field} is updated automatically when the library properties are changed. This {@term field} is not affected by adding, removing, or modifying a library item or its content within the library. Tagging the library or syncing the subscribed library does not alter this {@term field}.",
                    "type": "string",
                    "format": "date-time"
                },
                "last_sync_time": {
                    "description": "The date and time when this library was last synchronized. <p> This {@term field} applies only to subscribed libraries. It is updated every time a synchronization is triggered on the library. The value is {@term unset} for a local library.",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "The name of the library. <p> A Library is identified by a human-readable name. Library names cannot be undefined or an empty string. Names do not have to be unique.",
                    "type": "string"
                },
                "storage_backings": {
                    "description": "The list of default storage backings which are available for this library. <p> A {@link StorageBacking} defines a default storage location which can be used to store files for library items in this library. Some library items, for instance, virtual machine template items, support files that may be distributed across various storage backings. One or more item files may or may not be located on the default storage backing. <p> Multiple default storage locations are not currently supported but may become supported in future releases.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/content.library.storage_backing"
                    }
                },
                "type": {
                    "description": "The type ({@enum.values LibraryModel.LibraryType}) of this library. <p> This value can be used to determine what additional services and information can be available for this library. This {@term field} is not used for the {@code create} and {@code update} {@term operations}. It will always be present in the result of a {@code get} {@term operation}.",
                    "$ref": "#/definitions/content.library_model.library_type"
                },
                "optimization_info": {
                    "description": "Defines various optimizations and optimization parameters applied to this library.",
                    "$ref": "#/definitions/content.library.optimization_info"
                },
                "version": {
                    "description": "A version number which is updated on metadata changes. This value allows clients to detect concurrent updates and prevent accidental clobbering of data. <p> This value represents a number which is incremented every time library properties, such as name or description, are changed. It is not incremented by changes to a library item within the library, including adding or removing items. It is also not affected by tagging the library.",
                    "type": "string"
                },
                "publish_info": {
                    "description": "Defines how this library is published so that it can be subscribed to by a remote subscribed library. <p> The {@link PublishInfo} defines where and how the metadata for this local library is accessible. A local library is only published publically if {@link PublishInfo#published} is {@code true}.",
                    "$ref": "#/definitions/content.library.publish_info"
                },
                "subscription_info": {
                    "description": "Defines the subscription behavior for this Library. <p> The {@link SubscriptionInfo} defines how this subscribed library synchronizes to a remote source. Setting the value will determine the remote source to which the library synchronizes, and how. Changing the subscription will result in synchronizing to a new source. If the new source differs from the old one, the old library items and data will be lost. Setting {@link SubscriptionInfo#automaticSyncEnabled} to false will halt subscription but will not remove existing cached data.",
                    "$ref": "#/definitions/content.library.subscription_info"
                },
                "server_guid": {
                    "description": "The unique identifier of the vCenter server where the library exists.",
                    "type": "string"
                },
                "security_policy_id": {
                    "description": "Represents the security policy applied to this library. <p> Setting the {@term field} will make the library secure. This field is ignored in {@code update} {@term operation} if {@link #unsetSecurityPolicyId} is set to {@code true}.",
                    "type": "string"
                },
                "unset_security_policy_id": {
                    "description": "This represents the intent of the change to {@link #securityPolicyId} in {@code update} {@term operation}. <p> If this field is set to {@code true}, any security policy applied to the library will be removed. If this field is set to {@code false}, any security policy applied to library will be changed to the value specified in {@link #securityPolicyId}, if any.",
                    "type": "boolean"
                }
            }
        },
        "content.library_model.library_type": {
            "type": "string",
            "description": "The {@name LibraryType} {@term enumerated type} defines the type of a {@link LibraryModel}. <p> The type of a library can be used to determine which additional services can be performed with a library.",
            "enum": [
                "LOCAL",
                "SUBSCRIBED"
            ]
        },
        "contentinternal.admin.vcloudair.vcenter.add_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.admin.vcloudair.vcenter.add_spec": {
            "type": "object",
            "properties": {
                "server_url": {
                    "description": "The url that can be used to login into the vCenter Server by the Content Library Service. <p> Empty strings are not allowed for serverUrls.",
                    "type": "string",
                    "format": "uri"
                },
                "user_name": {
                    "description": "The username to use when authenticating. <p> Empty strings are not allowed for usernames.",
                    "type": "string"
                },
                "password": {
                    "description": "The password to use when authenticating. <p> Empty strings are not allowed for passwords.",
                    "type": "string",
                    "format": "password"
                }
            },
            "required": [
                "server_url",
                "user_name",
                "password"
            ]
        },
        "contentinternal.admin.vcloudair.vcenter.info": {
            "type": "object",
            "properties": {
                "server_url": {
                    "description": "The server url that the Content Library Service can use to login into the vCenter Server.",
                    "type": "string",
                    "format": "uri"
                },
                "user_name": {
                    "description": "The username to use when authenticating.",
                    "type": "string"
                },
                "version": {
                    "description": "The version of the vCenter Server.",
                    "type": "string"
                },
                "connected": {
                    "description": "The connection status of the vCenter Server. <p> The connection status can either true or false.",
                    "type": "boolean"
                }
            },
            "required": [
                "server_url",
                "user_name",
                "version",
                "connected"
            ]
        },
        "contentinternal.admin.vcloudair.vcenter.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.admin.vcloudair.vcenter.update_spec": {
            "type": "object",
            "properties": {
                "server_url": {
                    "description": "The url that can be used to login into the vCenter Server by the Content Library Service.",
                    "type": "string",
                    "format": "uri"
                },
                "user_name": {
                    "description": "The username to use when authenticating.",
                    "type": "string"
                },
                "password": {
                    "description": "The password to use when authenticating.",
                    "type": "string",
                    "format": "password"
                }
            }
        },
        "contentinternal.admin.vcloudair.vcenter_add": {
            "type": "object",
            "properties": {
                "add_spec": {
                    "$ref": "#/definitions/contentinternal.admin.vcloudair.vcenter.add_spec",
                    "description": "Specification for the vCenter Server to be added."
                }
            },
            "required": [
                "add_spec"
            ]
        },
        "contentinternal.admin.vcloudair.vcenter_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.admin.vcloudair.vcenter.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.admin.vcloudair.vcenter_update": {
            "type": "object",
            "properties": {
                "update_spec": {
                    "$ref": "#/definitions/contentinternal.admin.vcloudair.vcenter.update_spec",
                    "description": "Specification of vCenter Server to be updated"
                }
            },
            "required": [
                "update_spec"
            ]
        },
        "contentinternal.cls_activation_service_cancel": {
            "type": "object",
            "properties": {
                "activation_id": {
                    "type": "string",
                    "description": "the activationId supplied in the invocation to be canceled."
                }
            },
            "required": [
                "activation_id"
            ]
        },
        "contentinternal.cls_configuration_service.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.cls_configuration_service_get": {
            "type": "object",
            "properties": {
                "config_name": {
                    "type": "string",
                    "description": "Name of the configuration"
                }
            },
            "required": [
                "config_name"
            ]
        },
        "contentinternal.cls_configuration_service_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.cls_configuration_service_set": {
            "type": "object",
            "properties": {
                "config_name": {
                    "type": "string",
                    "description": "Name of the configuration"
                },
                "config_value": {
                    "type": "string",
                    "description": "Value of the configuration"
                }
            },
            "required": [
                "config_name",
                "config_value"
            ]
        },
        "contentinternal.cls_stress_service.get_all_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.cls_stress_service_get": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "description": ""
                }
            },
            "required": [
                "key"
            ]
        },
        "contentinternal.cls_stress_service_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.cls_stress_service_set": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "description": ""
                },
                "value": {
                    "type": "string",
                    "description": ""
                }
            },
            "required": [
                "key",
                "value"
            ]
        },
        "contentinternal.cls_stress_service_set_all": {
            "type": "object",
            "properties": {
                "settings": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    },
                    "description": ""
                }
            },
            "required": [
                "settings"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service.get_diagnostics_values_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/contentinternal.diagnostics.model.sampled_value"
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service.test_activity_framework_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service.test_component_manager_connectivity_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service.test_database_connectivity_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service.test_echo_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service.test_inventory_service_connectivity_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service.test_result": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "boolean indicating the result of test. True = success, False = failure.",
                    "type": "boolean"
                },
                "msg": {
                    "description": "Output message from teh test.",
                    "type": "string"
                },
                "error": {
                    "description": "Error describing the details of the failure. This field is only valid if success=False.",
                    "$ref": "#/definitions/vapi.std.errors.error"
                }
            }
        },
        "contentinternal.diagnostics.cls_diagnostic_service.test_virtual_center_connectivity_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.diagnostics.cls_diagnostic_service.test_result"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service_clear": {
            "type": "object",
            "properties": {
                "op_id": {
                    "type": "string",
                    "description": "Operation id of the API call."
                }
            },
            "required": [
                "op_id"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service_get": {
            "type": "object",
            "properties": {
                "op_id": {
                    "type": "string",
                    "description": "Operation id of the API call."
                }
            },
            "required": [
                "op_id"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.diagnostics.model.api_call_diagnostics"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.diagnostics.cls_diagnostic_service_test_echo": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string",
                    "description": "Input message."
                }
            },
            "required": [
                "msg"
            ]
        },
        "contentinternal.diagnostics.model.api_call_diagnostics": {
            "type": "object",
            "properties": {
                "api_name": {
                    "description": "name of the API",
                    "type": "string"
                },
                "op_id": {
                    "description": "Operation Id uniquely identifying a given API call. This is a client supplied uuid.",
                    "type": "string"
                },
                "component_counters": {
                    "description": "Represents counters for specific component. The key represents specific component counter name and value represents either the count or string value for the counter.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "required": [
                "api_name",
                "op_id",
                "component_counters"
            ]
        },
        "contentinternal.diagnostics.model.sample": {
            "type": "object",
            "properties": {
                "value": {
                    "description": "Value of the sample",
                    "type": "integer",
                    "format": "int64"
                },
                "info": {
                    "description": "Information about the sample",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Timestamp value when the sample was taken. Value represents number of milliseconds since January 1, 1970, 00:00:00 GMT.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "required": [
                "value",
                "info",
                "timestamp"
            ]
        },
        "contentinternal.diagnostics.model.sampled_value": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "Name of this metric for logging purposes. The key contains component name and counter name.",
                    "type": "string"
                },
                "mean": {
                    "description": "Mean value of all collected samples",
                    "type": "number",
                    "format": "double"
                },
                "avg": {
                    "description": "avg value of all collected samples",
                    "type": "number",
                    "format": "double"
                },
                "sum": {
                    "description": "sum of all collected samples",
                    "type": "number",
                    "format": "double"
                },
                "count": {
                    "description": "total count of samples",
                    "type": "integer",
                    "format": "int64"
                },
                "max": {
                    "description": "max value of all collected samples",
                    "type": "number",
                    "format": "double"
                },
                "min": {
                    "description": "min value of all collected samples",
                    "type": "number",
                    "format": "double"
                },
                "latest": {
                    "description": "latest sample",
                    "$ref": "#/definitions/contentinternal.diagnostics.model.sample"
                }
            },
            "required": [
                "key",
                "mean",
                "avg",
                "sum",
                "count",
                "max",
                "min",
                "latest"
            ]
        },
        "contentinternal.inv_query_service.query_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.inv_query_service.query_xml_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.inv_query_service.synchronized_query_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.inv_query_service.synchronized_query_xml_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.inv_query_service_query": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID used to generate the resource ID to query the inventory service. This is the vAPI ID of the object (e.g. urn:cl:lib:{UUID} for a content library)"
                },
                "binding_class": {
                    "type": "string",
                    "description": "The fully qualified vAPI binding class name of the object."
                }
            },
            "required": [
                "id",
                "binding_class"
            ]
        },
        "contentinternal.inv_query_service_query_xml": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID used to generate the resource ID to query the inventory service. This is the vAPI ID of the object (e.g. urn:cl:lib:{UUID} for a content library)"
                },
                "binding_class": {
                    "type": "string",
                    "description": "The fully qualified vAPI binding class name of the object."
                }
            },
            "required": [
                "id",
                "binding_class"
            ]
        },
        "contentinternal.inv_query_service_synchronized_query": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID used to generate the resource ID to query the inventory service. This is the vAPI ID of the object (e.g. urn:cl:lib:{UUID} for a content library)"
                },
                "binding_class": {
                    "type": "string",
                    "description": "The fully qualified vAPI binding class name of the object."
                }
            },
            "required": [
                "id",
                "binding_class"
            ]
        },
        "contentinternal.inv_query_service_synchronized_query_xml": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID used to generate the resource ID to query the inventory service. This is the vAPI ID of the object (e.g. urn:cl:lib:{UUID} for a content library)"
                },
                "binding_class": {
                    "type": "string",
                    "description": "The fully qualified vAPI binding class name of the object."
                }
            },
            "required": [
                "id",
                "binding_class"
            ]
        },
        "contentinternal.library.item.info": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "A unique identifier for this library item.",
                    "type": "string"
                },
                "library_id": {
                    "description": "The identifier of the {@link Library.Info} to which this item belongs.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for this library item. <p> The name may not be {@term unset} or an empty string. The name does not have to be unique, even within the same library.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library item.",
                    "type": "string"
                },
                "metadata_version": {
                    "description": "A version number which is updated on item name, description or metadata changes. <p> This value is incremented with each change to the metadata of this item. Changes to name, description, and so on will increment this value. The value is not incremented by changes to the content of the item or the library which owns it.",
                    "type": "string"
                },
                "content_version": {
                    "description": "The version of the file content list of this library item.",
                    "type": "string"
                },
                "creation": {
                    "description": "The date and time when this library item was created.",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "The date and time when the metadata for this library item was last changed. <p> This {@term field} is affected by changes to the properties or file content of this item. It is not modified by changes to the metadata of the item, or by changes to the library which owns this item.",
                    "type": "string",
                    "format": "date-time"
                },
                "size": {
                    "description": "The library item size, in bytes. The size is the sum of the size used on the storage backing for all the files in the item. When the library item is not cached, the size is 0.",
                    "type": "integer",
                    "format": "int64"
                },
                "type": {
                    "description": "A type identifier which indicates the type adapter plugin to use.",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "library_id",
                "name",
                "metadata_version",
                "content_version",
                "creation",
                "modified",
                "size",
                "type"
            ]
        },
        "contentinternal.library.metadata.info": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key for this metadata. This uniquely identifies the metadata within a library.",
                    "type": "string"
                },
                "value": {
                    "description": "The value associated with the metadata {@link #key}.",
                    "type": "string"
                }
            },
            "required": [
                "key"
            ]
        },
        "contentinternal.library.metadata.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contentinternal.library.metadata.info"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.library.metadata_create": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contentinternal.library.metadata.info"
                    },
                    "description": "the list of metadata key/value pairs to add to the library"
                }
            },
            "required": [
                "metadata"
            ]
        },
        "contentinternal.library.metadata_get": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "the key to lookup"
                }
            },
            "required": [
                "key"
            ]
        },
        "contentinternal.library.metadata_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.library.metadata.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.library.storage": {
            "type": "object",
            "properties": {
                "storage_uri": {
                    "description": "URI for the storage. TODO: provide a Storage service to generate the Storage URI for the different storage backing types. <p> Some examples of accepted URI formats are: <ul> <li>datastore://datastore-22</li> <li>file:///path</li> <li>file:///C:/path</li> <li>file://unc-server/path</li> </ul>",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": [
                "storage_uri"
            ]
        },
        "contentinternal.library.type": {
            "type": "string",
            "description": "Specifies the type of the library.",
            "enum": [
                "REPLICATED",
                "LOCAL"
            ]
        },
        "contentinternal.local.library.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.local.library.create_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the library. <p> A Library is identified by a human-readable name. Library names cannot be undefined or an empty string. Names do not have to be unique.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library.",
                    "type": "string"
                },
                "storage_locations": {
                    "description": "The list of storage locations which are available for this library. <p> A {@link Storage} defines a storage location which can be used to store files for the library items in this library. Multiple storage locations are not currently supported but may become supported in future releases.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contentinternal.library.storage"
                    }
                }
            },
            "required": [
                "name",
                "storage_locations"
            ]
        },
        "contentinternal.local.library.info": {
            "type": "object",
            "properties": {
                "storage_locations": {
                    "description": "The list of storage locations which are available for this library. <p> A {@link Storage} defines a storage location which can be used to store files for the library items in this library. Multiple storage locations are not currently supported but may become supported in future releases.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contentinternal.library.storage"
                    }
                },
                "id": {
                    "description": "An identifier which uniquely identifies this {@name Library}.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the library.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library.",
                    "type": "string"
                },
                "type": {
                    "description": "The type ({@enum.values Type}) of this library. <p> This value can be used to determine what additional services and information are available for this library.",
                    "$ref": "#/definitions/contentinternal.library.type"
                },
                "creation": {
                    "description": "The date and time when this library was created.",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "The date and time when this library was last updated. <p> This {@term field} is updated automatically when the library properties are changed. This {@term field} is not affected by adding, removing, or modifying a library item or its content within the library.",
                    "type": "string",
                    "format": "date-time"
                },
                "metadata_version": {
                    "description": "A version number which is updated on library name, description or metadata changes. <p> This value represents a number which is incremented every time library properties, such as name, description or metadata are changed. It is not incremented by changes to a library item within the library, including adding or removing items.",
                    "type": "string"
                }
            },
            "required": [
                "storage_locations",
                "id",
                "name",
                "type",
                "creation",
                "modified",
                "metadata_version"
            ]
        },
        "contentinternal.local.library.item.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.local.library.item.create_spec": {
            "type": "object",
            "properties": {
                "library_id": {
                    "description": "The identifier of the local library to create the item in.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for this library item. <p> The name may not be {@term unset} or an empty string. The name does not have to be unique, even within the same library.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library item.",
                    "type": "string"
                },
                "type": {
                    "description": "An optional type identifier which indicates the type adapter plugin to use. <p> This {@term field} may be set to a non-empty string value that corresponds to an identifier supported by a type adapter plugin present in the Content Library Service. A type adapter plugin, if present for the specified type, can provide additional information and services around the item content. A type adapter can guide the upload process by creating file entries that are in need of being uploaded to complete an item. <p> The types and plugins supported by the Content Library Service can be queried using the {@link Type} {@term service}. If the type is left unspecified, or if the type is specified but does not have a corresponding type support plugin, then the type of the library item is considered to be generic and all data is treated as generic files.",
                    "type": "string"
                }
            },
            "required": [
                "library_id",
                "name"
            ]
        },
        "contentinternal.local.library.item.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.local.library.item.update_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "A name for this library item. <p>",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library item. <p>",
                    "type": "string"
                }
            }
        },
        "contentinternal.local.library.item_create": {
            "type": "object",
            "properties": {
                "client_token": {
                    "type": "string",
                    "description": "A unique token generated on the client for each creation request. The token should be a universally unique identifier (UUID), for example: {@code b8a2a2e3-2314-43cd-a871-6ede0f429751}. This token can be used to guarantee idempotent creation."
                },
                "create_spec": {
                    "$ref": "#/definitions/contentinternal.local.library.item.create_spec",
                    "description": "Specification that defines the properties of the new library item."
                }
            },
            "required": [
                "create_spec"
            ]
        },
        "contentinternal.local.library.item_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.library.item.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.local.library.item_update": {
            "type": "object",
            "properties": {
                "update_spec": {
                    "$ref": "#/definitions/contentinternal.local.library.item.update_spec",
                    "description": "Specification of the new property values to set on the library item."
                }
            },
            "required": [
                "update_spec"
            ]
        },
        "contentinternal.local.library.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.local.library.update_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "A name for this library. <p>",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library. <p>",
                    "type": "string"
                }
            }
        },
        "contentinternal.local.library_create": {
            "type": "object",
            "properties": {
                "client_token": {
                    "type": "string",
                    "description": "A unique token generated on the client for each creation request. The token should be a universally unique identifier (UUID), for example: {@code b8a2a2e3-2314-43cd-a871-6ede0f429751}. This token can be used to guarantee idempotent creation."
                },
                "create_spec": {
                    "$ref": "#/definitions/contentinternal.local.library.create_spec",
                    "description": "Specification for the new local library."
                }
            },
            "required": [
                "create_spec"
            ]
        },
        "contentinternal.local.library_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.local.library.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.local.library_update": {
            "type": "object",
            "properties": {
                "update_spec": {
                    "$ref": "#/definitions/contentinternal.local.library.update_spec",
                    "description": "Specification of the new property values to set on the local library."
                }
            },
            "required": [
                "update_spec"
            ]
        },
        "contentinternal.replication.group.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.create_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the replication group. <p> A replication group is identified by a human-readable name. Group names cannot be undefined or an empty string. Names do not have to be unique.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this replication group.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ]
        },
        "contentinternal.replication.group.info": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "An identifer which uniquely identifies the replication group. This is also used to identify all libraries in the group.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the replication group.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this replication group.",
                    "type": "string"
                },
                "version": {
                    "description": "A version number that is updated every time the group membership changes.",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "name",
                "version"
            ]
        },
        "contentinternal.replication.group.library.info": {
            "type": "object",
            "properties": {
                "replication_group_id": {
                    "description": "Identifier of the replication group that the library belongs to.",
                    "type": "string"
                },
                "is_master": {
                    "description": "Indicates whether the library is a master library the group.",
                    "type": "boolean"
                },
                "master_library_uri": {
                    "description": "URI of the master library that the replica belongs to. This is {@term unset} for a master library.",
                    "type": "string",
                    "format": "uri"
                },
                "storages": {
                    "description": "The list of storage locations which are available for this library. <p> A {@link Storage} defines a storage location which can be used to store files for the library items in this library. Multiple storage locations are not currently supported but may become supported in future releases.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contentinternal.library.storage"
                    }
                },
                "id": {
                    "description": "An identifier which uniquely identifies this {@name Library}.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the library.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library.",
                    "type": "string"
                },
                "type": {
                    "description": "The type ({@enum.values Type}) of this library. <p> This value can be used to determine what additional services and information are available for this library.",
                    "$ref": "#/definitions/contentinternal.library.type"
                },
                "creation": {
                    "description": "The date and time when this library was created.",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "The date and time when this library was last updated. <p> This {@term field} is updated automatically when the library properties are changed. This {@term field} is not affected by adding, removing, or modifying a library item or its content within the library.",
                    "type": "string",
                    "format": "date-time"
                },
                "metadata_version": {
                    "description": "A version number which is updated on library name, description or metadata changes. <p> This value represents a number which is incremented every time library properties, such as name, description or metadata are changed. It is not incremented by changes to a library item within the library, including adding or removing items.",
                    "type": "string"
                }
            },
            "required": [
                "replication_group_id",
                "is_master",
                "master_library_uri",
                "storages",
                "id",
                "name",
                "type",
                "creation",
                "modified",
                "metadata_version"
            ]
        },
        "contentinternal.replication.group.library.item.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.library.item.create_spec": {
            "type": "object",
            "properties": {
                "library_id": {
                    "description": "The identifier of the replicated library to create the item in.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for this library item. <p> The name may not be {@term unset} or an empty string. The name does not have to be unique, even within the same library.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library item.",
                    "type": "string"
                },
                "type": {
                    "description": "An optional type identifier which indicates the type adapter plugin to use. <p> This {@term field} may be set to a non-empty string value that corresponds to an identifier supported by a type adapter plugin present in the Content Library Service. A type adapter plugin, if present for the specified type, can provide additional information and services around the item content. A type adapter can guide the upload process by creating file entries that are in need of being uploaded to complete an item. <p> The types and plugins supported by the Content Library Service can be queried using the {@link Type} {@term service}. If the type is left unspecified, or if the type is specified but does not have a corresponding type support plugin, then the type of the library item is considered to be generic and all data is treated as generic files.",
                    "type": "string"
                }
            },
            "required": [
                "library_id",
                "name"
            ]
        },
        "contentinternal.replication.group.library.item.info": {
            "type": "object",
            "properties": {
                "is_master": {
                    "description": "Indicates whether the item belongs to a master library.",
                    "type": "boolean"
                },
                "source_id": {
                    "description": "The identifier of the {@link Item} to which this item is synchronized to if the item belongs to a replica library. The value is {@term unset} for a library item that belongs to a master library.",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for this library item.",
                    "type": "string"
                },
                "library_id": {
                    "description": "The identifier of the {@link Library.Info} to which this item belongs.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for this library item. <p> The name may not be {@term unset} or an empty string. The name does not have to be unique, even within the same library.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library item.",
                    "type": "string"
                },
                "metadata_version": {
                    "description": "A version number which is updated on item name, description or metadata changes. <p> This value is incremented with each change to the metadata of this item. Changes to name, description, and so on will increment this value. The value is not incremented by changes to the content of the item or the library which owns it.",
                    "type": "string"
                },
                "content_version": {
                    "description": "The version of the file content list of this library item.",
                    "type": "string"
                },
                "creation": {
                    "description": "The date and time when this library item was created.",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "The date and time when the metadata for this library item was last changed. <p> This {@term field} is affected by changes to the properties or file content of this item. It is not modified by changes to the metadata of the item, or by changes to the library which owns this item.",
                    "type": "string",
                    "format": "date-time"
                },
                "size": {
                    "description": "The library item size, in bytes. The size is the sum of the size used on the storage backing for all the files in the item. When the library item is not cached, the size is 0.",
                    "type": "integer",
                    "format": "int64"
                },
                "type": {
                    "description": "A type identifier which indicates the type adapter plugin to use.",
                    "type": "string"
                }
            },
            "required": [
                "is_master",
                "id",
                "library_id",
                "name",
                "metadata_version",
                "content_version",
                "creation",
                "modified",
                "size",
                "type"
            ]
        },
        "contentinternal.replication.group.library.item.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.library.item.status.info": {
            "type": "object",
            "properties": {
                "item_id": {
                    "description": "",
                    "type": "string"
                },
                "global_item_id": {
                    "description": "Global identifier for the item across the replication group. This can be used to uniquely identify items originating from the same master. This information will be synced to the replica as part of the metadata sync. This ID is generated by the Content Library service on item creation and is immutable.",
                    "type": "string"
                },
                "library_id": {
                    "description": "",
                    "type": "string"
                },
                "replication_group_id": {
                    "description": "",
                    "type": "string"
                },
                "replication_group_member_id": {
                    "description": "",
                    "type": "string"
                },
                "is_master": {
                    "description": "Specifies if the item belongs to a master library in the replication group.",
                    "type": "boolean"
                },
                "metadata_version": {
                    "description": "A version number for the metadata of this library item. <p> This value is incremented with each change to the metadata of this item. Changes to name, description, and so on will increment this value. The value is not incremented by changes to the content or tags of the item or the library which owns it.",
                    "type": "string"
                },
                "content_version": {
                    "description": "The version of the file content list of this library item.",
                    "type": "string"
                },
                "state": {
                    "description": "State of the most recent operation on the replica.",
                    "$ref": "#/definitions/contentinternal.replication.group.library.item.status.info.state"
                },
                "errors": {
                    "description": "List of possible errors associated with the most recent operation performed on the replica instance. <p> This field is unset if the last operation was successful.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.errors.error"
                    }
                }
            },
            "required": [
                "item_id",
                "global_item_id",
                "library_id",
                "replication_group_id",
                "replication_group_member_id",
                "is_master",
                "metadata_version",
                "content_version",
                "state",
                "errors"
            ]
        },
        "contentinternal.replication.group.library.item.status.info.state": {
            "type": "string",
            "description": "State of the replication operation on the library item.",
            "enum": [
                "REPLICATING",
                "REPLICATED",
                "FAILED_REPLICATION"
            ]
        },
        "contentinternal.replication.group.library.item.status_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/contentinternal.replication.group.library.item.status.info"
                                }
                            }
                        }
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.library.item.update_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "A name for this library item. <p>",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library item. <p>",
                    "type": "string"
                },
                "type": {
                    "description": "An optional type identifier which indicates the type adapter plugin to use. <p>",
                    "type": "string"
                }
            }
        },
        "contentinternal.replication.group.library.item_create": {
            "type": "object",
            "properties": {
                "client_token": {
                    "type": "string",
                    "description": "A unique token generated on the client for each creation request. The token should be a universally unique identifier (UUID), for example: {@code b8a2a2e3-2314-43cd-a871-6ede0f429751}. This token can be used to guarantee idempotent creation."
                },
                "create_spec": {
                    "$ref": "#/definitions/contentinternal.replication.group.library.item.create_spec",
                    "description": "Specification that defines the properties of the new library item."
                }
            },
            "required": [
                "create_spec"
            ]
        },
        "contentinternal.replication.group.library.item_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.replication.group.library.item.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.library.item_update": {
            "type": "object",
            "properties": {
                "update_spec": {
                    "$ref": "#/definitions/contentinternal.replication.group.library.item.update_spec",
                    "description": "Specification of the new property values to set on the library item."
                }
            },
            "required": [
                "update_spec"
            ]
        },
        "contentinternal.replication.group.library.status.info": {
            "type": "object",
            "properties": {
                "replication_group_id": {
                    "description": "Identifier of the replication group that the library belongs to.",
                    "type": "string"
                },
                "replication_group_member_id": {
                    "description": "Identifier for the replication group member.",
                    "type": "string"
                },
                "library_id": {
                    "description": "Identifier of the library. This field is unset until the replica member library is created.",
                    "type": "string"
                },
                "is_master": {
                    "description": "Specifies if the library is the master library in the replication group",
                    "type": "boolean"
                },
                "last_replication": {
                    "description": "The date and time when the member was last replicated.",
                    "type": "string",
                    "format": "date-time"
                },
                "state": {
                    "description": "State of the most recent operation on the library.",
                    "$ref": "#/definitions/contentinternal.replication.group.library.status.info.state"
                },
                "error": {
                    "description": "Error associated with the most recent operation performed on the replica instance. <p> This field is unset if the last operation was successful. This field is also {@operation unset} on the master instance. TODO [pkota]: Discriminated unions need not be Optional",
                    "type": "string"
                }
            },
            "required": [
                "replication_group_id",
                "replication_group_member_id",
                "is_master",
                "state"
            ]
        },
        "contentinternal.replication.group.library.status.info.state": {
            "type": "string",
            "description": "Enum describing the various states of the replica library. This only applies to operations invoked directly on the library.",
            "enum": [
                "PRE_CREATION",
                "CREATING",
                "CREATED",
                "FAILED_CREATION",
                "REPLICATING",
                "REPLICATED",
                "FAILED_REPLICATION",
                "DELETING",
                "FAILED_DELETION"
            ]
        },
        "contentinternal.replication.group.library.status.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contentinternal.replication.group.library.status.info"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.library.status_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.replication.group.library.status.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.library.update_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "A name for this library. <p>",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this library. <p>",
                    "type": "string"
                },
                "version": {
                    "description": "A version number which is updated on metadata changes. <p>",
                    "type": "string"
                }
            }
        },
        "contentinternal.replication.group.library_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.replication.group.library.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.library_update": {
            "type": "object",
            "properties": {
                "update_spec": {
                    "$ref": "#/definitions/contentinternal.replication.group.library.update_spec",
                    "description": "Specification of the new property values to set on the master replicated library."
                }
            },
            "required": [
                "update_spec"
            ]
        },
        "contentinternal.replication.group.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.member.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.member.create_spec": {
            "type": "object",
            "properties": {
                "replication_group_id": {
                    "description": "Identifier of the replication group to create the members in.",
                    "type": "string"
                },
                "type": {
                    "description": "",
                    "$ref": "#/definitions/contentinternal.replication.group.member.type"
                },
                "library_id": {
                    "description": "Creates a master replica member. The given library is the master library in the replication group.",
                    "type": "string"
                },
                "cls_endpoint": {
                    "description": "CLS endpoint of the replica.",
                    "type": "string",
                    "format": "uri"
                },
                "storage_locations": {
                    "description": "The list of storage locations which are available for this library. <p> A {@link Storage} defines a storage location which can be used to store files for the library items in this library. Multiple storage locations are not currently supported but may become supported in future releases.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contentinternal.library.storage"
                    }
                }
            },
            "required": [
                "replication_group_id",
                "type"
            ]
        },
        "contentinternal.replication.group.member.find_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contentinternal.replication.group.member.info"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.member.find_spec": {
            "type": "object",
            "properties": {
                "replication_group_id": {
                    "description": "Identifier of the replication group.",
                    "type": "string"
                },
                "is_master": {
                    "description": "Indicates whether the {@link operation} should filter for master replication group members.",
                    "type": "boolean"
                }
            },
            "required": [
                "replication_group_id",
                "is_master"
            ]
        },
        "contentinternal.replication.group.member.info": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier of the replication group member",
                    "type": "string"
                },
                "replication_group_id": {
                    "description": "Identifier of the replication group that the member belongs to.",
                    "type": "string"
                },
                "type": {
                    "description": "",
                    "$ref": "#/definitions/contentinternal.replication.group.member.type"
                },
                "library_id": {
                    "description": "Identifier of the library in the member instance.",
                    "type": "string"
                },
                "cls_endpoint": {
                    "description": "CLS endpoint of the member.",
                    "type": "string",
                    "format": "uri"
                },
                "storage_locations": {
                    "description": "The list of storage locations which are available for this member.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contentinternal.library.storage"
                    }
                },
                "last_replication": {
                    "description": "The date and time when the member was last replicated.",
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "id",
                "replication_group_id",
                "type"
            ]
        },
        "contentinternal.replication.group.member.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.member.type": {
            "type": "string",
            "description": "The type of replica member.",
            "enum": [
                "MASTER",
                "REPLICA"
            ]
        },
        "contentinternal.replication.group.member_create": {
            "type": "object",
            "properties": {
                "client_token": {
                    "type": "string",
                    "description": "A unique token generated on the client for each creation request. The token should be a universally unique identifier (UUID), for example: {@code b8a2a2e3-2314-43cd-a871-6ede0f429751}. This token can be used to guarantee idempotent creation."
                },
                "create_spec": {
                    "$ref": "#/definitions/contentinternal.replication.group.member.create_spec",
                    "description": "Information used to create a replication group member."
                }
            },
            "required": [
                "create_spec"
            ]
        },
        "contentinternal.replication.group.member_find": {
            "type": "object",
            "properties": {
                "find_spec": {
                    "$ref": "#/definitions/contentinternal.replication.group.member.find_spec",
                    "description": ""
                }
            },
            "required": [
                "find_spec"
            ]
        },
        "contentinternal.replication.group.member_replicate": {
            "type": "object",
            "properties": {
                "member_id": {
                    "type": "string",
                    "description": "Identifier of the replication group member to invoke the operation on."
                }
            },
            "required": [
                "member_id"
            ]
        },
        "contentinternal.replication.group.member_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.replication.group.member.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group.update_spec": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "A name for this replication group. <p>",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description for this replication group. <p>",
                    "type": "string"
                }
            }
        },
        "contentinternal.replication.group_create": {
            "type": "object",
            "properties": {
                "client_token": {
                    "type": "string",
                    "description": "A unique token generated on the client for each creation request. The token should be a universally unique identifier (UUID), for example: {@code b8a2a2e3-2314-43cd-a871-6ede0f429751}. This token can be used to guarantee idempotent creation."
                },
                "create_spec": {
                    "$ref": "#/definitions/contentinternal.replication.group.create_spec",
                    "description": ""
                }
            },
            "required": [
                "create_spec"
            ]
        },
        "contentinternal.replication.group_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/contentinternal.replication.group.info"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.group_update": {
            "type": "object",
            "properties": {
                "update_spec": {
                    "$ref": "#/definitions/contentinternal.replication.group.update_spec",
                    "description": "Specification of the new property values to set on the replication group."
                }
            },
            "required": [
                "update_spec"
            ]
        },
        "contentinternal.replication.replica_library.create_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.replication.replica_library_create": {
            "type": "object",
            "properties": {
                "client_token": {
                    "type": "string",
                    "description": "A unique token used to guarantee idempotency."
                },
                "create_spec": {
                    "$ref": "#/definitions/content.library_model",
                    "description": "Library creation spec"
                }
            },
            "required": [
                "create_spec"
            ]
        },
        "contentinternal.task.list_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.task.result_data"
                }
            },
            "required": [
                "value"
            ]
        },
        "contentinternal.task_resp": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/vcenter.task.task_info"
                }
            },
            "required": [
                "value"
            ]
        },
        "vapi.std.errors.already_exists": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.already_exists_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.already_exists"
                }
            }
        },
        "vapi.std.errors.error": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.error.type": {
            "type": "string",
            "description": "Enumeration of all standard errors. Used as discriminator in protocols that have no standard means for transporting the error type, e.g. REST.",
            "enum": [
                "ERROR",
                "ALREADY_EXISTS",
                "ALREADY_IN_DESIRED_STATE",
                "CANCELED",
                "CONCURRENT_CHANGE",
                "FEATURE_IN_USE",
                "INTERNAL_SERVER_ERROR",
                "INVALID_ARGUMENT",
                "INVALID_ELEMENT_CONFIGURATION",
                "INVALID_ELEMENT_TYPE",
                "INVALID_REQUEST",
                "NOT_ALLOWED_IN_CURRENT_STATE",
                "NOT_FOUND",
                "OPERATION_NOT_FOUND",
                "RESOURCE_BUSY",
                "RESOURCE_IN_USE",
                "RESOURCE_INACCESSIBLE",
                "SERVICE_UNAVAILABLE",
                "TIMED_OUT",
                "UNABLE_TO_ALLOCATE_RESOURCE",
                "UNAUTHENTICATED",
                "UNAUTHORIZED",
                "UNEXPECTED_INPUT",
                "UNSUPPORTED",
                "UNVERIFIED_PEER"
            ]
        },
        "vapi.std.errors.error_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.error"
                }
            }
        },
        "vapi.std.errors.invalid_argument": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.invalid_argument_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_argument"
                }
            }
        },
        "vapi.std.errors.invalid_element_type": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.invalid_element_type_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.invalid_element_type"
                }
            }
        },
        "vapi.std.errors.not_allowed_in_current_state": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.not_allowed_in_current_state_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.not_allowed_in_current_state"
                }
            }
        },
        "vapi.std.errors.not_found": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.not_found_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.not_found"
                }
            }
        },
        "vapi.std.errors.resource_inaccessible": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.resource_inaccessible_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.resource_inaccessible"
                }
            }
        },
        "vapi.std.errors.unsupported": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vapi.std.localizable_message"
                    }
                },
                "data": {
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}.",
                    "type": "object"
                },
                "error_type": {
                    "description": "Discriminator field to help API consumers identify the structure type.",
                    "$ref": "#/definitions/vapi.std.errors.error.type"
                }
            },
            "required": [
                "messages"
            ]
        },
        "vapi.std.errors.unsupported_error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/vapi.std.errors.unsupported"
                }
            }
        },
        "vapi.std.localizable_message": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier of the localizable string or message template. <p> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog.",
                    "type": "string"
                },
                "default_message": {
                    "description": "The value of this localizable string or message template in the {@code en_US} (English) locale.  If {@link #id} refers to a message template, the default message will contain the substituted arguments. This value can be used by clients that do not need to display strings and messages in the native language of the user.  It could also be used as a fallback if a client is unable to access the appropriate message catalog.",
                    "type": "string"
                },
                "args": {
                    "description": "Positional arguments to be substituted into the message template. This list will be empty if the message uses named arguments or has no arguments.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "params": {
                    "description": "Named arguments to be substituted into the message template.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vapi.std.localization_param"
                            }
                        }
                    }
                },
                "localized": {
                    "description": "Localized string value as per request requirements.",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "default_message",
                "args"
            ]
        },
        "vapi.std.localization_param": {
            "type": "object",
            "properties": {
                "s": {
                    "description": "{@term String} value associated with the parameter.",
                    "type": "string"
                },
                "dt": {
                    "description": "Date and time value associated with the parameter. Use the {@name #format} {@term field} to specify date and time display style.",
                    "type": "string",
                    "format": "date-time"
                },
                "i": {
                    "description": "{@term long} value associated with the parameter.",
                    "type": "integer",
                    "format": "int64"
                },
                "d": {
                    "description": "The {@term double} value associated with the parameter. The number of displayed fractional digits is changed via {@name #precision} {@term field}.",
                    "type": "number",
                    "format": "double"
                },
                "l": {
                    "description": "Nested localizable value associated with the parameter. This is useful construct to convert to human readable localized form {@term enumerated type} and {@term boolean} values. It can also be used for proper handling of pluralization and gender forms in localization. Recursive {@name NestedLocalizableMessage} instances can be used for localizing short lists of items.",
                    "$ref": "#/definitions/vapi.std.nested_localizable_message"
                },
                "format": {
                    "description": "Format associated with the date and time value in {@name #dt} {@term field}. The {@term enumeration value} {@code SHORT_DATETIME} will be used as default.",
                    "$ref": "#/definitions/vapi.std.localization_param.date_time_format"
                },
                "precision": {
                    "description": "Number of fractional digits to include in formatted {@term double} value.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "vapi.std.localization_param.date_time_format": {
            "type": "string",
            "description": "The {@name DateTimeFormat} {@term enumerated type} lists possible date and time formatting options. It combines the Unicode CLDR format types - full, long, medium and short with 3 different presentations - date only, time only and combined date and time presentation.",
            "enum": [
                "SHORT_DATE",
                "MED_DATE",
                "LONG_DATE",
                "FULL_DATE",
                "SHORT_TIME",
                "MED_TIME",
                "LONG_TIME",
                "FULL_TIME",
                "SHORT_DATE_TIME",
                "MED_DATE_TIME",
                "LONG_DATE_TIME",
                "FULL_DATE_TIME"
            ]
        },
        "vapi.std.nested_localizable_message": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier of the localizable string or message template. <p> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog.",
                    "type": "string"
                },
                "params": {
                    "description": "Named Arguments to be substituted into the message template.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/definitions/vapi.std.localization_param"
                            }
                        }
                    }
                }
            },
            "required": [
                "id"
            ]
        }
    }
}