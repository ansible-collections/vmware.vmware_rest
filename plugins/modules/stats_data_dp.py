from __future__ import absolute_import, division, print_function

__metaclass__ = type
import socket
import json

DOCUMENTATION = "author:\n- Ansible VMware team\ndescription: Handle resource of type stats_data_dp\nextends_documentation_fragment: []\nmodule: stats_data_dp\nnotes:\n- Tested on vSphere 7.0\noptions:\n  cid:\n    description:\n    - 'Counter ID. Warning: This attribute is available as Technology Preview. These\n      are early access APIs provided to test, automate and provide feedback on the\n      feature. Since this can change based on feedback, VMware does not guarantee\n      backwards compatibility and recommends against using them in production environments.\n      Some Technology Preview APIs might only be applicable to specific environments.\n\n      When unset the result will not be filtered by counter.\n\n      When clients pass a value of this structure as a parameter, the field must be\n      an identifier for the resource type: vstats.model.Counter. When operations return\n      a value of this structure as a result, the field will be an identifier for the\n      resource type: vstats.model.Counter.'\n    type: str\n  end:\n    description:\n    - 'End of a time window (excluded), timestamp in seconds UTC. Warning: This attribute\n      is available as Technology Preview. These are early access APIs provided to\n      test, automate and provide feedback on the feature. Since this can change based\n      on feedback, VMware does not guarantee backwards compatibility and recommends\n      against using them in production environments. Some Technology Preview APIs\n      might only be applicable to specific environments.\n\n      When unset the result will not be limited by end time.'\n    type: int\n  metric:\n    description:\n    - 'Metric name. Warning: This attribute is available as Technology Preview. These\n      are early access APIs provided to test, automate and provide feedback on the\n      feature. Since this can change based on feedback, VMware does not guarantee\n      backwards compatibility and recommends against using them in production environments.\n      Some Technology Preview APIs might only be applicable to specific environments.\n\n      When unset the result will not be filtered by metric name.\n\n      When clients pass a value of this structure as a parameter, the field must be\n      an identifier for the resource type: vstats.model.Metric. When operations return\n      a value of this structure as a result, the field will be an identifier for the\n      resource type: vstats.model.Metric.'\n    type: str\n  order:\n    description:\n    - 'Directs the server to order the returned data. Passing a value of DEFAULT will\n      apply default ordering of the results that makes them easier for consumption.\n      Warning: This attribute is available as Technology Preview. These are early\n      access APIs provided to test, automate and provide feedback on the feature.\n      Since this can change based on feedback, VMware does not guarantee backwards\n      compatibility and recommends against using them in production environments.\n      Some Technology Preview APIs might only be applicable to specific environments.\n\n      When this parameter is unset the server will not order the result, save computational\n      time and therefore the API will operate faster.'\n    type: str\n  page:\n    description:\n    - 'Used to retrieve paged data for larger result sets. The value of this token\n      is generated by server and returned as next field in the result of Data.query-data-points\n      operations. Warning: This attribute is available as Technology Preview. These\n      are early access APIs provided to test, automate and provide feedback on the\n      feature. Since this can change based on feedback, VMware does not guarantee\n      backwards compatibility and recommends against using them in production environments.\n      Some Technology Preview APIs might only be applicable to specific environments.\n\n      When unset the first page of results will be returned.'\n    type: str\n  resources:\n    description:\n    - \"Resources to include in the query. Each resource is specified through a composite\\\n      \\ string that follows the following format. \\n type.<resource type>[.<scheme>]=<resource\\\n      \\ id> \\n\\n resource type specifies the type of resource for example VM, VCPU\\\n      \\ etc. \\n\\n scheme is an optional element to disambiguate the resource as needed\\\n      \\ for example to differentiate managed object id from uuid. \\n\\n resource id\\\n      \\ is the unique resource identifier value for example: vm-41 \\n\\n Example values\\\n      \\ include: type.VM=vm-41, type.VCPU=1, type.VM.moid=vm-41\\n. Warning: This attribute\\\n      \\ is available as Technology Preview. These are early access APIs provided to\\\n      \\ test, automate and provide feedback on the feature. Since this can change\\\n      \\ based on feedback, VMware does not guarantee backwards compatibility and recommends\\\n      \\ against using them in production environments. Some Technology Preview APIs\\\n      \\ might only be applicable to specific environments.\\nWhen left unset the result\\\n      \\ will not be filtered for specific resources.\"\n    type: list\n  start:\n    description:\n    - 'Start of a time window (included), timestamp in seconds UTC. Warning: This\n      attribute is available as Technology Preview. These are early access APIs provided\n      to test, automate and provide feedback on the feature. Since this can change\n      based on feedback, VMware does not guarantee backwards compatibility and recommends\n      against using them in production environments. Some Technology Preview APIs\n      might only be applicable to specific environments.\n\n      When unset the result will not be limited by start time.'\n    type: int\n  state:\n    choices:\n    - query_data_points\n    description: []\n    type: str\n  types:\n    description:\n    - 'List of Resource types. Warning: This attribute is available as Technology\n      Preview. These are early access APIs provided to test, automate and provide\n      feedback on the feature. Since this can change based on feedback, VMware does\n      not guarantee backwards compatibility and recommends against using them in production\n      environments. Some Technology Preview APIs might only be applicable to specific\n      environments.\n\n      When unset the result will not be filtered by resource types.\n\n      When clients pass a value of this structure as a parameter, the field must contain\n      identifiers for the resource type: vstats.model.RsrcType. When operations return\n      a value of this structure as a result, the field will contain identifiers for\n      the resource type: vstats.model.RsrcType.'\n    type: list\nrequirements:\n- python >= 3.6\nshort_description: Handle resource of type stats_data_dp\nversion_added: 1.0.0\n"
IN_QUERY_PARAMETER = [
    "start",
    "end",
    "cid",
    "metric",
    "types",
    "resources",
    "order",
    "page",
]
from ansible.module_utils.basic import env_fallback

try:
    from ansible_module.turbo.module import AnsibleTurboModule as AnsibleModule
except ImportError:
    from ansible.module_utils.basic import AnsibleModule
from ansible_collections.vmware.vmware_rest.plugins.module_utils.vmware_rest import (
    gen_args,
    open_session,
    update_changed_flag,
)


def prepare_argument_spec():
    argument_spec = {
        "vcenter_hostname": dict(
            type="str", required=False, fallback=(env_fallback, ["VMWARE_HOST"])
        ),
        "vcenter_username": dict(
            type="str", required=False, fallback=(env_fallback, ["VMWARE_USER"])
        ),
        "vcenter_password": dict(
            type="str",
            required=False,
            no_log=True,
            fallback=(env_fallback, ["VMWARE_PASSWORD"]),
        ),
        "vcenter_certs": dict(
            type="bool",
            required=False,
            no_log=True,
            fallback=(env_fallback, ["VMWARE_VALIDATE_CERTS"]),
        ),
    }
    argument_spec["types"] = {"type": "list", "operationIds": ["query_data_points"]}
    argument_spec["state"] = {"type": "str", "choices": ["query_data_points"]}
    argument_spec["start"] = {"type": "int", "operationIds": ["query_data_points"]}
    argument_spec["resources"] = {"type": "list", "operationIds": ["query_data_points"]}
    argument_spec["page"] = {"type": "str", "operationIds": ["query_data_points"]}
    argument_spec["order"] = {"type": "str", "operationIds": ["query_data_points"]}
    argument_spec["metric"] = {"type": "str", "operationIds": ["query_data_points"]}
    argument_spec["end"] = {"type": "int", "operationIds": ["query_data_points"]}
    argument_spec["cid"] = {"type": "str", "operationIds": ["query_data_points"]}
    return argument_spec


async def get_device_info(params, session, _url, _key):
    async with session.get(((_url + "/") + _key)) as resp:
        _json = await resp.json()
        entry = _json["value"]
        entry["_key"] = _key
        return entry


async def list_devices(params, session):
    existing_entries = []
    _url = url(params)
    async with session.get(_url) as resp:
        _json = await resp.json()
        devices = _json["value"]
    for device in devices:
        _id = list(device.values())[0]
        existing_entries.append((await get_device_info(params, session, _url, _id)))
    return existing_entries


async def exists(params, session):
    unicity_keys = ["bus", "pci_slot_number"]
    devices = await list_devices(params, session)
    for device in devices:
        for k in unicity_keys:
            if (params.get(k) is not None) and (device.get(k) != params.get(k)):
                break
        else:
            return device


async def main():
    module_args = prepare_argument_spec()
    module = AnsibleModule(argument_spec=module_args, supports_check_mode=True)
    session = await open_session(
        vcenter_hostname=module.params["vcenter_hostname"],
        vcenter_username=module.params["vcenter_username"],
        vcenter_password=module.params["vcenter_password"],
    )
    result = await entry_point(module, session)
    module.exit_json(**result)


def url(params):
    return "https://{vcenter_hostname}/rest/api/stats/data/dp".format(**params)


async def entry_point(module, session):
    func = globals()[("_" + module.params["state"])]
    return await func(module.params, session)


async def _query_data_points(params, session):
    _url = "https://{vcenter_hostname}/rest/api/stats/data/dp".format(
        **params
    ) + gen_args(params, IN_QUERY_PARAMETER)
    async with session.get(_url) as resp:
        try:
            if resp.headers["Content-Type"] == "application/json":
                _json = await resp.json()
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "query_data_points")


if __name__ == "__main__":
    import asyncio

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
