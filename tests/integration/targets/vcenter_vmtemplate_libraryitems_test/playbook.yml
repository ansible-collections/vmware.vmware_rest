- hosts: localhost
  gather_facts: no

  tasks:
    - name: Hi
      block:
      - name: Import eco-vcenter common vars
        ansible.builtin.include_vars:
          file: ../group_vars.yml
        tags: eco-vcenter-ci

      - name: Create a generic resource pool
        vmware.vmware_rest.vcenter_resourcepool:
          name: "bengi"
          parent: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/' + vcenter_datacenter + '/' + vcenter_cluster_name + '/' + vcenter_resource_pool) }}"
        register: resource_pool_info
        tags: eco-vcenter-ci

      - name: Create a VM
        vmware.vmware_rest.vcenter_vm:
          placement:
            cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/' + vcenter_datacenter + '/' + vcenter_cluster_name) }}"
            datastore: "{{ lookup('vmware.vmware_rest.datastore_moid', '/' + vcenter_datacenter + '/' + eco_nfs_datastore_iso) }}"
            folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/' + vcenter_datacenter + '/' + vcenter_vm_folder) }}"
            resource_pool: "{{ resource_pool_info.id }}"
          name: test_vm1
          guest_OS: RHEL_7_64
          hardware_version: VMX_11
          memory:
            hot_add_enabled: true
            size_MiB: 1024
        register: my_vm
        tags: eco-vcenter-ci
    
      - name: Create a content library based on a DataStore
        vmware.vmware_rest.content_locallibrary:
          name: my_library_on_datastore
          description: automated
          publish_info:
            published: true
            authentication_method: NONE
          storage_backings:
          - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', '/' + vcenter_datacenter + '/' + eco_nfs_datastore_iso) }}"
            type: DATASTORE
          state: present
        register: nfs_lib
        tags: eco-vcenter-ci

      - name: Create a VM template on the library
        vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
          name: golden-template
          library: '{{ nfs_lib.id }}'
          source_vm: '{{ my_vm.id }}'
          placement:
            cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/' + vcenter_datacenter + '/' + vcenter_cluster_name) }}"
            folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/' + vcenter_datacenter + '/' + vcenter_vm_folder) }}"
            resource_pool: "{{ resource_pool_info.id }}"
        register: mylib_item
        tags: eco-vcenter-ci

      - name: Print mylib_item
        ansible.builtin.debug:
          var: mylib_item
        tags: eco-vcenter-ci

      - name: Get the list of items of the NFS library
        vmware.vmware.content_library_item_info:
          library_id: '{{ nfs_lib.id }}'
        register: lib_items
        tags: eco-vcenter-ci

      - name: Print mylib_item
        ansible.builtin.debug:
          var: lib_items
        tags: eco-vcenter-ci
        
      - name: Use the name to identify the item
        set_fact:
          my_template_item: "{{ lib_items.library_item_info | selectattr('name', 'equalto', 'golden-template')|first }}"
        tags: eco-vcenter-ci

      - name: Deploy a new VM based on the template
        vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
          name: vm-from-template
          library: '{{ nfs_lib.id }}'
          template_library_item: '{{ my_template_item.id }}'
          placement:
            cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/' + vcenter_datacenter + '/' + vcenter_cluster_name) }}"
            folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/' + vcenter_datacenter + '/' + vcenter_vm_folder) }}"
            resource_pool: "{{ resource_pool_info.id }}"
          state: deploy
        register: my_new_vm
        tags: eco-vcenter-ci

      always:
      # - name: Delete content library based on a DataStore
      #   vmware.vmware_rest.content_locallibrary:
      #     library_id: ' {{ nfs_lib.id }}'
      #     name: my_library_on_datastore
      #     description: automated
      #     publish_info:
      #       published: true
      #       authentication_method: NONE
      #     storage_backings:
      #     - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', '/' + vcenter_datacenter + '/' + eco_nfs_datastore_iso) }}"
      #       type: DATASTORE
      #     state: absent
      #   tags: eco-vcenter-ci

      - name: Power off VM
        vmware.vmware_rest.vcenter_vm_guest_power:
          vm: '{{ my_vm.id }}'
          state: shutdown
        tags: eco-vcenter-ci

      - name: Wait until VM is off
        vmware.vmware_rest.vcenter_vm_info:
          vm: '{{ my_vm.id }}'
        register: vm_info
        until:
        - vm_info is not failed
        - vm_info.value.power_state == "POWERED_OFF"
        retries: 60
        delay: 5
        tags: eco-vcenter-ci

      - name: Delete VM
        vmware.vmware_rest.vcenter_vm:
          vm: '{{ my_vm.id }}'
          state: absent
        tags: eco-vcenter-ci


      - name: Delete resource pool
        vmware.vmware_rest.vcenter_resourcepool:
          resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', 'bengi') }}"
          state: absent
        tags: eco-vcenter-ci