---
- name: Get the dvswitch called {{ test_network_name }}
  vmware.vmware_rest.vcenter_network_info:
    filter_types: DISTRIBUTED_PORTGROUP
    filter_names: "{{ test_network_name }}"
  register: portgroup_info

- name: Print debug info
  ansible.builtin.debug:
    var: portgroup_info

- name: Verify retrived dvswitch info
  ansible.builtin.assert:
    that:
      - portgroup_info.value[0].name == test_network_name

- name: Attach a VM to a dvswitch
  vmware.vmware_rest.vcenter_vm_hardware_ethernet:
    vm: '{{ test_vm_id }}'
    pci_slot_number: 4
    backing:
      type: DISTRIBUTED_PORTGROUP
      network: "{{ portgroup_info.value[0].network }}"
    start_connected: false
  register: vm_hardware_ethernet_1

- name: Print debug info
  ansible.builtin.debug:
    var: vm_hardware_ethernet_1

- name: Verify a VM attached to a dvswitch
  ansible.builtin.assert:
    that:
      - vm_hardware_ethernet_1.value.backing.network == portgroup_info.value[0].network
      - vm_hardware_ethernet_1.value.pci_slot_number == 4
      - vm_hardware_ethernet_1.value.state == "NOT_CONNECTED"
      - not vm_hardware_ethernet_1.value.start_connected

- name: Turn the NIC's start_connected flag is on
  vmware.vmware_rest.vcenter_vm_hardware_ethernet:
    nic: '{{ vm_hardware_ethernet_1.id }}'
    start_connected: true
    vm: '{{ test_vm_id }}'
  register: _result

- name: Verify the NIC's start_connected flag is on
  ansible.builtin.assert:
    that:
      - _result is changed

- name: _Turn the NIC's start_connected flag on (again)
  vmware.vmware_rest.vcenter_vm_hardware_ethernet:
    nic: '{{ vm_hardware_ethernet_1.id }}'
    start_connected: true
    vm: '{{ test_vm_id }}'
  register: _result

- name: Verify result is not changed
  ansible.builtin.assert:
    that:
      - not(_result is changed)

- name: _Attach a VM to a dvswitch (again)
  vmware.vmware_rest.vcenter_vm_hardware_ethernet:
    vm: '{{ test_vm_id }}'
    pci_slot_number: 4
    backing:
      type: DISTRIBUTED_PORTGROUP
      network: "{{ portgroup_info.value[0].network }}"
    start_connected: false
  register: _vm_hardware_ethernet_2

- name: Validate idempotency
  ansible.builtin.assert:
    that: vm_hardware_ethernet_1.id == _vm_hardware_ethernet_2.id

- name: Collect a list of the NIC for a given VM
  vmware.vmware_rest.vcenter_vm_hardware_ethernet_info:
    vm: '{{ test_vm_id }}'
  register: vm_nic

- name: Print debug info
  ansible.builtin.debug:
    var: vm_nic

- name: Verify VM connected to one network
  ansible.builtin.assert:
    that:
      - vm_nic.value | length == 1
