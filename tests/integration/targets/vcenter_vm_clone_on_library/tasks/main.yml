- name: Create a content library based on a DataStore
  vmware.vmware_rest.content_locallibrary:
    name: my_library_on_datastore
    description: automated
    publish_info:
      published: true
      authentication_method: 'NONE'
    storage_backings:
      - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', '/my_dc/datastore/local') }}"
        type: 'DATASTORE'
    state: present
  register: nfs_lib

- ansible.builtin.set_fact:
    disk_name: rhel-8.5

- name: Fetch the root disk
  ansible.builtin.get_url:
    url: "https://s3.us-east-2.amazonaws.com/ansible-team-cloud-images/{{ disk_name }}.vmdk-4"
    dest: "../{{ disk_name }}.vmdk-4"
    checksum: sha256:e28616764ae9eb7e302f4642cace10f1596d8c7c254e2b9c4038c4cd726262ff

- name: Copy the disk on the ESXi local datastore
  ansible.builtin.copy:
    src: "../{{ disk_name }}.vmdk-4"
    dest: "/vmfs/volumes/local/{{ disk_name }}.vmdk-4"
  delegate_to: esxi1.test
  vars:
    ansible_user: root
    ansible_python_interpreter: /bin/python3
    ansible_remote_tmp: /vmfs/volumes/local

- name: Create the test_vm1 directory
  ansible.builtin.file:
    path: /vmfs/volumes/local/test_vm1
    state: directory
  delegate_to: esxi1.test
  vars:
    ansible_user: root
    ansible_python_interpreter: /bin/python3
    ansible_remote_tmp: /vmfs/volumes/local

- name: Stat disk file
  ansible.builtin.stat:
    path: "/vmfs/volumes/local/test_vm1/{{ disk_name }}.vmdk-4"
  register: vmdk_stat
  delegate_to: esxi1.test
  vars:
    ansible_user: root
    ansible_python_interpreter: /bin/python3
    ansible_remote_tmp: /vmfs/volumes/local
- ansible.builtin.debug: var=vmdk_stat
- name: Prepare the VMDK file
  ansible.builtin.command: "vmkfstools -i /vmfs/volumes/local/{{ disk_name }}.vmdk-4 /vmfs/volumes/local/test_vm1/{{ disk_name }}.vmdk -d thin"
  delegate_to: esxi1.test
  vars:
    ansible_user: root
    ansible_python_interpreter: /bin/python3
  when: not vmdk_stat.stat.exists|bool

- name: Create a VM
  vmware.vmware_rest.vcenter_vm:
    placement:
      cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/my_dc/host/my_cluster') }}"
      datastore: "{{ lookup('vmware.vmware_rest.datastore_moid', '/my_dc/datastore/local') }}"
      folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/my_dc/vm') }}"
      resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/my_dc/host/my_cluster/Resources') }}"
    name: test_vm1
    guest_OS: RHEL_7_64
    hardware_version: VMX_11
    memory:
      hot_add_enabled: true
      size_MiB: 1024
    disks:
      - type: SATA
        backing:
          type: VMDK_FILE
          vmdk_file: "[local] test_vm1/{{ disk_name }}.vmdk"
      - type: SATA
        new_vmdk:
          name: second_disk
          capacity: 32000000000
    cdroms:
      - type: SATA
        sata:
          bus: 0
          unit: 2
    nics:
      - backing:
          type: STANDARD_PORTGROUP
          network: "{{ lookup('vmware.vmware_rest.network_moid', '/my_dc/network/VM Network') }}"
  register: my_vm

- name: Create a VM template on the library
  vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
    name: golden-template
    library: "{{ nfs_lib.id }}"
    source_vm: "{{ my_vm.id }}"
    placement:
      cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/my_dc/host/my_cluster') }}"
      folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/my_dc/vm') }}"
      resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/my_dc/host/my_cluster/Resources') }}"
  register: mylib_item
- debug: var=mylib_item
- assert:
    that:
      - mylib_item is changed


- name: _Create the same template again
  vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
    name: golden-template
    library: "{{ nfs_lib.id }}"
    source_vm: "{{ my_vm.id }}"
    placement:
      cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/my_dc/host/my_cluster') }}"
      folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/my_dc/vm') }}"
      resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/my_dc/host/my_cluster/Resources') }}"
  register: _result
- debug: var=_result
- assert:
    that:
      - not (_result is changed)

- name: Get the list of items of the NFS library
  vmware.vmware_rest.content_library_item_info:
    library_id: '{{ nfs_lib.id }}'
  register: lib_items

- debug:
    var: all_content_libraries

- name: Use the name to identify the item
  set_fact:
    my_template_item: "{{ lib_items.value | selectattr('name', 'equalto', 'golden-template')|first }}"

- assert:
    that:
      - mylib_item.id == my_template_item.id


- name: Deploy a new VM based on the template
  vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
    name: vm-from-template
    library: "{{ nfs_lib.id }}"
    template_library_item: "{{ my_template_item.id }}"
    placement:
      cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/my_dc/host/my_cluster') }}"
      folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/my_dc/vm') }}"
      resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/my_dc/host/my_cluster/Resources') }}"
    state: deploy
  register: my_new_vm
- debug: var=my_new_vm

- name: Retrieve all the details about the new VM
  vmware.vmware_rest.vcenter_vm:
    vm: "{{ my_new_vm.value }}"
  register: my_new_vm_info

- debug: var=my_new_vm_info
