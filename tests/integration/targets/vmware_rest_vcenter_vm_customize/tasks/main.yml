---
- name: Test VM customize on a real vCenter
  # https://github.com/ansible-collections/cloud.common/issues/179
  environment:
    VMWARE_HOST: "{{ vcenter_hostname }}"
    VMWARE_USER: "{{ vcenter_username }}"
    VMWARE_PASSWORD: "{{ vcenter_password }}"
    VMWARE_VALIDATE_CERTS: "False"
    VMWARE_PORT: "{{ vcenter_port }}"
  block:
    - name: Create VM from template
      ansible.builtin.include_role:
        name: prepare_vm
      vars:
        prepare_vm_state: present
        resource_pool_name: "{{ test_resource_pool_name }}"
        resource_pool_parent_name: "{{ vcenter_resource_pool }}"
        vm_name: "{{ test_vm_name }}"

    - name: Power on VM
      vmware.vmware_rest.vcenter_vm_power:
        state: start
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"

    - name: Wait until VM is ready
      vmware.vmware_rest.vcenter_vm_tools_info:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
      register: vm_tools_info
      until:
        - vm_tools_info is not failed
        - vm_tools_info.value.run_state == "RUNNING"
      retries: 60
      delay: 5

    - name: Shut down the VM
      vmware.vmware_rest.vcenter_vm_guest_power:
        state: shutdown
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"

    - name: Wait until VM is off
      vmware.vmware_rest.vcenter_vm_info:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
      register: vm_info
      until:
        - vm_info is not failed
        - vm_info.value.power_state == "POWERED_OFF"
      retries: 10
      delay: 5

    - name: Read the power status of the VM
      vmware.vmware_rest.vcenter_vm_guest_power_info:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
      register: vm_power_info

    - name: Verify power status of the VM
      ansible.builtin.assert:
        that:
          - vm_power_info.value.state == "NOT_RUNNING"
          - not vm_power_info.value.operations_ready

    - name: Customize the VM
      vmware.vmware_rest.vcenter_vm_guest_customization:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
        configuration_spec:
          linux_config:
            domain: testdomain
            hostname:
              fixed_name: "{{ new_vm_setting.dns_host_name }}"
              type: FIXED
        interfaces:
          - adapter:
              ipv4:
                type: STATIC
                ip_address: "{{ new_vm_setting.vm_ip }}"
                prefix: 24
        global_DNS_settings:
          dns_suffix_list: []
          dns_servers:
            - "{{ new_vm_setting.dns_servers }}"
      register: customized_vm

    - name: Print customized VM info
      ansible.builtin.debug:
        var: customized_vm

    - name: Turn on the power of the VM
      vmware.vmware_rest.vcenter_vm_power:
        state: start
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"

    - name: Wait until VM is ready
      vmware.vmware_rest.vcenter_vm_tools_info:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
      register: vm_tools_info
      until:
        - vm_tools_info is not failed
        - vm_tools_info.value.run_state == "RUNNING"
      retries: 60
      delay: 5

    - name: Read the power status of the VM
      vmware.vmware_rest.vcenter_vm_guest_power_info:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
      register: vm_power_info

    - name: Verify power status of the VM
      ansible.builtin.assert:
        that:
          - vm_power_info.value.state == "RUNNING"
          - vm_power_info.value.operations_ready

    - name: Wait to be sure the VM is actually operational
      pause:
        minutes: 1

    - name: Collect information about VM network
      vmware.vmware_rest.vcenter_vm_guest_networking_info:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
      register: vm_dns_info

    - name: Print VM network info
      ansible.builtin.debug:
        var: vm_dns_info

    - name: Verify DNS settings of VM
      ansible.builtin.assert:
        that:
          - vm_dns_info.value.dns_values.host_name == new_vm_setting.dns_host_name
          - vm_dns_info.value.dns.ip_addresses is contains new_vm_setting.dns_servers
          - vm_dns_info.value.dns.search_domains | length == 0

    - name: Collect information about networking interface of VM
      vmware.vmware_rest.vcenter_vm_guest_networking_interfaces_info:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
      register: vm_ip_info

    - name: Verify IP adress of VM
      ansible.builtin.assert:
        that:
          - vm_ip_info.value[0].ip.ip_addresses|map(attribute='ip_address')|list is contains new_vm_setting.vm_ip

    - name: Get information about the vm-tools
      vmware.vmware_rest.vcenter_vm_tools_installer_info:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
      register: vm_info

    - ansible.builtin.assert:
        that: not vm_info.value.is_connected

    - name: Update the vm-tools
      vmware.vmware_rest.vcenter_vm_tools_installer:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
        state: connect

    - name: Get information about the vm-tools
      vmware.vmware_rest.vcenter_vm_tools_installer_info:
        vm: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"
      register: vm_info

    - ansible.builtin.assert:
        that: vm_info.value.is_connected

  always:
    - name: Delete VM
      ansible.builtin.include_role:
        name: prepare_vm
      vars:
        prepare_vm_state: absent
        vm_id: "{{ lookup('vmware.vmware_rest.vm_moid', test_vm_name) }}"

    - name: Delete resource pool
      vmware.vmware_rest.vcenter_resourcepool:
        resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', test_resource_pool_name) }}"
        state: absent
