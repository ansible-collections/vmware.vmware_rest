---
- name: Create VM
  when: prepare_vm_state == 'present'
  block:
    - name: Create a generic resource pool
      vmware.vmware_rest.vcenter_resourcepool:
        name: "{{ resource_pool_name }}"
        parent: >-
          {{ lookup('vmware.vmware.moid_from_path', '/' + vcenter_datacenter + '/host/' + vcenter_cluster_name + '/' + resource_pool_parent_name,
          **vmware_rest_auth_vars) }}
      register: resource_pool_info

    - name: Deploy a new VM based on the template
      vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
        name: "{{ vm_name }}"
        template_library_item: "{{ vcenter_test_vm_template.id }}"
        placement:
          cluster: "{{ lookup('vmware.vmware.moid_from_path', '/' + vcenter_datacenter + '/host/' + vcenter_cluster_name, **vmware_rest_auth_vars) }}"
          folder: "{{ lookup('vmware.vmware.moid_from_path', '/' + vcenter_datacenter + '/vm/' + vcenter_vm_folder, type='folder', **vmware_rest_auth_vars) }}"
          resource_pool: "{{ resource_pool_info.id }}"
        state: deploy
      register: vm_from_template

- name: Destroy VM
  when: prepare_vm_state == 'absent'
  block:
    - name: Power off VM
      vmware.vmware.vm_powerstate:
        datacenter: "{{ vcenter_datacenter }}"
        moid: "{{ vm_id }}"
        force: true
        state: powered-off

    - name: Wait until VM is off
      vmware.vmware_rest.vcenter_vm_info:
        vm: "{{ vm_id }}"
      register: vm_info
      until:
        - vm_info is not failed
        - vm_info.value.power_state == "POWERED_OFF"
      retries: 60
      delay: 5

    - name: Delete VM
      vmware.vmware_rest.vcenter_vm:
        vm: "{{ vm_id }}"
        state: absent
