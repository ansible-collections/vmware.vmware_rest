- name: Create a VM
  vmware.vmware_rest.vcenter_vm:
    placement:
      cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', '/my_dc/host/my_cluster') }}"
      datastore: "{{ lookup('vmware.vmware_rest.datastore_moid', '/my_dc/datastore/rw_datastore') }}"
      folder: "{{ lookup('vmware.vmware_rest.folder_moid', '/my_dc/vm') }}"
      resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/my_dc/host/my_cluster/Resources') }}"
    name: test_vm1
    guest_OS: RHEL_7_64
    hardware_version: VMX_11
    memory:
      hot_add_enabled: true
      size_MiB: 1024
  register: my_vm

- name: Create a content library pointing on a NFS share
  vmware.vmware_rest.content_locallibrary:
    name: my_library_on_nfs
    description: automated
    publish_info:
      published: true
      authentication_method: 'NONE'
    storage_backings:
      - storage_uri: 'nfs://datastore.test/srv/share/content-library'
        type: 'OTHER'
    state: present
  register: nfs_lib

- name: _Create a content library pointing on a NFS share (again)
  vmware.vmware_rest.content_locallibrary:
    name: my_library_on_nfs
    description: automated
    publish_info:
      published: true
      authentication_method: 'NONE'
    storage_backings:
      - storage_uri: 'nfs://datastore.test/srv/share/content-library'
        type: 'OTHER'
    state: present
  register: nfs_lib

- name: List Local Content Library
  vmware.vmware_rest.content_locallibrary_info:
  register: my_content_library

- assert:
    that:
      - my_content_library.value|length == 1

- name: Create some more content libraries
  vmware.vmware_rest.content_locallibrary:
    name: "my_library_on_nfs_{{ item }}"
    description: automated
    publish_info:
      published: true
      authentication_method: 'NONE'
    storage_backings:
      - storage_uri: 'nfs://datastore.test/srv/share/content-library'
        type: 'OTHER'
    state: present
  with_sequence: 0-10

- name: List all Local Content Library
  vmware.vmware_rest.content_locallibrary_info:
  register: all_content_libraries

- name: Use the name to identify the right item
  set_fact:
    my_first_library: "{{ all_content_libraries.value | selectattr('name', 'equalto', 'my_library_on_nfs')|first }}"

- debug: var=my_first_library

- assert:
    that:
      - my_first_library.name == "my_library_on_nfs"

- name: Export the VM as an OVF on the library
  vmware.vmware_rest.vcenter_ovf_libraryitem:
    session_timeout: 2900
    source:
      type: VirtualMachine
      id: "{{ my_vm.id }}"
    target:
      library_id: "{{ nfs_lib.id }}"
    create_spec:
      name: golden_image
      description: an OVF example
      flags: []
    state: present
  register: ovf_item
- assert:
    that:
      - ovf_item is changed


- name: _Export againt the VM as an OVF on the library
  vmware.vmware_rest.vcenter_ovf_libraryitem:
    session_timeout: 2900
    source:
      type: VirtualMachine
      id: "{{ my_vm.id }}"
    target:
      library_id: "{{ nfs_lib.id }}"
    create_spec:
      name: golden_image
      description: an OVF example
      flags: []
    state: present
  register: _result
- assert:
    that:
      - not(_result is changed)
      - _result.id

- name: Get the list of items of the NFS library
  vmware.vmware_rest.content_library_item_info:
    library_id: '{{ nfs_lib.id }}'
  register: lib_items

- name: _Create a new VM from the OVF with a wrong folder
  vmware.vmware_rest.vcenter_ovf_libraryitem:
    session_timeout: 2900
    ovf_library_item_id: '{{ (lib_items.value|selectattr("name", "equalto", "golden_image")|first).id }}'
    state: deploy
    target:
      resource_pool_id: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/my_dc/host/my_cluster/Resources') }}"
      folder_id: "{{ lookup('vmware.vmware_rest.folder_moid', '/my_dc/host') }}"
    deployment_spec:
      name: my_vm_from_ovf
      accept_all_EULA: true
      storage_provisioning: thin
  register: result
  failed_when: not(result.failed)

- name: Create a new VM from the OVF
  vmware.vmware_rest.vcenter_ovf_libraryitem:
    ovf_library_item_id: '{{ (lib_items.value|selectattr("name", "equalto", "golden_image")|first).id }}'
    state: deploy
    target:
      resource_pool_id: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/my_dc/host/my_cluster/Resources') }}"
    deployment_spec:
      name: my_vm_from_ovf
      accept_all_EULA: true
      storage_provisioning: thin

- assert:
    that:
      - result is success

- name: Create a new VM from the OVF and specify the host and folder
  vmware.vmware_rest.vcenter_ovf_libraryitem:
    ovf_library_item_id: '{{ (lib_items.value|selectattr("name", "equalto", "golden_image")|first).id }}'
    state: deploy
    target:
      resource_pool_id: "{{ lookup('vmware.vmware_rest.resource_pool_moid', '/my_dc/host/my_cluster/Resources') }}"
      folder_id: "{{ lookup('vmware.vmware_rest.folder_moid', '/my_dc/vm') }}"
      host_id: "{{ lookup('vmware.vmware_rest.host_moid', '/my_dc/host/my_cluster/esxi1.test/test_vm1') }}"
    deployment_spec:
      name: my_vm_from_ovf_on_a_host
      accept_all_EULA: true
      storage_provisioning: thin

- assert:
    that:
      - result is success

- name: Create a new local content library
  vmware.vmware_rest.content_locallibrary:
    name: local_library_001
    description: automated
    publish_info:
      published: true
      authentication_method: 'NONE'
    storage_backings:
      - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', '/my_dc/datastore/rw_datastore') }}"
        type: 'DATASTORE'
    state: present
  register: ds_lib

- name: Retrieve the local content library information based upon id check mode
  vmware.vmware_rest.content_locallibrary_info:
    library_id: '{{ ds_lib.id }}'
  register: result
  check_mode: true

- name: Assert that result is available in check mode
  ansible.builtin.assert:
    that:
      - not result.changed
      - result.value is defined
      - result.value['name'] is defined
      - result.value['id'] is defined
      - result.value['description'] is defined
      - result.value['server_guid'] is defined
      - result.value['creation_time'] is defined
      - result.value['last_modified_time'] is defined
      - result.value['storage_backings'] is defined
      - result.value['version'] is defined
      - result.value['id'] == ds_lib.id
      - result.value['type'] == 'LOCAL'

- name: _Retrieve the local content library information based upon id
  vmware.vmware_rest.content_locallibrary_info:
    library_id: '{{ ds_lib.id }}'
  register: result

- ansible.builtin.debug: var=result

- name: _check the content library id details
  ansible.builtin.assert:
    that:
      - result.value is defined
      - result.value['name'] is defined
      - result.value['id'] is defined
      - result.value['description'] is defined
      - result.value['server_guid'] is defined
      - result.value['creation_time'] is defined
      - result.value['last_modified_time'] is defined
      - result.value['storage_backings'] is defined
      - result.value['version'] is defined
      - result.value['id'] == ds_lib.id
      - result.value['type'] == 'LOCAL'

- name: Get the list of items of the NFS library
  vmware.vmware_rest.content_library_item_info:
    library_id: '{{ nfs_lib.id }}'
  register: result

- name: Get the (empty) list of items of the library
  vmware.vmware_rest.content_library_item_info:
    library_id: '{{ ds_lib.id }}'
  register: result

- ansible.builtin.assert:
    that:
      - result.value|length == 0

- name: Create subscribed library
  vmware.vmware_rest.content_subscribedlibrary:
    name: sub_lib
    subscription_info:
      subscription_url: "{{ nfs_lib.value.publish_info.publish_url }}"
      authentication_method: NONE
      automatic_sync_enabled: false
      on_demand: true
    storage_backings:
      - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', '/my_dc/datastore/rw_datastore') }}"
        type: 'DATASTORE'
  register: sub_lib

- name: Create subscribed library (again)
  vmware.vmware_rest.content_subscribedlibrary:
    name: sub_lib
    subscription_info:
      subscription_url: "{{ nfs_lib.value.publish_info.publish_url }}"
      authentication_method: NONE
      automatic_sync_enabled: false
      on_demand: true
    storage_backings:
      - datastore_id: "{{ lookup('vmware.vmware_rest.datastore_moid', '/my_dc/datastore/rw_datastore') }}"
        type: 'DATASTORE'
  register: result
- name: Assert the resource has not been changed
  ansible.builtin.assert:
    that:
      - not result.changed
  ignore_errors: true

- name: Ensure the OVF is here
  vmware.vmware_rest.content_library_item_info:
    library_id: '{{ sub_lib.id }}'
  register: result
- ansible.builtin.assert:
    that:
      - result.value|length > 0

- name: Clean up the cache
  vmware.vmware_rest.content_subscribedlibrary:
    name: sub_lib
    library_id: "{{ sub_lib.id }}"
    state: evict

- name: Trigger a library sync
  vmware.vmware_rest.content_subscribedlibrary:
    name: sub_lib
    library_id: "{{ sub_lib.id }}"
    state: sync

- name: Get the vSphere content syncrhronization configuration
  vmware.vmware_rest.content_configuration_info:
  register: current_content_configuration

- name: Turn on the autmatic syncrhronization
  vmware.vmware_rest.content_configuration:
    automatic_sync_enabled: true

- name: List Subscribed Content Library
  vmware.vmware_rest.content_subscribedlibrary_info:
  register: my_content_library

- assert:
    that:
      - my_content_library.value|length == 1
