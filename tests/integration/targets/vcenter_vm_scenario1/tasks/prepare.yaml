- vcenter_folder_info:
  register: my_folder_result

- set_fact:
      my_datacenter_folder: '{{ my_folder_result.value|selectattr("type", "equalto", "DATACENTER")|first }}'

- name: Create datacenter my_dc
  vcenter_datacenter:
    name: my_dc
    folder: "{{ my_datacenter_folder.folder }}"
    state: create
  register: _result
- debug: var=_result
- assert:
    that:
      - _result is changed

- name: Create datacenter my_dc (again)
  vcenter_datacenter:
    name: my_dc
    folder: "{{ my_datacenter_folder.folder }}"
    state: create
  register: _result
- debug: var=_result
- assert:
    that:
      - not(_result is changed)

- vcenter_datacenter_info:
  register: my_datacenter_list

- register: my_dc_info
  vcenter_datacenter_info:

- debug: var=my_dc_info

- name: _community_ Create Cluster
  vmware_cluster:
    datacenter_name: my_dc
    cluster_name: my_cluster
    ha_host_monitoring: disabled
    validate_certs: no

- vcenter_folder_info:
  register: my_folder_value
- debug: var=my_folder_value

- set_fact:
    my_datacenter_folder: '{{ my_folder_value.value|selectattr("type", "equalto", "DATACENTER")|first }}'
    my_virtual_machine_folder: '{{ my_folder_value.value|selectattr("type", "equalto", "VIRTUAL_MACHINE")|first }}'
    my_datastore_folder: '{{ my_folder_value.value|selectattr("type", "equalto", "DATASTORE")|first }}'
    my_host_folder: '{{ my_folder_value.value|selectattr("type", "equalto", "HOST")|first }}'
- debug: var=my_host_folder

- vcenter_folder_info:
  register: my_folder_result
- debug: var=my_folder_value

- name: define ESXi list
  set_fact:
    my_esxis:
      - hostname: "{{ lookup('env', 'ESXI1_HOSTNAME') }}"
        username: "{{ lookup('env', 'ESXI1_USERNAME') }}"
        password: "{{ lookup('env', 'ESXI1_PASSWORD') }}"
      - hostname: "{{ lookup('env', 'ESXI2_HOSTNAME') }}"
        username: "{{ lookup('env', 'ESXI2_USERNAME') }}"
        password: "{{ lookup('env', 'ESXI2_PASSWORD') }}"

- name: Connect the host(s)
  vcenter_host:
    hostname: "{{ item.hostname }}"
    password: "{{ item.password }}"
    user_name: "{{ item.username }}"
    thumbprint_verification: 'NONE'
    state: create
    folder: '{{ my_host_folder.folder }}'
  register: _result
  with_items: "{{ my_esxis}}"
- debug: var=_result
- assert:
    that:
      - _result is changed

- name: _community_ Add ESXi in the cluster
  vmware_host:
    datacenter: my_dc
    cluster: my_cluster
    esxi_hostname: "{{ item.hostname }}"
    esxi_username: "{{ item.username }}"
    esxi_password: "{{ item.password }}"
  with_items: "{{ my_esxis}}"

- name: _community_ Mount NFS (ro_datastore) datastores to ESXi
  vmware_host_datastore:
    esxi_hostname: '{{ item.hostname }}'
    datastore_name: ro_datastore
    datastore_type: nfs
    nfs_server: datastore.test
    nfs_path: /srv/share/isos
    nfs_ro: true
    state: present
  with_items: "{{ my_esxis}}"

- name: _community_ Mount NFS (rw_datastore) datastores on the ESXi
  vmware_host_datastore:
    esxi_hostname: '{{ item.hostname }}'
    datastore_name: rw_datastore
    datastore_type: nfs
    nfs_server: datastore.test
    nfs_path: /srv/share/vms
    nfs_ro: false
    state: present
  with_items: "{{ my_esxis}}"

- vcenter_cluster_info:
  register: all_the_clusters
- debug: var=all_the_clusters

- vcenter_datastore_info:
  register: my_datastore_value
- debug: var=my_datastore_value

- set_fact:
    rw_datastore: '{{ my_datastore_value.value|selectattr("name", "equalto", "rw_datastore")|first }}'

- name: _community_ Create the DVSwitch
  vmware_dvswitch:
    datacenter_name: my_dc
    switch_name: dvswitch1
    switch_version: 6.5.0
    uplink_quantity: 2
    discovery_proto: lldp
    discovery_operation: both
    state: present

- name: _community_ Attach the hosts to the DVSwitch
  vmware_dvs_host:
    validate_certs: no
    esxi_hostname: "{{ item.hostname }}"
    switch_name: dvswitch1
    vmnics:
      - vmnic1
    state: present
  with_items: "{{ my_esxis}}"

- name: _community_ Create the portgroup
  vmware_dvs_portgroup:
    validate_certs: no
    portgroup_name: my-portrgoup
    switch_name: dvswitch1
    portgroup_type: earlyBinding
    vlan_id: 0
    num_ports: 120
    state: present

- vcenter_network_info:
  register: my_network_value
- debug: var=my_network_value

- register: test_vm1
  vcenter_vm_info:
    filter.names:
    - test_vm1

- vcenter_cluster_info:
    cluster: "{{ all_the_clusters.value[0].cluster }}"
  register: my_cluster_info
- debug: var=my_cluster_info
