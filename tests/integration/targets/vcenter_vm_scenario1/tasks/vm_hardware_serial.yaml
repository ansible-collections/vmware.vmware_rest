---
- name: Retrieve the serial ports information from the VM
  vmware.vmware_rest.vcenter_vm_hardware_serial_info:
    vm: '{{ test_vm1_info.id }}'
  register: _result

- ansible.builtin.debug: var=_result

- name: Create a new serial port
  vmware.vmware_rest.vcenter_vm_hardware_serial:
    vm: '{{ test_vm1_info.id }}'
    label: "Serial port 2"
    allow_guest_control: true
  register: _result

- ansible.builtin.debug: var=_result

- ansible.builtin.assert:
    that:
      - _result is changed

- name: Create another serial port with a label
  vmware.vmware_rest.vcenter_vm_hardware_serial:
    vm: '{{ test_vm1_info.id }}'
    label: "Serial port 2"
    allow_guest_control: true
  register: _result

- ansible.builtin.debug: var=_result

- ansible.builtin.assert:
    that:
      - _result is changed


- name: Create an existing serial port (label)
  vmware.vmware_rest.vcenter_vm_hardware_serial:
    vm: '{{ test_vm1_info.id }}'
    label: "Serial port 1"
    allow_guest_control: true
  register: _result

- ansible.builtin.debug: var=_result

- ansible.builtin.assert:
    that:
      - not(_result is changed)

- name: Get an existing serial port (label)
  vmware.vmware_rest.vcenter_vm_hardware_serial_info:
    vm: '{{ test_vm1_info.id }}'
    label: "Serial port 1"
  register: serial_port_1

- ansible.builtin.debug: var=_result

- ansible.builtin.assert:
    that:
      - _result.value.label == "Serial port 1"

- name: Delete an existing serial port (port id)
  vmware.vmware_rest.vcenter_vm_hardware_serial:
    vm: '{{ test_vm1_info.id }}'
    port: '{{ serial_port_1.id }}'
    state: absent
  register: _result

- name: Delete an existing serial port (label)
  vmware.vmware_rest.vcenter_vm_hardware_serial:
    vm: '{{ test_vm1_info.id }}'
    label: "Serial port 2"
    state: absent
  register: _result
