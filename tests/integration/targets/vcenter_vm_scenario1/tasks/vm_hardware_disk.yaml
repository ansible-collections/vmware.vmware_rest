---
- name: Retrieve the disk information from the VM
  vmware.vmware_rest.vcenter_vm_hardware_disk_info:
    vm: '{{ test_vm1_info.id }}'
  register: _result

- ansible.builtin.debug: var=_result

- name: Retrieve disk information using the label
  vmware.vmware_rest.vcenter_vm_hardware_disk_info:
    vm: '{{ test_vm1_info.id }}'
    label: "Hard disk 1"
  register: _result

- ansible.builtin.debug: var=_result

- vmware.vmware_rest.vcenter_vm_hardware_adapter_sata:
    vm: '{{ test_vm1_info.id }}'
    pci_slot_number: 34

- name: Create a new disk
  vmware.vmware_rest.vcenter_vm_hardware_disk:
    vm: '{{ test_vm1_info.id }}'
    type: SATA
    new_vmdk:
      capacity: 320000
  register: my_new_disk

- ansible.builtin.debug: var=my_new_disk

- ansible.builtin.assert:
    that: my_new_disk is changed

- name: Get VM storage policy
  vmware.vmware_rest.vcenter_vm_storage_policy_info:
    vm: '{{ test_vm1_info.id }}'
  register: _result

- ansible.builtin.debug: var=_result

- name: List existing storage policies
  vmware.vmware_rest.vcenter_storage_policies_info:
  register: storage_policies

- ansible.builtin.debug: var=storage_policies

- name: Look up the VM Encryption Policy
  ansible.builtin.set_fact:
    my_storage_policy: "{{ (storage_policies.value |  selectattr('name', 'equalto', 'VVol No Requirements Policy') | list | first) }}"
- ansible.builtin.debug: var=my_storage_policy

- name: Prepare the disk policy dict
  ansible.builtin.set_fact:
    vm_disk_policy: "{{ {} | combine({ my_new_disk.id: {'policy': my_storage_policy.policy, 'type': 'USE_SPECIFIED_POLICY'} }) }}"
- ansible.builtin.debug: var=vm_disk_policy

- name: Adjust VM storage policy
  vmware.vmware_rest.vcenter_vm_storage_policy:
    vm: '{{ test_vm1_info.id }}'
    vm_home:
      type: USE_DEFAULT_POLICY
    disks: '{{ vm_disk_policy }}'
  register: _result

- ansible.builtin.debug: var=_result

- ansible.builtin.assert:
    that:
      - _result is changed

- name: _Adjust VM storage policy (again)
  vmware.vmware_rest.vcenter_vm_storage_policy:
    vm: '{{ test_vm1_info.id }}'
    vm_home:
      type: USE_DEFAULT_POLICY
    disks: '{{ vm_disk_policy }}'

  register: _result

- ansible.builtin.debug: var=_result

- ansible.builtin.assert:
    that:
      - not(_result is changed)
  ignore_errors: true


- name: Get VM storage policy compliance information
  vmware.vmware_rest.vcenter_vm_storage_policy_compliance_info:
    vm: '{{ test_vm1_info.id }}'
  register: _result

- ansible.builtin.debug: var=_result

- name: Delete the disk
  vmware.vmware_rest.vcenter_vm_hardware_disk:
    vm: '{{ test_vm1_info.id }}'
    disk:  '{{ my_new_disk.id }}'
    state: absent
  register: _result

- ansible.builtin.debug: var=_result

- ansible.builtin.assert:
    that: _result is changed

- name: Remove SATA adapter at PCI slot 34
  vmware.vmware_rest.vcenter_vm_hardware_adapter_sata:
    vm: '{{ test_vm1_info.id }}'
    pci_slot_number: 34
    state: absent
