---
- name: Test vmware_rest_vm_guest_filesystem_directories module on a real vCenter
  # https://github.com/ansible-collections/cloud.common/issues/179
  environment:
    VMWARE_HOST: "{{ vcenter_hostname }}"
    VMWARE_USER: "{{ vcenter_username }}"
    VMWARE_PASSWORD: "{{ vcenter_password }}"
    VMWARE_VALIDATE_CERTS: "False"
    VMWARE_PORT: "{{ vcenter_port }}"
  block:
    - name: Create VM from template
      ansible.builtin.include_role:
        name: prepare_vm
      vars:
        prepare_vm_state: present
        resource_pool_name: "{{ test_resource_pool_name }}"
        resource_pool_parent_name: "{{ vcenter_resource_pool }}"
        vm_name: "{{ test_vm_name }}"

    - name: Lookup the VM ID
      ansible.builtin.set_fact:
        _test_vm_moid: "{{ lookup('vmware.vmware.moid_from_path', '/' + vcenter_datacenter + '/vm/' + vcenter_vm_folder + '/' + test_vm_name, **vmware_rest_auth_vars) }}"

    - name: Power on VM
      vmware.vmware_rest.vcenter_vm_power:
        state: start
        vm: "{{ _test_vm_moid }}"

    - name: Wait until VM is ready
      vmware.vmware_rest.vcenter_vm_tools_info:
        vm: "{{ _test_vm_moid }}"
      register: vm_tools_info
      until:
        - vm_tools_info is not failed
        - vm_tools_info.value.run_state == "RUNNING"
      retries: 60
      delay: 5

    - name: Create a directory in /tmp
      vmware.vmware_rest.vcenter_vm_guest_filesystem_directories:
        vm: "{{ _test_vm_moid }}"
        path: "{{ path_tmp.dir }}"
        create_parents: true
        credentials:
          interactive_session: false
          type: USERNAME_PASSWORD
          user_name: "{{ vcenter_test_vm_user_name }}"
          password: "{{ vcenter_test_vm_user_password }}"
      register: vm_dir_info

    - name: Print debug info
      ansible.builtin.debug:
        var: vm_dir_info

    - name: Verify changed true
      ansible.builtin.assert:
        that:
          - vm_dir_info is ansible.builtin.changed

    - name: Create directory with name duplication in /tmp
      vmware.vmware_rest.vcenter_vm_guest_filesystem_directories:
        vm: "{{ _test_vm_moid }}"
        path: "{{ path_tmp.dir }}"
        create_parents: true
        credentials:
          interactive_session: false
          type: USERNAME_PASSWORD
          user_name: "{{ vcenter_test_vm_user_name }}"
          password: "{{ vcenter_test_vm_user_password }}"
      register: vm_dir_info

    - name: Print debug info
      ansible.builtin.debug:
        var: vm_dir_info

    - name: Verify no changes
      ansible.builtin.assert:
        that:
          - vm_dir_info is not ansible.builtin.changed
          - vm_dir_info.value.error_type == "ALREADY_EXISTS"

    - name: Move directory in /tmp
      vmware.vmware_rest.vcenter_vm_guest_filesystem_directories:
        vm: "{{ _test_vm_moid }}"
        path: "{{ path_tmp.dir }}"
        new_path: "{{ path_tmp.new_dir }}"
        create_parents: true
        credentials:
          interactive_session: false
          type: USERNAME_PASSWORD
          user_name: "{{ vcenter_test_vm_user_name }}"
          password: "{{ vcenter_test_vm_user_password }}"
        state: move
      register: vm_dir_info

    - name: Print debug info
      ansible.builtin.debug:
        var: vm_dir_info

    - name: Verify changed true
      ansible.builtin.assert:
        that:
          - vm_dir_info is ansible.builtin.changed

    - name: Create a directory in /tmp
      vmware.vmware_rest.vcenter_vm_guest_filesystem_directories:
        vm: "{{ _test_vm_moid }}"
        path: "{{ path_tmp.dir }}"
        create_parents: true
        credentials:
          interactive_session: false
          type: USERNAME_PASSWORD
          user_name: "{{ vcenter_test_vm_user_name }}"
          password: "{{ vcenter_test_vm_user_password }}"
      register: vm_dir_info

    - name: Print debug info
      ansible.builtin.debug:
        var: vm_dir_info

    - name: Verify changed true
      ansible.builtin.assert:
        that:
          - vm_dir_info is ansible.builtin.changed

    - name: Create a temporary directory in /tmp
      vmware.vmware_rest.vcenter_vm_guest_filesystem_directories:
        vm: "{{ lookup('vmware.vmware.moid_from_path', '/' + vcenter_datacenter + '/vm/' + vcenter_vm_folder + '/' + test_vm_name, **vmware_rest_auth_vars) }}"
        suffix: test
        prefix: test
        credentials:
          interactive_session: false
          type: USERNAME_PASSWORD
          user_name: "{{ vcenter_test_vm_user_name }}"
          password: "{{ vcenter_test_vm_user_password }}"
        state: create_temporary
      register: vm_dir_info_temp

    - name: Print debug info
      ansible.builtin.debug:
        var: vm_dir_info_temp

    - name: Verify changed true
      ansible.builtin.assert:
        that:
          - vm_dir_info_temp is ansible.builtin.changed
          - vm_dir_info_temp.value is defined and vm_dir_info_temp.value != ''

    - name: Delete directories in /tmp
      vmware.vmware_rest.vcenter_vm_guest_filesystem_directories:
        vm: "{{ _test_vm_moid }}"
        path: "{{ item }}"
        credentials:
          interactive_session: false
          type: USERNAME_PASSWORD
          user_name: "{{ vcenter_test_vm_user_name }}"
          password: "{{ vcenter_test_vm_user_password }}"
        state: absent
      loop:
        - "{{ path_tmp.dir }}"
        - "{{ path_tmp.new_dir }}"
        - "{{ path_tmp.no_dir }}"
        - "{{ path_tmp.new_no_dir }}"
        - "{{ vm_dir_info_temp.value }}"
      register: vm_del_dir_info

    - name: Print debug info
      ansible.builtin.debug:
        var: vm_del_dir_info

    - name: Verify directories deletion
      ansible.builtin.assert:
        that:
          - vm_del_dir_info.results[0].item == path_tmp.dir and vm_del_dir_info.results[0].changed
          - vm_del_dir_info.results[1].item == path_tmp.new_dir and vm_del_dir_info.results[1].changed
          - vm_del_dir_info.results[2].item == path_tmp.no_dir and not vm_del_dir_info.results[2].changed
          - vm_del_dir_info.results[3].item == path_tmp.new_no_dir and not vm_del_dir_info.results[3].changed
          - vm_del_dir_info.results[4].item == vm_dir_info_temp.value and vm_del_dir_info.results[4].changed

  always:
    - name: Delete VM
      ansible.builtin.include_role:
        name: prepare_vm
      vars:
        prepare_vm_state: absent
        vm_id: "{{ _test_vm_moid }}"

    - name: Delete resource pool
      vmware.vmware_rest.vcenter_resourcepool:
        resource_pool: "{{ lookup('vmware.vmware.moid_from_path', '/' + vcenter_datacenter + '/host/' + vcenter_cluster_name + '/' +  test_resource_pool_name, **vmware_rest_auth_vars) }}"
        state: absent
